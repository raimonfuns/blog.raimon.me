{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1532791291000},{"_id":"source/CNAME","hash":"889cb8cc8e3e580cd7f07433d5f16e66cfb0b938","modified":1532791198000},{"_id":"source/README.md","hash":"6dd6f8c4770cfc348e92d37d4aab83200d7235e6","modified":1532791198000},{"_id":"themes/next/.bowerrc","hash":"2b3e52c128518d9b84b1580579f1fba87b3c6236","modified":1479032870000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1467008496000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1467008496000},{"_id":"themes/next/.javascript_ignore","hash":"de73037693881ad2626e2962e8c5ab243f7b24d0","modified":1479032882000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1467008496000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1467008496000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1467008496000},{"_id":"themes/next/_config.yml","hash":"504270f9e1a4a5ae70b7a27f00106ebebf4311ba","modified":1525345440000},{"_id":"themes/next/bower.json","hash":"023b5b945bc45c205129a18e26d304fb9caa15c7","modified":1479032890000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1467008496000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1467008496000},{"_id":"source/_drafts/2017-02-07-find_by_find.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532791198000},{"_id":"source/_drafts/.Ulysses-Group.plist","hash":"ea87ac03c55e7c9045bc0dfba4ab887ac71a0b4a","modified":1532791198000},{"_id":"source/_drafts/.Ulysses-favorites.plist","hash":"83768c0ba868018cbb563b08ca6e34bfda3a0ced","modified":1532791198000},{"_id":"source/_drafts/2016-01-18-html-teaching-yourself.md","hash":"47fcb20cfc2466e97fc8b6f3ee7946f2d4d6fc54","modified":1532791198000},{"_id":"source/_drafts/2017-01-19-be-good-type.md","hash":"01c34e77da77d7ec25e26373009fab65b8311b01","modified":1532791198000},{"_id":"source/_drafts/2017-01-20-coding-diary.md","hash":"f7167d30057d42193906d38cd85bff5eabc6d6b4","modified":1532791198000},{"_id":"source/_drafts/2017-02-07-blank.md","hash":"6cba5e3af31614f9e83bc610194f4c3ea9fb7cc5","modified":1532791198000},{"_id":"source/_drafts/2017-02-07-helper_method.md","hash":"044526c53f99187b14e2156c9a5023e5cff85186","modified":1532791198000},{"_id":"source/_drafts/2017-02-07-or.md","hash":"f0dd40dc043e042e8f0edd6fbcee58a1db747ced","modified":1532791198000},{"_id":"source/_drafts/2017-02-07-orid.md","hash":"568a92c0305587809311c31b75619f0c43fb97b1","modified":1532791198000},{"_id":"source/_drafts/2017-02-07-session.md","hash":"621fee90eddcfd8bc04a0e5ae5d85940e9cb65ad","modified":1532791198000},{"_id":"source/_drafts/2017-02-08-helper-method.md","hash":"0ee83f928baecf980a06a4a90e9312f092ca653b","modified":1532791198000},{"_id":"source/_drafts/2017-02-08-new-build.md","hash":"111a7c59020f1499efc781172d56b9f99d44ec88","modified":1532791198000},{"_id":"source/_drafts/2017-02-08-ruby-range.md","hash":"aa4cfd60464783333331f2964beddaf4401fdbf9","modified":1532791198000},{"_id":"source/_drafts/Untitled.md","hash":"03f0880813d1d91f3a8aad5bd673bf2334b73996","modified":1532791198000},{"_id":"source/categories/index.md","hash":"eaf63ec1817e535393b2a305aa9dab28c09f493b","modified":1532791198000},{"_id":"source/_posts/.Ulysses-Group.plist","hash":"4e961789798107247ec7db2278bff84896b33e64","modified":1532791198000},{"_id":"source/_posts/.Ulysses-favorites.plist","hash":"aecda3a7f9a024cc56e4056a961537d135407e4c","modified":1532791198000},{"_id":"source/_posts/.aliases","hash":"6615f53a5fc988da24c744012e97f8f73a1d8e70","modified":1532791198000},{"_id":"source/_posts/.bash_prompt","hash":"7ad9945fab2fa19f01d0ed4ecf30e2571d304d1c","modified":1532791198000},{"_id":"source/_posts/2016-06-27-alfred.md","hash":"c8b560cd3adda111005f7614acde40ecb7b30f8b","modified":1532791198000},{"_id":"source/_posts/2016-06-30-mocha-babel.md","hash":"2c3fd75f715adfc2fa1455b59b28407a126238fe","modified":1532791198000},{"_id":"source/_posts/2016-07-19-vuex.md","hash":"9246d2f85d790e9784af847bf080b92e43a98795","modified":1532791198000},{"_id":"source/_posts/2016-07-20-vue-loader.md","hash":"61b255b239452ce3df85e684981fcd91f69ccfb5","modified":1532791198000},{"_id":"source/_posts/2016-08-07-nginx-usage.md","hash":"5add5b7603c872e2194479ef69fad45a9a3123f8","modified":1532791198000},{"_id":"source/_posts/2016-08-09-efficiency.md","hash":"2b78404ad4721babf3b4edf544470144edb0bfb6","modified":1532791198000},{"_id":"source/_posts/2016-08-10-node_global.md","hash":"26a11ea2487393c837253ea2e6de49f69865a0b7","modified":1532791198000},{"_id":"source/_posts/2016-08-11-learn-new-things.md","hash":"45f48861640e2da1ff98079827d4ff8bfeaa9595","modified":1532791198000},{"_id":"source/_posts/2016-08-22-wechat.md","hash":"fc19d90a1a6e8716d0c6afcba1fd32495a2dd6cc","modified":1532791198000},{"_id":"source/_posts/2016-08-24-weinre.md","hash":"b98eb502a6aaa61654fa2804cc21c57ebf236aea","modified":1532791198000},{"_id":"source/_posts/2016-08-25-supertest.md","hash":"1f76899143bfe8502f8580ee5d4125d32d92f2bf","modified":1532791198000},{"_id":"source/_posts/2016-09-16-login_register.md","hash":"cf4616f4f8a8fe991e0af4261e85ff7a984deb62","modified":1532791198000},{"_id":"source/_posts/2016-10-20-koa2-vue-1.md","hash":"561f264e298da965c242e687e1186350b1a9473e","modified":1532791198000},{"_id":"source/_posts/2016-10-22-coding-principle.md","hash":"00a49ea854d45ee9189e699539e208cbcbc1a6d4","modified":1532791198000},{"_id":"source/_posts/2016-10-24-vue-caveats.md","hash":"fd9dc02ddcff1d1e0973b264f1e73a3546d1478e","modified":1532791198000},{"_id":"source/_posts/2016-11-13-scope.md","hash":"742ef28993d478563cbc0cce2099028095b6f3de","modified":1532791198000},{"_id":"source/_posts/2016-11-14-snowflake.md","hash":"c5a03cea33a88c178655f6c1c31d083548897230","modified":1532791198000},{"_id":"source/_posts/2016-12-07-vue-upgrade.md","hash":"156bd2bef7766fb86cd83a414163d397bb9ae7fe","modified":1532791198000},{"_id":"source/_posts/2016-12-08-coding-diary.md","hash":"0463050e9b4b48eeed0a518574cb12fcb57d92a3","modified":1532791198000},{"_id":"source/_posts/2016-12-08-vuex-error.md","hash":"b0b33fa8cf127d2035fc4ad29f3406418c79868c","modified":1532791198000},{"_id":"source/_posts/2016-12-09-coding-diary.md","hash":"f3f21abb7b15f8dfe01d9ff8f3aab7df65474c97","modified":1532791198000},{"_id":"source/_posts/2016-12-10-coding-diary.md","hash":"7954a5d43c5e9b7fe0922118a3c31e19fc4df437","modified":1532791198000},{"_id":"source/_posts/2016-12-11-coding-diary.md","hash":"7b9a3b523495b385af1e59f64377e4bd7b1b12b9","modified":1532791198000},{"_id":"source/_posts/2016-12-19-es6-unit-test.md","hash":"01f75cf07a94eef71554026f5d4641820c9112c9","modified":1532791198000},{"_id":"source/_posts/2016-12-19-share.md","hash":"b9134f7bd714357475be128f49feb58c07ca19ba","modified":1532791198000},{"_id":"source/_posts/2016-12-21-applicationRecord-error.md","hash":"8519f895d619e8afb295bc45599da5bdffc6e9d1","modified":1532791198000},{"_id":"source/_posts/2016-12-21-functional_programming.md","hash":"3b6f6297b50cfd976df3200522c3a1acd5724139","modified":1532791198000},{"_id":"source/_posts/2016-12-21-git-amend.md","hash":"c825b1361203d3a6d332177b130e09da7f35787a","modified":1532791198000},{"_id":"source/_posts/2016-12-21-git-ignore.md","hash":"ad632ad528cb9e3bb4404359503787b124bd1c19","modified":1532791198000},{"_id":"source/_posts/2016-12-21-heroku-publish-error.md","hash":"0f13d027e50e884b4be1bc1a9c011b74ebf0b336","modified":1532791198000},{"_id":"source/_posts/2016-12-21-install-devise-error.md","hash":"a754fa19b3575e9119db8865fa7896ac511ce630","modified":1532791198000},{"_id":"source/_posts/2016-12-21-rails-101-extra-jobs.md","hash":"ade149b02b73e6c72e98d3665c777c1e3c5d29e2","modified":1532791198000},{"_id":"source/_posts/2016-12-21-rails-console-error.md","hash":"dd1281ceaa29f3f4fb0eefbccd8407271f8b9753","modified":1532791198000},{"_id":"source/_posts/2016-12-21-textarea-input.md","hash":"7f6c0ffb79c3dc36bcab7c7e4c5613b2e152ca63","modified":1532791198000},{"_id":"source/_posts/2016-12-21-the-wrong-count-for-the-associated-table-problem.md","hash":"baf745d5c5979397f1ddd89be9758699519581b4","modified":1532791198000},{"_id":"source/_posts/2016-12-21-why-writing.md","hash":"265b0c1e17c2aad17de581c0e84c0cbaa9676d27","modified":1532791198000},{"_id":"source/_posts/2017-01-03-coding-diary.md","hash":"d8ab9581a0d9c572f5d76764d8b34cb3c263262f","modified":1532791198000},{"_id":"source/_posts/2017-01-04-coding-diary.md","hash":"0f2c61bc0fd9f24f9a97877a25c559934d7cd66e","modified":1532791198000},{"_id":"source/_posts/2017-01-04-unkown-format.md","hash":"8d12f115ca410f190c9161751710528cd627ab35","modified":1532791198000},{"_id":"source/_posts/2017-01-06-can-not-excute-post-method.md","hash":"93d13a52fbb21a4242ab1c14afc244e29bc014aa","modified":1532791198000},{"_id":"source/_posts/2017-01-06-can-not-excute-update-action-in-right-way.md","hash":"540c4a240ea24e4adc4cb5ac16052a22b133fde1","modified":1532791198000},{"_id":"source/_posts/2017-01-06-coding-diary.md","hash":"c61f846c30e2d59dcdf2473491b62a0aec03935e","modified":1532791198000},{"_id":"source/_posts/2017-01-07-admin-jobs-create-update.md","hash":"f40b950c7ad24cf2efb284854739c1a089853ca9","modified":1532791198000},{"_id":"source/_posts/2017-01-07-bootstrap-row.md","hash":"79a216a41a0a335a0413cb47f51dc828382c67cb","modified":1532791198000},{"_id":"source/_posts/2017-01-07-coding-diary.md","hash":"2865613bc9c23412af67aeadd702bf5880a3719d","modified":1532791198000},{"_id":"source/_posts/2017-01-08-coding-diary.md","hash":"c55d3bcb1c06b0bea59754636e7334b571c8e825","modified":1532791198000},{"_id":"source/_posts/2017-01-05-coding-diary.md","hash":"b1cbd232c6e4635ba2f4ea0c099a00021e995721","modified":1532791198000},{"_id":"source/_posts/2017-01-05-devise-install-fail.md","hash":"a6627d0668097ce76befa3e03685089d486d7244","modified":1532791198000},{"_id":"source/_posts/2017-01-08-hong-jiang-yu.md","hash":"31feec0de317b2edceb2a0bcce689a0fcc9c1f58","modified":1532791198000},{"_id":"source/_posts/2017-01-08-week-best-concept-or-tool.md","hash":"bb1a4d80bf9ff4d7bd698c160d4feb5bcd114540","modified":1532791198000},{"_id":"source/_posts/2017-01-08-week-hole.md","hash":"f42e64cb7b5819477c074a13740806aa9d044328","modified":1532791198000},{"_id":"source/_posts/2017-01-09-coding-diary.md","hash":"e9ef6d9e278dd76044b72e30fd3f2c12baf779a8","modified":1532791198000},{"_id":"source/_posts/2017-01-09-rails-101-category.md","hash":"bc3803553ef46711d504caa653582f7c61466a59","modified":1532791198000},{"_id":"source/_posts/2017-01-10-coding-diary.md","hash":"62d4d11bd2a5fc0bd45e6382cab8e13dc706503a","modified":1532791198000},{"_id":"source/_posts/2017-01-13-coding-diary.md","hash":"a31a5df659d47a4b9ec10d969e8da83ec97a9aa6","modified":1532791198000},{"_id":"source/_posts/2017-01-16-conding-diary.md","hash":"e33116e78b7eab08276cc7f84ce12d1d37811ab9","modified":1532791198000},{"_id":"source/_posts/2017-01-16-who-watch-me.md","hash":"77c97290d07a076e49d87dd90e526600f98ad83c","modified":1532791198000},{"_id":"source/_posts/2017-01-17-vue-resource-object.md","hash":"cca9f3203b2a72c027628b96a90c817b62f654c5","modified":1532791198000},{"_id":"source/_posts/2017-01-18-coding-diary.md","hash":"fee5fae3ca9a35a2942607a42e71e7a63c7e6ed5","modified":1532791198000},{"_id":"source/_posts/2017-01-18-job-listing.md","hash":"29380fae410544a2e09c71df1dbfa521d560feb3","modified":1532791198000},{"_id":"source/_posts/2017-01-22-alias.md","hash":"1051bf8c6d991da7ccafc2fa948b11e001386281","modified":1532791198000},{"_id":"source/_posts/2017-01-22-coding-diary.md","hash":"d86f063c9b87a6c1eb9b32ead9c68f5213de55bd","modified":1532791198000},{"_id":"source/_posts/2017-01-22-css-base.md","hash":"c6b3230dc90802d29835e4c08e85eab63d9ffe4c","modified":1532791198000},{"_id":"source/_posts/2017-01-22-html-base.md","hash":"6ab26fcb2770099fa369dffcbe048e1fc8effdf0","modified":1532791198000},{"_id":"source/_posts/2017-01-22-job-listing-version-2.md","hash":"b7e2e9503027813c317d8d8e5ccc572a0e49b439","modified":1532791198000},{"_id":"source/_posts/2017-01-22-search-bug.md","hash":"c1db6d706b54694849b128d69ace837cdf85304a","modified":1532791198000},{"_id":"source/_posts/2017-01-23-clear-heroku-data.md","hash":"3fc199fb819f7cf25ecf96f93d1a71e5bfd48fda","modified":1532791198000},{"_id":"source/_posts/2017-01-23-coding-diary.md","hash":"88ebd0d496eadfc651081a0843649e32cf8d0f43","modified":1532791198000},{"_id":"source/_posts/2017-01-23-share1.md","hash":"45b561439d28d5f4a33ec7b6bfa9bc1434e4d18a","modified":1532791198000},{"_id":"source/_posts/2017-01-24-application-js-bug.md","hash":"0e95ff0aa229f342725ccc404b3ea0d5980ba43c","modified":1532791198000},{"_id":"source/_posts/2017-01-24-coding-diary.md","hash":"5127f593f5aa5a87b0424df43032489e08295638","modified":1532791198000},{"_id":"source/_posts/2017-01-25-coding-diary.md","hash":"93770db2cbadc86ea3b754d2405ac6254ad682ea","modified":1532791198000},{"_id":"source/_posts/2017-01-26-custom-form-error-tip.md","hash":"8c6af21e5ef84663c3604c092705aa4d36bdcbe6","modified":1532791198000},{"_id":"source/_posts/2017-01-26-xiaolai-fullstack-share.md","hash":"ca5c8c042df7b6dc1d26d9cdb2ddcae6671ab37b","modified":1532791198000},{"_id":"source/_posts/2017-01-30-align-center-middle.md","hash":"cd33f3c3a93050e44f599394a1f6e5a71bb6f695","modified":1532791198000},{"_id":"source/_posts/2017-01-30-fullscreen-layout.md","hash":"34055a07530d757b0681511ee236c48136b4c1dc","modified":1532791198000},{"_id":"source/_posts/2017-01-30-multi-column-layout.md","hash":"765c62b168cee0d51e5949305c81e9b7d8b86189","modified":1532791198000},{"_id":"source/_posts/2017-02-01-flex.md","hash":"2783515a4f974346f6cb6638053124e132d99e28","modified":1532791198000},{"_id":"source/_posts/2017-02-02-orid.md","hash":"90fac2074a0865cb77df89c9143fc44185fc9738","modified":1532791198000},{"_id":"source/_posts/2017-02-03-orid-1.md","hash":"698c41496153879632f089f2bf350fe641cbf704","modified":1532791198000},{"_id":"source/_posts/2017-02-03-orid.md","hash":"50f68c95aedabc14f5485ca78e03a0993cf9a1db","modified":1532791198000},{"_id":"source/_posts/2017-02-05-for-in-for-of.md","hash":"5342933bb69bcd4c0fb8475b64ef4380a2acc9b6","modified":1532791198000},{"_id":"source/_posts/2017-02-05-hangman.md","hash":"74e50d8cf58d89826a043f78f9785be92b47a4b4","modified":1532791198000},{"_id":"source/_posts/2017-02-05-new-require.md","hash":"5da24108cfe5bc92fb6433e60f13b8d977f123ad","modified":1532791198000},{"_id":"source/_posts/2017-02-05-orid.md","hash":"3c34d3c660def32686199db120186d1187d35a30","modified":1532791198000},{"_id":"source/_posts/2017-02-05-promise.md","hash":"235cbaa8a2ec1a082fd186580f76158c601f85be","modified":1532791198000},{"_id":"source/_posts/2017-02-08-sub-pub.md","hash":"a5be689cf3e1e8a1fac55128bbc5a8da501bb59d","modified":1532791198000},{"_id":"source/_posts/2017-02-11-orid.md","hash":"299fbb1f716822567ea6a300d6716561063107bf","modified":1532791198000},{"_id":"source/_posts/2017-02-23-share2.md","hash":"8baf7da8dcf4aa56e3038cec5b3482b1efc668ff","modified":1532791198000},{"_id":"source/_posts/2017-02-23-share3.md","hash":"2d0da56a6d35bbdb5e54e813c1b590d2fa67b7da","modified":1532791198000},{"_id":"source/_posts/2017-02-23-share4.md","hash":"651133eda3cfff3b9d7aa3e0d3ee6663b75c915e","modified":1532791198000},{"_id":"source/_posts/2017-02-23-share5.md","hash":"f19572349c7acb712ee9cbf1cf05e81a48dc5368","modified":1532791198000},{"_id":"source/_posts/2017-02-26-week.md","hash":"8d4fe8b81fc5f5453f9e240108fd1eacce465371","modified":1532791198000},{"_id":"source/_posts/2017-02-26总结.md","hash":"6eda367737f9ccdfb25e7e9f45a49b1ed09e0594","modified":1532791198000},{"_id":"source/_posts/2017-02-27总结.md","hash":"13fe1da6badc91f5053c41f318db9f3c661c688b","modified":1532791198000},{"_id":"source/_posts/2017-02-28总结.md","hash":"e3a9a9a7e28a793bbba2f7756fab18d4c8550154","modified":1532791198000},{"_id":"source/_posts/2017-07-23-shaobing.md","hash":"8b5a3b0ce2de2a30817fc165f8bf8b754fcbc0f8","modified":1532791198000},{"_id":"source/_posts/2018-01-15-the-sequential-search.md","hash":"e865ad760b13188f2e8514114f1c155bc1594fe0","modified":1532791198000},{"_id":"source/_posts/2018-01-16-the-binary-search.md","hash":"e01f255745a24e862d0135f822e450ed93f224ca","modified":1532791198000},{"_id":"source/_posts/2018-01-20-urls-race.md","hash":"2006a345c48aeef10713e12d966eb3d64fdaf256","modified":1532791198000},{"_id":"source/_posts/2018-01-21-debounce-throttle.md","hash":"774921260e9cf68ddb0d9fe34d16acd49d2f7857","modified":1532791198000},{"_id":"source/_posts/2018-05-03-redux.md","hash":"4716e9eed2bc2c314f665355704909858eab1ef4","modified":1532791198000},{"_id":"source/_posts/2018-07-07-arts.md","hash":"a1c721b01b335cb64bd8d3047b9f76381f9d63b4","modified":1532791198000},{"_id":"source/_posts/2018-07-15-arts.md","hash":"26284dc3b1907d5071c314031ad34b113e5fc715","modified":1532791198000},{"_id":"source/_posts/2018-07-21-arts.md","hash":"06a55ed0abb3e0ec08148062cd0996c316d0af91","modified":1532791198000},{"_id":"source/_posts/2018-07-28-arts.md","hash":"e8a1f67aad0d9e2b628534bb6309812ad02b4601","modified":1532791198000},{"_id":"source/_posts/2018-08-04-arts.md","hash":"b42427cb07e27f2f525bdf2605ae530d868e511d","modified":1533370812000},{"_id":"source/_posts/2018-08-19-arts.md","hash":"b8b8549f1c5643405ac047ec227813396ddf67d6","modified":1534654163000},{"_id":"source/tags/index.md","hash":"687fc85e68fe3b7d28fadfb63730ed7220dab772","modified":1532791198000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1467008496000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1467008496000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1467008496000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1467008496000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1467008496000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1467008496000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1467008496000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1467008496000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1467008496000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1467008496000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1467008496000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1467008496000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1467008496000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1467008496000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1467008496000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1467008496000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1467008496000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1467008496000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1467008496000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1467008496000},{"_id":"themes/next/source/404.html","hash":"310fc37341c13586d09c4d1d82ca51ed082d6481","modified":1467010973000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1467008496000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1467008496000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1467008496000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1467008496000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1467008496000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1467008496000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1467008496000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1467008496000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1467008496000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1467008496000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1467008496000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1467008496000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1467008496000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1467008496000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1467008496000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1467008496000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1467008496000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1467008496000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1467008496000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1467008496000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1467008496000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1467008496000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1467008496000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1467008496000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1467008496000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1467008496000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1467008496000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1467008496000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1467008496000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1467008496000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1467008496000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1467008496000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1467008496000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1467008496000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1467008496000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1467008496000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1467008496000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1467008496000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1467008496000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1467008496000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1467008496000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1467008496000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1467008496000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1467008496000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1467008496000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1467008496000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1467008496000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1467008496000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1467008496000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1467008496000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1467008496000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1467008496000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1467008496000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1467008496000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1467008496000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1467008496000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1467008496000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1467008496000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1467008496000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1467008496000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1467008496000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1467008496000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1467008496000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1467008496000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1467008496000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1467008496000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1467008496000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1467008496000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1467008496000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1467008496000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1467008496000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1467008496000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1467008496000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1467008496000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1467008496000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1467008496000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1467008496000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1467008496000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1467008496000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1467008496000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1467008496000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1467008496000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1467008496000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1467008496000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1467008496000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1467008496000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1467008496000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1467008496000},{"_id":"public/README.html","hash":"1dc6139cc3c0f67110b1d54e7395bc92297a88ae","modified":1534654243675},{"_id":"public/categories/index.html","hash":"8a0689c815336d01d0035a1612e89b2c7d0c0a4e","modified":1534654243675},{"_id":"public/tags/index.html","hash":"a2f8ea62175c91ebfc942afa732c5ea671326ead","modified":1534654243675},{"_id":"public/2018/07/28/2016-08-09-efficiency/index.html","hash":"b497ddaf195cfe396044fe2c836685ef997311c3","modified":1534654243675},{"_id":"public/2018/07/28/2016-08-24-weinre/index.html","hash":"630e09af9badac041a05ccff1807a170443806fb","modified":1534654243675},{"_id":"public/2018/07/28/2016-09-16-login_register/index.html","hash":"3e7faa5b2974339dee04a29fe7985c800ae96f85","modified":1534654243675},{"_id":"public/2018/07/28/2016-12-08-vuex-error/index.html","hash":"1fe71cd7dbeebe7099138b7370e3bcc016f9260b","modified":1534654243675},{"_id":"public/2018/07/28/2016-12-19-share/index.html","hash":"bb0cf60b5b667a7f0e62ee9fa2f9c92c72c6798e","modified":1534654243676},{"_id":"public/2018/07/28/2016-12-21-applicationRecord-error/index.html","hash":"55cb4e5a846e5d64859e3066d5d199134d3d5b87","modified":1534654243676},{"_id":"public/2018/07/28/2016-12-21-git-amend/index.html","hash":"dde0da7dfcf8a5994244f0ad45d2080128d2209b","modified":1534654243676},{"_id":"public/2018/07/28/2016-12-21-git-ignore/index.html","hash":"e84ababfed97a5b0815ad7cca1007bd0cea24a65","modified":1534654243676},{"_id":"public/2018/07/28/2016-12-21-heroku-publish-error/index.html","hash":"2c8907527556413490b9d6940f818137a8bee9ef","modified":1534654243676},{"_id":"public/2018/07/28/2016-12-21-rails-101-extra-jobs/index.html","hash":"31fda112d2423988db7f38adc4fad0b219b50911","modified":1534654243676},{"_id":"public/2018/07/28/2016-12-21-rails-console-error/index.html","hash":"cb37f90fabcb5bfd0cb4ddd4a9d9cc1c82f576ff","modified":1534654243676},{"_id":"public/2018/07/28/2017-01-04-unkown-format/index.html","hash":"30dc35785b8543b3e32883500431ac89e08e18c2","modified":1534654243676},{"_id":"public/2018/07/28/2017-01-06-can-not-excute-post-method/index.html","hash":"6a3ffe81a39e578eccd6cb5dc372b5ab24ff20ed","modified":1534654243676},{"_id":"public/2018/07/28/2017-01-06-can-not-excute-update-action-in-right-way/index.html","hash":"9b157229a66081e8949216542d4817ea68ea73d5","modified":1534654243676},{"_id":"public/2018/07/28/2017-01-07-admin-jobs-create-update/index.html","hash":"dffe179b2ed1f23e30d973557c5dae44f0b72dcd","modified":1534654243676},{"_id":"public/2018/07/28/2017-01-07-bootstrap-row/index.html","hash":"3f8af37b0ec801fe3b4df82d5dce83ef2acc4cfe","modified":1534654243676},{"_id":"public/2018/07/28/2017-01-05-devise-install-fail/index.html","hash":"32de44d784b29fe32bfc828a5174ad212267da7c","modified":1534654243676},{"_id":"public/2018/07/28/2017-01-08-week-best-concept-or-tool/index.html","hash":"4aaa6d2e724465468f398f107839e125ff5b1907","modified":1534654243676},{"_id":"public/2018/07/28/2017-01-08-week-hole/index.html","hash":"b2194885f8a57c86e0cc6ecb0deeb57b60312a1d","modified":1534654243676},{"_id":"public/2018/07/28/2017-01-09-coding-diary/index.html","hash":"b072b6f01506c60663f50c1fa207708f334cc5e1","modified":1534654243676},{"_id":"public/2018/07/28/2016-06-30-mocha-babel/index.html","hash":"fbc1d29d5a16f3b74b0251b822269a21656003a6","modified":1534654243677},{"_id":"public/2018/07/28/2017-01-17-vue-resource-object/index.html","hash":"695217974e0f5d9780cdc0102d478af27c51044c","modified":1534654243677},{"_id":"public/2018/07/28/2017-01-18-job-listing/index.html","hash":"e79cb316c40e578e3fcc2f0923a216f741f5183d","modified":1534654243677},{"_id":"public/2018/07/28/2017-01-22-search-bug/index.html","hash":"6c5a8ccc337a913911bce220cc315ec70325f019","modified":1534654243677},{"_id":"public/2018/07/28/2017-01-23-clear-heroku-data/index.html","hash":"9c35c295ac02c75ce07a7b1e4f78eff9f00e8be1","modified":1534654243677},{"_id":"public/2018/07/28/2017-01-24-application-js-bug/index.html","hash":"7b5ae0caddff8a0c5a1a6c6c8d61c2fa26a7badf","modified":1534654243677},{"_id":"public/2018/07/28/2017-02-05-for-in-for-of/index.html","hash":"6d9f44a17bc955b3304aac676387ea2994756d5c","modified":1534654243677},{"_id":"public/2018/07/28/2017-02-05-hangman/index.html","hash":"22059e592f24706aeac1c323674d0e0280c9cb7a","modified":1534654243677},{"_id":"public/2018/07/28/2017-02-05-orid/index.html","hash":"3f503d13ad1d15fd3147fca525354f62c2a229f6","modified":1534654243677},{"_id":"public/2018/07/28/2017-02-28总结/index.html","hash":"0e8a2e39bd5f919e4eeb5d2ffecc2a2d379710eb","modified":1534654243677},{"_id":"public/2018/07/28/2018-01-20-urls-race/index.html","hash":"37aa988280a75719a6231b745efe69fd8e7728d7","modified":1534654243677},{"_id":"public/2018/07/28/2018-01-21-debounce-throttle/index.html","hash":"2bc4e7873b60746e4403f7e9e1b6f9ea8e54faab","modified":1534654243677},{"_id":"public/archives/page/11/index.html","hash":"cd9edc9f77de66e2a6c305dfe7814126f451eee9","modified":1534654243677},{"_id":"public/archives/2018/page/11/index.html","hash":"812d3536d914c2f02e6b70efdd141c869283e761","modified":1534654243677},{"_id":"public/archives/2018/07/page/11/index.html","hash":"abbbbf1d300fa223fc5ee7570241246629247390","modified":1534654243677},{"_id":"public/archives/2018/08/index.html","hash":"489031bf00f487f630867c21e65487ad4af19872","modified":1534654243677},{"_id":"public/categories/工具/index.html","hash":"d89851ecc86840d2c67720a6aefafa3b2cbaa5f2","modified":1534654243677},{"_id":"public/categories/Javascript/index.html","hash":"1c0587fcb40d7ddec6d8c88d21aa909694b70c0c","modified":1534654243677},{"_id":"public/categories/Javascript/page/2/index.html","hash":"c7b720ffd251747278a1183a472b5ac810879ceb","modified":1534654243677},{"_id":"public/categories/随笔/index.html","hash":"7f5369c14e6639a0a4b55ea70b7d442d9f2ee8d3","modified":1534654243677},{"_id":"public/categories/Node/index.html","hash":"d3329924de492ec132eea20b49ab8898ea7ba404","modified":1534654243678},{"_id":"public/categories/全栈营/page/6/index.html","hash":"f851e4f51bde3042e6215e8ba51a23c552ac3c01","modified":1534654243678},{"_id":"public/categories/作品/index.html","hash":"5cf52ed53a248fc10b4e34c060912a5b881d461c","modified":1534654243678},{"_id":"public/categories/CSS/index.html","hash":"7f29a158f81fe9adb7391ffa7b4c0803b3ce30c4","modified":1534654243678},{"_id":"public/categories/readingCode/index.html","hash":"a8c17b441f51a1640b4181ca85259ca6c91f0ed0","modified":1534654243678},{"_id":"public/categories/Algorithms/index.html","hash":"fd79fa36504ab967e4c019ca5ba416d7dedbddd6","modified":1534654243678},{"_id":"public/categories/ARTS/index.html","hash":"5f43535d3b97c44c3b6b6f26d653e5de3f4a394b","modified":1534654243678},{"_id":"public/tags/Mac工具/index.html","hash":"9fcfd5f9e40c85396b865931a2f118427117d6ef","modified":1534654243678},{"_id":"public/tags/单元测试/index.html","hash":"1ac0f0cb2e350e5ef26399078934ba2a9f724d46","modified":1534654243678},{"_id":"public/tags/Vue/index.html","hash":"686cd788631de781b36beb61b25f55466e885a4e","modified":1534654243678},{"_id":"public/tags/组件化/index.html","hash":"ab09bcd857126caf67b21d5d6d92351f28dbe26b","modified":1534654243678},{"_id":"public/tags/Nginx/index.html","hash":"a805534f84224fa2387ff0bffe20cf655cebe07c","modified":1534654243678},{"_id":"public/tags/微信公众号/index.html","hash":"1dec123b33f0905a6e24650edc39de39e72b18a8","modified":1534654243678},{"_id":"public/tags/Koa2/index.html","hash":"fe63da59bd4c6c8cf1055005f025670eadb47ffc","modified":1534654243678},{"_id":"public/tags/React/index.html","hash":"9947cb00e38709b314668e7c14ad7d24275201db","modified":1534654243678},{"_id":"public/tags/ES6/index.html","hash":"5ac790645217160cfb4d8c85f066303721de5027","modified":1534654243678},{"_id":"public/tags/函数式编程/index.html","hash":"1ea350d436c877d3337ee5a8ab82d28e73cc26c8","modified":1534654243678},{"_id":"public/tags/Git/index.html","hash":"f158a61ec6d3ef1995eb73e01c320d2a5cd158da","modified":1534654243678},{"_id":"public/tags/用户故事/index.html","hash":"e73a62972df4649a6920ab7b956871fb428a839e","modified":1534654243678},{"_id":"public/tags/提取练习/index.html","hash":"92a9d47df2a68b6c2de8a65bcc4988d49fdb497b","modified":1534654243678},{"_id":"public/2018/08/19/2018-08-19-arts/index.html","hash":"897428a51508df7f7ee594bf3df169c996bb71d9","modified":1534654243679},{"_id":"public/2018/08/04/2018-08-04-arts/index.html","hash":"d9bd728de9daf655b64efe66f256fd434f45c36e","modified":1534654243679},{"_id":"public/2018/07/28/2016-07-19-vuex/index.html","hash":"0a6c6ee6e3ed93bea7f3b13adfa900da3bf5ab25","modified":1534654243679},{"_id":"public/2018/07/28/2016-07-20-vue-loader/index.html","hash":"eb8bcfc69169f00d8668f9371c5daf039c89f628","modified":1534654243679},{"_id":"public/2018/07/28/2016-08-07-nginx-usage/index.html","hash":"6b9d7f41f1ebe8b28532ee62dd9b2cc56f10e0ef","modified":1534654243679},{"_id":"public/2018/07/28/2016-08-10-node_global/index.html","hash":"d4541eeaba44159e8d8b7e225bf82966024364e6","modified":1534654243679},{"_id":"public/2018/07/28/2016-08-11-learn-new-things/index.html","hash":"0db1a6fd9a505fec9a8ac04cda4b1ed95d357991","modified":1534654243679},{"_id":"public/2018/07/28/2016-08-22-wechat/index.html","hash":"1f2481062572eec4381842d022e011ed5311b6ea","modified":1534654243679},{"_id":"public/2018/07/28/2016-08-25-supertest/index.html","hash":"17aff779d19bac5ef0b5f416d4c1656e90f15ad4","modified":1534654243679},{"_id":"public/2018/07/28/2016-10-20-koa2-vue-1/index.html","hash":"2227bfff33113e5174b4518199c56a11328841ff","modified":1534654243679},{"_id":"public/2018/07/28/2016-10-22-coding-principle/index.html","hash":"0fa574003868256017b30ab66d8c974438ec7c50","modified":1534654243679},{"_id":"public/2018/07/28/2016-11-13-scope/index.html","hash":"f1af0b5dee051f1930a26ee8e9719c716b0ea617","modified":1534654243679},{"_id":"public/2018/07/28/2016-10-24-vue-caveats/index.html","hash":"f932cd7f667f8ddf4df4b156eeb346b7649c70bf","modified":1534654243679},{"_id":"public/2018/07/28/2016-11-14-snowflake/index.html","hash":"344cec595db7efabc61a91bdf34b9ce36b93c2d0","modified":1534654243679},{"_id":"public/2018/07/28/2016-12-07-vue-upgrade/index.html","hash":"c007b275520d670d09aa4d693c307c119eb64d31","modified":1534654243679},{"_id":"public/2018/07/28/2016-12-08-coding-diary/index.html","hash":"c41b5f7320714c3312ec7a26cd7dd1a992381033","modified":1534654243679},{"_id":"public/2018/07/28/2016-12-09-coding-diary/index.html","hash":"533d1eeb98b607e53625b63ee90ce99a2c4d08a6","modified":1534654243679},{"_id":"public/2018/07/28/2016-12-10-coding-diary/index.html","hash":"bf7c0db6105c5bde949634024d46b366cfb66915","modified":1534654243679},{"_id":"public/2018/07/28/2016-12-11-coding-diary/index.html","hash":"15b8feb1e2fe1fb3e97558876f7857100d6d8338","modified":1534654243679},{"_id":"public/2018/07/28/2016-12-19-es6-unit-test/index.html","hash":"e4dd1c3417cac9cf613800a89ee9c24baa9aa9af","modified":1534654243679},{"_id":"public/2018/07/28/2016-12-21-functional_programming/index.html","hash":"f06da16ce51441edcd39918ace4bfe78f12a2446","modified":1534654243679},{"_id":"public/2018/07/28/2016-12-21-install-devise-error/index.html","hash":"696d20824d7fb9f0edae93a92777f9d8e18757f4","modified":1534654243680},{"_id":"public/2018/07/28/2016-12-21-textarea-input/index.html","hash":"bcdabd4e343775619da982ee30ce76679ac7f01c","modified":1534654243680},{"_id":"public/2018/07/28/2016-12-21-the-wrong-count-for-the-associated-table-problem/index.html","hash":"d382c08b5a53a4439948f0de34896b70cd32fb8b","modified":1534654243680},{"_id":"public/2018/07/28/2016-12-21-why-writing/index.html","hash":"5332503935665d212265724188c5867d21007ce5","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-03-coding-diary/index.html","hash":"b93efd3fc5e459a39f6027aa00e58d0e79a82627","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-04-coding-diary/index.html","hash":"254e52298cb2a8b8c4bb2c00b0e1ae265b1825e4","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-06-coding-diary/index.html","hash":"802aa95e1b3cbfbd2cf3ec0903fe34bb3b714e9f","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-07-coding-diary/index.html","hash":"b7e0235786d085e606ae1e75359ee48e095665ed","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-08-coding-diary/index.html","hash":"51e8667153ae56378d18a01e0cf4597add34d395","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-05-coding-diary/index.html","hash":"8186ec160ca783860941266603d97117d9cc4fe3","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-08-hong-jiang-yu/index.html","hash":"7e8d80fb6faa730b4b903aef3e93de614687af4e","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-09-rails-101-category/index.html","hash":"f0b1510b9a20e92d4687f01414565df4481b246b","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-10-coding-diary/index.html","hash":"d2ecfbeda65217fd9fced1a6bcc4c4b008907175","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-16-conding-diary/index.html","hash":"1f37094007ee3c202a4b2464697c232675f38b64","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-16-who-watch-me/index.html","hash":"ef661df841e828599a558da811d0fde8ba02b16f","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-18-coding-diary/index.html","hash":"7a9596ed128bffd60bdbfa68b8bac4af7d53d354","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-22-alias/index.html","hash":"a2a745bdf9388fc44eeb373dfd1fc765b35fd7db","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-22-coding-diary/index.html","hash":"b1f6bf686b297694a2fb19c53d71e1807ad70ae2","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-22-css-base/index.html","hash":"7c427412be51ddd59ee03ad3ae638bf8d92c7bcf","modified":1534654243680},{"_id":"public/2018/07/28/2017-01-22-html-base/index.html","hash":"8dd3c6d0fd946c1251e7c109f2210171316a686e","modified":1534654243681},{"_id":"public/2018/07/28/2017-01-22-job-listing-version-2/index.html","hash":"d410eb544d599daccd9276304520afb25c09d85a","modified":1534654243681},{"_id":"public/2018/07/28/2017-01-23-coding-diary/index.html","hash":"25a009b2c779160d4c3286752f42a8f5bebdbec2","modified":1534654243681},{"_id":"public/2018/07/28/2017-01-23-share1/index.html","hash":"a9357b919b5f2efc1720198f7c84a4e402eb38fc","modified":1534654243681},{"_id":"public/2018/07/28/2017-01-24-coding-diary/index.html","hash":"4c34ea90850c529f6c15a03144ec2036a81d11b7","modified":1534654243681},{"_id":"public/2018/07/28/2017-01-25-coding-diary/index.html","hash":"829b9b0bac57a968564d004c84000a91e2901ac3","modified":1534654243681},{"_id":"public/2018/07/28/2017-01-26-custom-form-error-tip/index.html","hash":"b5a5382021a7a189f5d5261590b2d6cb18265332","modified":1534654243681},{"_id":"public/2018/07/28/2017-01-26-xiaolai-fullstack-share/index.html","hash":"1b0c062db9d63599e5bc6c661cd6c7a74858f406","modified":1534654243681},{"_id":"public/2018/07/28/2017-01-30-align-center-middle/index.html","hash":"03d188210ad9c166c9153a8a54cc8cdcdcfd9f79","modified":1534654243681},{"_id":"public/2018/07/28/2017-01-30-fullscreen-layout/index.html","hash":"2d31f2f15cd9ea099b81be1ff35a1cc29cbb2b03","modified":1534654243681},{"_id":"public/2018/07/28/2017-01-30-multi-column-layout/index.html","hash":"38adb3c5be965f35962e0779a63aba330ba594f4","modified":1534654243681},{"_id":"public/2018/07/28/2017-02-01-flex/index.html","hash":"7f934d16a1e1e39c755998e767898fc09bb83fa2","modified":1534654243681},{"_id":"public/2018/07/28/2017-02-02-orid/index.html","hash":"ace5dde14f648e227df1fa9bd12198ba052ae0a7","modified":1534654243681},{"_id":"public/2018/07/28/2017-02-03-orid-1/index.html","hash":"2dd5e6adb83217d56633945648bee6bb74005197","modified":1534654243681},{"_id":"public/2018/07/28/2017-02-03-orid/index.html","hash":"30472cf0a8aac666d0a59f1dfb9e6162b48a8b1c","modified":1534654243681},{"_id":"public/2018/07/28/2017-02-05-new-require/index.html","hash":"15727d842fa3319335745d42d34371b5fc83118c","modified":1534654243681},{"_id":"public/2018/07/28/2017-02-05-promise/index.html","hash":"41af2036546c6eecc1ea8ee3eefd4f493cd20674","modified":1534654243681},{"_id":"public/2018/07/28/2017-02-08-sub-pub/index.html","hash":"fa79360202a2774d49e625efcb93619ed853fe2e","modified":1534654243682},{"_id":"public/2018/07/28/2017-02-11-orid/index.html","hash":"c46ded9e3098fe03fddd8de9d0013dba70e79081","modified":1534654243682},{"_id":"public/2018/07/28/2017-02-23-share2/index.html","hash":"56a576a2bacacbe61ac2abbca7cf3525a8428ad1","modified":1534654243682},{"_id":"public/2018/07/28/2017-02-23-share3/index.html","hash":"971c44bf2415a40554b7d597c12ac5afd14240cf","modified":1534654243682},{"_id":"public/2018/07/28/2017-02-23-share4/index.html","hash":"9b2deb077d9c68ca14031c2fbf91f1cccb8f25c5","modified":1534654243682},{"_id":"public/2018/07/28/2017-02-23-share5/index.html","hash":"d60a96103c5fdff8c29f50d3f9326909e39311df","modified":1534654243682},{"_id":"public/2018/07/28/2017-02-26-week/index.html","hash":"164052ffedc5fb567bab53925529287dc25a45aa","modified":1534654243682},{"_id":"public/2018/07/28/2017-02-26总结/index.html","hash":"d537a8b757950998655114c48ce464124c4ff850","modified":1534654243682},{"_id":"public/2018/07/28/2017-02-27总结/index.html","hash":"39243d64000e37c30e27c65366be5df11a403923","modified":1534654243682},{"_id":"public/2018/07/28/2017-07-23-shaobing/index.html","hash":"f464b2e52b0859650a0aaa391d4136419aa7221c","modified":1534654243682},{"_id":"public/2018/07/28/2018-01-15-the-sequential-search/index.html","hash":"e119bad7f0d03546eadb0d667417b6a4bcf1b90e","modified":1534654243682},{"_id":"public/2018/07/28/2018-01-16-the-binary-search/index.html","hash":"40441b0d691d90d21b4912bdefe555e5e419c7e0","modified":1534654243682},{"_id":"public/2018/07/28/2018-05-03-redux/index.html","hash":"3ab3c3abd42b50d750a191271c510e4ce7db6085","modified":1534654243682},{"_id":"public/2018/07/28/2018-07-07-arts/index.html","hash":"4499a0f3f5d63dd66914e4d024957d6de110f73b","modified":1534654243682},{"_id":"public/2018/07/28/2018-07-15-arts/index.html","hash":"8fbf885eab087df61ce6173854588214e32a08a1","modified":1534654243683},{"_id":"public/2018/07/28/2018-07-21-arts/index.html","hash":"0498ba34e469b06ddcb4644f2a662617992b7054","modified":1534654243683},{"_id":"public/2018/07/28/2018-07-28-arts/index.html","hash":"48b72c8151f52b1d4a4dec911da02cc262a2db62","modified":1534654243683},{"_id":"public/2018/07/28/2016-06-27-alfred/index.html","hash":"e1d6ef04665bd73d6b1f24338ebaaa4b9d540b2b","modified":1534654243683},{"_id":"public/2018/07/28/2017-01-13-coding-diary/index.html","hash":"1ca3d5605a75ceb3f807b78260ca3c17db50fbab","modified":1534654243683},{"_id":"public/archives/index.html","hash":"bf443c47a524f9ee43f84092a0a2aeb046aacbd9","modified":1534654243683},{"_id":"public/archives/page/2/index.html","hash":"8b5ac68b3519f042e5bb5be5c66f91bc5dfbfd4d","modified":1534654243683},{"_id":"public/archives/page/3/index.html","hash":"c8046350857a57aed292846cdc3543af082daa3c","modified":1534654243683},{"_id":"public/archives/page/4/index.html","hash":"011bbfbf2d7ce49495225a127d5def1bce8c30cf","modified":1534654243683},{"_id":"public/archives/page/5/index.html","hash":"82d744364ecf19eb0b866e01ff0cb965af62f7f6","modified":1534654243683},{"_id":"public/archives/page/6/index.html","hash":"db638495a0719b7836b6cbb9a45b3dfe7a8246d3","modified":1534654243683},{"_id":"public/archives/page/7/index.html","hash":"0ffdfe89fa17f4ed6f28f19ffaf6fe85f853c10b","modified":1534654243684},{"_id":"public/archives/page/8/index.html","hash":"5d4060291848a98b3f98e08539aa9a701efff760","modified":1534654243684},{"_id":"public/archives/page/9/index.html","hash":"3c3939b675258351dccb73d65052cd51b335fca2","modified":1534654243684},{"_id":"public/archives/page/10/index.html","hash":"b0667e1ed426e7aea15f7f32da542fcb0ae61a4a","modified":1534654243684},{"_id":"public/archives/2018/index.html","hash":"a07d5650f9ad0820af79823c2cd0fd9c9aeddfa4","modified":1534654243684},{"_id":"public/archives/2018/page/2/index.html","hash":"8ee13b2d1655f04960275070b6e7522143f0a196","modified":1534654243684},{"_id":"public/archives/2018/page/3/index.html","hash":"b58aab1706f31e428fd659f2756040fa16025a58","modified":1534654243684},{"_id":"public/archives/2018/page/4/index.html","hash":"31f505fe98ab83f8fee4a700a9ba41d287415356","modified":1534654243684},{"_id":"public/archives/2018/page/5/index.html","hash":"d24d1ede25d54028bb5639d617902c84191c0aa5","modified":1534654243684},{"_id":"public/archives/2018/page/6/index.html","hash":"fd8137e5458bf9359ca62667b8adac5f647bf7a1","modified":1534654243684},{"_id":"public/archives/2018/page/7/index.html","hash":"af092bafeb4f2cafce2b5755180263051b2ae0d2","modified":1534654243684},{"_id":"public/archives/2018/page/8/index.html","hash":"7d450c58bf23a7db0ff9d3b118f1fa2b1e9e019b","modified":1534654243684},{"_id":"public/archives/2018/page/9/index.html","hash":"2d530e862ab77f95d6f23ec21444a993feeade71","modified":1534654243684},{"_id":"public/archives/2018/page/10/index.html","hash":"652b5be239e0647c9ea56b37affdef511744ce38","modified":1534654243684},{"_id":"public/archives/2018/07/index.html","hash":"8cd17d1bc70684750d3325fa3898deab41a9b11d","modified":1534654243684},{"_id":"public/archives/2018/07/page/2/index.html","hash":"6deffb5795eeebe826046ad6d8760f8e12ae232e","modified":1534654243684},{"_id":"public/archives/2018/07/page/3/index.html","hash":"8da5e0adf76bb62e341528d5d3844835594ab35f","modified":1534654243685},{"_id":"public/archives/2018/07/page/4/index.html","hash":"f6236c10b4d1cfdbe79d2c0a7855e823929792c0","modified":1534654243685},{"_id":"public/archives/2018/07/page/5/index.html","hash":"d574125788272dc4b987e092769e31d7a6e5bbe4","modified":1534654243685},{"_id":"public/archives/2018/07/page/6/index.html","hash":"a7cad130bd413b1fb913a66da809d49b759af8d5","modified":1534654243685},{"_id":"public/archives/2018/07/page/7/index.html","hash":"f8b91b19f36686305ed7079fae99aa4bfacaf703","modified":1534654243685},{"_id":"public/archives/2018/07/page/8/index.html","hash":"38517a57391dc6a0f7d1da0524b88ab98aab6db9","modified":1534654243685},{"_id":"public/archives/2018/07/page/9/index.html","hash":"bc9c2fae5d8defb36ccc8ad5e6bf984c3c29d1d7","modified":1534654243685},{"_id":"public/archives/2018/07/page/10/index.html","hash":"1ceacbceacc680c1aa2add5a3b754968bcd9ba92","modified":1534654243685},{"_id":"public/categories/全栈营/index.html","hash":"059f252439ea16be41a7f76f1aa93fd440516086","modified":1534654243685},{"_id":"public/categories/全栈营/page/2/index.html","hash":"20f4c0b8fe4604a39aba89f96983efbbeaadc612","modified":1534654243685},{"_id":"public/categories/全栈营/page/3/index.html","hash":"17aeb49e97eda4d20f2dca303a6e4dc4289dfa3b","modified":1534654243685},{"_id":"public/categories/全栈营/page/4/index.html","hash":"9146d868d42e7392d630344df310c04cf3573370","modified":1534654243685},{"_id":"public/categories/全栈营/page/5/index.html","hash":"9b3222fe2fc3f788475f0d50d5de60f87e615c04","modified":1534654243685},{"_id":"public/index.html","hash":"6228c3d1f5edcf175503a46e124c39f19eecdf6d","modified":1534654243686},{"_id":"public/page/2/index.html","hash":"3d89e770348ba21520aaecb7ab9888ade4483cfc","modified":1534654243686},{"_id":"public/page/3/index.html","hash":"d480e4d984cfc9114f136c12f1ce907625d69006","modified":1534654243686},{"_id":"public/page/4/index.html","hash":"2a0f0f0680480febae405494c49aa93b80a91d3b","modified":1534654243686},{"_id":"public/page/5/index.html","hash":"0b9133fd2ebd15a53baa937129e502b7f5d1386b","modified":1534654243686},{"_id":"public/page/6/index.html","hash":"ea4e0440f775bcb52c8de67fe2634f7033a1367c","modified":1534654243686},{"_id":"public/page/7/index.html","hash":"a7d5fd8a4103a3c44cee3f7196bdd2d021b6940b","modified":1534654243686},{"_id":"public/page/8/index.html","hash":"03882d6f23ca7c6c4d47c562eaaf4493e46bc5f5","modified":1534654243686},{"_id":"public/page/9/index.html","hash":"4a80891902cddd1ab92dfda6661a3a408a66a04c","modified":1534654243686},{"_id":"public/page/10/index.html","hash":"e8bdabf6d838f6d73189b228f444fde1d9bb377d","modified":1534654243686},{"_id":"public/page/11/index.html","hash":"d79add894c0f9626456f8f88528582830113949d","modified":1534654243686},{"_id":"public/CNAME","hash":"889cb8cc8e3e580cd7f07433d5f16e66cfb0b938","modified":1534654243704},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534654243704},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1534654243704},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1534654243704},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1534654243705},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1534654243705},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1534654243705},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1534654243705},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1534654243705},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534654243705},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534654243705},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1534654243705},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1534654243705},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534654243705},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1534654243705},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1534654243705},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1534654243705},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1534654243706},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1534654243706},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1534654243706},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1534654243706},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1534654243706},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1534654243706},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1534654243706},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1534654243706},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1534654244302},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1534654244305},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1534654244306},{"_id":"public/404.html","hash":"310fc37341c13586d09c4d1d82ca51ed082d6481","modified":1534654244323},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1534654244323},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1534654244323},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1534654244323},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1534654244323},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1534654244323},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1534654244323},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1534654244323},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1534654244324},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1534654244324},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1534654244324},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1534654244324},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1534654244324},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1534654244324},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1534654244324},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1534654244324},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1534654244324},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1534654244324},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1534654244324},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1534654244324},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1534654244324},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1534654244324},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1534654244324},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1534654244325},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1534654244325},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1534654244325},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1534654244325},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1534654244325},{"_id":"public/css/main.css","hash":"1194745b94d017ea19cfb0757f493f617a7ac6b7","modified":1534654244325},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1534654244325},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1534654244325},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1534654244325},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1534654244325},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1534654244325},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1534654244325},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1534654244325},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1534654244325},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1534654244325},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1534654244326},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1534654244336}],"Category":[{"name":"工具","_id":"cjl0dic9x000ifsonrpf3bvfx"},{"name":"Javascript","_id":"cjl0dica2000nfson1rkn53ub"},{"name":"随笔","_id":"cjl0dicac0014fsone2whc62u"},{"name":"Node","_id":"cjl0dicaf001bfsonx37nncmi"},{"name":"全栈营","_id":"cjl0dicaw002afsonqy3sl2l5"},{"name":"作品","_id":"cjl0dicbb0031fsonod88sblr"},{"name":"CSS","_id":"cjl0diccw005sfsontuwx2tv0"},{"name":"readingCode","_id":"cjl0dicdq0073fsonfe81m2wt"},{"name":"Algorithms","_id":"cjl0dicdt0079fson1ddzgu8d"},{"name":"ARTS","_id":"cjl0dicdy007jfson1dadc5of"}],"Data":[],"Page":[{"_content":"我的博客：raimonfuns.github.io -> mastery.fun","source":"README.md","raw":"我的博客：raimonfuns.github.io -> mastery.fun","date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"cjl0dic3h0000fsonl65w2qz1","content":"<p>我的博客：raimonfuns.github.io -&gt; mastery.fun</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我的博客：raimonfuns.github.io -&gt; mastery.fun</p>\n"},{"title":"categories","date":"2016-06-30T11:35:19.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-06-30 19:35:19\ntype: \"categories\"\n---\n","updated":"2018-07-28T15:19:58.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjl0dic9a0003fsone491loj7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2016-06-27T07:05:07.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-06-27 15:05:07\ntype: \"tags\"\n---\n","updated":"2018-07-28T15:19:58.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjl0dic9c0005fsonguz2vdf8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"","source":"_drafts/2017-02-07-find_by_find.md","raw":"","slug":"2017-02-07-find_by_find","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic4e0001fsonmln77ado","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"\ndiv 与 span的不同\n\nclass 与 id\n\np br\n\ntabl","source":"_drafts/2016-01-18-html-teaching-yourself.md","raw":"\ndiv 与 span的不同\n\nclass 与 id\n\np br\n\ntabl","slug":"2016-01-18-html-teaching-yourself","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic990002fsonldibmyma","content":"<p>div 与 span的不同</p>\n<p>class 与 id</p>\n<p>p br</p>\n<p>tabl</p>\n","site":{"data":{}},"excerpt":"","more":"<p>div 与 span的不同</p>\n<p>class 与 id</p>\n<p>p br</p>\n<p>tabl</p>\n"},{"_content":"\n## Ojective\n参加魔改大赛\n\n## Repretive\n- 自己我作品没人投票，觉得很不爽\n- 觉得不爽就不想玩了，因为奖品的价值才值600多块，也不多\n- 钱那么少，那就让他们玩去，我就不凑热闹了\n- 看他们一个个在群里面拉票，要不要脸呀，这是在剥削别人的注意力呀\n- 我不敢看群消息，也不敢看全阵营论坛，更不想打开魔改大赛的作品，因为一看到别人在折腾，我就难受\n- 我就是设计感差了一点，这没办法，一直都这样，所以这不是我的强项，我就不打算在这方面折腾了\n- 这比赛会让变成表现型人格的，不好，太烂了\n- 这些新手们，以为写个网站就能怎么怎么样了？太天真了\n- 他们能获得票数是因为他们平时在群里花的时间多，而我花得比较少，所以他们更有人气，这样他们的人气才高，跟我有什么关系\n- 等这次魔改大赛结束之后，我就轻松了\n\n## Interpretive\n\n首先，你先问自己几个问题：\n- 为什么没人投票？因为没有曝光。\n- 为什么你不曝光？因为怕别人觉得作品不好，怕别人认为不怎么样\n- 没人投票找过原因吗，找过解决方案吗？没有，因为你觉得不爽，所以就开始抱怨，找各种借口，你就是在逃避，甚至还想要退出比赛！这是不是有点像懦夫呢？\n\n上面的所有想法都有一个共同点：\n\n**当现实不如意的时候，首先想到的是抱怨和逃避，而不是去想解决和改善办法**\n\n好，那么，我开始来救救你。\n\n首先，这次比赛最重要的目的是什么？奖品？票数？\n\n参加这次比赛的首要目的绝对不是为了这些奖励！如果是为了这些奖励而参加比赛，那么你所做的所有事情都没有意义。因为你只关注终点，不能享受过程，那还有什么意思呢？\n\n参加这次比赛最重要的目的是**成长**，极力摆脱表现型人格。试问一下自己，你在这方面努力过吗？这虽然是比赛，但输赢真的一点都不重要，其实，能赢下这次比赛的人都将是那些成长型人格的人，他们都具备这样的特点：\n\n- 非常寻求反馈\n- 不怕丢脸\n- 只关注成长，其他什么的都不重要\n\n而你在参加全阵营的这段时间里面，在这3个方面，完全没有做出任何的努力。虽然你有一定的基础，但是就这段期间的表现而已，你是一个不合格的学员！\n\n好了，已经说了很多话，把你从牢笼里面拽出来，现在，让我们想想办法，继续一个大版本的升级吧！\n\n## Decisional\n\n> Peter Drucker：星期一我不想听到你们说这有多美好（意思是这个周末有多美好），星期一我想听到你们跟我说，你们做了些什么改变。\n\n- 只要有人提问，你就要**抢着**回答。\n- 每天记录自己做了哪些反表现型人格的努力，把自己的努力截图发到《反表现型人格的挣扎》。\n- 看到好文章、好作品，一定要第一时间鼓励。\n- 把全栈营当做是一次发反表现型人格的训练。\n- 别留余力了，也不要去看其他书籍，最重要的事情没有别的了，就是在全栈营里面获得最大程度的提升。","source":"_drafts/2017-01-19-be-good-type.md","raw":"\n## Ojective\n参加魔改大赛\n\n## Repretive\n- 自己我作品没人投票，觉得很不爽\n- 觉得不爽就不想玩了，因为奖品的价值才值600多块，也不多\n- 钱那么少，那就让他们玩去，我就不凑热闹了\n- 看他们一个个在群里面拉票，要不要脸呀，这是在剥削别人的注意力呀\n- 我不敢看群消息，也不敢看全阵营论坛，更不想打开魔改大赛的作品，因为一看到别人在折腾，我就难受\n- 我就是设计感差了一点，这没办法，一直都这样，所以这不是我的强项，我就不打算在这方面折腾了\n- 这比赛会让变成表现型人格的，不好，太烂了\n- 这些新手们，以为写个网站就能怎么怎么样了？太天真了\n- 他们能获得票数是因为他们平时在群里花的时间多，而我花得比较少，所以他们更有人气，这样他们的人气才高，跟我有什么关系\n- 等这次魔改大赛结束之后，我就轻松了\n\n## Interpretive\n\n首先，你先问自己几个问题：\n- 为什么没人投票？因为没有曝光。\n- 为什么你不曝光？因为怕别人觉得作品不好，怕别人认为不怎么样\n- 没人投票找过原因吗，找过解决方案吗？没有，因为你觉得不爽，所以就开始抱怨，找各种借口，你就是在逃避，甚至还想要退出比赛！这是不是有点像懦夫呢？\n\n上面的所有想法都有一个共同点：\n\n**当现实不如意的时候，首先想到的是抱怨和逃避，而不是去想解决和改善办法**\n\n好，那么，我开始来救救你。\n\n首先，这次比赛最重要的目的是什么？奖品？票数？\n\n参加这次比赛的首要目的绝对不是为了这些奖励！如果是为了这些奖励而参加比赛，那么你所做的所有事情都没有意义。因为你只关注终点，不能享受过程，那还有什么意思呢？\n\n参加这次比赛最重要的目的是**成长**，极力摆脱表现型人格。试问一下自己，你在这方面努力过吗？这虽然是比赛，但输赢真的一点都不重要，其实，能赢下这次比赛的人都将是那些成长型人格的人，他们都具备这样的特点：\n\n- 非常寻求反馈\n- 不怕丢脸\n- 只关注成长，其他什么的都不重要\n\n而你在参加全阵营的这段时间里面，在这3个方面，完全没有做出任何的努力。虽然你有一定的基础，但是就这段期间的表现而已，你是一个不合格的学员！\n\n好了，已经说了很多话，把你从牢笼里面拽出来，现在，让我们想想办法，继续一个大版本的升级吧！\n\n## Decisional\n\n> Peter Drucker：星期一我不想听到你们说这有多美好（意思是这个周末有多美好），星期一我想听到你们跟我说，你们做了些什么改变。\n\n- 只要有人提问，你就要**抢着**回答。\n- 每天记录自己做了哪些反表现型人格的努力，把自己的努力截图发到《反表现型人格的挣扎》。\n- 看到好文章、好作品，一定要第一时间鼓励。\n- 把全栈营当做是一次发反表现型人格的训练。\n- 别留余力了，也不要去看其他书籍，最重要的事情没有别的了，就是在全栈营里面获得最大程度的提升。","slug":"2017-01-19-be-good-type","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9b0004fsonygo72iip","content":"<h2 id=\"Ojective\"><a href=\"#Ojective\" class=\"headerlink\" title=\"Ojective\"></a>Ojective</h2><p>参加魔改大赛</p>\n<h2 id=\"Repretive\"><a href=\"#Repretive\" class=\"headerlink\" title=\"Repretive\"></a>Repretive</h2><ul>\n<li>自己我作品没人投票，觉得很不爽</li>\n<li>觉得不爽就不想玩了，因为奖品的价值才值600多块，也不多</li>\n<li>钱那么少，那就让他们玩去，我就不凑热闹了</li>\n<li>看他们一个个在群里面拉票，要不要脸呀，这是在剥削别人的注意力呀</li>\n<li>我不敢看群消息，也不敢看全阵营论坛，更不想打开魔改大赛的作品，因为一看到别人在折腾，我就难受</li>\n<li>我就是设计感差了一点，这没办法，一直都这样，所以这不是我的强项，我就不打算在这方面折腾了</li>\n<li>这比赛会让变成表现型人格的，不好，太烂了</li>\n<li>这些新手们，以为写个网站就能怎么怎么样了？太天真了</li>\n<li>他们能获得票数是因为他们平时在群里花的时间多，而我花得比较少，所以他们更有人气，这样他们的人气才高，跟我有什么关系</li>\n<li>等这次魔改大赛结束之后，我就轻松了</li>\n</ul>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p>首先，你先问自己几个问题：</p>\n<ul>\n<li>为什么没人投票？因为没有曝光。</li>\n<li>为什么你不曝光？因为怕别人觉得作品不好，怕别人认为不怎么样</li>\n<li>没人投票找过原因吗，找过解决方案吗？没有，因为你觉得不爽，所以就开始抱怨，找各种借口，你就是在逃避，甚至还想要退出比赛！这是不是有点像懦夫呢？</li>\n</ul>\n<p>上面的所有想法都有一个共同点：</p>\n<p><strong>当现实不如意的时候，首先想到的是抱怨和逃避，而不是去想解决和改善办法</strong></p>\n<p>好，那么，我开始来救救你。</p>\n<p>首先，这次比赛最重要的目的是什么？奖品？票数？</p>\n<p>参加这次比赛的首要目的绝对不是为了这些奖励！如果是为了这些奖励而参加比赛，那么你所做的所有事情都没有意义。因为你只关注终点，不能享受过程，那还有什么意思呢？</p>\n<p>参加这次比赛最重要的目的是<strong>成长</strong>，极力摆脱表现型人格。试问一下自己，你在这方面努力过吗？这虽然是比赛，但输赢真的一点都不重要，其实，能赢下这次比赛的人都将是那些成长型人格的人，他们都具备这样的特点：</p>\n<ul>\n<li>非常寻求反馈</li>\n<li>不怕丢脸</li>\n<li>只关注成长，其他什么的都不重要</li>\n</ul>\n<p>而你在参加全阵营的这段时间里面，在这3个方面，完全没有做出任何的努力。虽然你有一定的基础，但是就这段期间的表现而已，你是一个不合格的学员！</p>\n<p>好了，已经说了很多话，把你从牢笼里面拽出来，现在，让我们想想办法，继续一个大版本的升级吧！</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><blockquote>\n<p>Peter Drucker：星期一我不想听到你们说这有多美好（意思是这个周末有多美好），星期一我想听到你们跟我说，你们做了些什么改变。</p>\n</blockquote>\n<ul>\n<li>只要有人提问，你就要<strong>抢着</strong>回答。</li>\n<li>每天记录自己做了哪些反表现型人格的努力，把自己的努力截图发到《反表现型人格的挣扎》。</li>\n<li>看到好文章、好作品，一定要第一时间鼓励。</li>\n<li>把全栈营当做是一次发反表现型人格的训练。</li>\n<li>别留余力了，也不要去看其他书籍，最重要的事情没有别的了，就是在全栈营里面获得最大程度的提升。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Ojective\"><a href=\"#Ojective\" class=\"headerlink\" title=\"Ojective\"></a>Ojective</h2><p>参加魔改大赛</p>\n<h2 id=\"Repretive\"><a href=\"#Repretive\" class=\"headerlink\" title=\"Repretive\"></a>Repretive</h2><ul>\n<li>自己我作品没人投票，觉得很不爽</li>\n<li>觉得不爽就不想玩了，因为奖品的价值才值600多块，也不多</li>\n<li>钱那么少，那就让他们玩去，我就不凑热闹了</li>\n<li>看他们一个个在群里面拉票，要不要脸呀，这是在剥削别人的注意力呀</li>\n<li>我不敢看群消息，也不敢看全阵营论坛，更不想打开魔改大赛的作品，因为一看到别人在折腾，我就难受</li>\n<li>我就是设计感差了一点，这没办法，一直都这样，所以这不是我的强项，我就不打算在这方面折腾了</li>\n<li>这比赛会让变成表现型人格的，不好，太烂了</li>\n<li>这些新手们，以为写个网站就能怎么怎么样了？太天真了</li>\n<li>他们能获得票数是因为他们平时在群里花的时间多，而我花得比较少，所以他们更有人气，这样他们的人气才高，跟我有什么关系</li>\n<li>等这次魔改大赛结束之后，我就轻松了</li>\n</ul>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p>首先，你先问自己几个问题：</p>\n<ul>\n<li>为什么没人投票？因为没有曝光。</li>\n<li>为什么你不曝光？因为怕别人觉得作品不好，怕别人认为不怎么样</li>\n<li>没人投票找过原因吗，找过解决方案吗？没有，因为你觉得不爽，所以就开始抱怨，找各种借口，你就是在逃避，甚至还想要退出比赛！这是不是有点像懦夫呢？</li>\n</ul>\n<p>上面的所有想法都有一个共同点：</p>\n<p><strong>当现实不如意的时候，首先想到的是抱怨和逃避，而不是去想解决和改善办法</strong></p>\n<p>好，那么，我开始来救救你。</p>\n<p>首先，这次比赛最重要的目的是什么？奖品？票数？</p>\n<p>参加这次比赛的首要目的绝对不是为了这些奖励！如果是为了这些奖励而参加比赛，那么你所做的所有事情都没有意义。因为你只关注终点，不能享受过程，那还有什么意思呢？</p>\n<p>参加这次比赛最重要的目的是<strong>成长</strong>，极力摆脱表现型人格。试问一下自己，你在这方面努力过吗？这虽然是比赛，但输赢真的一点都不重要，其实，能赢下这次比赛的人都将是那些成长型人格的人，他们都具备这样的特点：</p>\n<ul>\n<li>非常寻求反馈</li>\n<li>不怕丢脸</li>\n<li>只关注成长，其他什么的都不重要</li>\n</ul>\n<p>而你在参加全阵营的这段时间里面，在这3个方面，完全没有做出任何的努力。虽然你有一定的基础，但是就这段期间的表现而已，你是一个不合格的学员！</p>\n<p>好了，已经说了很多话，把你从牢笼里面拽出来，现在，让我们想想办法，继续一个大版本的升级吧！</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><blockquote>\n<p>Peter Drucker：星期一我不想听到你们说这有多美好（意思是这个周末有多美好），星期一我想听到你们跟我说，你们做了些什么改变。</p>\n</blockquote>\n<ul>\n<li>只要有人提问，你就要<strong>抢着</strong>回答。</li>\n<li>每天记录自己做了哪些反表现型人格的努力，把自己的努力截图发到《反表现型人格的挣扎》。</li>\n<li>看到好文章、好作品，一定要第一时间鼓励。</li>\n<li>把全栈营当做是一次发反表现型人格的训练。</li>\n<li>别留余力了，也不要去看其他书籍，最重要的事情没有别的了，就是在全栈营里面获得最大程度的提升。</li>\n</ul>\n"},{"_content":"\n## Objective\n完成《商城网站》part1、part2\n\n## Reflective\n**低点是什么?**\n意识到自己一直没有摆脱表现型人格的束缚，和全栈营里面同学相比，我简直弱爆了，完全封闭在自己的世界里面。这种感觉就像大家一起爬山涉水，而我却中途停下来，跑去河边玩水，甚至意识不到自己掉队了。\n\n## Interpretive\n魔改大赛的投票数只有很小的一方面是由作品质量决定的，投票者之所以愿意投是因为对参赛者的努力程度的认可，当你看到一个小伙伴充满热情，而且不断地对改进作品，对于这么努力上进的进取型参赛者，有不投票的理由嘛？\n\n但是，我就不是这样一个参赛者，甚至可以说完全不是一个合格的参赛者，因为我一直都在**自欺欺人**。\n\n今天晚上停下手中的事情，用了1个小时反省。先罗列出自己真实的想法（实在是无法公开发表），大概有十几个，然后逐一分析，发现每一条想法都极其错误。发现原来自己的水平一直停滞不前是有原因的。最为严重的一点是自欺欺人（竟然很难意识到），经常找各种理由推卸责任，却从不直面问题，不能从其他小伙伴身上学到东西，对于好的事物竟然视而不见，这是很严重的。想明白这点之后，我沉思了10分钟，渐渐地有了重生的感觉，我似乎看到了另外一个世界，在这个世界里，没有谁强谁弱，只有相互学习、相互扶持，共同成长，这不就是一个我一直梦寐以求的环境嘛！\n\n于是，痛定思痛，解剖完自己之后，制定了一套行为准则，废话不多说，先行动起来再说！\n\n今天晚上也花时间收集了一些句子，来提醒自己千万不要再麻木地回到原来的困境中。\n\nPeter Drucker：\n\n> 星期一我不想听到你们说这个周末有多美好，星期一我想听到你们跟我说，你们做了些什么改变\n\n李笑来：\n\n> 想到了，学到了，就当真了；当真了，就当真做了，且真的做到了，这才是践行。\n\n李笑来：\n\n> 永远鼓励身边的人，哪怕多少有些盲目。当这个行为成为习惯，我们会获得不需要被别人鼓励也能勇敢前进的人，这是一种境界。\n\n李笑来：\n\n> 甄别出那些有属于自己的高效操作系统的人，甄别出那些愿意打磨自己的操作系统的人，遇到了，必须马上连接。\n\n李笑来：\n\n> 要想办法认识很多真正拥有**高效率的操作系统**的人。长期以来，我发现外界的定义都是没用的，学历、身份、地位等各种标签，都是除了迷惑他人之外完全没用的东西。到最后，只有一种方式有用：**交流**。\n\nCeleste Headlee:\n\n> Everybody is an expert in something\n\nBill Nye:\n\n> Everyone you will ever meet knows something you don't\n\nAfrican Proverb\n\n> If you want to go fast, go clone.\n> If you want to go far, go together.\n\n## Decisional\n- 交流、交流、交流。\n- 虚心向其他学员学习。\n- 永远鼓励身边的人，哪怕多少有些盲目。\n- 魔改大赛不只是一场比赛，而是一次自我升级的好机会，享受过程，把所有的注意力放在一个东西上面：**成长**。\n\n","source":"_drafts/2017-01-20-coding-diary.md","raw":"\n## Objective\n完成《商城网站》part1、part2\n\n## Reflective\n**低点是什么?**\n意识到自己一直没有摆脱表现型人格的束缚，和全栈营里面同学相比，我简直弱爆了，完全封闭在自己的世界里面。这种感觉就像大家一起爬山涉水，而我却中途停下来，跑去河边玩水，甚至意识不到自己掉队了。\n\n## Interpretive\n魔改大赛的投票数只有很小的一方面是由作品质量决定的，投票者之所以愿意投是因为对参赛者的努力程度的认可，当你看到一个小伙伴充满热情，而且不断地对改进作品，对于这么努力上进的进取型参赛者，有不投票的理由嘛？\n\n但是，我就不是这样一个参赛者，甚至可以说完全不是一个合格的参赛者，因为我一直都在**自欺欺人**。\n\n今天晚上停下手中的事情，用了1个小时反省。先罗列出自己真实的想法（实在是无法公开发表），大概有十几个，然后逐一分析，发现每一条想法都极其错误。发现原来自己的水平一直停滞不前是有原因的。最为严重的一点是自欺欺人（竟然很难意识到），经常找各种理由推卸责任，却从不直面问题，不能从其他小伙伴身上学到东西，对于好的事物竟然视而不见，这是很严重的。想明白这点之后，我沉思了10分钟，渐渐地有了重生的感觉，我似乎看到了另外一个世界，在这个世界里，没有谁强谁弱，只有相互学习、相互扶持，共同成长，这不就是一个我一直梦寐以求的环境嘛！\n\n于是，痛定思痛，解剖完自己之后，制定了一套行为准则，废话不多说，先行动起来再说！\n\n今天晚上也花时间收集了一些句子，来提醒自己千万不要再麻木地回到原来的困境中。\n\nPeter Drucker：\n\n> 星期一我不想听到你们说这个周末有多美好，星期一我想听到你们跟我说，你们做了些什么改变\n\n李笑来：\n\n> 想到了，学到了，就当真了；当真了，就当真做了，且真的做到了，这才是践行。\n\n李笑来：\n\n> 永远鼓励身边的人，哪怕多少有些盲目。当这个行为成为习惯，我们会获得不需要被别人鼓励也能勇敢前进的人，这是一种境界。\n\n李笑来：\n\n> 甄别出那些有属于自己的高效操作系统的人，甄别出那些愿意打磨自己的操作系统的人，遇到了，必须马上连接。\n\n李笑来：\n\n> 要想办法认识很多真正拥有**高效率的操作系统**的人。长期以来，我发现外界的定义都是没用的，学历、身份、地位等各种标签，都是除了迷惑他人之外完全没用的东西。到最后，只有一种方式有用：**交流**。\n\nCeleste Headlee:\n\n> Everybody is an expert in something\n\nBill Nye:\n\n> Everyone you will ever meet knows something you don't\n\nAfrican Proverb\n\n> If you want to go fast, go clone.\n> If you want to go far, go together.\n\n## Decisional\n- 交流、交流、交流。\n- 虚心向其他学员学习。\n- 永远鼓励身边的人，哪怕多少有些盲目。\n- 魔改大赛不只是一场比赛，而是一次自我升级的好机会，享受过程，把所有的注意力放在一个东西上面：**成长**。\n\n","slug":"2017-01-20-coding-diary","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9e0006fson8tzkltw6","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成《商城网站》part1、part2</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p><strong>低点是什么?</strong><br>意识到自己一直没有摆脱表现型人格的束缚，和全栈营里面同学相比，我简直弱爆了，完全封闭在自己的世界里面。这种感觉就像大家一起爬山涉水，而我却中途停下来，跑去河边玩水，甚至意识不到自己掉队了。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p>魔改大赛的投票数只有很小的一方面是由作品质量决定的，投票者之所以愿意投是因为对参赛者的努力程度的认可，当你看到一个小伙伴充满热情，而且不断地对改进作品，对于这么努力上进的进取型参赛者，有不投票的理由嘛？</p>\n<p>但是，我就不是这样一个参赛者，甚至可以说完全不是一个合格的参赛者，因为我一直都在<strong>自欺欺人</strong>。</p>\n<p>今天晚上停下手中的事情，用了1个小时反省。先罗列出自己真实的想法（实在是无法公开发表），大概有十几个，然后逐一分析，发现每一条想法都极其错误。发现原来自己的水平一直停滞不前是有原因的。最为严重的一点是自欺欺人（竟然很难意识到），经常找各种理由推卸责任，却从不直面问题，不能从其他小伙伴身上学到东西，对于好的事物竟然视而不见，这是很严重的。想明白这点之后，我沉思了10分钟，渐渐地有了重生的感觉，我似乎看到了另外一个世界，在这个世界里，没有谁强谁弱，只有相互学习、相互扶持，共同成长，这不就是一个我一直梦寐以求的环境嘛！</p>\n<p>于是，痛定思痛，解剖完自己之后，制定了一套行为准则，废话不多说，先行动起来再说！</p>\n<p>今天晚上也花时间收集了一些句子，来提醒自己千万不要再麻木地回到原来的困境中。</p>\n<p>Peter Drucker：</p>\n<blockquote>\n<p>星期一我不想听到你们说这个周末有多美好，星期一我想听到你们跟我说，你们做了些什么改变</p>\n</blockquote>\n<p>李笑来：</p>\n<blockquote>\n<p>想到了，学到了，就当真了；当真了，就当真做了，且真的做到了，这才是践行。</p>\n</blockquote>\n<p>李笑来：</p>\n<blockquote>\n<p>永远鼓励身边的人，哪怕多少有些盲目。当这个行为成为习惯，我们会获得不需要被别人鼓励也能勇敢前进的人，这是一种境界。</p>\n</blockquote>\n<p>李笑来：</p>\n<blockquote>\n<p>甄别出那些有属于自己的高效操作系统的人，甄别出那些愿意打磨自己的操作系统的人，遇到了，必须马上连接。</p>\n</blockquote>\n<p>李笑来：</p>\n<blockquote>\n<p>要想办法认识很多真正拥有<strong>高效率的操作系统</strong>的人。长期以来，我发现外界的定义都是没用的，学历、身份、地位等各种标签，都是除了迷惑他人之外完全没用的东西。到最后，只有一种方式有用：<strong>交流</strong>。</p>\n</blockquote>\n<p>Celeste Headlee:</p>\n<blockquote>\n<p>Everybody is an expert in something</p>\n</blockquote>\n<p>Bill Nye:</p>\n<blockquote>\n<p>Everyone you will ever meet knows something you don’t</p>\n</blockquote>\n<p>African Proverb</p>\n<blockquote>\n<p>If you want to go fast, go clone.<br>If you want to go far, go together.</p>\n</blockquote>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>交流、交流、交流。</li>\n<li>虚心向其他学员学习。</li>\n<li>永远鼓励身边的人，哪怕多少有些盲目。</li>\n<li>魔改大赛不只是一场比赛，而是一次自我升级的好机会，享受过程，把所有的注意力放在一个东西上面：<strong>成长</strong>。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成《商城网站》part1、part2</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p><strong>低点是什么?</strong><br>意识到自己一直没有摆脱表现型人格的束缚，和全栈营里面同学相比，我简直弱爆了，完全封闭在自己的世界里面。这种感觉就像大家一起爬山涉水，而我却中途停下来，跑去河边玩水，甚至意识不到自己掉队了。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p>魔改大赛的投票数只有很小的一方面是由作品质量决定的，投票者之所以愿意投是因为对参赛者的努力程度的认可，当你看到一个小伙伴充满热情，而且不断地对改进作品，对于这么努力上进的进取型参赛者，有不投票的理由嘛？</p>\n<p>但是，我就不是这样一个参赛者，甚至可以说完全不是一个合格的参赛者，因为我一直都在<strong>自欺欺人</strong>。</p>\n<p>今天晚上停下手中的事情，用了1个小时反省。先罗列出自己真实的想法（实在是无法公开发表），大概有十几个，然后逐一分析，发现每一条想法都极其错误。发现原来自己的水平一直停滞不前是有原因的。最为严重的一点是自欺欺人（竟然很难意识到），经常找各种理由推卸责任，却从不直面问题，不能从其他小伙伴身上学到东西，对于好的事物竟然视而不见，这是很严重的。想明白这点之后，我沉思了10分钟，渐渐地有了重生的感觉，我似乎看到了另外一个世界，在这个世界里，没有谁强谁弱，只有相互学习、相互扶持，共同成长，这不就是一个我一直梦寐以求的环境嘛！</p>\n<p>于是，痛定思痛，解剖完自己之后，制定了一套行为准则，废话不多说，先行动起来再说！</p>\n<p>今天晚上也花时间收集了一些句子，来提醒自己千万不要再麻木地回到原来的困境中。</p>\n<p>Peter Drucker：</p>\n<blockquote>\n<p>星期一我不想听到你们说这个周末有多美好，星期一我想听到你们跟我说，你们做了些什么改变</p>\n</blockquote>\n<p>李笑来：</p>\n<blockquote>\n<p>想到了，学到了，就当真了；当真了，就当真做了，且真的做到了，这才是践行。</p>\n</blockquote>\n<p>李笑来：</p>\n<blockquote>\n<p>永远鼓励身边的人，哪怕多少有些盲目。当这个行为成为习惯，我们会获得不需要被别人鼓励也能勇敢前进的人，这是一种境界。</p>\n</blockquote>\n<p>李笑来：</p>\n<blockquote>\n<p>甄别出那些有属于自己的高效操作系统的人，甄别出那些愿意打磨自己的操作系统的人，遇到了，必须马上连接。</p>\n</blockquote>\n<p>李笑来：</p>\n<blockquote>\n<p>要想办法认识很多真正拥有<strong>高效率的操作系统</strong>的人。长期以来，我发现外界的定义都是没用的，学历、身份、地位等各种标签，都是除了迷惑他人之外完全没用的东西。到最后，只有一种方式有用：<strong>交流</strong>。</p>\n</blockquote>\n<p>Celeste Headlee:</p>\n<blockquote>\n<p>Everybody is an expert in something</p>\n</blockquote>\n<p>Bill Nye:</p>\n<blockquote>\n<p>Everyone you will ever meet knows something you don’t</p>\n</blockquote>\n<p>African Proverb</p>\n<blockquote>\n<p>If you want to go fast, go clone.<br>If you want to go far, go together.</p>\n</blockquote>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>交流、交流、交流。</li>\n<li>虚心向其他学员学习。</li>\n<li>永远鼓励身边的人，哪怕多少有些盲目。</li>\n<li>魔改大赛不只是一场比赛，而是一次自我升级的好机会，享受过程，把所有的注意力放在一个东西上面：<strong>成长</strong>。</li>\n</ul>\n"},{"_content":"# nil?、empty?、blank?的区别\n\n`nil?`的作用：判断是否为`nil`。\n\n例子：\n\n```basic\n> nul.nil?  \n=> true\n```\n\n`empty?`: 用来判断`String`、`Array`、`Object`是否为空，用这个判断`nil`和`0`会报错。\n\n```basic\n> “”.empty?  \n=> true\n\n> [].empty?  \n=> true\n\n> {}.empty?  \n=> true\n\n> 0.empty?  \n=> NoMethodError: undefined method `empty?' for 0:Fixnum\n\n> nil.empty? \n=> NoMethodError: undefined method `empty?' for nil:NilClass\n```\n\n`blank?` 可以判断所有为空的情况，包括`nil`和`0`。\n\n```basic\n> “”.blank?  \n=> true\n\n> [].blank?  \n=> true\n\n> {}.blank?  \n=> true\n\n> 0.blank?  \n=> true\n\n> nil.blank? \n=> true\n```\n\n总结：用`blank?`判断是否为空是最合适的，因为它的适用范围更广。","source":"_drafts/2017-02-07-blank.md","raw":"# nil?、empty?、blank?的区别\n\n`nil?`的作用：判断是否为`nil`。\n\n例子：\n\n```basic\n> nul.nil?  \n=> true\n```\n\n`empty?`: 用来判断`String`、`Array`、`Object`是否为空，用这个判断`nil`和`0`会报错。\n\n```basic\n> “”.empty?  \n=> true\n\n> [].empty?  \n=> true\n\n> {}.empty?  \n=> true\n\n> 0.empty?  \n=> NoMethodError: undefined method `empty?' for 0:Fixnum\n\n> nil.empty? \n=> NoMethodError: undefined method `empty?' for nil:NilClass\n```\n\n`blank?` 可以判断所有为空的情况，包括`nil`和`0`。\n\n```basic\n> “”.blank?  \n=> true\n\n> [].blank?  \n=> true\n\n> {}.blank?  \n=> true\n\n> 0.blank?  \n=> true\n\n> nil.blank? \n=> true\n```\n\n总结：用`blank?`判断是否为空是最合适的，因为它的适用范围更广。","slug":"2017-02-07-blank","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9f0007fsony4wbu4vs","content":"<h1 id=\"nil-、empty-、blank-的区别\"><a href=\"#nil-、empty-、blank-的区别\" class=\"headerlink\" title=\"nil?、empty?、blank?的区别\"></a>nil?、empty?、blank?的区别</h1><p><code>nil?</code>的作用：判断是否为<code>nil</code>。</p>\n<p>例子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; nul.nil?  </span><br><span class=\"line\">=&gt; true</span><br></pre></td></tr></table></figure>\n<p><code>empty?</code>: 用来判断<code>String</code>、<code>Array</code>、<code>Object</code>是否为空，用这个判断<code>nil</code>和<code>0</code>会报错。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; “”.empty?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; [].empty?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; &#123;&#125;.empty?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 0.empty?  </span><br><span class=\"line\">=&gt; NoMethodError: undefined method `empty?' for 0:Fixnum</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; nil.empty? </span><br><span class=\"line\">=&gt; NoMethodError: undefined method `empty?' for nil:NilClass</span><br></pre></td></tr></table></figure>\n<p><code>blank?</code> 可以判断所有为空的情况，包括<code>nil</code>和<code>0</code>。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; “”.blank?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; [].blank?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; &#123;&#125;.blank?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 0.blank?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; nil.blank? </span><br><span class=\"line\">=&gt; true</span><br></pre></td></tr></table></figure>\n<p>总结：用<code>blank?</code>判断是否为空是最合适的，因为它的适用范围更广。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"nil-、empty-、blank-的区别\"><a href=\"#nil-、empty-、blank-的区别\" class=\"headerlink\" title=\"nil?、empty?、blank?的区别\"></a>nil?、empty?、blank?的区别</h1><p><code>nil?</code>的作用：判断是否为<code>nil</code>。</p>\n<p>例子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; nul.nil?  </span><br><span class=\"line\">=&gt; true</span><br></pre></td></tr></table></figure>\n<p><code>empty?</code>: 用来判断<code>String</code>、<code>Array</code>、<code>Object</code>是否为空，用这个判断<code>nil</code>和<code>0</code>会报错。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; “”.empty?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; [].empty?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; &#123;&#125;.empty?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 0.empty?  </span><br><span class=\"line\">=&gt; NoMethodError: undefined method `empty?' for 0:Fixnum</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; nil.empty? </span><br><span class=\"line\">=&gt; NoMethodError: undefined method `empty?' for nil:NilClass</span><br></pre></td></tr></table></figure>\n<p><code>blank?</code> 可以判断所有为空的情况，包括<code>nil</code>和<code>0</code>。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; “”.blank?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; [].blank?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; &#123;&#125;.blank?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 0.blank?  </span><br><span class=\"line\">=&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; nil.blank? </span><br><span class=\"line\">=&gt; true</span><br></pre></td></tr></table></figure>\n<p>总结：用<code>blank?</code>判断是否为空是最合适的，因为它的适用范围更广。</p>\n"},{"_content":"# helper_method","source":"_drafts/2017-02-07-helper_method.md","raw":"# helper_method","slug":"2017-02-07-helper_method","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9h0008fsonoekgudbx","content":"<h1 id=\"helper-method\"><a href=\"#helper-method\" class=\"headerlink\" title=\"helper_method\"></a>helper_method</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"helper-method\"><a href=\"#helper-method\" class=\"headerlink\" title=\"helper_method\"></a>helper_method</h1>"},{"_content":"# ||= 是什么?\n\n```ruby\n@a ||= b\n```\n\n实际上等同于\n\n```ruby\n@a = @a || b\n```\n\n这其实就是一个`||`（\u0010或）运算符。意思是「如果`@a`不为`nil`，那就用`@a`，否则用后面那个」，举一几个例子：\n\n`1 || 2`的结果为1\n\n`nil || 2`的结果为2\n\n同样的，也可以有2个以上的运算符\n\n`nil || nil || 2`的结果为2\n\n","source":"_drafts/2017-02-07-or.md","raw":"# ||= 是什么?\n\n```ruby\n@a ||= b\n```\n\n实际上等同于\n\n```ruby\n@a = @a || b\n```\n\n这其实就是一个`||`（\u0010或）运算符。意思是「如果`@a`不为`nil`，那就用`@a`，否则用后面那个」，举一几个例子：\n\n`1 || 2`的结果为1\n\n`nil || 2`的结果为2\n\n同样的，也可以有2个以上的运算符\n\n`nil || nil || 2`的结果为2\n\n","slug":"2017-02-07-or","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9i0009fsondquwcle2","content":"<h1 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"||= 是什么?\"></a>||= 是什么?</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@a <span class=\"params\">||</span>= b</span><br></pre></td></tr></table></figure>\n<p>实际上等同于</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@a = @a <span class=\"params\">||</span> b</span><br></pre></td></tr></table></figure>\n<p>这其实就是一个<code>||</code>（\u0010或）运算符。意思是「如果<code>@a</code>不为<code>nil</code>，那就用<code>@a</code>，否则用后面那个」，举一几个例子：</p>\n<p><code>1 || 2</code>的结果为1</p>\n<p><code>nil || 2</code>的结果为2</p>\n<p>同样的，也可以有2个以上的运算符</p>\n<p><code>nil || nil || 2</code>的结果为2</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"||= 是什么?\"></a>||= 是什么?</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@a <span class=\"params\">||</span>= b</span><br></pre></td></tr></table></figure>\n<p>实际上等同于</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@a = @a <span class=\"params\">||</span> b</span><br></pre></td></tr></table></figure>\n<p>这其实就是一个<code>||</code>（\u0010或）运算符。意思是「如果<code>@a</code>不为<code>nil</code>，那就用<code>@a</code>，否则用后面那个」，举一几个例子：</p>\n<p><code>1 || 2</code>的结果为1</p>\n<p><code>nil || 2</code>的结果为2</p>\n<p>同样的，也可以有2个以上的运算符</p>\n<p><code>nil || nil || 2</code>的结果为2</p>\n"},{"_content":"## Objective \n\n关于今天的课程, 你记得什么? 今天学习「购物车实做」。\n\n完成了什么?  购物车的实作，包括加入购物车、查看购物车、改变商品数量、计算总价、下单。\n\n## Reflective \n\n你要如何形容今天的情绪？ \n\n今天的高峰是什么? 学到了「德雷福斯模型」，知道自己目前所处的阶段，目标更明确了！\n\n## Interpretive \n\n今天学到了什么? \n\n- 弄清楚了nil?、empty?、blank?的区别。\n- 知道`||=`到底是什么意思。\n- 「德雷福斯模型」：新手、高级新手、胜任者、精通者、专家。\n- 几乎各领域最多人数是高级新手，超过50%的人只有高级新手的水平。\n- 几乎绝大多数的工作，不会超过胜任者阶段。\n- 精通者的比例大概是该领域的10%\n- 专家人数大概是该领域的1%一下。\n\n今天一个重要的领悟是什么? 通过练习专家设计的高频小套路，你不需要4000小时，只需要400小时以下，就可以达到高级新手的水平。\n\n## Decisional \n\n作业进度不错。明天做「订单实做」","source":"_drafts/2017-02-07-orid.md","raw":"## Objective \n\n关于今天的课程, 你记得什么? 今天学习「购物车实做」。\n\n完成了什么?  购物车的实作，包括加入购物车、查看购物车、改变商品数量、计算总价、下单。\n\n## Reflective \n\n你要如何形容今天的情绪？ \n\n今天的高峰是什么? 学到了「德雷福斯模型」，知道自己目前所处的阶段，目标更明确了！\n\n## Interpretive \n\n今天学到了什么? \n\n- 弄清楚了nil?、empty?、blank?的区别。\n- 知道`||=`到底是什么意思。\n- 「德雷福斯模型」：新手、高级新手、胜任者、精通者、专家。\n- 几乎各领域最多人数是高级新手，超过50%的人只有高级新手的水平。\n- 几乎绝大多数的工作，不会超过胜任者阶段。\n- 精通者的比例大概是该领域的10%\n- 专家人数大概是该领域的1%一下。\n\n今天一个重要的领悟是什么? 通过练习专家设计的高频小套路，你不需要4000小时，只需要400小时以下，就可以达到高级新手的水平。\n\n## Decisional \n\n作业进度不错。明天做「订单实做」","slug":"2017-02-07-orid","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9j000afsoni5civk8d","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>关于今天的课程, 你记得什么? 今天学习「购物车实做」。</p>\n<p>完成了什么?  购物车的实作，包括加入购物车、查看购物车、改变商品数量、计算总价、下单。</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>你要如何形容今天的情绪？ </p>\n<p>今天的高峰是什么? 学到了「德雷福斯模型」，知道自己目前所处的阶段，目标更明确了！</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p>今天学到了什么? </p>\n<ul>\n<li>弄清楚了nil?、empty?、blank?的区别。</li>\n<li>知道<code>||=</code>到底是什么意思。</li>\n<li>「德雷福斯模型」：新手、高级新手、胜任者、精通者、专家。</li>\n<li>几乎各领域最多人数是高级新手，超过50%的人只有高级新手的水平。</li>\n<li>几乎绝大多数的工作，不会超过胜任者阶段。</li>\n<li>精通者的比例大概是该领域的10%</li>\n<li>专家人数大概是该领域的1%一下。</li>\n</ul>\n<p>今天一个重要的领悟是什么? 通过练习专家设计的高频小套路，你不需要4000小时，只需要400小时以下，就可以达到高级新手的水平。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>作业进度不错。明天做「订单实做」</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>关于今天的课程, 你记得什么? 今天学习「购物车实做」。</p>\n<p>完成了什么?  购物车的实作，包括加入购物车、查看购物车、改变商品数量、计算总价、下单。</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>你要如何形容今天的情绪？ </p>\n<p>今天的高峰是什么? 学到了「德雷福斯模型」，知道自己目前所处的阶段，目标更明确了！</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p>今天学到了什么? </p>\n<ul>\n<li>弄清楚了nil?、empty?、blank?的区别。</li>\n<li>知道<code>||=</code>到底是什么意思。</li>\n<li>「德雷福斯模型」：新手、高级新手、胜任者、精通者、专家。</li>\n<li>几乎各领域最多人数是高级新手，超过50%的人只有高级新手的水平。</li>\n<li>几乎绝大多数的工作，不会超过胜任者阶段。</li>\n<li>精通者的比例大概是该领域的10%</li>\n<li>专家人数大概是该领域的1%一下。</li>\n</ul>\n<p>今天一个重要的领悟是什么? 通过练习专家设计的高频小套路，你不需要4000小时，只需要400小时以下，就可以达到高级新手的水平。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>作业进度不错。明天做「订单实做」</p>\n"},{"_content":"# session是什么？\n\n当你登录一个网站时，你刷新页面，是一直有登录状态的，而存放这个状态有两个地方，一个在浏览器，我们称之为cookie，一个在后端服务器，我们称为session。\n\n当我们关掉浏览器，或者隔天再打开页面时，可能网站需要我们重新登录，这是因为session存放的信息是有时间限制的。也就是说，它只是一个临时存放区。\n\n在进行后端开发时，我们可以把一些和用户有关的临时变量存放在session中。比如说「购物车」，你把用户的购物车存在session中，用\u0010户就可以在你这个网站的任何地方，查看自己以购买的商品。","source":"_drafts/2017-02-07-session.md","raw":"# session是什么？\n\n当你登录一个网站时，你刷新页面，是一直有登录状态的，而存放这个状态有两个地方，一个在浏览器，我们称之为cookie，一个在后端服务器，我们称为session。\n\n当我们关掉浏览器，或者隔天再打开页面时，可能网站需要我们重新登录，这是因为session存放的信息是有时间限制的。也就是说，它只是一个临时存放区。\n\n在进行后端开发时，我们可以把一些和用户有关的临时变量存放在session中。比如说「购物车」，你把用户的购物车存在session中，用\u0010户就可以在你这个网站的任何地方，查看自己以购买的商品。","slug":"2017-02-07-session","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9k000bfsonxfsfc09f","content":"<h1 id=\"session是什么？\"><a href=\"#session是什么？\" class=\"headerlink\" title=\"session是什么？\"></a>session是什么？</h1><p>当你登录一个网站时，你刷新页面，是一直有登录状态的，而存放这个状态有两个地方，一个在浏览器，我们称之为cookie，一个在后端服务器，我们称为session。</p>\n<p>当我们关掉浏览器，或者隔天再打开页面时，可能网站需要我们重新登录，这是因为session存放的信息是有时间限制的。也就是说，它只是一个临时存放区。</p>\n<p>在进行后端开发时，我们可以把一些和用户有关的临时变量存放在session中。比如说「购物车」，你把用户的购物车存在session中，用\u0010户就可以在你这个网站的任何地方，查看自己以购买的商品。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"session是什么？\"><a href=\"#session是什么？\" class=\"headerlink\" title=\"session是什么？\"></a>session是什么？</h1><p>当你登录一个网站时，你刷新页面，是一直有登录状态的，而存放这个状态有两个地方，一个在浏览器，我们称之为cookie，一个在后端服务器，我们称为session。</p>\n<p>当我们关掉浏览器，或者隔天再打开页面时，可能网站需要我们重新登录，这是因为session存放的信息是有时间限制的。也就是说，它只是一个临时存放区。</p>\n<p>在进行后端开发时，我们可以把一些和用户有关的临时变量存放在session中。比如说「购物车」，你把用户的购物车存在session中，用\u0010户就可以在你这个网站的任何地方，查看自己以购买的商品。</p>\n"},{"_content":"## helper_method\n\nhelper的方法可以在view直接调用，而controller就不行。\n\n那么，怎么让view访问到controller定义的hepler呢？\n\n在controller中用`helper_method`定义属性，就可以在view中使用。\n\n```ruby\nclass ApplicationController\n  helper_method :current_cart\n  def current_cart\n    cart = Cart.find(session[:cart_id])\n    return cart\n  end\nend\n```\n\n## view_context\n\n在controller中不能直接调用helper方法，那应该通过什么方式调用呢？\n\n使用`view_context`。\n\n```ruby\nclass ProductsController\n  def show\n    @page_description =  view_context.truncate(@product.desc, :lenght => 50 )\n  end\nend\n```\n\n## 总结\n\n不过还是建议controller和helper之间不要相互调用方法，让view归view，controller归controller，这样就不会太乱。\n\n[http://blog.xdite.net/posts/2014/06/16/helper-method-and-view-context](http://blog.xdite.net/posts/2014/06/16/helper-method-and-view-context)","source":"_drafts/2017-02-08-helper-method.md","raw":"## helper_method\n\nhelper的方法可以在view直接调用，而controller就不行。\n\n那么，怎么让view访问到controller定义的hepler呢？\n\n在controller中用`helper_method`定义属性，就可以在view中使用。\n\n```ruby\nclass ApplicationController\n  helper_method :current_cart\n  def current_cart\n    cart = Cart.find(session[:cart_id])\n    return cart\n  end\nend\n```\n\n## view_context\n\n在controller中不能直接调用helper方法，那应该通过什么方式调用呢？\n\n使用`view_context`。\n\n```ruby\nclass ProductsController\n  def show\n    @page_description =  view_context.truncate(@product.desc, :lenght => 50 )\n  end\nend\n```\n\n## 总结\n\n不过还是建议controller和helper之间不要相互调用方法，让view归view，controller归controller，这样就不会太乱。\n\n[http://blog.xdite.net/posts/2014/06/16/helper-method-and-view-context](http://blog.xdite.net/posts/2014/06/16/helper-method-and-view-context)","slug":"2017-02-08-helper-method","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9l000cfsonryenht6g","content":"<h2 id=\"helper-method\"><a href=\"#helper-method\" class=\"headerlink\" title=\"helper_method\"></a>helper_method</h2><p>helper的方法可以在view直接调用，而controller就不行。</p>\n<p>那么，怎么让view访问到controller定义的hepler呢？</p>\n<p>在controller中用<code>helper_method</code>定义属性，就可以在view中使用。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationController</span></span></span><br><span class=\"line\">  helper_method <span class=\"symbol\">:current_cart</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">current_cart</span></span></span><br><span class=\"line\">    cart = Cart.find(session[<span class=\"symbol\">:cart_id</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cart</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"view-context\"><a href=\"#view-context\" class=\"headerlink\" title=\"view_context\"></a>view_context</h2><p>在controller中不能直接调用helper方法，那应该通过什么方式调用呢？</p>\n<p>使用<code>view_context</code>。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductsController</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span></span></span><br><span class=\"line\">    @page_description =  view_context.truncate(@product.desc, <span class=\"symbol\">:lenght</span> =&gt; <span class=\"number\">50</span> )</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>不过还是建议controller和helper之间不要相互调用方法，让view归view，controller归controller，这样就不会太乱。</p>\n<p><a href=\"http://blog.xdite.net/posts/2014/06/16/helper-method-and-view-context\" target=\"_blank\" rel=\"noopener\">http://blog.xdite.net/posts/2014/06/16/helper-method-and-view-context</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"helper-method\"><a href=\"#helper-method\" class=\"headerlink\" title=\"helper_method\"></a>helper_method</h2><p>helper的方法可以在view直接调用，而controller就不行。</p>\n<p>那么，怎么让view访问到controller定义的hepler呢？</p>\n<p>在controller中用<code>helper_method</code>定义属性，就可以在view中使用。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationController</span></span></span><br><span class=\"line\">  helper_method <span class=\"symbol\">:current_cart</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">current_cart</span></span></span><br><span class=\"line\">    cart = Cart.find(session[<span class=\"symbol\">:cart_id</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cart</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"view-context\"><a href=\"#view-context\" class=\"headerlink\" title=\"view_context\"></a>view_context</h2><p>在controller中不能直接调用helper方法，那应该通过什么方式调用呢？</p>\n<p>使用<code>view_context</code>。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductsController</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span></span></span><br><span class=\"line\">    @page_description =  view_context.truncate(@product.desc, <span class=\"symbol\">:lenght</span> =&gt; <span class=\"number\">50</span> )</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>不过还是建议controller和helper之间不要相互调用方法，让view归view，controller归controller，这样就不会太乱。</p>\n<p><a href=\"http://blog.xdite.net/posts/2014/06/16/helper-method-and-view-context\" target=\"_blank\" rel=\"noopener\">http://blog.xdite.net/posts/2014/06/16/helper-method-and-view-context</a></p>\n"},{"_content":"# new 和 build 的区别\n\n查了文档之后知道了，原来new 和 build 的功能是完全一样的，只是别名不同而已。\n\nhttp://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-build\n\nhttp://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-new","source":"_drafts/2017-02-08-new-build.md","raw":"# new 和 build 的区别\n\n查了文档之后知道了，原来new 和 build 的功能是完全一样的，只是别名不同而已。\n\nhttp://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-build\n\nhttp://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-new","slug":"2017-02-08-new-build","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9m000dfsonjunzqvks","content":"<h1 id=\"new-和-build-的区别\"><a href=\"#new-和-build-的区别\" class=\"headerlink\" title=\"new 和 build 的区别\"></a>new 和 build 的区别</h1><p>查了文档之后知道了，原来new 和 build 的功能是完全一样的，只是别名不同而已。</p>\n<p><a href=\"http://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-build\" target=\"_blank\" rel=\"noopener\">http://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-build</a></p>\n<p><a href=\"http://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-new\" target=\"_blank\" rel=\"noopener\">http://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-new</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"new-和-build-的区别\"><a href=\"#new-和-build-的区别\" class=\"headerlink\" title=\"new 和 build 的区别\"></a>new 和 build 的区别</h1><p>查了文档之后知道了，原来new 和 build 的功能是完全一样的，只是别名不同而已。</p>\n<p><a href=\"http://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-build\" target=\"_blank\" rel=\"noopener\">http://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-build</a></p>\n<p><a href=\"http://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-new\" target=\"_blank\" rel=\"noopener\">http://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-new</a></p>\n"},{"_content":"Ruby 范围运算符\n\n`..`表示创建的范围包含起始值和结束值，比如：1..10 创建从 1 到 10 的范围。\n\n`…`表示创建的范围包含起始值，但不包含结束值，比如：1...10 创建从 1 到 9 的范围。","source":"_drafts/2017-02-08-ruby-range.md","raw":"Ruby 范围运算符\n\n`..`表示创建的范围包含起始值和结束值，比如：1..10 创建从 1 到 10 的范围。\n\n`…`表示创建的范围包含起始值，但不包含结束值，比如：1...10 创建从 1 到 9 的范围。","slug":"2017-02-08-ruby-range","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9q000efson4kosghoi","content":"<p>Ruby 范围运算符</p>\n<p><code>..</code>表示创建的范围包含起始值和结束值，比如：1..10 创建从 1 到 10 的范围。</p>\n<p><code>…</code>表示创建的范围包含起始值，但不包含结束值，比如：1…10 创建从 1 到 9 的范围。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Ruby 范围运算符</p>\n<p><code>..</code>表示创建的范围包含起始值和结束值，比如：1..10 创建从 1 到 10 的范围。</p>\n<p><code>…</code>表示创建的范围包含起始值，但不包含结束值，比如：1…10 创建从 1 到 9 的范围。</p>\n"},{"_content":"# collection 和 member 的区别\n\n我们先定义一下`member`和`collection`：\n\n- `member`：请求一个特定的资源，是单数，路径后面不带`s`\n- `collection`：获取一个集合，或者说列表，是复数，路径后面带`s`\n\n拿这段路由配置为例：\n\n```ruby\nresources :groups do\n  member do\n    post :join\n    post :quit\n  end\n\n  collection do\n    post :hot\n  end\nend\n```\n\n我们运行`rails routes`看一下\n\n![](https://ww3.sinaimg.cn/large/006tKfTcly1fckce3231jj31560asjuf.jpg)\n\n从图中可以看出来，`hot_groups`和`group_posts`是`collection`类型，而其他的是`member`类型。","source":"_drafts/Untitled.md","raw":"# collection 和 member 的区别\n\n我们先定义一下`member`和`collection`：\n\n- `member`：请求一个特定的资源，是单数，路径后面不带`s`\n- `collection`：获取一个集合，或者说列表，是复数，路径后面带`s`\n\n拿这段路由配置为例：\n\n```ruby\nresources :groups do\n  member do\n    post :join\n    post :quit\n  end\n\n  collection do\n    post :hot\n  end\nend\n```\n\n我们运行`rails routes`看一下\n\n![](https://ww3.sinaimg.cn/large/006tKfTcly1fckce3231jj31560asjuf.jpg)\n\n从图中可以看出来，`hot_groups`和`group_posts`是`collection`类型，而其他的是`member`类型。","slug":"Untitled","published":0,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9s000ffsont7dsdbhk","content":"<h1 id=\"collection-和-member-的区别\"><a href=\"#collection-和-member-的区别\" class=\"headerlink\" title=\"collection 和 member 的区别\"></a>collection 和 member 的区别</h1><p>我们先定义一下<code>member</code>和<code>collection</code>：</p>\n<ul>\n<li><code>member</code>：请求一个特定的资源，是单数，路径后面不带<code>s</code></li>\n<li><code>collection</code>：获取一个集合，或者说列表，是复数，路径后面带<code>s</code></li>\n</ul>\n<p>拿这段路由配置为例：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resources <span class=\"symbol\">:groups</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  member <span class=\"keyword\">do</span></span><br><span class=\"line\">    post <span class=\"symbol\">:join</span></span><br><span class=\"line\">    post <span class=\"symbol\">:quit</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  collection <span class=\"keyword\">do</span></span><br><span class=\"line\">    post <span class=\"symbol\">:hot</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>我们运行<code>rails routes</code>看一下</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tKfTcly1fckce3231jj31560asjuf.jpg\" alt=\"\"></p>\n<p>从图中可以看出来，<code>hot_groups</code>和<code>group_posts</code>是<code>collection</code>类型，而其他的是<code>member</code>类型。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"collection-和-member-的区别\"><a href=\"#collection-和-member-的区别\" class=\"headerlink\" title=\"collection 和 member 的区别\"></a>collection 和 member 的区别</h1><p>我们先定义一下<code>member</code>和<code>collection</code>：</p>\n<ul>\n<li><code>member</code>：请求一个特定的资源，是单数，路径后面不带<code>s</code></li>\n<li><code>collection</code>：获取一个集合，或者说列表，是复数，路径后面带<code>s</code></li>\n</ul>\n<p>拿这段路由配置为例：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resources <span class=\"symbol\">:groups</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  member <span class=\"keyword\">do</span></span><br><span class=\"line\">    post <span class=\"symbol\">:join</span></span><br><span class=\"line\">    post <span class=\"symbol\">:quit</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  collection <span class=\"keyword\">do</span></span><br><span class=\"line\">    post <span class=\"symbol\">:hot</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>我们运行<code>rails routes</code>看一下</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tKfTcly1fckce3231jj31560asjuf.jpg\" alt=\"\"></p>\n<p>从图中可以看出来，<code>hot_groups</code>和<code>group_posts</code>是<code>collection</code>类型，而其他的是<code>member</code>类型。</p>\n"},{"title":"Mac效率神器Alfred基本使用教程","_content":"\n![alfred](http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiARM8OAANCrlkfPIs956.png)\n\n[Alfred](https://www.alfredapp.com/)是一个用来提高效率的软件，可以快速启动软件、使用快捷方式搜索Mac上的文件和互联网上的各种资源，让你摆脱繁琐的重复工作，提高工作效率。   \n\nAlfred有着Spotlight很类似的功能，这是基本的功能，也是免费的，但之所以能被称为Mac神器的原因是它有着强大的Workflows功能，而这个则是收费的。本文主要介绍以上提到的两个功能。\n\n## 基本功能\n\n### 启动\n\n安装完Alfred之后，首先设置启动快捷键，点击顶部状态栏的小帽子，打开Preferences。\n\n![set shortcut](http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiAHzELAAGphnegZ_M906.png)\n\n根据我自己的习惯，我设置成 ⌥ + Space，然后就可以通过这个快捷键打开Alfred。\n\n### 快速打开App\n\n打开Alfred，输入App名称，比如“微信”\n\n![lunch app](http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtiAfRXyAAB2mhKqI5I059.png)\n\n然后回车，就可以打开微信。无论你想启动什么软件，只需要输入名称，而不需要去应用程序或者是Dock里面找。\n\n### 网页搜索\n\n打开Alfred，直接输入要搜索的内容，比如“新生大学”\n\n![search](http://file.do.yy.com/group3/M03/CD/61/tz0GSFdvvtiAEUo9AADwDwCw9qk657.png)\n\n可以看到有3个搜索选项，分别是Google，Amazon和Wikipedia，选择一个，按⏎（回车键），就能自动打开浏览器，并且显示搜索结果页面。\n\n### 查找文件\n\n打开Alfred，按一下空格键，输入文件名，比如“相片”（我的桌面有一张png图片，名称是相片）\n\n![find files](http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAVcQWAAB_TWdxSeU479.png)\n\n如果要打开图片，按⏎（回车键），如果要打开图片所在的目录，按⌘⏎（回车键）\n\n以上就是Alfred比较常用的基本功能，下面介绍一下强大的Workflows功能。\n\n## Workflows\n\nWorkflows实际上就是Alfred的插件，可以实现各种各样的功能。这个网站收集了很全的Workflows，[Alfred 2 Workflow List](http://alfredworkflow.com/)，可以到上面下载任何你所需要的Workflows。\n\n下载了之后，直接打开Workflows文件，然后点击import即可，安装完之后，可以打开Alfred查看所有的Workflows\n\n![workflows](http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAD9e6AAEeCVknPlQ818.png)\n\n基本上所有的Workflows用法都很类似，下面介绍几个我比较常用的Workflows，让大家了解具体的用法。\n\n### Baidu Weather（天气预报）\n\n![baidu weather](http://file.do.yy.com/group3/M00/CD/61/tz0GSFdvvtmAEBsNAAIKoiz1Vu0641.png)\n\n点击查看Baidu Weather这个Workflows，可以看到使用的命令是“tq”，所以，打开Alfred，输入“tq”\n\n<img class=\"img\" src=\"http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtmAP5KVAADyFlJTf7E838.png\">\n\n它会根据当前 IP 定位并查询当地天气。\n\n### Youdao Translate（有道词典）\n\n输入“yd”，然后敲空格，再输入要查询的单词，比如“calendar”\n\n![youdao translate](http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqADdSvAAGM3VXyNss824.png)\n\n### Express（快递）\n\n![express](http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqATuIvAAEfdNzNX70371.png)\n\n### TerminalFinder\n\n在当前路径下打开命令行\n\n![terminalFinder](http://file.do.yy.com/group3/M01/CD/61/tz0GSFdvvtqAICQUAABq9os5KqI488.png)\n\n简单快捷。\n\n## 总结\n\n以上简单地介绍Alfred的基本功能和Workflows，了解完之后，再花点时间下载需要的Workflows，就可以用起来了，实际上这就是Alfred的最少必要知识，已经能够减少大部分的鼠标操作和重复性操作。Alfred还有很多其他功能，有需要的可以参考官方文档，另外，有能力的还可以自己写Workflows。\n","source":"_posts/2016-06-27-alfred.md","raw":"---\ntitle: Mac效率神器Alfred基本使用教程\ncategories: 工具\ntags: Mac工具\n---\n\n![alfred](http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiARM8OAANCrlkfPIs956.png)\n\n[Alfred](https://www.alfredapp.com/)是一个用来提高效率的软件，可以快速启动软件、使用快捷方式搜索Mac上的文件和互联网上的各种资源，让你摆脱繁琐的重复工作，提高工作效率。   \n\nAlfred有着Spotlight很类似的功能，这是基本的功能，也是免费的，但之所以能被称为Mac神器的原因是它有着强大的Workflows功能，而这个则是收费的。本文主要介绍以上提到的两个功能。\n\n## 基本功能\n\n### 启动\n\n安装完Alfred之后，首先设置启动快捷键，点击顶部状态栏的小帽子，打开Preferences。\n\n![set shortcut](http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiAHzELAAGphnegZ_M906.png)\n\n根据我自己的习惯，我设置成 ⌥ + Space，然后就可以通过这个快捷键打开Alfred。\n\n### 快速打开App\n\n打开Alfred，输入App名称，比如“微信”\n\n![lunch app](http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtiAfRXyAAB2mhKqI5I059.png)\n\n然后回车，就可以打开微信。无论你想启动什么软件，只需要输入名称，而不需要去应用程序或者是Dock里面找。\n\n### 网页搜索\n\n打开Alfred，直接输入要搜索的内容，比如“新生大学”\n\n![search](http://file.do.yy.com/group3/M03/CD/61/tz0GSFdvvtiAEUo9AADwDwCw9qk657.png)\n\n可以看到有3个搜索选项，分别是Google，Amazon和Wikipedia，选择一个，按⏎（回车键），就能自动打开浏览器，并且显示搜索结果页面。\n\n### 查找文件\n\n打开Alfred，按一下空格键，输入文件名，比如“相片”（我的桌面有一张png图片，名称是相片）\n\n![find files](http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAVcQWAAB_TWdxSeU479.png)\n\n如果要打开图片，按⏎（回车键），如果要打开图片所在的目录，按⌘⏎（回车键）\n\n以上就是Alfred比较常用的基本功能，下面介绍一下强大的Workflows功能。\n\n## Workflows\n\nWorkflows实际上就是Alfred的插件，可以实现各种各样的功能。这个网站收集了很全的Workflows，[Alfred 2 Workflow List](http://alfredworkflow.com/)，可以到上面下载任何你所需要的Workflows。\n\n下载了之后，直接打开Workflows文件，然后点击import即可，安装完之后，可以打开Alfred查看所有的Workflows\n\n![workflows](http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAD9e6AAEeCVknPlQ818.png)\n\n基本上所有的Workflows用法都很类似，下面介绍几个我比较常用的Workflows，让大家了解具体的用法。\n\n### Baidu Weather（天气预报）\n\n![baidu weather](http://file.do.yy.com/group3/M00/CD/61/tz0GSFdvvtmAEBsNAAIKoiz1Vu0641.png)\n\n点击查看Baidu Weather这个Workflows，可以看到使用的命令是“tq”，所以，打开Alfred，输入“tq”\n\n<img class=\"img\" src=\"http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtmAP5KVAADyFlJTf7E838.png\">\n\n它会根据当前 IP 定位并查询当地天气。\n\n### Youdao Translate（有道词典）\n\n输入“yd”，然后敲空格，再输入要查询的单词，比如“calendar”\n\n![youdao translate](http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqADdSvAAGM3VXyNss824.png)\n\n### Express（快递）\n\n![express](http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqATuIvAAEfdNzNX70371.png)\n\n### TerminalFinder\n\n在当前路径下打开命令行\n\n![terminalFinder](http://file.do.yy.com/group3/M01/CD/61/tz0GSFdvvtqAICQUAABq9os5KqI488.png)\n\n简单快捷。\n\n## 总结\n\n以上简单地介绍Alfred的基本功能和Workflows，了解完之后，再花点时间下载需要的Workflows，就可以用起来了，实际上这就是Alfred的最少必要知识，已经能够减少大部分的鼠标操作和重复性操作。Alfred还有很多其他功能，有需要的可以参考官方文档，另外，有能力的还可以自己写Workflows。\n","slug":"2016-06-27-alfred","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9u000gfsonm77w6ny6","content":"<p><img src=\"http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiARM8OAANCrlkfPIs956.png\" alt=\"alfred\"></p>\n<p><a href=\"https://www.alfredapp.com/\" target=\"_blank\" rel=\"noopener\">Alfred</a>是一个用来提高效率的软件，可以快速启动软件、使用快捷方式搜索Mac上的文件和互联网上的各种资源，让你摆脱繁琐的重复工作，提高工作效率。   </p>\n<p>Alfred有着Spotlight很类似的功能，这是基本的功能，也是免费的，但之所以能被称为Mac神器的原因是它有着强大的Workflows功能，而这个则是收费的。本文主要介绍以上提到的两个功能。</p>\n<h2 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>安装完Alfred之后，首先设置启动快捷键，点击顶部状态栏的小帽子，打开Preferences。</p>\n<p><img src=\"http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiAHzELAAGphnegZ_M906.png\" alt=\"set shortcut\"></p>\n<p>根据我自己的习惯，我设置成 ⌥ + Space，然后就可以通过这个快捷键打开Alfred。</p>\n<h3 id=\"快速打开App\"><a href=\"#快速打开App\" class=\"headerlink\" title=\"快速打开App\"></a>快速打开App</h3><p>打开Alfred，输入App名称，比如“微信”</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtiAfRXyAAB2mhKqI5I059.png\" alt=\"lunch app\"></p>\n<p>然后回车，就可以打开微信。无论你想启动什么软件，只需要输入名称，而不需要去应用程序或者是Dock里面找。</p>\n<h3 id=\"网页搜索\"><a href=\"#网页搜索\" class=\"headerlink\" title=\"网页搜索\"></a>网页搜索</h3><p>打开Alfred，直接输入要搜索的内容，比如“新生大学”</p>\n<p><img src=\"http://file.do.yy.com/group3/M03/CD/61/tz0GSFdvvtiAEUo9AADwDwCw9qk657.png\" alt=\"search\"></p>\n<p>可以看到有3个搜索选项，分别是Google，Amazon和Wikipedia，选择一个，按⏎（回车键），就能自动打开浏览器，并且显示搜索结果页面。</p>\n<h3 id=\"查找文件\"><a href=\"#查找文件\" class=\"headerlink\" title=\"查找文件\"></a>查找文件</h3><p>打开Alfred，按一下空格键，输入文件名，比如“相片”（我的桌面有一张png图片，名称是相片）</p>\n<p><img src=\"http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAVcQWAAB_TWdxSeU479.png\" alt=\"find files\"></p>\n<p>如果要打开图片，按⏎（回车键），如果要打开图片所在的目录，按⌘⏎（回车键）</p>\n<p>以上就是Alfred比较常用的基本功能，下面介绍一下强大的Workflows功能。</p>\n<h2 id=\"Workflows\"><a href=\"#Workflows\" class=\"headerlink\" title=\"Workflows\"></a>Workflows</h2><p>Workflows实际上就是Alfred的插件，可以实现各种各样的功能。这个网站收集了很全的Workflows，<a href=\"http://alfredworkflow.com/\" target=\"_blank\" rel=\"noopener\">Alfred 2 Workflow List</a>，可以到上面下载任何你所需要的Workflows。</p>\n<p>下载了之后，直接打开Workflows文件，然后点击import即可，安装完之后，可以打开Alfred查看所有的Workflows</p>\n<p><img src=\"http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAD9e6AAEeCVknPlQ818.png\" alt=\"workflows\"></p>\n<p>基本上所有的Workflows用法都很类似，下面介绍几个我比较常用的Workflows，让大家了解具体的用法。</p>\n<h3 id=\"Baidu-Weather（天气预报）\"><a href=\"#Baidu-Weather（天气预报）\" class=\"headerlink\" title=\"Baidu Weather（天气预报）\"></a>Baidu Weather（天气预报）</h3><p><img src=\"http://file.do.yy.com/group3/M00/CD/61/tz0GSFdvvtmAEBsNAAIKoiz1Vu0641.png\" alt=\"baidu weather\"></p>\n<p>点击查看Baidu Weather这个Workflows，可以看到使用的命令是“tq”，所以，打开Alfred，输入“tq”</p>\n<p><img class=\"img\" src=\"http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtmAP5KVAADyFlJTf7E838.png\"></p>\n<p>它会根据当前 IP 定位并查询当地天气。</p>\n<h3 id=\"Youdao-Translate（有道词典）\"><a href=\"#Youdao-Translate（有道词典）\" class=\"headerlink\" title=\"Youdao Translate（有道词典）\"></a>Youdao Translate（有道词典）</h3><p>输入“yd”，然后敲空格，再输入要查询的单词，比如“calendar”</p>\n<p><img src=\"http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqADdSvAAGM3VXyNss824.png\" alt=\"youdao translate\"></p>\n<h3 id=\"Express（快递）\"><a href=\"#Express（快递）\" class=\"headerlink\" title=\"Express（快递）\"></a>Express（快递）</h3><p><img src=\"http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqATuIvAAEfdNzNX70371.png\" alt=\"express\"></p>\n<h3 id=\"TerminalFinder\"><a href=\"#TerminalFinder\" class=\"headerlink\" title=\"TerminalFinder\"></a>TerminalFinder</h3><p>在当前路径下打开命令行</p>\n<p><img src=\"http://file.do.yy.com/group3/M01/CD/61/tz0GSFdvvtqAICQUAABq9os5KqI488.png\" alt=\"terminalFinder\"></p>\n<p>简单快捷。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上简单地介绍Alfred的基本功能和Workflows，了解完之后，再花点时间下载需要的Workflows，就可以用起来了，实际上这就是Alfred的最少必要知识，已经能够减少大部分的鼠标操作和重复性操作。Alfred还有很多其他功能，有需要的可以参考官方文档，另外，有能力的还可以自己写Workflows。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiARM8OAANCrlkfPIs956.png\" alt=\"alfred\"></p>\n<p><a href=\"https://www.alfredapp.com/\" target=\"_blank\" rel=\"noopener\">Alfred</a>是一个用来提高效率的软件，可以快速启动软件、使用快捷方式搜索Mac上的文件和互联网上的各种资源，让你摆脱繁琐的重复工作，提高工作效率。   </p>\n<p>Alfred有着Spotlight很类似的功能，这是基本的功能，也是免费的，但之所以能被称为Mac神器的原因是它有着强大的Workflows功能，而这个则是收费的。本文主要介绍以上提到的两个功能。</p>\n<h2 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>安装完Alfred之后，首先设置启动快捷键，点击顶部状态栏的小帽子，打开Preferences。</p>\n<p><img src=\"http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiAHzELAAGphnegZ_M906.png\" alt=\"set shortcut\"></p>\n<p>根据我自己的习惯，我设置成 ⌥ + Space，然后就可以通过这个快捷键打开Alfred。</p>\n<h3 id=\"快速打开App\"><a href=\"#快速打开App\" class=\"headerlink\" title=\"快速打开App\"></a>快速打开App</h3><p>打开Alfred，输入App名称，比如“微信”</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtiAfRXyAAB2mhKqI5I059.png\" alt=\"lunch app\"></p>\n<p>然后回车，就可以打开微信。无论你想启动什么软件，只需要输入名称，而不需要去应用程序或者是Dock里面找。</p>\n<h3 id=\"网页搜索\"><a href=\"#网页搜索\" class=\"headerlink\" title=\"网页搜索\"></a>网页搜索</h3><p>打开Alfred，直接输入要搜索的内容，比如“新生大学”</p>\n<p><img src=\"http://file.do.yy.com/group3/M03/CD/61/tz0GSFdvvtiAEUo9AADwDwCw9qk657.png\" alt=\"search\"></p>\n<p>可以看到有3个搜索选项，分别是Google，Amazon和Wikipedia，选择一个，按⏎（回车键），就能自动打开浏览器，并且显示搜索结果页面。</p>\n<h3 id=\"查找文件\"><a href=\"#查找文件\" class=\"headerlink\" title=\"查找文件\"></a>查找文件</h3><p>打开Alfred，按一下空格键，输入文件名，比如“相片”（我的桌面有一张png图片，名称是相片）</p>\n<p><img src=\"http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAVcQWAAB_TWdxSeU479.png\" alt=\"find files\"></p>\n<p>如果要打开图片，按⏎（回车键），如果要打开图片所在的目录，按⌘⏎（回车键）</p>\n<p>以上就是Alfred比较常用的基本功能，下面介绍一下强大的Workflows功能。</p>\n<h2 id=\"Workflows\"><a href=\"#Workflows\" class=\"headerlink\" title=\"Workflows\"></a>Workflows</h2><p>Workflows实际上就是Alfred的插件，可以实现各种各样的功能。这个网站收集了很全的Workflows，<a href=\"http://alfredworkflow.com/\" target=\"_blank\" rel=\"noopener\">Alfred 2 Workflow List</a>，可以到上面下载任何你所需要的Workflows。</p>\n<p>下载了之后，直接打开Workflows文件，然后点击import即可，安装完之后，可以打开Alfred查看所有的Workflows</p>\n<p><img src=\"http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAD9e6AAEeCVknPlQ818.png\" alt=\"workflows\"></p>\n<p>基本上所有的Workflows用法都很类似，下面介绍几个我比较常用的Workflows，让大家了解具体的用法。</p>\n<h3 id=\"Baidu-Weather（天气预报）\"><a href=\"#Baidu-Weather（天气预报）\" class=\"headerlink\" title=\"Baidu Weather（天气预报）\"></a>Baidu Weather（天气预报）</h3><p><img src=\"http://file.do.yy.com/group3/M00/CD/61/tz0GSFdvvtmAEBsNAAIKoiz1Vu0641.png\" alt=\"baidu weather\"></p>\n<p>点击查看Baidu Weather这个Workflows，可以看到使用的命令是“tq”，所以，打开Alfred，输入“tq”</p>\n<p><img class=\"img\" src=\"http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtmAP5KVAADyFlJTf7E838.png\"></p>\n<p>它会根据当前 IP 定位并查询当地天气。</p>\n<h3 id=\"Youdao-Translate（有道词典）\"><a href=\"#Youdao-Translate（有道词典）\" class=\"headerlink\" title=\"Youdao Translate（有道词典）\"></a>Youdao Translate（有道词典）</h3><p>输入“yd”，然后敲空格，再输入要查询的单词，比如“calendar”</p>\n<p><img src=\"http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqADdSvAAGM3VXyNss824.png\" alt=\"youdao translate\"></p>\n<h3 id=\"Express（快递）\"><a href=\"#Express（快递）\" class=\"headerlink\" title=\"Express（快递）\"></a>Express（快递）</h3><p><img src=\"http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqATuIvAAEfdNzNX70371.png\" alt=\"express\"></p>\n<h3 id=\"TerminalFinder\"><a href=\"#TerminalFinder\" class=\"headerlink\" title=\"TerminalFinder\"></a>TerminalFinder</h3><p>在当前路径下打开命令行</p>\n<p><img src=\"http://file.do.yy.com/group3/M01/CD/61/tz0GSFdvvtqAICQUAABq9os5KqI488.png\" alt=\"terminalFinder\"></p>\n<p>简单快捷。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上简单地介绍Alfred的基本功能和Workflows，了解完之后，再花点时间下载需要的Workflows，就可以用起来了，实际上这就是Alfred的最少必要知识，已经能够减少大部分的鼠标操作和重复性操作。Alfred还有很多其他功能，有需要的可以参考官方文档，另外，有能力的还可以自己写Workflows。</p>\n"},{"title":"The Cheatsheets for Mocha","_content":"\n### Getting Started\n\n\t$ npm install -g mocha\n\t$ mocha // 默认test目录下的测试脚本\n\n\n### Usage\n\n\t--recursive                             include sub directories\n\t--reporters                             display available reporters\n\t-w, --watch                             watch files for changes\n\t-b, --bail                              bail after first test failure\n\t--compilers <ext>:<module>,...          use the given module(s) to compile files\n\t-r, --require <name>                    require the given module\n\n### ES6测试\n\n运行测试之前，需要先用Babel转码。\n\n\t$ npm install babel-core babel-preset-es2015 --save-dev\n\n让Babel对Iterator、Generator、Promise、Map、Set等全局对象转码\n\n\t$ npm install babel-polyfill --save\n\n在项目目录下新建一个.babelrc配置文件\n\n\t{\n\t    \"presets\": [ \"es2015\" ]\n\t}\n\n\n运行mocha命令，加上`--compilers`\n\n\t$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register","source":"_posts/2016-06-30-mocha-babel.md","raw":"---\ntitle: The Cheatsheets for Mocha\ncategories: Javascript\ntags: [单元测试]\n---\n\n### Getting Started\n\n\t$ npm install -g mocha\n\t$ mocha // 默认test目录下的测试脚本\n\n\n### Usage\n\n\t--recursive                             include sub directories\n\t--reporters                             display available reporters\n\t-w, --watch                             watch files for changes\n\t-b, --bail                              bail after first test failure\n\t--compilers <ext>:<module>,...          use the given module(s) to compile files\n\t-r, --require <name>                    require the given module\n\n### ES6测试\n\n运行测试之前，需要先用Babel转码。\n\n\t$ npm install babel-core babel-preset-es2015 --save-dev\n\n让Babel对Iterator、Generator、Promise、Map、Set等全局对象转码\n\n\t$ npm install babel-polyfill --save\n\n在项目目录下新建一个.babelrc配置文件\n\n\t{\n\t    \"presets\": [ \"es2015\" ]\n\t}\n\n\n运行mocha命令，加上`--compilers`\n\n\t$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register","slug":"2016-06-30-mocha-babel","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9w000hfsonkgf4v54h","content":"<h3 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h3><pre><code>$ npm install -g mocha\n$ mocha // 默认test目录下的测试脚本\n</code></pre><h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><pre><code>--recursive                             include sub directories\n--reporters                             display available reporters\n-w, --watch                             watch files for changes\n-b, --bail                              bail after first test failure\n--compilers &lt;ext&gt;:&lt;module&gt;,...          use the given module(s) to compile files\n-r, --require &lt;name&gt;                    require the given module\n</code></pre><h3 id=\"ES6测试\"><a href=\"#ES6测试\" class=\"headerlink\" title=\"ES6测试\"></a>ES6测试</h3><p>运行测试之前，需要先用Babel转码。</p>\n<pre><code>$ npm install babel-core babel-preset-es2015 --save-dev\n</code></pre><p>让Babel对Iterator、Generator、Promise、Map、Set等全局对象转码</p>\n<pre><code>$ npm install babel-polyfill --save\n</code></pre><p>在项目目录下新建一个.babelrc配置文件</p>\n<pre><code>{\n    &quot;presets&quot;: [ &quot;es2015&quot; ]\n}\n</code></pre><p>运行mocha命令，加上<code>--compilers</code></p>\n<pre><code>$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h3><pre><code>$ npm install -g mocha\n$ mocha // 默认test目录下的测试脚本\n</code></pre><h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><pre><code>--recursive                             include sub directories\n--reporters                             display available reporters\n-w, --watch                             watch files for changes\n-b, --bail                              bail after first test failure\n--compilers &lt;ext&gt;:&lt;module&gt;,...          use the given module(s) to compile files\n-r, --require &lt;name&gt;                    require the given module\n</code></pre><h3 id=\"ES6测试\"><a href=\"#ES6测试\" class=\"headerlink\" title=\"ES6测试\"></a>ES6测试</h3><p>运行测试之前，需要先用Babel转码。</p>\n<pre><code>$ npm install babel-core babel-preset-es2015 --save-dev\n</code></pre><p>让Babel对Iterator、Generator、Promise、Map、Set等全局对象转码</p>\n<pre><code>$ npm install babel-polyfill --save\n</code></pre><p>在项目目录下新建一个.babelrc配置文件</p>\n<pre><code>{\n    &quot;presets&quot;: [ &quot;es2015&quot; ]\n}\n</code></pre><p>运行mocha命令，加上<code>--compilers</code></p>\n<pre><code>$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register\n</code></pre>"},{"title":"Vuex使用总结","_content":"\n## Vuex是什么?\n> Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。\n\n## 什么情况下使用Vuex？\n当你的应用规模比较小的时候，你并不需要使用Vuex，因为在按照Vuex规定的格式来规划文件以及书写规范还是需要花一些时间和精力。对于中型以上规模的SPA，有很多很多的组件，彼此之间相互通信，这时候，Vuex就可以发挥很大的作用。\n\n## 没有使用Vuex的情况下，组件之间是如何通信的?\n这种情况会有两种情景：\n\n> 父子组件之间的通信\n> 同级子组件之间的通信\n\n第一种的解决方法是使用Props传参数，将父组件的数据传递给子组件，反过来，子组件也可以改变传入的参数，进而改变父组件的数据。\n\n第二中解决方法就比较繁琐了，数据的流向是，子组件 -\\> 父组件 -\\> 另外一个子组件。可以想象，当应用规模变大时，组件之间数据的传递会越来越复杂，如果在某个环节出了bug，可能需要花费很大的精力才能定位。而且，这也会导致子组件之间紧密耦合，导致这些组件没法被复用。\n\n也就是说，如果你的应用很多都是父子组件之间的通信，那么往往比较简单，暂时可以不考虑加入Vuex，但如果是很多同级子组件之间的通信，那就非常需要考虑加入Vuex来让你有条不紊地处理错综复杂的通信。\n\n## 一个简单的例子\nVuex官方文档给出了一份很详细的[入门教程][1]，其中的例子 -- 计数器的流程图是这样的：\n\n![][image-1]\n\n这就是Vuex的执行流程，用户操作产生一个action，然后dispatch到Mutation函数，Mutation函数根据这个dispatch的描述信息去执行对应的操作，同时，这个dispatch也可以传递一些额外的参数。最终通过Mutation函数对Store进行修改，**也只能通过这种方式修改Store**，保证了单一控制源。然后可以通过Getter函数去读取Store里面的数据。\n\n我们在开发时的步骤就是：\n> 1. 在store里里面声明所需要的数据\n> 2. 在Mutation里面注册一个函数，也就是一个描述语\n> 3. 在actions里面注册一个action，并dispatch对应的事件\n> 4. 将action绑定到页面的组件上\n> 5. 完毕！\n\n另外，使用vuejs开发时，有一个不可或缺的工具，[vue-devtools][2]，可以在工具栏中实时地观察vm的数据，可以**查看所有dispatch的记录**，这样一来，你对于应用的所有状态了如指掌。\n\n![][image-2]\n\n## 总结\n> 1. 整个应用的数据流是单向的\n> 2. actions 除了分发 mutations 应当尽量避免其他副作用。\n> 3. mutation 必须是同步函数，将全部的异步操作都放在actions中。所有类似数据获取的异步操作细节都应封装在 actions 里面。\n\n[1]:\thttp://vuex.vuejs.org/zh-cn/tutorial.html\n[2]:\thttps://github.com/vuejs/vue-devtools\n\n[image-1]:\thttp://file.do.yy.com/group3/M04/CD/93/tz0GSFeOMj2AC5iPAACKAQnp38Q432.png\n[image-2]:\thttp://file.do.yy.com/group3/M00/CD/93/tz0GSFeOMj2AeoyQAACDwiTCd8c311.png","source":"_posts/2016-07-19-vuex.md","raw":"---\ntitle: Vuex使用总结\ncategories: Javascript\n\n---\n\n## Vuex是什么?\n> Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。\n\n## 什么情况下使用Vuex？\n当你的应用规模比较小的时候，你并不需要使用Vuex，因为在按照Vuex规定的格式来规划文件以及书写规范还是需要花一些时间和精力。对于中型以上规模的SPA，有很多很多的组件，彼此之间相互通信，这时候，Vuex就可以发挥很大的作用。\n\n## 没有使用Vuex的情况下，组件之间是如何通信的?\n这种情况会有两种情景：\n\n> 父子组件之间的通信\n> 同级子组件之间的通信\n\n第一种的解决方法是使用Props传参数，将父组件的数据传递给子组件，反过来，子组件也可以改变传入的参数，进而改变父组件的数据。\n\n第二中解决方法就比较繁琐了，数据的流向是，子组件 -\\> 父组件 -\\> 另外一个子组件。可以想象，当应用规模变大时，组件之间数据的传递会越来越复杂，如果在某个环节出了bug，可能需要花费很大的精力才能定位。而且，这也会导致子组件之间紧密耦合，导致这些组件没法被复用。\n\n也就是说，如果你的应用很多都是父子组件之间的通信，那么往往比较简单，暂时可以不考虑加入Vuex，但如果是很多同级子组件之间的通信，那就非常需要考虑加入Vuex来让你有条不紊地处理错综复杂的通信。\n\n## 一个简单的例子\nVuex官方文档给出了一份很详细的[入门教程][1]，其中的例子 -- 计数器的流程图是这样的：\n\n![][image-1]\n\n这就是Vuex的执行流程，用户操作产生一个action，然后dispatch到Mutation函数，Mutation函数根据这个dispatch的描述信息去执行对应的操作，同时，这个dispatch也可以传递一些额外的参数。最终通过Mutation函数对Store进行修改，**也只能通过这种方式修改Store**，保证了单一控制源。然后可以通过Getter函数去读取Store里面的数据。\n\n我们在开发时的步骤就是：\n> 1. 在store里里面声明所需要的数据\n> 2. 在Mutation里面注册一个函数，也就是一个描述语\n> 3. 在actions里面注册一个action，并dispatch对应的事件\n> 4. 将action绑定到页面的组件上\n> 5. 完毕！\n\n另外，使用vuejs开发时，有一个不可或缺的工具，[vue-devtools][2]，可以在工具栏中实时地观察vm的数据，可以**查看所有dispatch的记录**，这样一来，你对于应用的所有状态了如指掌。\n\n![][image-2]\n\n## 总结\n> 1. 整个应用的数据流是单向的\n> 2. actions 除了分发 mutations 应当尽量避免其他副作用。\n> 3. mutation 必须是同步函数，将全部的异步操作都放在actions中。所有类似数据获取的异步操作细节都应封装在 actions 里面。\n\n[1]:\thttp://vuex.vuejs.org/zh-cn/tutorial.html\n[2]:\thttps://github.com/vuejs/vue-devtools\n\n[image-1]:\thttp://file.do.yy.com/group3/M04/CD/93/tz0GSFeOMj2AC5iPAACKAQnp38Q432.png\n[image-2]:\thttp://file.do.yy.com/group3/M00/CD/93/tz0GSFeOMj2AeoyQAACDwiTCd8c311.png","slug":"2016-07-19-vuex","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dic9z000kfsonoyuo32bz","content":"<h2 id=\"Vuex是什么\"><a href=\"#Vuex是什么\" class=\"headerlink\" title=\"Vuex是什么?\"></a>Vuex是什么?</h2><blockquote>\n<p>Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。</p>\n</blockquote>\n<h2 id=\"什么情况下使用Vuex？\"><a href=\"#什么情况下使用Vuex？\" class=\"headerlink\" title=\"什么情况下使用Vuex？\"></a>什么情况下使用Vuex？</h2><p>当你的应用规模比较小的时候，你并不需要使用Vuex，因为在按照Vuex规定的格式来规划文件以及书写规范还是需要花一些时间和精力。对于中型以上规模的SPA，有很多很多的组件，彼此之间相互通信，这时候，Vuex就可以发挥很大的作用。</p>\n<h2 id=\"没有使用Vuex的情况下，组件之间是如何通信的\"><a href=\"#没有使用Vuex的情况下，组件之间是如何通信的\" class=\"headerlink\" title=\"没有使用Vuex的情况下，组件之间是如何通信的?\"></a>没有使用Vuex的情况下，组件之间是如何通信的?</h2><p>这种情况会有两种情景：</p>\n<blockquote>\n<p>父子组件之间的通信<br>同级子组件之间的通信</p>\n</blockquote>\n<p>第一种的解决方法是使用Props传参数，将父组件的数据传递给子组件，反过来，子组件也可以改变传入的参数，进而改变父组件的数据。</p>\n<p>第二中解决方法就比较繁琐了，数据的流向是，子组件 -> 父组件 -> 另外一个子组件。可以想象，当应用规模变大时，组件之间数据的传递会越来越复杂，如果在某个环节出了bug，可能需要花费很大的精力才能定位。而且，这也会导致子组件之间紧密耦合，导致这些组件没法被复用。</p>\n<p>也就是说，如果你的应用很多都是父子组件之间的通信，那么往往比较简单，暂时可以不考虑加入Vuex，但如果是很多同级子组件之间的通信，那就非常需要考虑加入Vuex来让你有条不紊地处理错综复杂的通信。</p>\n<h2 id=\"一个简单的例子\"><a href=\"#一个简单的例子\" class=\"headerlink\" title=\"一个简单的例子\"></a>一个简单的例子</h2><p>Vuex官方文档给出了一份很详细的<a href=\"http://vuex.vuejs.org/zh-cn/tutorial.html\" target=\"_blank\" rel=\"noopener\">入门教程</a>，其中的例子 – 计数器的流程图是这样的：</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/93/tz0GSFeOMj2AC5iPAACKAQnp38Q432.png\" alt=\"\"></p>\n<p>这就是Vuex的执行流程，用户操作产生一个action，然后dispatch到Mutation函数，Mutation函数根据这个dispatch的描述信息去执行对应的操作，同时，这个dispatch也可以传递一些额外的参数。最终通过Mutation函数对Store进行修改，<strong>也只能通过这种方式修改Store</strong>，保证了单一控制源。然后可以通过Getter函数去读取Store里面的数据。</p>\n<p>我们在开发时的步骤就是：</p>\n<blockquote>\n<ol>\n<li>在store里里面声明所需要的数据</li>\n<li>在Mutation里面注册一个函数，也就是一个描述语</li>\n<li>在actions里面注册一个action，并dispatch对应的事件</li>\n<li>将action绑定到页面的组件上</li>\n<li>完毕！</li>\n</ol>\n</blockquote>\n<p>另外，使用vuejs开发时，有一个不可或缺的工具，<a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">vue-devtools</a>，可以在工具栏中实时地观察vm的数据，可以<strong>查看所有dispatch的记录</strong>，这样一来，你对于应用的所有状态了如指掌。</p>\n<p><img src=\"http://file.do.yy.com/group3/M00/CD/93/tz0GSFeOMj2AeoyQAACDwiTCd8c311.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<ol>\n<li>整个应用的数据流是单向的</li>\n<li>actions 除了分发 mutations 应当尽量避免其他副作用。</li>\n<li>mutation 必须是同步函数，将全部的异步操作都放在actions中。所有类似数据获取的异步操作细节都应封装在 actions 里面。</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vuex是什么\"><a href=\"#Vuex是什么\" class=\"headerlink\" title=\"Vuex是什么?\"></a>Vuex是什么?</h2><blockquote>\n<p>Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。</p>\n</blockquote>\n<h2 id=\"什么情况下使用Vuex？\"><a href=\"#什么情况下使用Vuex？\" class=\"headerlink\" title=\"什么情况下使用Vuex？\"></a>什么情况下使用Vuex？</h2><p>当你的应用规模比较小的时候，你并不需要使用Vuex，因为在按照Vuex规定的格式来规划文件以及书写规范还是需要花一些时间和精力。对于中型以上规模的SPA，有很多很多的组件，彼此之间相互通信，这时候，Vuex就可以发挥很大的作用。</p>\n<h2 id=\"没有使用Vuex的情况下，组件之间是如何通信的\"><a href=\"#没有使用Vuex的情况下，组件之间是如何通信的\" class=\"headerlink\" title=\"没有使用Vuex的情况下，组件之间是如何通信的?\"></a>没有使用Vuex的情况下，组件之间是如何通信的?</h2><p>这种情况会有两种情景：</p>\n<blockquote>\n<p>父子组件之间的通信<br>同级子组件之间的通信</p>\n</blockquote>\n<p>第一种的解决方法是使用Props传参数，将父组件的数据传递给子组件，反过来，子组件也可以改变传入的参数，进而改变父组件的数据。</p>\n<p>第二中解决方法就比较繁琐了，数据的流向是，子组件 -> 父组件 -> 另外一个子组件。可以想象，当应用规模变大时，组件之间数据的传递会越来越复杂，如果在某个环节出了bug，可能需要花费很大的精力才能定位。而且，这也会导致子组件之间紧密耦合，导致这些组件没法被复用。</p>\n<p>也就是说，如果你的应用很多都是父子组件之间的通信，那么往往比较简单，暂时可以不考虑加入Vuex，但如果是很多同级子组件之间的通信，那就非常需要考虑加入Vuex来让你有条不紊地处理错综复杂的通信。</p>\n<h2 id=\"一个简单的例子\"><a href=\"#一个简单的例子\" class=\"headerlink\" title=\"一个简单的例子\"></a>一个简单的例子</h2><p>Vuex官方文档给出了一份很详细的<a href=\"http://vuex.vuejs.org/zh-cn/tutorial.html\" target=\"_blank\" rel=\"noopener\">入门教程</a>，其中的例子 – 计数器的流程图是这样的：</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/93/tz0GSFeOMj2AC5iPAACKAQnp38Q432.png\" alt=\"\"></p>\n<p>这就是Vuex的执行流程，用户操作产生一个action，然后dispatch到Mutation函数，Mutation函数根据这个dispatch的描述信息去执行对应的操作，同时，这个dispatch也可以传递一些额外的参数。最终通过Mutation函数对Store进行修改，<strong>也只能通过这种方式修改Store</strong>，保证了单一控制源。然后可以通过Getter函数去读取Store里面的数据。</p>\n<p>我们在开发时的步骤就是：</p>\n<blockquote>\n<ol>\n<li>在store里里面声明所需要的数据</li>\n<li>在Mutation里面注册一个函数，也就是一个描述语</li>\n<li>在actions里面注册一个action，并dispatch对应的事件</li>\n<li>将action绑定到页面的组件上</li>\n<li>完毕！</li>\n</ol>\n</blockquote>\n<p>另外，使用vuejs开发时，有一个不可或缺的工具，<a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">vue-devtools</a>，可以在工具栏中实时地观察vm的数据，可以<strong>查看所有dispatch的记录</strong>，这样一来，你对于应用的所有状态了如指掌。</p>\n<p><img src=\"http://file.do.yy.com/group3/M00/CD/93/tz0GSFeOMj2AeoyQAACDwiTCd8c311.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<ol>\n<li>整个应用的数据流是单向的</li>\n<li>actions 除了分发 mutations 应当尽量避免其他副作用。</li>\n<li>mutation 必须是同步函数，将全部的异步操作都放在actions中。所有类似数据获取的异步操作细节都应封装在 actions 里面。</li>\n</ol>\n</blockquote>\n"},{"title":"使用vue-loader进行组件化开发","_content":"\n一般我们是按照文件类型来组织目录，也就是将html、css、js文件放在各自的文件夹中，然后根据路径在页面中引用对应的资源。这样做的弊端有\n\n> 1. 多人协作，容易造成冲突\n> 2. 不清楚哪里引用了这个文件，导致不敢随意移动和修改\n> 3. 寻找对应资源繁琐，需要逐个打开目录\n\n## 组件化开发是怎样的？\n将html，css，js整合到一份文件里面，成为一个独立的组件。页面就相当于一个容器，装填许多的组件。组件化开发的基本理念是这样的（图引[张云龙][1]）\n\n![components1][image-1]\n\n一个项目的开发可以这样组织（图引[张云龙][2]）\n\n![components2][image-2]\n\n[vue-loader][3]就是来做这件事的，它是webpack的一个插件，可以实现组件化开发。我们只需要新建一个.vue文件，然后把html，css，js放到文件中，vue就会帮我们搞定一切。vue的组件文件的后缀名是.vue，它里面的写法是这样的：\n\n![][image-3]\n\n最后，我们的任务就是开发一个个组件，然后将之放到页面中，并解决组件之间的通信。\n\n## vue-router\n[vue-router][4]是vue官方做的路由插件，可以根据路由显示不同的组件，也就是可以用来做SPA（单页应用），它的写法是这样的\n\n``` js\nrouter.map({\n  '/news/:page': {\n    component: NewsView\n  },\n  '/user/:id': {\n    component: UserView\n  },\n  '/item/:id': {\n    component: ItemView\n  }\n})\n```\n\n然后在页面中添加入口\n\n``` js\n<router-view></router-view>\n```\n\n可以添加一些transition动画，做比较酷炫的切换。\n\n``` js\n<router-view\n  transition\n  transition-mode=\"out-in\">\n</router-view>\n```\n\n可以在route方法中取得路由的参数\n\n``` js\nroute: {\n  data ({ to }) {\n    const page = to.params.page\n  }\n},\n```\n\n## 组件的规划\n组件可以分为两层，分别是views和components。views组件用来做路由的入口，相当于一个页面，而components则是颗粒化比较小的组件，放在views组件里面。\n\n## 组件之间的通信\n当页面逻辑比较简单时，只需要使用Props属性进行传参即可。对于中型规模以上，数据逻辑比较复杂的应用，可以考虑引入[Vuex][5]集中管理状态。\n\n## 例子\n> 1. [vue-loader-example][6]\n> 2. [vue-hackernews][7]\n> 3. [vue-mobile][8]\n> 4. [vue-zhihu-daily][9]\n\n\n## 参考资料\n> 1. [前端工程——基础篇][10]\n> 2. [告别刀耕火种:浅谈VisMooc的前端工程化][11]\n\n[1]:\thttps://www.zhihu.com/people/fouber\n[2]:\thttps://www.zhihu.com/people/fouber\n[3]:\thttps://github.com/vuejs/vue-loader\n[4]:\thttp://router.vuejs.org/zh-cn/\n[5]:\thttps://github.com/vuejs/vuex\n[6]:\thttps://github.com/vuejs/vue-loader-example\n[7]:\thttps://github.com/vuejs/vue-hackernews\n[8]:\thttps://github.com/lihongxun945/vue-mobile\n[9]:\thttps://github.com/hilongjw/vue-zhihu-daily\n[10]:\thttps://github.com/fouber/blog/issues/10\n[11]:\thttp://chenzhutian.org/blog/2016/%E6%B5%85%E8%B0%88VisMooc%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/\n\n[image-1]:\thttp://file.do.yy.com/group3/M04/CD/91/tz0MYFePEVCAErg8AADQj2Vx_yE826.png\n[image-2]:\thttp://file.do.yy.com/group3/M04/CD/94/tz0GSFePEVCAQrBvAABOxVF9wgs511.png\n[image-3]:\thttp://file.do.yy.com/group3/M04/CD/91/tz0MYFePEV2AeND1AAHbqgkHl5w930.png","source":"_posts/2016-07-20-vue-loader.md","raw":"---\ntitle: 使用vue-loader进行组件化开发\ncategories: Javascript\ntags: [Vue, 组件化]\n---\n\n一般我们是按照文件类型来组织目录，也就是将html、css、js文件放在各自的文件夹中，然后根据路径在页面中引用对应的资源。这样做的弊端有\n\n> 1. 多人协作，容易造成冲突\n> 2. 不清楚哪里引用了这个文件，导致不敢随意移动和修改\n> 3. 寻找对应资源繁琐，需要逐个打开目录\n\n## 组件化开发是怎样的？\n将html，css，js整合到一份文件里面，成为一个独立的组件。页面就相当于一个容器，装填许多的组件。组件化开发的基本理念是这样的（图引[张云龙][1]）\n\n![components1][image-1]\n\n一个项目的开发可以这样组织（图引[张云龙][2]）\n\n![components2][image-2]\n\n[vue-loader][3]就是来做这件事的，它是webpack的一个插件，可以实现组件化开发。我们只需要新建一个.vue文件，然后把html，css，js放到文件中，vue就会帮我们搞定一切。vue的组件文件的后缀名是.vue，它里面的写法是这样的：\n\n![][image-3]\n\n最后，我们的任务就是开发一个个组件，然后将之放到页面中，并解决组件之间的通信。\n\n## vue-router\n[vue-router][4]是vue官方做的路由插件，可以根据路由显示不同的组件，也就是可以用来做SPA（单页应用），它的写法是这样的\n\n``` js\nrouter.map({\n  '/news/:page': {\n    component: NewsView\n  },\n  '/user/:id': {\n    component: UserView\n  },\n  '/item/:id': {\n    component: ItemView\n  }\n})\n```\n\n然后在页面中添加入口\n\n``` js\n<router-view></router-view>\n```\n\n可以添加一些transition动画，做比较酷炫的切换。\n\n``` js\n<router-view\n  transition\n  transition-mode=\"out-in\">\n</router-view>\n```\n\n可以在route方法中取得路由的参数\n\n``` js\nroute: {\n  data ({ to }) {\n    const page = to.params.page\n  }\n},\n```\n\n## 组件的规划\n组件可以分为两层，分别是views和components。views组件用来做路由的入口，相当于一个页面，而components则是颗粒化比较小的组件，放在views组件里面。\n\n## 组件之间的通信\n当页面逻辑比较简单时，只需要使用Props属性进行传参即可。对于中型规模以上，数据逻辑比较复杂的应用，可以考虑引入[Vuex][5]集中管理状态。\n\n## 例子\n> 1. [vue-loader-example][6]\n> 2. [vue-hackernews][7]\n> 3. [vue-mobile][8]\n> 4. [vue-zhihu-daily][9]\n\n\n## 参考资料\n> 1. [前端工程——基础篇][10]\n> 2. [告别刀耕火种:浅谈VisMooc的前端工程化][11]\n\n[1]:\thttps://www.zhihu.com/people/fouber\n[2]:\thttps://www.zhihu.com/people/fouber\n[3]:\thttps://github.com/vuejs/vue-loader\n[4]:\thttp://router.vuejs.org/zh-cn/\n[5]:\thttps://github.com/vuejs/vuex\n[6]:\thttps://github.com/vuejs/vue-loader-example\n[7]:\thttps://github.com/vuejs/vue-hackernews\n[8]:\thttps://github.com/lihongxun945/vue-mobile\n[9]:\thttps://github.com/hilongjw/vue-zhihu-daily\n[10]:\thttps://github.com/fouber/blog/issues/10\n[11]:\thttp://chenzhutian.org/blog/2016/%E6%B5%85%E8%B0%88VisMooc%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/\n\n[image-1]:\thttp://file.do.yy.com/group3/M04/CD/91/tz0MYFePEVCAErg8AADQj2Vx_yE826.png\n[image-2]:\thttp://file.do.yy.com/group3/M04/CD/94/tz0GSFePEVCAQrBvAABOxVF9wgs511.png\n[image-3]:\thttp://file.do.yy.com/group3/M04/CD/91/tz0MYFePEV2AeND1AAHbqgkHl5w930.png","slug":"2016-07-20-vue-loader","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dica0000lfsonoakfdm8m","content":"<p>一般我们是按照文件类型来组织目录，也就是将html、css、js文件放在各自的文件夹中，然后根据路径在页面中引用对应的资源。这样做的弊端有</p>\n<blockquote>\n<ol>\n<li>多人协作，容易造成冲突</li>\n<li>不清楚哪里引用了这个文件，导致不敢随意移动和修改</li>\n<li>寻找对应资源繁琐，需要逐个打开目录</li>\n</ol>\n</blockquote>\n<h2 id=\"组件化开发是怎样的？\"><a href=\"#组件化开发是怎样的？\" class=\"headerlink\" title=\"组件化开发是怎样的？\"></a>组件化开发是怎样的？</h2><p>将html，css，js整合到一份文件里面，成为一个独立的组件。页面就相当于一个容器，装填许多的组件。组件化开发的基本理念是这样的（图引<a href=\"https://www.zhihu.com/people/fouber\" target=\"_blank\" rel=\"noopener\">张云龙</a>）</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/91/tz0MYFePEVCAErg8AADQj2Vx_yE826.png\" alt=\"components1\"></p>\n<p>一个项目的开发可以这样组织（图引<a href=\"https://www.zhihu.com/people/fouber\" target=\"_blank\" rel=\"noopener\">张云龙</a>）</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/94/tz0GSFePEVCAQrBvAABOxVF9wgs511.png\" alt=\"components2\"></p>\n<p><a href=\"https://github.com/vuejs/vue-loader\" target=\"_blank\" rel=\"noopener\">vue-loader</a>就是来做这件事的，它是webpack的一个插件，可以实现组件化开发。我们只需要新建一个.vue文件，然后把html，css，js放到文件中，vue就会帮我们搞定一切。vue的组件文件的后缀名是.vue，它里面的写法是这样的：</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/91/tz0MYFePEV2AeND1AAHbqgkHl5w930.png\" alt=\"\"></p>\n<p>最后，我们的任务就是开发一个个组件，然后将之放到页面中，并解决组件之间的通信。</p>\n<h2 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h2><p><a href=\"http://router.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">vue-router</a>是vue官方做的路由插件，可以根据路由显示不同的组件，也就是可以用来做SPA（单页应用），它的写法是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.map(&#123;</span><br><span class=\"line\">  <span class=\"string\">'/news/:page'</span>: &#123;</span><br><span class=\"line\">    component: NewsView</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'/user/:id'</span>: &#123;</span><br><span class=\"line\">    component: UserView</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'/item/:id'</span>: &#123;</span><br><span class=\"line\">    component: ItemView</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后在页面中添加入口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>\n<p>可以添加一些transition动画，做比较酷炫的切换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view</span><br><span class=\"line\">  transition</span><br><span class=\"line\">  transition-mode=<span class=\"string\">\"out-in\"</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/router-view&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以在route方法中取得路由的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route: &#123;</span><br><span class=\"line\">  data (&#123; to &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = to.params.page</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"组件的规划\"><a href=\"#组件的规划\" class=\"headerlink\" title=\"组件的规划\"></a>组件的规划</h2><p>组件可以分为两层，分别是views和components。views组件用来做路由的入口，相当于一个页面，而components则是颗粒化比较小的组件，放在views组件里面。</p>\n<h2 id=\"组件之间的通信\"><a href=\"#组件之间的通信\" class=\"headerlink\" title=\"组件之间的通信\"></a>组件之间的通信</h2><p>当页面逻辑比较简单时，只需要使用Props属性进行传参即可。对于中型规模以上，数据逻辑比较复杂的应用，可以考虑引入<a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">Vuex</a>集中管理状态。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><blockquote>\n<ol>\n<li><a href=\"https://github.com/vuejs/vue-loader-example\" target=\"_blank\" rel=\"noopener\">vue-loader-example</a></li>\n<li><a href=\"https://github.com/vuejs/vue-hackernews\" target=\"_blank\" rel=\"noopener\">vue-hackernews</a></li>\n<li><a href=\"https://github.com/lihongxun945/vue-mobile\" target=\"_blank\" rel=\"noopener\">vue-mobile</a></li>\n<li><a href=\"https://github.com/hilongjw/vue-zhihu-daily\" target=\"_blank\" rel=\"noopener\">vue-zhihu-daily</a></li>\n</ol>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ol>\n<li><a href=\"https://github.com/fouber/blog/issues/10\" target=\"_blank\" rel=\"noopener\">前端工程——基础篇</a></li>\n<li><a href=\"http://chenzhutian.org/blog/2016/%E6%B5%85%E8%B0%88VisMooc%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/\" target=\"_blank\" rel=\"noopener\">告别刀耕火种:浅谈VisMooc的前端工程化</a></li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>一般我们是按照文件类型来组织目录，也就是将html、css、js文件放在各自的文件夹中，然后根据路径在页面中引用对应的资源。这样做的弊端有</p>\n<blockquote>\n<ol>\n<li>多人协作，容易造成冲突</li>\n<li>不清楚哪里引用了这个文件，导致不敢随意移动和修改</li>\n<li>寻找对应资源繁琐，需要逐个打开目录</li>\n</ol>\n</blockquote>\n<h2 id=\"组件化开发是怎样的？\"><a href=\"#组件化开发是怎样的？\" class=\"headerlink\" title=\"组件化开发是怎样的？\"></a>组件化开发是怎样的？</h2><p>将html，css，js整合到一份文件里面，成为一个独立的组件。页面就相当于一个容器，装填许多的组件。组件化开发的基本理念是这样的（图引<a href=\"https://www.zhihu.com/people/fouber\" target=\"_blank\" rel=\"noopener\">张云龙</a>）</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/91/tz0MYFePEVCAErg8AADQj2Vx_yE826.png\" alt=\"components1\"></p>\n<p>一个项目的开发可以这样组织（图引<a href=\"https://www.zhihu.com/people/fouber\" target=\"_blank\" rel=\"noopener\">张云龙</a>）</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/94/tz0GSFePEVCAQrBvAABOxVF9wgs511.png\" alt=\"components2\"></p>\n<p><a href=\"https://github.com/vuejs/vue-loader\" target=\"_blank\" rel=\"noopener\">vue-loader</a>就是来做这件事的，它是webpack的一个插件，可以实现组件化开发。我们只需要新建一个.vue文件，然后把html，css，js放到文件中，vue就会帮我们搞定一切。vue的组件文件的后缀名是.vue，它里面的写法是这样的：</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/91/tz0MYFePEV2AeND1AAHbqgkHl5w930.png\" alt=\"\"></p>\n<p>最后，我们的任务就是开发一个个组件，然后将之放到页面中，并解决组件之间的通信。</p>\n<h2 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h2><p><a href=\"http://router.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">vue-router</a>是vue官方做的路由插件，可以根据路由显示不同的组件，也就是可以用来做SPA（单页应用），它的写法是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.map(&#123;</span><br><span class=\"line\">  <span class=\"string\">'/news/:page'</span>: &#123;</span><br><span class=\"line\">    component: NewsView</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'/user/:id'</span>: &#123;</span><br><span class=\"line\">    component: UserView</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'/item/:id'</span>: &#123;</span><br><span class=\"line\">    component: ItemView</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后在页面中添加入口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>\n<p>可以添加一些transition动画，做比较酷炫的切换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view</span><br><span class=\"line\">  transition</span><br><span class=\"line\">  transition-mode=<span class=\"string\">\"out-in\"</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/router-view&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以在route方法中取得路由的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route: &#123;</span><br><span class=\"line\">  data (&#123; to &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = to.params.page</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"组件的规划\"><a href=\"#组件的规划\" class=\"headerlink\" title=\"组件的规划\"></a>组件的规划</h2><p>组件可以分为两层，分别是views和components。views组件用来做路由的入口，相当于一个页面，而components则是颗粒化比较小的组件，放在views组件里面。</p>\n<h2 id=\"组件之间的通信\"><a href=\"#组件之间的通信\" class=\"headerlink\" title=\"组件之间的通信\"></a>组件之间的通信</h2><p>当页面逻辑比较简单时，只需要使用Props属性进行传参即可。对于中型规模以上，数据逻辑比较复杂的应用，可以考虑引入<a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">Vuex</a>集中管理状态。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><blockquote>\n<ol>\n<li><a href=\"https://github.com/vuejs/vue-loader-example\" target=\"_blank\" rel=\"noopener\">vue-loader-example</a></li>\n<li><a href=\"https://github.com/vuejs/vue-hackernews\" target=\"_blank\" rel=\"noopener\">vue-hackernews</a></li>\n<li><a href=\"https://github.com/lihongxun945/vue-mobile\" target=\"_blank\" rel=\"noopener\">vue-mobile</a></li>\n<li><a href=\"https://github.com/hilongjw/vue-zhihu-daily\" target=\"_blank\" rel=\"noopener\">vue-zhihu-daily</a></li>\n</ol>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ol>\n<li><a href=\"https://github.com/fouber/blog/issues/10\" target=\"_blank\" rel=\"noopener\">前端工程——基础篇</a></li>\n<li><a href=\"http://chenzhutian.org/blog/2016/%E6%B5%85%E8%B0%88VisMooc%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/\" target=\"_blank\" rel=\"noopener\">告别刀耕火种:浅谈VisMooc的前端工程化</a></li>\n</ol>\n</blockquote>\n"},{"title":"Nginx学习笔记","_content":"\n安装\n\n```\nbrew install nginx\n```\n\n## 入门文档\n\n[文档](http://nginx.org/en/docs/beginners_guide.html)\n\n## Nginx是做什么的？基本流程是怎样的？\n\n首先，有一个很重要的概念，就是**主从模式**，指的是由一个主进程（master）控制几个子进程（worker），用图片表示如下\n\n主进程可以控制子程序的创建与退出（销毁），当一个主进程接收到一个url请求时，会读取nigix的配置（.conf结尾，比如niginx），然后会根据配置，会将url发放到对应的子进程，所以，主进程并不直接处理请求，只是起到一个控制的作用，最终还是子进程来处理，而nginx存在于主、子进程的中间，起到一个中间层的作用。\n\n## 基本命令\n\n### 启动\n\n```\nnginx\n```\n\n### 控制\n\n```\nnginx -s signal\n```\n\nsignal可以是\n\n- stop — 强制退出进程\n- quit — 等进程处理完手上的事情之后退出\n- reload — 重启\n- reopen — 重新打开log日志文件\n\n## 实例\n\n### 启动nginx\n\n安装好nginx之后，启动nginx，打开localhost:8080（默认），就可以看到nignx默认的欢迎界面，然后就可以打开nignx的配置文件\n\n```\n/usr/local/etc/nginx/nginx.conf\n```\n\n然后就可以修改配置，重启，看看效果，先配置一个最简单的\n\n```\nhttp {\n  server {\n\tlisten 8080;\n    location / {\n      root /Users/raimonfuns/www\n    }\n    location /images/ {\n      root /Users/raimonfuns/www\n    }\n  }\n}\n```\n\n当访问localhost:8080时，服务器返回/Users/raimonfuns/www/index.html\n\n当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png\n\nnginx也经常用来做代理，也就是\n\n> 根据不同的路由，访问不同的服务\n\n```\nhttp {\n  server {\n    listen 8080;\n    location / {\n      proxy_pass http://localhost:8080;\n    }\n    location /pages/ {\n      root /users/raimonfuns/Public/www/;\n    }\n  }\n}\n```\n\n当访问localhost:8080时，服务器返回http://localhost:8080/index.html（这就是代理）\n\n当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png（没有代理，访问原来的服务）\n\n## 负载均衡\n\n负载均衡通俗一点来讲就是平均工作量。就好比餐厅里面有很多厨师，当有一桌菜需要做时，服务员就会根据厨师们手上的事情来分配工作量，尽量平衡每个厨师的工作量，以免出现某个厨师累垮了，而另外一个厨师没事干。\n\n当主进程接受到一个请求时，nginx会根据子进程的繁忙程度来指定由哪个进程处理这个请求，平衡每个进程的工作量，从而提高稳定性，这就是负载均衡。\n","source":"_posts/2016-08-07-nginx-usage.md","raw":"---\ntitle: Nginx学习笔记\ncategories: 工具\ntags: Nginx\n---\n\n安装\n\n```\nbrew install nginx\n```\n\n## 入门文档\n\n[文档](http://nginx.org/en/docs/beginners_guide.html)\n\n## Nginx是做什么的？基本流程是怎样的？\n\n首先，有一个很重要的概念，就是**主从模式**，指的是由一个主进程（master）控制几个子进程（worker），用图片表示如下\n\n主进程可以控制子程序的创建与退出（销毁），当一个主进程接收到一个url请求时，会读取nigix的配置（.conf结尾，比如niginx），然后会根据配置，会将url发放到对应的子进程，所以，主进程并不直接处理请求，只是起到一个控制的作用，最终还是子进程来处理，而nginx存在于主、子进程的中间，起到一个中间层的作用。\n\n## 基本命令\n\n### 启动\n\n```\nnginx\n```\n\n### 控制\n\n```\nnginx -s signal\n```\n\nsignal可以是\n\n- stop — 强制退出进程\n- quit — 等进程处理完手上的事情之后退出\n- reload — 重启\n- reopen — 重新打开log日志文件\n\n## 实例\n\n### 启动nginx\n\n安装好nginx之后，启动nginx，打开localhost:8080（默认），就可以看到nignx默认的欢迎界面，然后就可以打开nignx的配置文件\n\n```\n/usr/local/etc/nginx/nginx.conf\n```\n\n然后就可以修改配置，重启，看看效果，先配置一个最简单的\n\n```\nhttp {\n  server {\n\tlisten 8080;\n    location / {\n      root /Users/raimonfuns/www\n    }\n    location /images/ {\n      root /Users/raimonfuns/www\n    }\n  }\n}\n```\n\n当访问localhost:8080时，服务器返回/Users/raimonfuns/www/index.html\n\n当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png\n\nnginx也经常用来做代理，也就是\n\n> 根据不同的路由，访问不同的服务\n\n```\nhttp {\n  server {\n    listen 8080;\n    location / {\n      proxy_pass http://localhost:8080;\n    }\n    location /pages/ {\n      root /users/raimonfuns/Public/www/;\n    }\n  }\n}\n```\n\n当访问localhost:8080时，服务器返回http://localhost:8080/index.html（这就是代理）\n\n当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png（没有代理，访问原来的服务）\n\n## 负载均衡\n\n负载均衡通俗一点来讲就是平均工作量。就好比餐厅里面有很多厨师，当有一桌菜需要做时，服务员就会根据厨师们手上的事情来分配工作量，尽量平衡每个厨师的工作量，以免出现某个厨师累垮了，而另外一个厨师没事干。\n\n当主进程接受到一个请求时，nginx会根据子进程的繁忙程度来指定由哪个进程处理这个请求，平衡每个进程的工作量，从而提高稳定性，这就是负载均衡。\n","slug":"2016-08-07-nginx-usage","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dica1000mfsonabc4ge7c","content":"<p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"入门文档\"><a href=\"#入门文档\" class=\"headerlink\" title=\"入门文档\"></a>入门文档</h2><p><a href=\"http://nginx.org/en/docs/beginners_guide.html\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<h2 id=\"Nginx是做什么的？基本流程是怎样的？\"><a href=\"#Nginx是做什么的？基本流程是怎样的？\" class=\"headerlink\" title=\"Nginx是做什么的？基本流程是怎样的？\"></a>Nginx是做什么的？基本流程是怎样的？</h2><p>首先，有一个很重要的概念，就是<strong>主从模式</strong>，指的是由一个主进程（master）控制几个子进程（worker），用图片表示如下</p>\n<p>主进程可以控制子程序的创建与退出（销毁），当一个主进程接收到一个url请求时，会读取nigix的配置（.conf结尾，比如niginx），然后会根据配置，会将url发放到对应的子进程，所以，主进程并不直接处理请求，只是起到一个控制的作用，最终还是子进程来处理，而nginx存在于主、子进程的中间，起到一个中间层的作用。</p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"控制\"><a href=\"#控制\" class=\"headerlink\" title=\"控制\"></a>控制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s signal</span><br></pre></td></tr></table></figure>\n<p>signal可以是</p>\n<ul>\n<li>stop — 强制退出进程</li>\n<li>quit — 等进程处理完手上的事情之后退出</li>\n<li>reload — 重启</li>\n<li>reopen — 重新打开log日志文件</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><p>安装好nginx之后，启动nginx，打开localhost:8080（默认），就可以看到nignx默认的欢迎界面，然后就可以打开nignx的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>然后就可以修改配置，重启，看看效果，先配置一个最简单的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">\tlisten 8080;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      root /Users/raimonfuns/www</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /images/ &#123;</span><br><span class=\"line\">      root /Users/raimonfuns/www</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当访问localhost:8080时，服务器返回/Users/raimonfuns/www/index.html</p>\n<p>当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png</p>\n<p>nginx也经常用来做代理，也就是</p>\n<blockquote>\n<p>根据不同的路由，访问不同的服务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen 8080;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass http://localhost:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /pages/ &#123;</span><br><span class=\"line\">      root /users/raimonfuns/Public/www/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当访问localhost:8080时，服务器返回<a href=\"http://localhost:8080/index.html（这就是代理）\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/index.html（这就是代理）</a></p>\n<p>当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png（没有代理，访问原来的服务）</p>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>负载均衡通俗一点来讲就是平均工作量。就好比餐厅里面有很多厨师，当有一桌菜需要做时，服务员就会根据厨师们手上的事情来分配工作量，尽量平衡每个厨师的工作量，以免出现某个厨师累垮了，而另外一个厨师没事干。</p>\n<p>当主进程接受到一个请求时，nginx会根据子进程的繁忙程度来指定由哪个进程处理这个请求，平衡每个进程的工作量，从而提高稳定性，这就是负载均衡。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"入门文档\"><a href=\"#入门文档\" class=\"headerlink\" title=\"入门文档\"></a>入门文档</h2><p><a href=\"http://nginx.org/en/docs/beginners_guide.html\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<h2 id=\"Nginx是做什么的？基本流程是怎样的？\"><a href=\"#Nginx是做什么的？基本流程是怎样的？\" class=\"headerlink\" title=\"Nginx是做什么的？基本流程是怎样的？\"></a>Nginx是做什么的？基本流程是怎样的？</h2><p>首先，有一个很重要的概念，就是<strong>主从模式</strong>，指的是由一个主进程（master）控制几个子进程（worker），用图片表示如下</p>\n<p>主进程可以控制子程序的创建与退出（销毁），当一个主进程接收到一个url请求时，会读取nigix的配置（.conf结尾，比如niginx），然后会根据配置，会将url发放到对应的子进程，所以，主进程并不直接处理请求，只是起到一个控制的作用，最终还是子进程来处理，而nginx存在于主、子进程的中间，起到一个中间层的作用。</p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"控制\"><a href=\"#控制\" class=\"headerlink\" title=\"控制\"></a>控制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s signal</span><br></pre></td></tr></table></figure>\n<p>signal可以是</p>\n<ul>\n<li>stop — 强制退出进程</li>\n<li>quit — 等进程处理完手上的事情之后退出</li>\n<li>reload — 重启</li>\n<li>reopen — 重新打开log日志文件</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><p>安装好nginx之后，启动nginx，打开localhost:8080（默认），就可以看到nignx默认的欢迎界面，然后就可以打开nignx的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>然后就可以修改配置，重启，看看效果，先配置一个最简单的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">\tlisten 8080;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      root /Users/raimonfuns/www</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /images/ &#123;</span><br><span class=\"line\">      root /Users/raimonfuns/www</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当访问localhost:8080时，服务器返回/Users/raimonfuns/www/index.html</p>\n<p>当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png</p>\n<p>nginx也经常用来做代理，也就是</p>\n<blockquote>\n<p>根据不同的路由，访问不同的服务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen 8080;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass http://localhost:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /pages/ &#123;</span><br><span class=\"line\">      root /users/raimonfuns/Public/www/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当访问localhost:8080时，服务器返回<a href=\"http://localhost:8080/index.html（这就是代理）\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/index.html（这就是代理）</a></p>\n<p>当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png（没有代理，访问原来的服务）</p>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>负载均衡通俗一点来讲就是平均工作量。就好比餐厅里面有很多厨师，当有一桌菜需要做时，服务员就会根据厨师们手上的事情来分配工作量，尽量平衡每个厨师的工作量，以免出现某个厨师累垮了，而另外一个厨师没事干。</p>\n<p>当主进程接受到一个请求时，nginx会根据子进程的繁忙程度来指定由哪个进程处理这个请求，平衡每个进程的工作量，从而提高稳定性，这就是负载均衡。</p>\n"},{"title":"怎么提高开发效率呢？","_content":"\n在开发项目时，经常会掉进一些很耗时间的坑，一不留神，就到了下班时间，看一看自己完成的todo list，总是有几项没有完成，于是我就寻思，这样才能提高开发效率，在有限的时间里提高产出呢？后来我想出了一个办法\n\n- 对项目需求进行细分\n- 用番茄土豆软件，每个番茄对应一个小需求\n- 尽量在规定时间内完成需求\n- 如果时间到了还没完成，可以尽快做完，如有需要，可以再开一个番茄\n- 如果卡住了，没办法解决，先跳过，不要钻牛角尖\n- 当全部的番茄都完成时，再去完成、也就遗留的问题\n\n这样做的好处是什么？\n\n> 让自己清楚地知道应该做什么，并且在一定时间内保持较高的专注度，有规律地进行休息，还能避免被一个问题卡住而导致浪费大量的黄金时间\n","source":"_posts/2016-08-09-efficiency.md","raw":"---\ntitle: 怎么提高开发效率呢？\ncategories: 随笔\n---\n\n在开发项目时，经常会掉进一些很耗时间的坑，一不留神，就到了下班时间，看一看自己完成的todo list，总是有几项没有完成，于是我就寻思，这样才能提高开发效率，在有限的时间里提高产出呢？后来我想出了一个办法\n\n- 对项目需求进行细分\n- 用番茄土豆软件，每个番茄对应一个小需求\n- 尽量在规定时间内完成需求\n- 如果时间到了还没完成，可以尽快做完，如有需要，可以再开一个番茄\n- 如果卡住了，没办法解决，先跳过，不要钻牛角尖\n- 当全部的番茄都完成时，再去完成、也就遗留的问题\n\n这样做的好处是什么？\n\n> 让自己清楚地知道应该做什么，并且在一定时间内保持较高的专注度，有规律地进行休息，还能避免被一个问题卡住而导致浪费大量的黄金时间\n","slug":"2016-08-09-efficiency","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dica3000qfsonzp0dmib9","content":"<p>在开发项目时，经常会掉进一些很耗时间的坑，一不留神，就到了下班时间，看一看自己完成的todo list，总是有几项没有完成，于是我就寻思，这样才能提高开发效率，在有限的时间里提高产出呢？后来我想出了一个办法</p>\n<ul>\n<li>对项目需求进行细分</li>\n<li>用番茄土豆软件，每个番茄对应一个小需求</li>\n<li>尽量在规定时间内完成需求</li>\n<li>如果时间到了还没完成，可以尽快做完，如有需要，可以再开一个番茄</li>\n<li>如果卡住了，没办法解决，先跳过，不要钻牛角尖</li>\n<li>当全部的番茄都完成时，再去完成、也就遗留的问题</li>\n</ul>\n<p>这样做的好处是什么？</p>\n<blockquote>\n<p>让自己清楚地知道应该做什么，并且在一定时间内保持较高的专注度，有规律地进行休息，还能避免被一个问题卡住而导致浪费大量的黄金时间</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在开发项目时，经常会掉进一些很耗时间的坑，一不留神，就到了下班时间，看一看自己完成的todo list，总是有几项没有完成，于是我就寻思，这样才能提高开发效率，在有限的时间里提高产出呢？后来我想出了一个办法</p>\n<ul>\n<li>对项目需求进行细分</li>\n<li>用番茄土豆软件，每个番茄对应一个小需求</li>\n<li>尽量在规定时间内完成需求</li>\n<li>如果时间到了还没完成，可以尽快做完，如有需要，可以再开一个番茄</li>\n<li>如果卡住了，没办法解决，先跳过，不要钻牛角尖</li>\n<li>当全部的番茄都完成时，再去完成、也就遗留的问题</li>\n</ul>\n<p>这样做的好处是什么？</p>\n<blockquote>\n<p>让自己清楚地知道应该做什么，并且在一定时间内保持较高的专注度，有规律地进行休息，还能避免被一个问题卡住而导致浪费大量的黄金时间</p>\n</blockquote>\n"},{"title":"Node学习笔记：Global对象","_content":"\n## REPL环境\n\n> 在Node.js中，为了使开发者方便测试JS代码，提供了一个叫做*REPL*（Read-Eval-Print-Loop）的可交互式运行环境。在该环境中，开发者可以输入任何JS代码，按下回车后，REPL环境中将显示表达式的运行结果。\n\n## 全局对象与全局变量\n\n### 全局对象\n\n- Global：Node的全局对象，类似于浏览器的window。\n- process：Node所处的当前进程。\n- console：Node内置的console模块。\n\n### 全局函数\n\n- setTimeout\n- clearTimeout\n- setInterval\n- clearInterval\n- require：用于加载模块。\n- Buffer：用于操作二进制数据。\n\n### 全局变量\n\n- __filename：当前运行的脚本文件名。\n- __dirname：当前脚本所在的目录。\n\n注意：这两个变量不能直接在REPL中访问，只能在js文件中访问。\n\n### module.exports和exports\n\n不同的模块之间怎么共享代码呢？使用Global？不可以，这样会污染全局变量，所以应该使用的是CommonJS规范的模块化功能。\n\n模块通过module.exports对外提供代码，一般情况下module.exports和exports引用的是同一个对象，但不改变它们的引用时，不会有任何问题。当引用被改变了，CommonJS导出的永远是module.exports指向的对象。\n","source":"_posts/2016-08-10-node_global.md","raw":"---\ntitle: Node学习笔记：Global对象\ncategories: Node\n\n---\n\n## REPL环境\n\n> 在Node.js中，为了使开发者方便测试JS代码，提供了一个叫做*REPL*（Read-Eval-Print-Loop）的可交互式运行环境。在该环境中，开发者可以输入任何JS代码，按下回车后，REPL环境中将显示表达式的运行结果。\n\n## 全局对象与全局变量\n\n### 全局对象\n\n- Global：Node的全局对象，类似于浏览器的window。\n- process：Node所处的当前进程。\n- console：Node内置的console模块。\n\n### 全局函数\n\n- setTimeout\n- clearTimeout\n- setInterval\n- clearInterval\n- require：用于加载模块。\n- Buffer：用于操作二进制数据。\n\n### 全局变量\n\n- __filename：当前运行的脚本文件名。\n- __dirname：当前脚本所在的目录。\n\n注意：这两个变量不能直接在REPL中访问，只能在js文件中访问。\n\n### module.exports和exports\n\n不同的模块之间怎么共享代码呢？使用Global？不可以，这样会污染全局变量，所以应该使用的是CommonJS规范的模块化功能。\n\n模块通过module.exports对外提供代码，一般情况下module.exports和exports引用的是同一个对象，但不改变它们的引用时，不会有任何问题。当引用被改变了，CommonJS导出的永远是module.exports指向的对象。\n","slug":"2016-08-10-node_global","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dica5000rfsonu16g4ol7","content":"<h2 id=\"REPL环境\"><a href=\"#REPL环境\" class=\"headerlink\" title=\"REPL环境\"></a>REPL环境</h2><blockquote>\n<p>在Node.js中，为了使开发者方便测试JS代码，提供了一个叫做<em>REPL</em>（Read-Eval-Print-Loop）的可交互式运行环境。在该环境中，开发者可以输入任何JS代码，按下回车后，REPL环境中将显示表达式的运行结果。</p>\n</blockquote>\n<h2 id=\"全局对象与全局变量\"><a href=\"#全局对象与全局变量\" class=\"headerlink\" title=\"全局对象与全局变量\"></a>全局对象与全局变量</h2><h3 id=\"全局对象\"><a href=\"#全局对象\" class=\"headerlink\" title=\"全局对象\"></a>全局对象</h3><ul>\n<li>Global：Node的全局对象，类似于浏览器的window。</li>\n<li>process：Node所处的当前进程。</li>\n<li>console：Node内置的console模块。</li>\n</ul>\n<h3 id=\"全局函数\"><a href=\"#全局函数\" class=\"headerlink\" title=\"全局函数\"></a>全局函数</h3><ul>\n<li>setTimeout</li>\n<li>clearTimeout</li>\n<li>setInterval</li>\n<li>clearInterval</li>\n<li>require：用于加载模块。</li>\n<li>Buffer：用于操作二进制数据。</li>\n</ul>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><ul>\n<li>__filename：当前运行的脚本文件名。</li>\n<li>__dirname：当前脚本所在的目录。</li>\n</ul>\n<p>注意：这两个变量不能直接在REPL中访问，只能在js文件中访问。</p>\n<h3 id=\"module-exports和exports\"><a href=\"#module-exports和exports\" class=\"headerlink\" title=\"module.exports和exports\"></a>module.exports和exports</h3><p>不同的模块之间怎么共享代码呢？使用Global？不可以，这样会污染全局变量，所以应该使用的是CommonJS规范的模块化功能。</p>\n<p>模块通过module.exports对外提供代码，一般情况下module.exports和exports引用的是同一个对象，但不改变它们的引用时，不会有任何问题。当引用被改变了，CommonJS导出的永远是module.exports指向的对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"REPL环境\"><a href=\"#REPL环境\" class=\"headerlink\" title=\"REPL环境\"></a>REPL环境</h2><blockquote>\n<p>在Node.js中，为了使开发者方便测试JS代码，提供了一个叫做<em>REPL</em>（Read-Eval-Print-Loop）的可交互式运行环境。在该环境中，开发者可以输入任何JS代码，按下回车后，REPL环境中将显示表达式的运行结果。</p>\n</blockquote>\n<h2 id=\"全局对象与全局变量\"><a href=\"#全局对象与全局变量\" class=\"headerlink\" title=\"全局对象与全局变量\"></a>全局对象与全局变量</h2><h3 id=\"全局对象\"><a href=\"#全局对象\" class=\"headerlink\" title=\"全局对象\"></a>全局对象</h3><ul>\n<li>Global：Node的全局对象，类似于浏览器的window。</li>\n<li>process：Node所处的当前进程。</li>\n<li>console：Node内置的console模块。</li>\n</ul>\n<h3 id=\"全局函数\"><a href=\"#全局函数\" class=\"headerlink\" title=\"全局函数\"></a>全局函数</h3><ul>\n<li>setTimeout</li>\n<li>clearTimeout</li>\n<li>setInterval</li>\n<li>clearInterval</li>\n<li>require：用于加载模块。</li>\n<li>Buffer：用于操作二进制数据。</li>\n</ul>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><ul>\n<li>__filename：当前运行的脚本文件名。</li>\n<li>__dirname：当前脚本所在的目录。</li>\n</ul>\n<p>注意：这两个变量不能直接在REPL中访问，只能在js文件中访问。</p>\n<h3 id=\"module-exports和exports\"><a href=\"#module-exports和exports\" class=\"headerlink\" title=\"module.exports和exports\"></a>module.exports和exports</h3><p>不同的模块之间怎么共享代码呢？使用Global？不可以，这样会污染全局变量，所以应该使用的是CommonJS规范的模块化功能。</p>\n<p>模块通过module.exports对外提供代码，一般情况下module.exports和exports引用的是同一个对象，但不改变它们的引用时，不会有任何问题。当引用被改变了，CommonJS导出的永远是module.exports指向的对象。</p>\n"},{"title":"如何快速学习一门新技术？","_content":"学习要合理的分配注意力，把精力放在核心的问题上，而不是细枝末节。\n\n## 初学者容易掉入的死循环\n\n当学习一门新技术时，一旦有了 “为什么” 这个念头，学习者的大脑就会掉入一个无穷循环：\n\n> \"Why\" -> \"What\" -> \"Why\" -> \"What\" -> \"Why\" -> \"What\" -> \"Why\" -> \"What\"\n\n但问题是，当你目前还不懂这些知识时，你还无法解释清楚这些概念，所以你就摆脱不了这个循环，很容易被击溃。\n\n所以，初学东西时绝对不要用大脑**，而是 “用肌肉学习”，先模仿着做。初学阶段千万不要让“大脑”介入学习的过程，否则就会跳入What-Why的死循环中。\n\n> 程序世界深不可测，奇妙无比，想想一个小学生拿着一道高等数学题拼命解题是什么场景吧。\n\n所以要先**建立主干，再填枝叶**。\n\n## 快速学习的方法论\n\n- 上网找教程，跟着模仿，不要去修改，也不要问Why。\n- 做完第一遍教程之后，再做一遍，这次要把不懂的挑出来，但是先不要管这些问题。\n- 接着对“成果”做一些小修改，看看会有什么效果。\n- 把东西改得有效果了以后，再去查Why。\n- 全都弄懂了之后，融会贯通地再做一遍，或者做一个新的东西。\n\n## 梳理流程\n\n初学阶段最重要的是**梳理流程而不是总结规律**，初学者的知识量太少，总结规律就往往陷入What-Why的死循环。\n\n## 参考\n\n[新生大学: 如何在五天内快速 “学会” 一门技能](https://www.fooads.com/post/576b3bbe5faac6c967c12b11)\n\n[第二周周记](http://chenyunli6-blog.logdown.com/posts/776667-second-week-of-weekly)\n\n[我是怎样从零基础学习程序的](http://rebecca9201-blog.logdown.com/posts/776832-how-do-i-learn-from-a-zero-base-program)\n","source":"_posts/2016-08-11-learn-new-things.md","raw":"---\ntitle: 如何快速学习一门新技术？\ncategories: 随笔\n---\n学习要合理的分配注意力，把精力放在核心的问题上，而不是细枝末节。\n\n## 初学者容易掉入的死循环\n\n当学习一门新技术时，一旦有了 “为什么” 这个念头，学习者的大脑就会掉入一个无穷循环：\n\n> \"Why\" -> \"What\" -> \"Why\" -> \"What\" -> \"Why\" -> \"What\" -> \"Why\" -> \"What\"\n\n但问题是，当你目前还不懂这些知识时，你还无法解释清楚这些概念，所以你就摆脱不了这个循环，很容易被击溃。\n\n所以，初学东西时绝对不要用大脑**，而是 “用肌肉学习”，先模仿着做。初学阶段千万不要让“大脑”介入学习的过程，否则就会跳入What-Why的死循环中。\n\n> 程序世界深不可测，奇妙无比，想想一个小学生拿着一道高等数学题拼命解题是什么场景吧。\n\n所以要先**建立主干，再填枝叶**。\n\n## 快速学习的方法论\n\n- 上网找教程，跟着模仿，不要去修改，也不要问Why。\n- 做完第一遍教程之后，再做一遍，这次要把不懂的挑出来，但是先不要管这些问题。\n- 接着对“成果”做一些小修改，看看会有什么效果。\n- 把东西改得有效果了以后，再去查Why。\n- 全都弄懂了之后，融会贯通地再做一遍，或者做一个新的东西。\n\n## 梳理流程\n\n初学阶段最重要的是**梳理流程而不是总结规律**，初学者的知识量太少，总结规律就往往陷入What-Why的死循环。\n\n## 参考\n\n[新生大学: 如何在五天内快速 “学会” 一门技能](https://www.fooads.com/post/576b3bbe5faac6c967c12b11)\n\n[第二周周记](http://chenyunli6-blog.logdown.com/posts/776667-second-week-of-weekly)\n\n[我是怎样从零基础学习程序的](http://rebecca9201-blog.logdown.com/posts/776832-how-do-i-learn-from-a-zero-base-program)\n","slug":"2016-08-11-learn-new-things","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dica7000vfsonwy1r0444","content":"<p>学习要合理的分配注意力，把精力放在核心的问题上，而不是细枝末节。</p>\n<h2 id=\"初学者容易掉入的死循环\"><a href=\"#初学者容易掉入的死循环\" class=\"headerlink\" title=\"初学者容易掉入的死循环\"></a>初学者容易掉入的死循环</h2><p>当学习一门新技术时，一旦有了 “为什么” 这个念头，学习者的大脑就会掉入一个无穷循环：</p>\n<blockquote>\n<p>“Why” -&gt; “What” -&gt; “Why” -&gt; “What” -&gt; “Why” -&gt; “What” -&gt; “Why” -&gt; “What”</p>\n</blockquote>\n<p>但问题是，当你目前还不懂这些知识时，你还无法解释清楚这些概念，所以你就摆脱不了这个循环，很容易被击溃。</p>\n<p>所以，初学东西时绝对不要用大脑**，而是 “用肌肉学习”，先模仿着做。初学阶段千万不要让“大脑”介入学习的过程，否则就会跳入What-Why的死循环中。</p>\n<blockquote>\n<p>程序世界深不可测，奇妙无比，想想一个小学生拿着一道高等数学题拼命解题是什么场景吧。</p>\n</blockquote>\n<p>所以要先<strong>建立主干，再填枝叶</strong>。</p>\n<h2 id=\"快速学习的方法论\"><a href=\"#快速学习的方法论\" class=\"headerlink\" title=\"快速学习的方法论\"></a>快速学习的方法论</h2><ul>\n<li>上网找教程，跟着模仿，不要去修改，也不要问Why。</li>\n<li>做完第一遍教程之后，再做一遍，这次要把不懂的挑出来，但是先不要管这些问题。</li>\n<li>接着对“成果”做一些小修改，看看会有什么效果。</li>\n<li>把东西改得有效果了以后，再去查Why。</li>\n<li>全都弄懂了之后，融会贯通地再做一遍，或者做一个新的东西。</li>\n</ul>\n<h2 id=\"梳理流程\"><a href=\"#梳理流程\" class=\"headerlink\" title=\"梳理流程\"></a>梳理流程</h2><p>初学阶段最重要的是<strong>梳理流程而不是总结规律</strong>，初学者的知识量太少，总结规律就往往陷入What-Why的死循环。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.fooads.com/post/576b3bbe5faac6c967c12b11\" target=\"_blank\" rel=\"noopener\">新生大学: 如何在五天内快速 “学会” 一门技能</a></p>\n<p><a href=\"http://chenyunli6-blog.logdown.com/posts/776667-second-week-of-weekly\" target=\"_blank\" rel=\"noopener\">第二周周记</a></p>\n<p><a href=\"http://rebecca9201-blog.logdown.com/posts/776832-how-do-i-learn-from-a-zero-base-program\" target=\"_blank\" rel=\"noopener\">我是怎样从零基础学习程序的</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>学习要合理的分配注意力，把精力放在核心的问题上，而不是细枝末节。</p>\n<h2 id=\"初学者容易掉入的死循环\"><a href=\"#初学者容易掉入的死循环\" class=\"headerlink\" title=\"初学者容易掉入的死循环\"></a>初学者容易掉入的死循环</h2><p>当学习一门新技术时，一旦有了 “为什么” 这个念头，学习者的大脑就会掉入一个无穷循环：</p>\n<blockquote>\n<p>“Why” -&gt; “What” -&gt; “Why” -&gt; “What” -&gt; “Why” -&gt; “What” -&gt; “Why” -&gt; “What”</p>\n</blockquote>\n<p>但问题是，当你目前还不懂这些知识时，你还无法解释清楚这些概念，所以你就摆脱不了这个循环，很容易被击溃。</p>\n<p>所以，初学东西时绝对不要用大脑**，而是 “用肌肉学习”，先模仿着做。初学阶段千万不要让“大脑”介入学习的过程，否则就会跳入What-Why的死循环中。</p>\n<blockquote>\n<p>程序世界深不可测，奇妙无比，想想一个小学生拿着一道高等数学题拼命解题是什么场景吧。</p>\n</blockquote>\n<p>所以要先<strong>建立主干，再填枝叶</strong>。</p>\n<h2 id=\"快速学习的方法论\"><a href=\"#快速学习的方法论\" class=\"headerlink\" title=\"快速学习的方法论\"></a>快速学习的方法论</h2><ul>\n<li>上网找教程，跟着模仿，不要去修改，也不要问Why。</li>\n<li>做完第一遍教程之后，再做一遍，这次要把不懂的挑出来，但是先不要管这些问题。</li>\n<li>接着对“成果”做一些小修改，看看会有什么效果。</li>\n<li>把东西改得有效果了以后，再去查Why。</li>\n<li>全都弄懂了之后，融会贯通地再做一遍，或者做一个新的东西。</li>\n</ul>\n<h2 id=\"梳理流程\"><a href=\"#梳理流程\" class=\"headerlink\" title=\"梳理流程\"></a>梳理流程</h2><p>初学阶段最重要的是<strong>梳理流程而不是总结规律</strong>，初学者的知识量太少，总结规律就往往陷入What-Why的死循环。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.fooads.com/post/576b3bbe5faac6c967c12b11\" target=\"_blank\" rel=\"noopener\">新生大学: 如何在五天内快速 “学会” 一门技能</a></p>\n<p><a href=\"http://chenyunli6-blog.logdown.com/posts/776667-second-week-of-weekly\" target=\"_blank\" rel=\"noopener\">第二周周记</a></p>\n<p><a href=\"http://rebecca9201-blog.logdown.com/posts/776832-how-do-i-learn-from-a-zero-base-program\" target=\"_blank\" rel=\"noopener\">我是怎样从零基础学习程序的</a></p>\n"},{"title":"使用Node开发微信总结","_content":"\n这几天在练习用node开发微信公众号和微信内嵌网页，基本上把主要的功能都过了一遍，也动手敲了几个demo，整套练习做完之后，有很多体会，下面总结一下心得。\n\n## 域名\n\n微信开发需要域名，映射到本地的ip和端口，一开始借助ngrok，缺点就是不太稳定，经常会挂掉。后来就换成QQ浏览器提供的微信开发工具来生成临时域名。\n\n## 认证\n\n微信接口认证也就是获取access_token，将token、timestamp、nonce三个参数进行字典排序，然后再进行sha1加密，最后与signatrue对比。这个过程需要非常细心，当时花了很长时间调试。\n\n另外，获取access_token是有次数限制的，每天2000次，所以要在服务端缓存，可以保存到数据库或者本地文件。\n\n## Koa\n\n服务端使用Koa框架来开发，Koa最核心的功能就是中间件，每个中间件传入use函数，就能按顺序执行\u0010\u0010\u0010\u0010。使用yield语法就可以实现类似“断点”式的开发。使用Koa，再加上Promise，可以写出来很优雅的代码。\n\n## 自动回复功能\n\n客户端、微信服务器和node服务器的通信流程：\n\n1. 客户端触发事件，微信服务器推送事件到node服务器；\n2. 微信服务器推送的事件是使用POST方法，格式为XML；\n3. node服务器返回XML格式的数据给微信服务器，最终再客户端完成响应。\n\n使用ejs模板需要对各种消息的模块（文字消息，图文消息，音频视频消息等等）进行封装。\n\n## 微信开发工具\n\n- 可以调试JS-SDK；\n- 有chrome控制台，非常好用；\n- 用移动调试，很酷。\n","source":"_posts/2016-08-22-wechat.md","raw":"---\ntitle: 使用Node开发微信总结\ncategories: Node\ntags: 微信公众号\n---\n\n这几天在练习用node开发微信公众号和微信内嵌网页，基本上把主要的功能都过了一遍，也动手敲了几个demo，整套练习做完之后，有很多体会，下面总结一下心得。\n\n## 域名\n\n微信开发需要域名，映射到本地的ip和端口，一开始借助ngrok，缺点就是不太稳定，经常会挂掉。后来就换成QQ浏览器提供的微信开发工具来生成临时域名。\n\n## 认证\n\n微信接口认证也就是获取access_token，将token、timestamp、nonce三个参数进行字典排序，然后再进行sha1加密，最后与signatrue对比。这个过程需要非常细心，当时花了很长时间调试。\n\n另外，获取access_token是有次数限制的，每天2000次，所以要在服务端缓存，可以保存到数据库或者本地文件。\n\n## Koa\n\n服务端使用Koa框架来开发，Koa最核心的功能就是中间件，每个中间件传入use函数，就能按顺序执行\u0010\u0010\u0010\u0010。使用yield语法就可以实现类似“断点”式的开发。使用Koa，再加上Promise，可以写出来很优雅的代码。\n\n## 自动回复功能\n\n客户端、微信服务器和node服务器的通信流程：\n\n1. 客户端触发事件，微信服务器推送事件到node服务器；\n2. 微信服务器推送的事件是使用POST方法，格式为XML；\n3. node服务器返回XML格式的数据给微信服务器，最终再客户端完成响应。\n\n使用ejs模板需要对各种消息的模块（文字消息，图文消息，音频视频消息等等）进行封装。\n\n## 微信开发工具\n\n- 可以调试JS-SDK；\n- 有chrome控制台，非常好用；\n- 用移动调试，很酷。\n","slug":"2016-08-22-wechat","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dica8000yfsony6l12azj","content":"<p>这几天在练习用node开发微信公众号和微信内嵌网页，基本上把主要的功能都过了一遍，也动手敲了几个demo，整套练习做完之后，有很多体会，下面总结一下心得。</p>\n<h2 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h2><p>微信开发需要域名，映射到本地的ip和端口，一开始借助ngrok，缺点就是不太稳定，经常会挂掉。后来就换成QQ浏览器提供的微信开发工具来生成临时域名。</p>\n<h2 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h2><p>微信接口认证也就是获取access_token，将token、timestamp、nonce三个参数进行字典排序，然后再进行sha1加密，最后与signatrue对比。这个过程需要非常细心，当时花了很长时间调试。</p>\n<p>另外，获取access_token是有次数限制的，每天2000次，所以要在服务端缓存，可以保存到数据库或者本地文件。</p>\n<h2 id=\"Koa\"><a href=\"#Koa\" class=\"headerlink\" title=\"Koa\"></a>Koa</h2><p>服务端使用Koa框架来开发，Koa最核心的功能就是中间件，每个中间件传入use函数，就能按顺序执行\u0010\u0010\u0010\u0010。使用yield语法就可以实现类似“断点”式的开发。使用Koa，再加上Promise，可以写出来很优雅的代码。</p>\n<h2 id=\"自动回复功能\"><a href=\"#自动回复功能\" class=\"headerlink\" title=\"自动回复功能\"></a>自动回复功能</h2><p>客户端、微信服务器和node服务器的通信流程：</p>\n<ol>\n<li>客户端触发事件，微信服务器推送事件到node服务器；</li>\n<li>微信服务器推送的事件是使用POST方法，格式为XML；</li>\n<li>node服务器返回XML格式的数据给微信服务器，最终再客户端完成响应。</li>\n</ol>\n<p>使用ejs模板需要对各种消息的模块（文字消息，图文消息，音频视频消息等等）进行封装。</p>\n<h2 id=\"微信开发工具\"><a href=\"#微信开发工具\" class=\"headerlink\" title=\"微信开发工具\"></a>微信开发工具</h2><ul>\n<li>可以调试JS-SDK；</li>\n<li>有chrome控制台，非常好用；</li>\n<li>用移动调试，很酷。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>这几天在练习用node开发微信公众号和微信内嵌网页，基本上把主要的功能都过了一遍，也动手敲了几个demo，整套练习做完之后，有很多体会，下面总结一下心得。</p>\n<h2 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h2><p>微信开发需要域名，映射到本地的ip和端口，一开始借助ngrok，缺点就是不太稳定，经常会挂掉。后来就换成QQ浏览器提供的微信开发工具来生成临时域名。</p>\n<h2 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h2><p>微信接口认证也就是获取access_token，将token、timestamp、nonce三个参数进行字典排序，然后再进行sha1加密，最后与signatrue对比。这个过程需要非常细心，当时花了很长时间调试。</p>\n<p>另外，获取access_token是有次数限制的，每天2000次，所以要在服务端缓存，可以保存到数据库或者本地文件。</p>\n<h2 id=\"Koa\"><a href=\"#Koa\" class=\"headerlink\" title=\"Koa\"></a>Koa</h2><p>服务端使用Koa框架来开发，Koa最核心的功能就是中间件，每个中间件传入use函数，就能按顺序执行\u0010\u0010\u0010\u0010。使用yield语法就可以实现类似“断点”式的开发。使用Koa，再加上Promise，可以写出来很优雅的代码。</p>\n<h2 id=\"自动回复功能\"><a href=\"#自动回复功能\" class=\"headerlink\" title=\"自动回复功能\"></a>自动回复功能</h2><p>客户端、微信服务器和node服务器的通信流程：</p>\n<ol>\n<li>客户端触发事件，微信服务器推送事件到node服务器；</li>\n<li>微信服务器推送的事件是使用POST方法，格式为XML；</li>\n<li>node服务器返回XML格式的数据给微信服务器，最终再客户端完成响应。</li>\n</ol>\n<p>使用ejs模板需要对各种消息的模块（文字消息，图文消息，音频视频消息等等）进行封装。</p>\n<h2 id=\"微信开发工具\"><a href=\"#微信开发工具\" class=\"headerlink\" title=\"微信开发工具\"></a>微信开发工具</h2><ul>\n<li>可以调试JS-SDK；</li>\n<li>有chrome控制台，非常好用；</li>\n<li>用移动调试，很酷。</li>\n</ul>\n"},{"title":"weinre移动调试工具","_content":"\nweinre可以在pc端远程调试移动设备浏览器中的web页面，能即时调试DOM元素、CSS和JS。\n\n官网地址: [weinre](https://people.apache.org/~pmuellr/weinre/docs/latest/)\n\n## 使用方法\n\n安装\n\n```\nsudo npm -g install weinre\n```\n\n\n\n启动服务\n\n```\nweinre --httpPort 8082 --boundHost -all-\n```\n\n\n\n打开服务首页\n\n```\nhttp://localhost:8082/\n```\n\n\n- pc端的调试页面地址 http://localhost:8082/client/#anonymous\n- js链接：http://localhost:8082/target/target-script-min.js#anonymous\n\n把js链接引入到被调试页面，在pc端打开调试页面，就可以开始调试了。\n\n## 最有用的几个功能\n\n- element：查看html元内容，动态修改css；\n- network：查看网络请求；\n- console：打印log，查看报错信息。\n","source":"_posts/2016-08-24-weinre.md","raw":"---\ntitle: weinre移动调试工具\ncategories: 工具\n\n---\n\nweinre可以在pc端远程调试移动设备浏览器中的web页面，能即时调试DOM元素、CSS和JS。\n\n官网地址: [weinre](https://people.apache.org/~pmuellr/weinre/docs/latest/)\n\n## 使用方法\n\n安装\n\n```\nsudo npm -g install weinre\n```\n\n\n\n启动服务\n\n```\nweinre --httpPort 8082 --boundHost -all-\n```\n\n\n\n打开服务首页\n\n```\nhttp://localhost:8082/\n```\n\n\n- pc端的调试页面地址 http://localhost:8082/client/#anonymous\n- js链接：http://localhost:8082/target/target-script-min.js#anonymous\n\n把js链接引入到被调试页面，在pc端打开调试页面，就可以开始调试了。\n\n## 最有用的几个功能\n\n- element：查看html元内容，动态修改css；\n- network：查看网络请求；\n- console：打印log，查看报错信息。\n","slug":"2016-08-24-weinre","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicaa0012fsonlnrlvuvf","content":"<p>weinre可以在pc端远程调试移动设备浏览器中的web页面，能即时调试DOM元素、CSS和JS。</p>\n<p>官网地址: <a href=\"https://people.apache.org/~pmuellr/weinre/docs/latest/\" target=\"_blank\" rel=\"noopener\">weinre</a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm -g install weinre</span><br></pre></td></tr></table></figure>\n<p>启动服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weinre --httpPort 8082 --boundHost -all-</span><br></pre></td></tr></table></figure>\n<p>打开服务首页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8082/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pc端的调试页面地址 <a href=\"http://localhost:8082/client/#anonymous\" target=\"_blank\" rel=\"noopener\">http://localhost:8082/client/#anonymous</a></li>\n<li>js链接：<a href=\"http://localhost:8082/target/target-script-min.js#anonymous\" target=\"_blank\" rel=\"noopener\">http://localhost:8082/target/target-script-min.js#anonymous</a></li>\n</ul>\n<p>把js链接引入到被调试页面，在pc端打开调试页面，就可以开始调试了。</p>\n<h2 id=\"最有用的几个功能\"><a href=\"#最有用的几个功能\" class=\"headerlink\" title=\"最有用的几个功能\"></a>最有用的几个功能</h2><ul>\n<li>element：查看html元内容，动态修改css；</li>\n<li>network：查看网络请求；</li>\n<li>console：打印log，查看报错信息。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>weinre可以在pc端远程调试移动设备浏览器中的web页面，能即时调试DOM元素、CSS和JS。</p>\n<p>官网地址: <a href=\"https://people.apache.org/~pmuellr/weinre/docs/latest/\" target=\"_blank\" rel=\"noopener\">weinre</a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm -g install weinre</span><br></pre></td></tr></table></figure>\n<p>启动服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weinre --httpPort 8082 --boundHost -all-</span><br></pre></td></tr></table></figure>\n<p>打开服务首页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8082/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pc端的调试页面地址 <a href=\"http://localhost:8082/client/#anonymous\" target=\"_blank\" rel=\"noopener\">http://localhost:8082/client/#anonymous</a></li>\n<li>js链接：<a href=\"http://localhost:8082/target/target-script-min.js#anonymous\" target=\"_blank\" rel=\"noopener\">http://localhost:8082/target/target-script-min.js#anonymous</a></li>\n</ul>\n<p>把js链接引入到被调试页面，在pc端打开调试页面，就可以开始调试了。</p>\n<h2 id=\"最有用的几个功能\"><a href=\"#最有用的几个功能\" class=\"headerlink\" title=\"最有用的几个功能\"></a>最有用的几个功能</h2><ul>\n<li>element：查看html元内容，动态修改css；</li>\n<li>network：查看网络请求；</li>\n<li>console：打印log，查看报错信息。</li>\n</ul>\n"},{"title":"supertest测试框架","_content":"\n用来测试nodejs http服务的框架，断言的语法基于superagent框架（在客户端和nodejs都能使用的http请求框架，语法优雅）\n\n## API\n\n> ### .expect(status[, fn])\n>\n> Assert response status code.\n>\n> ### .expect(status, body[, fn])\n>\n> Assert response status code and body.\n>\n> ### .expect(body[, fn])\n>\n> Assert response body text with a string, regular expression, or parsed body object.\n>\n> ### .expect(field, value[, fn])\n>\n> Assert header field value with a string or regular expression.\n>\n> ### .expect(function(res) {})\n>\n> Pass a custom assertion function. It'll be given the response object to check. If the check fails, throw an error.\n>\n> ### .end(fn)\n>\n> Perform the request and invoke fn(err, res).\n\n## 实例\n\n```javascript\ndescribe('GET', function(){\n  it('should work', function(done){\n    request\n      .get('/')\n\t  .expect('Content-Type', /json/)\n      .expect(200)\n      .expect({ name: 'TJ' }, done);\n  })\n})\n```\n","source":"_posts/2016-08-25-supertest.md","raw":"---\ntitle: supertest测试框架\ncategories: Node\ntags: [单元测试]\n---\n\n用来测试nodejs http服务的框架，断言的语法基于superagent框架（在客户端和nodejs都能使用的http请求框架，语法优雅）\n\n## API\n\n> ### .expect(status[, fn])\n>\n> Assert response status code.\n>\n> ### .expect(status, body[, fn])\n>\n> Assert response status code and body.\n>\n> ### .expect(body[, fn])\n>\n> Assert response body text with a string, regular expression, or parsed body object.\n>\n> ### .expect(field, value[, fn])\n>\n> Assert header field value with a string or regular expression.\n>\n> ### .expect(function(res) {})\n>\n> Pass a custom assertion function. It'll be given the response object to check. If the check fails, throw an error.\n>\n> ### .end(fn)\n>\n> Perform the request and invoke fn(err, res).\n\n## 实例\n\n```javascript\ndescribe('GET', function(){\n  it('should work', function(done){\n    request\n      .get('/')\n\t  .expect('Content-Type', /json/)\n      .expect(200)\n      .expect({ name: 'TJ' }, done);\n  })\n})\n```\n","slug":"2016-08-25-supertest","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicab0013fsonf0xmjd1s","content":"<p>用来测试nodejs http服务的框架，断言的语法基于superagent框架（在客户端和nodejs都能使用的http请求框架，语法优雅）</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><blockquote>\n<h3 id=\"expect-status-fn\"><a href=\"#expect-status-fn\" class=\"headerlink\" title=\".expect(status[, fn])\"></a>.expect(status[, fn])</h3><p>Assert response status code.</p>\n<h3 id=\"expect-status-body-fn\"><a href=\"#expect-status-body-fn\" class=\"headerlink\" title=\".expect(status, body[, fn])\"></a>.expect(status, body[, fn])</h3><p>Assert response status code and body.</p>\n<h3 id=\"expect-body-fn\"><a href=\"#expect-body-fn\" class=\"headerlink\" title=\".expect(body[, fn])\"></a>.expect(body[, fn])</h3><p>Assert response body text with a string, regular expression, or parsed body object.</p>\n<h3 id=\"expect-field-value-fn\"><a href=\"#expect-field-value-fn\" class=\"headerlink\" title=\".expect(field, value[, fn])\"></a>.expect(field, value[, fn])</h3><p>Assert header field value with a string or regular expression.</p>\n<h3 id=\"expect-function-res\"><a href=\"#expect-function-res\" class=\"headerlink\" title=\".expect(function(res) {})\"></a>.expect(function(res) {})</h3><p>Pass a custom assertion function. It’ll be given the response object to check. If the check fails, throw an error.</p>\n<h3 id=\"end-fn\"><a href=\"#end-fn\" class=\"headerlink\" title=\".end(fn)\"></a>.end(fn)</h3><p>Perform the request and invoke fn(err, res).</p>\n</blockquote>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'GET'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should work'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>)</span>&#123;</span><br><span class=\"line\">    request</span><br><span class=\"line\">      .get(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">\t  .expect(<span class=\"string\">'Content-Type'</span>, /json/)</span><br><span class=\"line\">      .expect(<span class=\"number\">200</span>)</span><br><span class=\"line\">      .expect(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'TJ'</span> &#125;, done);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>用来测试nodejs http服务的框架，断言的语法基于superagent框架（在客户端和nodejs都能使用的http请求框架，语法优雅）</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><blockquote>\n<h3 id=\"expect-status-fn\"><a href=\"#expect-status-fn\" class=\"headerlink\" title=\".expect(status[, fn])\"></a>.expect(status[, fn])</h3><p>Assert response status code.</p>\n<h3 id=\"expect-status-body-fn\"><a href=\"#expect-status-body-fn\" class=\"headerlink\" title=\".expect(status, body[, fn])\"></a>.expect(status, body[, fn])</h3><p>Assert response status code and body.</p>\n<h3 id=\"expect-body-fn\"><a href=\"#expect-body-fn\" class=\"headerlink\" title=\".expect(body[, fn])\"></a>.expect(body[, fn])</h3><p>Assert response body text with a string, regular expression, or parsed body object.</p>\n<h3 id=\"expect-field-value-fn\"><a href=\"#expect-field-value-fn\" class=\"headerlink\" title=\".expect(field, value[, fn])\"></a>.expect(field, value[, fn])</h3><p>Assert header field value with a string or regular expression.</p>\n<h3 id=\"expect-function-res\"><a href=\"#expect-function-res\" class=\"headerlink\" title=\".expect(function(res) {})\"></a>.expect(function(res) {})</h3><p>Pass a custom assertion function. It’ll be given the response object to check. If the check fails, throw an error.</p>\n<h3 id=\"end-fn\"><a href=\"#end-fn\" class=\"headerlink\" title=\".end(fn)\"></a>.end(fn)</h3><p>Perform the request and invoke fn(err, res).</p>\n</blockquote>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'GET'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should work'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>)</span>&#123;</span><br><span class=\"line\">    request</span><br><span class=\"line\">      .get(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">\t  .expect(<span class=\"string\">'Content-Type'</span>, /json/)</span><br><span class=\"line\">      .expect(<span class=\"number\">200</span>)</span><br><span class=\"line\">      .expect(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'TJ'</span> &#125;, done);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"post数据处理","_content":"\n## req.body\n\nnodejs的req没有定义body，所以为undefined\n\n## 表单提交post请求\n\n两个重要的属性\n\n> Content-Type: application/x-www-form-urlencoded\n>\n> Form Data: name=raimonfuns&password=1234 （这是stream）\n\n## 接收数据流\n\n- stream.on('data')\n  - 将data添加到buffers\n- stream.on('end')\n  - buffer = Buffer.concat(buffers)\n  - buffer.toString('utf8')\n\n## querystring模块\n\n```javascript\n> qs.parse('name=raimonfuns&password=1234')\n{ name: 'raimonfuns', password: '1234' }\n```\n","source":"_posts/2016-09-16-login_register.md","raw":"---\ntitle: post数据处理\ncategories: Node\n---\n\n## req.body\n\nnodejs的req没有定义body，所以为undefined\n\n## 表单提交post请求\n\n两个重要的属性\n\n> Content-Type: application/x-www-form-urlencoded\n>\n> Form Data: name=raimonfuns&password=1234 （这是stream）\n\n## 接收数据流\n\n- stream.on('data')\n  - 将data添加到buffers\n- stream.on('end')\n  - buffer = Buffer.concat(buffers)\n  - buffer.toString('utf8')\n\n## querystring模块\n\n```javascript\n> qs.parse('name=raimonfuns&password=1234')\n{ name: 'raimonfuns', password: '1234' }\n```\n","slug":"2016-09-16-login_register","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicad0017fsonsfclidr7","content":"<h2 id=\"req-body\"><a href=\"#req-body\" class=\"headerlink\" title=\"req.body\"></a>req.body</h2><p>nodejs的req没有定义body，所以为undefined</p>\n<h2 id=\"表单提交post请求\"><a href=\"#表单提交post请求\" class=\"headerlink\" title=\"表单提交post请求\"></a>表单提交post请求</h2><p>两个重要的属性</p>\n<blockquote>\n<p>Content-Type: application/x-www-form-urlencoded</p>\n<p>Form Data: name=raimonfuns&amp;password=1234 （这是stream）</p>\n</blockquote>\n<h2 id=\"接收数据流\"><a href=\"#接收数据流\" class=\"headerlink\" title=\"接收数据流\"></a>接收数据流</h2><ul>\n<li>stream.on(‘data’)<ul>\n<li>将data添加到buffers</li>\n</ul>\n</li>\n<li>stream.on(‘end’)<ul>\n<li>buffer = Buffer.concat(buffers)</li>\n<li>buffer.toString(‘utf8’)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"querystring模块\"><a href=\"#querystring模块\" class=\"headerlink\" title=\"querystring模块\"></a>querystring模块</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; qs.parse(<span class=\"string\">'name=raimonfuns&amp;password=1234'</span>)</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'raimonfuns'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'1234'</span> &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"req-body\"><a href=\"#req-body\" class=\"headerlink\" title=\"req.body\"></a>req.body</h2><p>nodejs的req没有定义body，所以为undefined</p>\n<h2 id=\"表单提交post请求\"><a href=\"#表单提交post请求\" class=\"headerlink\" title=\"表单提交post请求\"></a>表单提交post请求</h2><p>两个重要的属性</p>\n<blockquote>\n<p>Content-Type: application/x-www-form-urlencoded</p>\n<p>Form Data: name=raimonfuns&amp;password=1234 （这是stream）</p>\n</blockquote>\n<h2 id=\"接收数据流\"><a href=\"#接收数据流\" class=\"headerlink\" title=\"接收数据流\"></a>接收数据流</h2><ul>\n<li>stream.on(‘data’)<ul>\n<li>将data添加到buffers</li>\n</ul>\n</li>\n<li>stream.on(‘end’)<ul>\n<li>buffer = Buffer.concat(buffers)</li>\n<li>buffer.toString(‘utf8’)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"querystring模块\"><a href=\"#querystring模块\" class=\"headerlink\" title=\"querystring模块\"></a>querystring模块</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; qs.parse(<span class=\"string\">'name=raimonfuns&amp;password=1234'</span>)</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'raimonfuns'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'1234'</span> &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"使用koa2 + vue开发所遇到的问题总结","_content":"## vuex中store的获取\n\n用的比较多的方式是这种：\n\n![][image-1]\n\n后来遇到有一种情况：处理数据之后，需要重定向路由，所以需要拿到router，而如果要拿到router，那就要拿到store，那么，怎么拿到store呢？用这种方式：\n\n![][image-2]\n\n这种写法既可以拿到router，也可以拿到dispatch，之前没发现，做到这一步才知道。\n\n## mongodb的count()方法要加await\n\n![][image-3]\n\n错误：漏掉了加await。\n\n结果：得不到返回结果。\n\n分析：花了很长时间才找出原因，**所有的mongo数据库操作都要加await**，因为是异步的。\n\n## vuex module必须是对象\n\n![][image-4]\n\n错误：直接把一个对象赋值给state。\n\n结果：赋值不生效，对方只提供一个空对象。\n\n分析：vuex module对外提供的必须是一个对象，所有的数据都放要在这个对象中。\n\n## vue-resource返回的data\n\n![][image-5]\n\n错误：后端接口返回一个json数据，前端接口通过response.data获取。\n\n结果：获取到的是字符串，而不是json。\n\n分析：vue返回的response.data是一个字符串而不是json，可以通过response.json()获取到json数据。\n\n## 运行node-bunyan报错\n\n```\n[SyntaxError: Unexpected token ILLEGAL]\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n\n解决方法：\n\n```\nrm -rf node_modules/ && npm install --no-optional\n```\n\n[链接][1]\n\n## await next()\n\n![][image-6]\n\n错误：next()方法前面没加await\n\n结果：后面的middleware不能正常工作。\n\n分析：express 通过 yield next进入下一个middleware，而koa2的写法是 await next()\n\n## koa-compose()\n\n![][image-7]\n\nkoa-compose可以串行执行中间件，作用与co类似。\n\n## 用户名已存在\n\n![][image-8]\n\n错误：没有检测用户是否已经存在\n\n结果：mongodb执行new user()时报错\n\n分析：在mongodb创建数据之前，先检查数据是否已经存在。\n\n[1]:\thttps://github.com/trentm/node-bunyan/issues/216\n\n[image-1]:\thttp://ww2.sinaimg.cn/large/65e4f1e6gw1f8yzgxbi0yj20cy03kq3k.jpg\n[image-2]:\thttp://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzmf4hpuj20cz04gt9p.jpg\n[image-3]:\thttp://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzp9keakj20dy03n0te.jpg\n[image-4]:\thttp://ww4.sinaimg.cn/large/65e4f1e6gw1f8yzt32q9bj209508v3z3.jpg\n[image-5]:\thttp://ww3.sinaimg.cn/large/65e4f1e6gw1f8z02yq1i4j20bg0470tg.jpg\n[image-6]:\thttp://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcfir0yej213602ydhu.jpg\n[image-7]:\thttp://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcjqlccej20c00do76g.jpg\n[image-8]:\thttp://ww2.sinaimg.cn/large/006y8lVajw1f8zp4xytnvj30cw08q0ty.jpg","source":"_posts/2016-10-20-koa2-vue-1.md","raw":"---\ntitle: 使用koa2 + vue开发所遇到的问题总结\ncategories: Javascript\ntags: [Koa2, Vue]\n---\n## vuex中store的获取\n\n用的比较多的方式是这种：\n\n![][image-1]\n\n后来遇到有一种情况：处理数据之后，需要重定向路由，所以需要拿到router，而如果要拿到router，那就要拿到store，那么，怎么拿到store呢？用这种方式：\n\n![][image-2]\n\n这种写法既可以拿到router，也可以拿到dispatch，之前没发现，做到这一步才知道。\n\n## mongodb的count()方法要加await\n\n![][image-3]\n\n错误：漏掉了加await。\n\n结果：得不到返回结果。\n\n分析：花了很长时间才找出原因，**所有的mongo数据库操作都要加await**，因为是异步的。\n\n## vuex module必须是对象\n\n![][image-4]\n\n错误：直接把一个对象赋值给state。\n\n结果：赋值不生效，对方只提供一个空对象。\n\n分析：vuex module对外提供的必须是一个对象，所有的数据都放要在这个对象中。\n\n## vue-resource返回的data\n\n![][image-5]\n\n错误：后端接口返回一个json数据，前端接口通过response.data获取。\n\n结果：获取到的是字符串，而不是json。\n\n分析：vue返回的response.data是一个字符串而不是json，可以通过response.json()获取到json数据。\n\n## 运行node-bunyan报错\n\n```\n[SyntaxError: Unexpected token ILLEGAL]\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n\n解决方法：\n\n```\nrm -rf node_modules/ && npm install --no-optional\n```\n\n[链接][1]\n\n## await next()\n\n![][image-6]\n\n错误：next()方法前面没加await\n\n结果：后面的middleware不能正常工作。\n\n分析：express 通过 yield next进入下一个middleware，而koa2的写法是 await next()\n\n## koa-compose()\n\n![][image-7]\n\nkoa-compose可以串行执行中间件，作用与co类似。\n\n## 用户名已存在\n\n![][image-8]\n\n错误：没有检测用户是否已经存在\n\n结果：mongodb执行new user()时报错\n\n分析：在mongodb创建数据之前，先检查数据是否已经存在。\n\n[1]:\thttps://github.com/trentm/node-bunyan/issues/216\n\n[image-1]:\thttp://ww2.sinaimg.cn/large/65e4f1e6gw1f8yzgxbi0yj20cy03kq3k.jpg\n[image-2]:\thttp://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzmf4hpuj20cz04gt9p.jpg\n[image-3]:\thttp://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzp9keakj20dy03n0te.jpg\n[image-4]:\thttp://ww4.sinaimg.cn/large/65e4f1e6gw1f8yzt32q9bj209508v3z3.jpg\n[image-5]:\thttp://ww3.sinaimg.cn/large/65e4f1e6gw1f8z02yq1i4j20bg0470tg.jpg\n[image-6]:\thttp://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcfir0yej213602ydhu.jpg\n[image-7]:\thttp://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcjqlccej20c00do76g.jpg\n[image-8]:\thttp://ww2.sinaimg.cn/large/006y8lVajw1f8zp4xytnvj30cw08q0ty.jpg","slug":"2016-10-20-koa2-vue-1","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicae0019fsono9xs8o4m","content":"<h2 id=\"vuex中store的获取\"><a href=\"#vuex中store的获取\" class=\"headerlink\" title=\"vuex中store的获取\"></a>vuex中store的获取</h2><p>用的比较多的方式是这种：</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/65e4f1e6gw1f8yzgxbi0yj20cy03kq3k.jpg\" alt=\"\"></p>\n<p>后来遇到有一种情况：处理数据之后，需要重定向路由，所以需要拿到router，而如果要拿到router，那就要拿到store，那么，怎么拿到store呢？用这种方式：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzmf4hpuj20cz04gt9p.jpg\" alt=\"\"></p>\n<p>这种写法既可以拿到router，也可以拿到dispatch，之前没发现，做到这一步才知道。</p>\n<h2 id=\"mongodb的count-方法要加await\"><a href=\"#mongodb的count-方法要加await\" class=\"headerlink\" title=\"mongodb的count()方法要加await\"></a>mongodb的count()方法要加await</h2><p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzp9keakj20dy03n0te.jpg\" alt=\"\"></p>\n<p>错误：漏掉了加await。</p>\n<p>结果：得不到返回结果。</p>\n<p>分析：花了很长时间才找出原因，<strong>所有的mongo数据库操作都要加await</strong>，因为是异步的。</p>\n<h2 id=\"vuex-module必须是对象\"><a href=\"#vuex-module必须是对象\" class=\"headerlink\" title=\"vuex module必须是对象\"></a>vuex module必须是对象</h2><p><img src=\"http://ww4.sinaimg.cn/large/65e4f1e6gw1f8yzt32q9bj209508v3z3.jpg\" alt=\"\"></p>\n<p>错误：直接把一个对象赋值给state。</p>\n<p>结果：赋值不生效，对方只提供一个空对象。</p>\n<p>分析：vuex module对外提供的必须是一个对象，所有的数据都放要在这个对象中。</p>\n<h2 id=\"vue-resource返回的data\"><a href=\"#vue-resource返回的data\" class=\"headerlink\" title=\"vue-resource返回的data\"></a>vue-resource返回的data</h2><p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8z02yq1i4j20bg0470tg.jpg\" alt=\"\"></p>\n<p>错误：后端接口返回一个json数据，前端接口通过response.data获取。</p>\n<p>结果：获取到的是字符串，而不是json。</p>\n<p>分析：vue返回的response.data是一个字符串而不是json，可以通过response.json()获取到json数据。</p>\n<h2 id=\"运行node-bunyan报错\"><a href=\"#运行node-bunyan报错\" class=\"headerlink\" title=\"运行node-bunyan报错\"></a>运行node-bunyan报错</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SyntaxError: Unexpected token ILLEGAL]</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf node_modules/ &amp;&amp; npm install --no-optional</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/trentm/node-bunyan/issues/216\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<h2 id=\"await-next\"><a href=\"#await-next\" class=\"headerlink\" title=\"await next()\"></a>await next()</h2><p><img src=\"http://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcfir0yej213602ydhu.jpg\" alt=\"\"></p>\n<p>错误：next()方法前面没加await</p>\n<p>结果：后面的middleware不能正常工作。</p>\n<p>分析：express 通过 yield next进入下一个middleware，而koa2的写法是 await next()</p>\n<h2 id=\"koa-compose\"><a href=\"#koa-compose\" class=\"headerlink\" title=\"koa-compose()\"></a>koa-compose()</h2><p><img src=\"http://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcjqlccej20c00do76g.jpg\" alt=\"\"></p>\n<p>koa-compose可以串行执行中间件，作用与co类似。</p>\n<h2 id=\"用户名已存在\"><a href=\"#用户名已存在\" class=\"headerlink\" title=\"用户名已存在\"></a>用户名已存在</h2><p><img src=\"http://ww2.sinaimg.cn/large/006y8lVajw1f8zp4xytnvj30cw08q0ty.jpg\" alt=\"\"></p>\n<p>错误：没有检测用户是否已经存在</p>\n<p>结果：mongodb执行new user()时报错</p>\n<p>分析：在mongodb创建数据之前，先检查数据是否已经存在。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vuex中store的获取\"><a href=\"#vuex中store的获取\" class=\"headerlink\" title=\"vuex中store的获取\"></a>vuex中store的获取</h2><p>用的比较多的方式是这种：</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/65e4f1e6gw1f8yzgxbi0yj20cy03kq3k.jpg\" alt=\"\"></p>\n<p>后来遇到有一种情况：处理数据之后，需要重定向路由，所以需要拿到router，而如果要拿到router，那就要拿到store，那么，怎么拿到store呢？用这种方式：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzmf4hpuj20cz04gt9p.jpg\" alt=\"\"></p>\n<p>这种写法既可以拿到router，也可以拿到dispatch，之前没发现，做到这一步才知道。</p>\n<h2 id=\"mongodb的count-方法要加await\"><a href=\"#mongodb的count-方法要加await\" class=\"headerlink\" title=\"mongodb的count()方法要加await\"></a>mongodb的count()方法要加await</h2><p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzp9keakj20dy03n0te.jpg\" alt=\"\"></p>\n<p>错误：漏掉了加await。</p>\n<p>结果：得不到返回结果。</p>\n<p>分析：花了很长时间才找出原因，<strong>所有的mongo数据库操作都要加await</strong>，因为是异步的。</p>\n<h2 id=\"vuex-module必须是对象\"><a href=\"#vuex-module必须是对象\" class=\"headerlink\" title=\"vuex module必须是对象\"></a>vuex module必须是对象</h2><p><img src=\"http://ww4.sinaimg.cn/large/65e4f1e6gw1f8yzt32q9bj209508v3z3.jpg\" alt=\"\"></p>\n<p>错误：直接把一个对象赋值给state。</p>\n<p>结果：赋值不生效，对方只提供一个空对象。</p>\n<p>分析：vuex module对外提供的必须是一个对象，所有的数据都放要在这个对象中。</p>\n<h2 id=\"vue-resource返回的data\"><a href=\"#vue-resource返回的data\" class=\"headerlink\" title=\"vue-resource返回的data\"></a>vue-resource返回的data</h2><p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8z02yq1i4j20bg0470tg.jpg\" alt=\"\"></p>\n<p>错误：后端接口返回一个json数据，前端接口通过response.data获取。</p>\n<p>结果：获取到的是字符串，而不是json。</p>\n<p>分析：vue返回的response.data是一个字符串而不是json，可以通过response.json()获取到json数据。</p>\n<h2 id=\"运行node-bunyan报错\"><a href=\"#运行node-bunyan报错\" class=\"headerlink\" title=\"运行node-bunyan报错\"></a>运行node-bunyan报错</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SyntaxError: Unexpected token ILLEGAL]</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf node_modules/ &amp;&amp; npm install --no-optional</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/trentm/node-bunyan/issues/216\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<h2 id=\"await-next\"><a href=\"#await-next\" class=\"headerlink\" title=\"await next()\"></a>await next()</h2><p><img src=\"http://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcfir0yej213602ydhu.jpg\" alt=\"\"></p>\n<p>错误：next()方法前面没加await</p>\n<p>结果：后面的middleware不能正常工作。</p>\n<p>分析：express 通过 yield next进入下一个middleware，而koa2的写法是 await next()</p>\n<h2 id=\"koa-compose\"><a href=\"#koa-compose\" class=\"headerlink\" title=\"koa-compose()\"></a>koa-compose()</h2><p><img src=\"http://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcjqlccej20c00do76g.jpg\" alt=\"\"></p>\n<p>koa-compose可以串行执行中间件，作用与co类似。</p>\n<h2 id=\"用户名已存在\"><a href=\"#用户名已存在\" class=\"headerlink\" title=\"用户名已存在\"></a>用户名已存在</h2><p><img src=\"http://ww2.sinaimg.cn/large/006y8lVajw1f8zp4xytnvj30cw08q0ty.jpg\" alt=\"\"></p>\n<p>错误：没有检测用户是否已经存在</p>\n<p>结果：mongodb执行new user()时报错</p>\n<p>分析：在mongodb创建数据之前，先检查数据是否已经存在。</p>\n"},{"title":"程序员的70条原则","_content":"\n在生活中，每个人都有一套自己的价值观，并形成一套处事原则，根据这套原则决定自己应该做什么，不应该做什么。可以说，所有的主动选择都是由价值观决定的。同理，在编程的世界里，程序员也需要一套原则，来规定自己应该做什么，不应该做什么。\n\n《程序员修炼之道 — 从小工到专家》一书给出了70条原则，可以作为每一个程序员的基本原则，我们可以根据这些原则来做正确的事情。\n\n1. 关心你的技艺\n   Care About Your Craft\n   如果你不在乎能否漂亮地开发出软件，你又为何要耗费生命去开发软件呢？\n\n2. 思考！你的工作\n   Think! About Your Work\n   关掉自动驾驶仪，接管操作。不断地批评和评估你的工作。\n\n3. 提供各种选择，不要找蹩脚的借口\n   Provide Options, Don't Make Lame Excuses\n   要提供各种选择，而不是找借口。不要说事情做不到；说明能够做什么。\n\n4. 不要容忍破窗户\n   Don‘t Live with Broken Windows\n   当你看到糟糕的设计、错误的决策和糟糕的代码，修正它们。\n\n5. 做变化的催化剂\n   Be a Catalyst for Change\n   你不能强迫人们改变。相反，要向他们展示未来可能会怎样，并帮助他们参与对未来的创造。\n\n6. 记住大图景\n   Remember the Big Picture\n   不要太过于专注细节，一致忘了查看你周围正在发生什么。\n\n7. 使质量成为需求问题\n   Make Quality a Requirements Issue\n   让你的用户参与确定真正的质量需求。\n\n8. 定期为你的知识资产投资\n   Invest Regularly in Your Knowledge Portfolio\n   让学习成为习惯。\n\n9. 批评地分析你读到的和听到的\n   Critically Analyze What You Read and Hear\n   不要被供应商、媒体炒作、或胶条左右。要按照你自己的看法和你的项目的情况去对信息进行分析。\n\n10. 你说什么和你怎么说同样重要\n   It's Both What You Say and the Way You Say It\n   如果你不能有效地向他人传达你的了不起想法，这些想法就毫无用处。\n\n11. 不要重复你自己\n   DRY - Don't Repeat Yourself\n   系统中的每一项知识都必须具有单一、无歧义、权威的表示。\n\n12. 让复用变得容易\n   Make It Easy to Reuse\n   如果复用很容易，人们就会去复用。创造一个支持复用的环境。\n\n13. 消除无关事物之间的影响\n   Eliminate Effects Between Unrelated Thins\n   设计自足、独立、并具有单一、良好定义的目的的组件。\n\n14. 不存在最终决策\n   There Are No Final Decisions\n   没有决策是浇铸在石头上的。相反，要把每项决策都视为是写在沙滩上的，并为变化做好计划。\n\n15. 用曳光弹找到目标\n   Use Tracer Bullets to Find the Target\n   用曳光弹能通过试验各种事物并检查它们离目标有多远来让你追踪目标。\n\n16. 为了学习而制作原型\n   Prototype to learn\n   原型制作是一种学习经验。其价值并不在于所产生的代码，而在于所学到的教经验教训。\n\n17. 靠近问题领域编程\n   Program Close to the Problem domain\n   用你的用户的语言进行设计和编码\n\n18. 估算，以避免发生意外\n   Estimate to Avoid Surprises\n   在着手之前先进行估算。你将提前发现潜在的问题。\n\n19. 通过代码对进度表进行迭代\n   Iterate the Schedule with the Code\n   用你在进行实现时获得的经验提炼项目的时间标度。\n\n20. 用纯文本保存知识\n   Keep Knowledge in Plain Text\n   纯文本不会过时。它能够帮助你有效利用你的工作，并简化调试和测试。\n\n21. 利用命令shell的力量\n   Use the Power of Command Shells\n   当图形用户界面无能为力时使用shell。\n\n22. 用好一种编辑器\n   Use a Single Editor Well\n   编辑器应该是你的手的延伸；确保你的编辑器是可配置、可拓展和可编程的。\n\n23. 总是使用源码控制\n   Always Use Source Code Control\n   源码控制是你的工作的时间机器 — 你能够回到过去。\n\n24. 要修正问题，而不是发出指责\n   Fix the Problem, Not the Blame\n   bug是你的过程还是别人的过程，并不是很重要 — 它仍然是你的问题，它仍然需要被修正。\n\n25. 不要恐慌\n   Don't Panic When Debuging\n   做一次深呼吸，思考什么可能是bug的原因。\n\n26. “Select”没有问题\n   “select” Isn't Broken\n   在OS或者是编译器、或者是第三方产品或库中很少发现bug。bug很可能在应用中。\n\n27. 不要假定，要证明\n   Don't Assume It — Prove It\n   在实际环境中 — 使用真正的数据和边界条件 — 证明你的假定。\n\n28. 学习一种文本操作语言\n   Learn a Text Manipilation Language\n   你用每天的很大一部分时间处理文本，为什么不让计算机替你完成部分工作呢？\n\n29. 编写能编写代码的代码\n   Write Code That Writes Code\n   代码生成器能提高你的生产率，并有助于避免重复。\n\n30. 你不可能写出完美的软件\n   You Can't Write Perfect Software\n   软件不可能完美。保护你的代码和用户，使它（他）们免于能够预见的错误。\n\n31. 通过合约进行设计\n   Design with Caontracts\n   使用合约建立文档，并检验代码所做的事情正好是它声明要做的。\n\n32. 早崩溃\n   Crash Early\n   死程序造成的危害通常比有问题的程序要小得多。\n\n33. 用断言避免不可能发生的事情\n   Use Assertions to Prevent the Impossible\n   断言验证你的各种假定。在一个不确定的世界里，用断言保护你的代码。\n\n34. 将异常用于异常的问题\n   Use Exceptions for Exceptional Problems\n   异常可能会遭受经典的意大利面条式的所有可能性和可维护性问题的折磨。将异常保给异常的事物。\n\n35. 要有始有终\n   Finish What You Start\n   只要可能，分配某资源的例程或对象也应该负责接触其分配。\n\n36. 是模块之间的耦合减至最少\n   Minimize Coupling Between Modules\n   通过编写“羞涩的”代码并应用得墨芯耳法则来避免耦合。\n\n37. 要配置，不要集成\n   Configure, Don't Integrate\n   要将应用的各种技术选择实现为可配置，而不是通过集成或工程方法实现。\n\n38. 将抽象放进代码，细节放进元数据\n   Put Abstractions in Code, Details in Metadata\n   为一本情况编程，将细节放在被编译的代码库之外。\n\n39. 分析工作流，以改善并发性\n   Analyze Workflow to Improve Concurrency\n   利用你的用户的工作流中的并发性。\n\n40. 用服务进行设计\n   Design Using Services\n   根据服务 — 独立的、在良好定义、一致的接口之后的并发对象 — 进行设计。\n\n41. 总是为并发进行设计\n   Always Design for Concurrency\n   容许并发，你将会设计出更整洁、具有更少假定的接口。\n\n42. 使试图与模型分离\n   Separate Views form Medels\n   要根据模型和视图设计你的应用，从而以低廉的代码获取灵活性。\n\n43. 用黑板协调工作流\n   Use BlackBoards to Coordinate Workflow\n   用黑板协调完全不同的事实和因素，同时又使各参与方保持独立和隔离。\n\n44. 不要靠巧合编程\n   Dont't Program by Coincidence\n   只依靠可靠的事物。注意偶发现的复杂性，不要把幸运的巧合与有目的的计划混为一谈。\n\n45. 估算你的算法的阶\n   Estimate the Order of Your Algorithms\n   在你编写代码之前，先大致估算事情需要多长时间。\n\n46. 测试你的估算\n   Test Your Estimates\n   对算法的数据分析并不会告诉你每一件事情。在你的代码的目标环境中测定它的速度。\n\n47. 早重构，常重构\n   Refactor Early, Refactor Often\n   就和你会在花园里除草、并重新布置一样，在需要时对代码进行重新、重做和重新架构。要铲除问题的根源。\n\n48. 为测试而设计\n   Design to Test\n   在你还没有编写代码时就开始思考问题。\n\n49. 测试你的软件，否则你的用户就得测试\n   Test Your Software, or Your Users Will\n   无情地测试。不要让你的用户为你查找bug。\n\n50. 不要使用你不理解的向导代码\n   Don't Use Wizard Code You Don't Understand\n   向导可以生成大量代码。在你把它们合并进你的项目之前，确保你理解全部的代码。\n\n51. 不要搜集需求 — 挖掘它们\n   Don't Gather Requirements — Dig for Them\n   需求很少存于表面上。它们深深地埋藏在层层假定、误解和政治手段的下面。\n\n52. 与用户一同工作，以像用户一样思考\n   Work with a User to Think Like a User\n   要了解系统实际上将如何被使用，这是最好的方法。\n\n53. 抽象比细节活得更长久\n   Abstractions Live Longer than Details\n   “投资”于抽象，而不是实现。抽象能在来自不同的实现和新技术的变化的“攻击”之下活下去。\n\n54. 使用项目词汇表\n   Use a Project Glossary\n   创建并维护项目中使用的专用术语和词汇的单一信息源。\n\n55. 不要在盒子外面思考 — 要找到盒子\n   Don't Think Outside the Box — Find the Box\n   在遇到不可能解决的问题时，要确定真正的约束。问问你自己：“它必须以这种方式完成吗？它真的必须完成吗？”\n\n56. 等你准备好再开始\n   Start When You're Ready\n   你的一生都在积累经验。不要忽视反复出现的疑虑。\n\n57. 对有些事情“做”胜于“描述”\n   Some Things Are Better Done than Described\n   不要掉进规范的螺旋 — 在某个时刻，你需要开始编码。\n\n58. 不要做形式方法的奴隶\n   Don't Be a Slave to Formal Methods\n   如果你没有把某些技术放进你的开发实践和能力的语境中，不要盲目地采用它。\n\n59. 昂贵的工具不一定能制作出更好的设计\n   Costly Tools Don't Produce Better Designs\n   小心供应商的炒作、行业教条、以及价格标签的诱惑。要根据工具的价值判断它们。\n\n60. 围绕功能组织团队\n   Organize Teams Around Functionality\n   不要把设计师与编码员分开，也不要把测试员与数据建模员分开。按照你构建代码的方式构建团队。\n\n61. 不要使用手工流程\n   Don't Use Manual Procedures\n   shell脚本或批文件会一次次地以同一顺序执行相同的指令。\n\n62. 早测试、常测试、自动测试\n   Test Early, Text Often, Text Automatically\n   与待在书架上的测试计划相比，每次构建时运行测试要有效得多。\n\n63. 要到通过全部测试，编码才算完成\n   Coding Ain't Done, Till All the Tests Run\n   就是这样。\n\n64. 通过“蓄意破坏”测试你的测试\n   Use Saboteurs to Test Your Testing\n   在单独的软件副本上故意引入bug，以检验测试能够抓住它们。\n\n65. 测试状态覆盖，而不是代码覆盖\n   Test State Coverage, Not Code Coverage\n   确定并测试重要的程序状态。只是测试代码行是不够的。\n\n66. 一个bug只抓一次\n   Find Bugs Once\n   一旦测试员找到一个bug，这应该是测试员最后一次找到它。此后自动测试应该对其进行检查。\n\n67. 英语就是一种编程语言\n   English is just a Programming Language\n   像你编写代码一样编写文档：遵守DRY原则、使用元数据、MVC、自动生成等等。\n\n68. 把文档建在里面，不要栓在外面\n   Build Documentation In. Don't Bolt It On\n   与代码分离的文档不太可能被修正和更新。\n\n69. 温和地超出用户的期待\n   Gently Exceed Your Users' Expectations\n   要理解你的用户的期望，然后给他们的东西要多那么一点。\n\n70. 在你的作品上签名\n   Sign Your Work\n   过去时代的手艺人为能在他们的作品上签名而自豪。你也应该如此。\n\n   ​\n\n   ​\n   ​\n   ​","source":"_posts/2016-10-22-coding-principle.md","raw":"---\ntitle: 程序员的70条原则\ncategories: 随笔\n---\n\n在生活中，每个人都有一套自己的价值观，并形成一套处事原则，根据这套原则决定自己应该做什么，不应该做什么。可以说，所有的主动选择都是由价值观决定的。同理，在编程的世界里，程序员也需要一套原则，来规定自己应该做什么，不应该做什么。\n\n《程序员修炼之道 — 从小工到专家》一书给出了70条原则，可以作为每一个程序员的基本原则，我们可以根据这些原则来做正确的事情。\n\n1. 关心你的技艺\n   Care About Your Craft\n   如果你不在乎能否漂亮地开发出软件，你又为何要耗费生命去开发软件呢？\n\n2. 思考！你的工作\n   Think! About Your Work\n   关掉自动驾驶仪，接管操作。不断地批评和评估你的工作。\n\n3. 提供各种选择，不要找蹩脚的借口\n   Provide Options, Don't Make Lame Excuses\n   要提供各种选择，而不是找借口。不要说事情做不到；说明能够做什么。\n\n4. 不要容忍破窗户\n   Don‘t Live with Broken Windows\n   当你看到糟糕的设计、错误的决策和糟糕的代码，修正它们。\n\n5. 做变化的催化剂\n   Be a Catalyst for Change\n   你不能强迫人们改变。相反，要向他们展示未来可能会怎样，并帮助他们参与对未来的创造。\n\n6. 记住大图景\n   Remember the Big Picture\n   不要太过于专注细节，一致忘了查看你周围正在发生什么。\n\n7. 使质量成为需求问题\n   Make Quality a Requirements Issue\n   让你的用户参与确定真正的质量需求。\n\n8. 定期为你的知识资产投资\n   Invest Regularly in Your Knowledge Portfolio\n   让学习成为习惯。\n\n9. 批评地分析你读到的和听到的\n   Critically Analyze What You Read and Hear\n   不要被供应商、媒体炒作、或胶条左右。要按照你自己的看法和你的项目的情况去对信息进行分析。\n\n10. 你说什么和你怎么说同样重要\n   It's Both What You Say and the Way You Say It\n   如果你不能有效地向他人传达你的了不起想法，这些想法就毫无用处。\n\n11. 不要重复你自己\n   DRY - Don't Repeat Yourself\n   系统中的每一项知识都必须具有单一、无歧义、权威的表示。\n\n12. 让复用变得容易\n   Make It Easy to Reuse\n   如果复用很容易，人们就会去复用。创造一个支持复用的环境。\n\n13. 消除无关事物之间的影响\n   Eliminate Effects Between Unrelated Thins\n   设计自足、独立、并具有单一、良好定义的目的的组件。\n\n14. 不存在最终决策\n   There Are No Final Decisions\n   没有决策是浇铸在石头上的。相反，要把每项决策都视为是写在沙滩上的，并为变化做好计划。\n\n15. 用曳光弹找到目标\n   Use Tracer Bullets to Find the Target\n   用曳光弹能通过试验各种事物并检查它们离目标有多远来让你追踪目标。\n\n16. 为了学习而制作原型\n   Prototype to learn\n   原型制作是一种学习经验。其价值并不在于所产生的代码，而在于所学到的教经验教训。\n\n17. 靠近问题领域编程\n   Program Close to the Problem domain\n   用你的用户的语言进行设计和编码\n\n18. 估算，以避免发生意外\n   Estimate to Avoid Surprises\n   在着手之前先进行估算。你将提前发现潜在的问题。\n\n19. 通过代码对进度表进行迭代\n   Iterate the Schedule with the Code\n   用你在进行实现时获得的经验提炼项目的时间标度。\n\n20. 用纯文本保存知识\n   Keep Knowledge in Plain Text\n   纯文本不会过时。它能够帮助你有效利用你的工作，并简化调试和测试。\n\n21. 利用命令shell的力量\n   Use the Power of Command Shells\n   当图形用户界面无能为力时使用shell。\n\n22. 用好一种编辑器\n   Use a Single Editor Well\n   编辑器应该是你的手的延伸；确保你的编辑器是可配置、可拓展和可编程的。\n\n23. 总是使用源码控制\n   Always Use Source Code Control\n   源码控制是你的工作的时间机器 — 你能够回到过去。\n\n24. 要修正问题，而不是发出指责\n   Fix the Problem, Not the Blame\n   bug是你的过程还是别人的过程，并不是很重要 — 它仍然是你的问题，它仍然需要被修正。\n\n25. 不要恐慌\n   Don't Panic When Debuging\n   做一次深呼吸，思考什么可能是bug的原因。\n\n26. “Select”没有问题\n   “select” Isn't Broken\n   在OS或者是编译器、或者是第三方产品或库中很少发现bug。bug很可能在应用中。\n\n27. 不要假定，要证明\n   Don't Assume It — Prove It\n   在实际环境中 — 使用真正的数据和边界条件 — 证明你的假定。\n\n28. 学习一种文本操作语言\n   Learn a Text Manipilation Language\n   你用每天的很大一部分时间处理文本，为什么不让计算机替你完成部分工作呢？\n\n29. 编写能编写代码的代码\n   Write Code That Writes Code\n   代码生成器能提高你的生产率，并有助于避免重复。\n\n30. 你不可能写出完美的软件\n   You Can't Write Perfect Software\n   软件不可能完美。保护你的代码和用户，使它（他）们免于能够预见的错误。\n\n31. 通过合约进行设计\n   Design with Caontracts\n   使用合约建立文档，并检验代码所做的事情正好是它声明要做的。\n\n32. 早崩溃\n   Crash Early\n   死程序造成的危害通常比有问题的程序要小得多。\n\n33. 用断言避免不可能发生的事情\n   Use Assertions to Prevent the Impossible\n   断言验证你的各种假定。在一个不确定的世界里，用断言保护你的代码。\n\n34. 将异常用于异常的问题\n   Use Exceptions for Exceptional Problems\n   异常可能会遭受经典的意大利面条式的所有可能性和可维护性问题的折磨。将异常保给异常的事物。\n\n35. 要有始有终\n   Finish What You Start\n   只要可能，分配某资源的例程或对象也应该负责接触其分配。\n\n36. 是模块之间的耦合减至最少\n   Minimize Coupling Between Modules\n   通过编写“羞涩的”代码并应用得墨芯耳法则来避免耦合。\n\n37. 要配置，不要集成\n   Configure, Don't Integrate\n   要将应用的各种技术选择实现为可配置，而不是通过集成或工程方法实现。\n\n38. 将抽象放进代码，细节放进元数据\n   Put Abstractions in Code, Details in Metadata\n   为一本情况编程，将细节放在被编译的代码库之外。\n\n39. 分析工作流，以改善并发性\n   Analyze Workflow to Improve Concurrency\n   利用你的用户的工作流中的并发性。\n\n40. 用服务进行设计\n   Design Using Services\n   根据服务 — 独立的、在良好定义、一致的接口之后的并发对象 — 进行设计。\n\n41. 总是为并发进行设计\n   Always Design for Concurrency\n   容许并发，你将会设计出更整洁、具有更少假定的接口。\n\n42. 使试图与模型分离\n   Separate Views form Medels\n   要根据模型和视图设计你的应用，从而以低廉的代码获取灵活性。\n\n43. 用黑板协调工作流\n   Use BlackBoards to Coordinate Workflow\n   用黑板协调完全不同的事实和因素，同时又使各参与方保持独立和隔离。\n\n44. 不要靠巧合编程\n   Dont't Program by Coincidence\n   只依靠可靠的事物。注意偶发现的复杂性，不要把幸运的巧合与有目的的计划混为一谈。\n\n45. 估算你的算法的阶\n   Estimate the Order of Your Algorithms\n   在你编写代码之前，先大致估算事情需要多长时间。\n\n46. 测试你的估算\n   Test Your Estimates\n   对算法的数据分析并不会告诉你每一件事情。在你的代码的目标环境中测定它的速度。\n\n47. 早重构，常重构\n   Refactor Early, Refactor Often\n   就和你会在花园里除草、并重新布置一样，在需要时对代码进行重新、重做和重新架构。要铲除问题的根源。\n\n48. 为测试而设计\n   Design to Test\n   在你还没有编写代码时就开始思考问题。\n\n49. 测试你的软件，否则你的用户就得测试\n   Test Your Software, or Your Users Will\n   无情地测试。不要让你的用户为你查找bug。\n\n50. 不要使用你不理解的向导代码\n   Don't Use Wizard Code You Don't Understand\n   向导可以生成大量代码。在你把它们合并进你的项目之前，确保你理解全部的代码。\n\n51. 不要搜集需求 — 挖掘它们\n   Don't Gather Requirements — Dig for Them\n   需求很少存于表面上。它们深深地埋藏在层层假定、误解和政治手段的下面。\n\n52. 与用户一同工作，以像用户一样思考\n   Work with a User to Think Like a User\n   要了解系统实际上将如何被使用，这是最好的方法。\n\n53. 抽象比细节活得更长久\n   Abstractions Live Longer than Details\n   “投资”于抽象，而不是实现。抽象能在来自不同的实现和新技术的变化的“攻击”之下活下去。\n\n54. 使用项目词汇表\n   Use a Project Glossary\n   创建并维护项目中使用的专用术语和词汇的单一信息源。\n\n55. 不要在盒子外面思考 — 要找到盒子\n   Don't Think Outside the Box — Find the Box\n   在遇到不可能解决的问题时，要确定真正的约束。问问你自己：“它必须以这种方式完成吗？它真的必须完成吗？”\n\n56. 等你准备好再开始\n   Start When You're Ready\n   你的一生都在积累经验。不要忽视反复出现的疑虑。\n\n57. 对有些事情“做”胜于“描述”\n   Some Things Are Better Done than Described\n   不要掉进规范的螺旋 — 在某个时刻，你需要开始编码。\n\n58. 不要做形式方法的奴隶\n   Don't Be a Slave to Formal Methods\n   如果你没有把某些技术放进你的开发实践和能力的语境中，不要盲目地采用它。\n\n59. 昂贵的工具不一定能制作出更好的设计\n   Costly Tools Don't Produce Better Designs\n   小心供应商的炒作、行业教条、以及价格标签的诱惑。要根据工具的价值判断它们。\n\n60. 围绕功能组织团队\n   Organize Teams Around Functionality\n   不要把设计师与编码员分开，也不要把测试员与数据建模员分开。按照你构建代码的方式构建团队。\n\n61. 不要使用手工流程\n   Don't Use Manual Procedures\n   shell脚本或批文件会一次次地以同一顺序执行相同的指令。\n\n62. 早测试、常测试、自动测试\n   Test Early, Text Often, Text Automatically\n   与待在书架上的测试计划相比，每次构建时运行测试要有效得多。\n\n63. 要到通过全部测试，编码才算完成\n   Coding Ain't Done, Till All the Tests Run\n   就是这样。\n\n64. 通过“蓄意破坏”测试你的测试\n   Use Saboteurs to Test Your Testing\n   在单独的软件副本上故意引入bug，以检验测试能够抓住它们。\n\n65. 测试状态覆盖，而不是代码覆盖\n   Test State Coverage, Not Code Coverage\n   确定并测试重要的程序状态。只是测试代码行是不够的。\n\n66. 一个bug只抓一次\n   Find Bugs Once\n   一旦测试员找到一个bug，这应该是测试员最后一次找到它。此后自动测试应该对其进行检查。\n\n67. 英语就是一种编程语言\n   English is just a Programming Language\n   像你编写代码一样编写文档：遵守DRY原则、使用元数据、MVC、自动生成等等。\n\n68. 把文档建在里面，不要栓在外面\n   Build Documentation In. Don't Bolt It On\n   与代码分离的文档不太可能被修正和更新。\n\n69. 温和地超出用户的期待\n   Gently Exceed Your Users' Expectations\n   要理解你的用户的期望，然后给他们的东西要多那么一点。\n\n70. 在你的作品上签名\n   Sign Your Work\n   过去时代的手艺人为能在他们的作品上签名而自豪。你也应该如此。\n\n   ​\n\n   ​\n   ​\n   ​","slug":"2016-10-22-coding-principle","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicaf001dfsond4nwwj5k","content":"<p>在生活中，每个人都有一套自己的价值观，并形成一套处事原则，根据这套原则决定自己应该做什么，不应该做什么。可以说，所有的主动选择都是由价值观决定的。同理，在编程的世界里，程序员也需要一套原则，来规定自己应该做什么，不应该做什么。</p>\n<p>《程序员修炼之道 — 从小工到专家》一书给出了70条原则，可以作为每一个程序员的基本原则，我们可以根据这些原则来做正确的事情。</p>\n<ol>\n<li><p>关心你的技艺<br>Care About Your Craft<br>如果你不在乎能否漂亮地开发出软件，你又为何要耗费生命去开发软件呢？</p>\n</li>\n<li><p>思考！你的工作<br>Think! About Your Work<br>关掉自动驾驶仪，接管操作。不断地批评和评估你的工作。</p>\n</li>\n<li><p>提供各种选择，不要找蹩脚的借口<br>Provide Options, Don’t Make Lame Excuses<br>要提供各种选择，而不是找借口。不要说事情做不到；说明能够做什么。</p>\n</li>\n<li><p>不要容忍破窗户<br>Don‘t Live with Broken Windows<br>当你看到糟糕的设计、错误的决策和糟糕的代码，修正它们。</p>\n</li>\n<li><p>做变化的催化剂<br>Be a Catalyst for Change<br>你不能强迫人们改变。相反，要向他们展示未来可能会怎样，并帮助他们参与对未来的创造。</p>\n</li>\n<li><p>记住大图景<br>Remember the Big Picture<br>不要太过于专注细节，一致忘了查看你周围正在发生什么。</p>\n</li>\n<li><p>使质量成为需求问题<br>Make Quality a Requirements Issue<br>让你的用户参与确定真正的质量需求。</p>\n</li>\n<li><p>定期为你的知识资产投资<br>Invest Regularly in Your Knowledge Portfolio<br>让学习成为习惯。</p>\n</li>\n<li><p>批评地分析你读到的和听到的<br>Critically Analyze What You Read and Hear<br>不要被供应商、媒体炒作、或胶条左右。要按照你自己的看法和你的项目的情况去对信息进行分析。</p>\n</li>\n<li><p>你说什么和你怎么说同样重要<br>It’s Both What You Say and the Way You Say It<br>如果你不能有效地向他人传达你的了不起想法，这些想法就毫无用处。</p>\n</li>\n<li><p>不要重复你自己<br>DRY - Don’t Repeat Yourself<br>系统中的每一项知识都必须具有单一、无歧义、权威的表示。</p>\n</li>\n<li><p>让复用变得容易<br>Make It Easy to Reuse<br>如果复用很容易，人们就会去复用。创造一个支持复用的环境。</p>\n</li>\n<li><p>消除无关事物之间的影响<br>Eliminate Effects Between Unrelated Thins<br>设计自足、独立、并具有单一、良好定义的目的的组件。</p>\n</li>\n<li><p>不存在最终决策<br>There Are No Final Decisions<br>没有决策是浇铸在石头上的。相反，要把每项决策都视为是写在沙滩上的，并为变化做好计划。</p>\n</li>\n<li><p>用曳光弹找到目标<br>Use Tracer Bullets to Find the Target<br>用曳光弹能通过试验各种事物并检查它们离目标有多远来让你追踪目标。</p>\n</li>\n<li><p>为了学习而制作原型<br>Prototype to learn<br>原型制作是一种学习经验。其价值并不在于所产生的代码，而在于所学到的教经验教训。</p>\n</li>\n<li><p>靠近问题领域编程<br>Program Close to the Problem domain<br>用你的用户的语言进行设计和编码</p>\n</li>\n<li><p>估算，以避免发生意外<br>Estimate to Avoid Surprises<br>在着手之前先进行估算。你将提前发现潜在的问题。</p>\n</li>\n<li><p>通过代码对进度表进行迭代<br>Iterate the Schedule with the Code<br>用你在进行实现时获得的经验提炼项目的时间标度。</p>\n</li>\n<li><p>用纯文本保存知识<br>Keep Knowledge in Plain Text<br>纯文本不会过时。它能够帮助你有效利用你的工作，并简化调试和测试。</p>\n</li>\n<li><p>利用命令shell的力量<br>Use the Power of Command Shells<br>当图形用户界面无能为力时使用shell。</p>\n</li>\n<li><p>用好一种编辑器<br>Use a Single Editor Well<br>编辑器应该是你的手的延伸；确保你的编辑器是可配置、可拓展和可编程的。</p>\n</li>\n<li><p>总是使用源码控制<br>Always Use Source Code Control<br>源码控制是你的工作的时间机器 — 你能够回到过去。</p>\n</li>\n<li><p>要修正问题，而不是发出指责<br>Fix the Problem, Not the Blame<br>bug是你的过程还是别人的过程，并不是很重要 — 它仍然是你的问题，它仍然需要被修正。</p>\n</li>\n<li><p>不要恐慌<br>Don’t Panic When Debuging<br>做一次深呼吸，思考什么可能是bug的原因。</p>\n</li>\n<li><p>“Select”没有问题<br>“select” Isn’t Broken<br>在OS或者是编译器、或者是第三方产品或库中很少发现bug。bug很可能在应用中。</p>\n</li>\n<li><p>不要假定，要证明<br>Don’t Assume It — Prove It<br>在实际环境中 — 使用真正的数据和边界条件 — 证明你的假定。</p>\n</li>\n<li><p>学习一种文本操作语言<br>Learn a Text Manipilation Language<br>你用每天的很大一部分时间处理文本，为什么不让计算机替你完成部分工作呢？</p>\n</li>\n<li><p>编写能编写代码的代码<br>Write Code That Writes Code<br>代码生成器能提高你的生产率，并有助于避免重复。</p>\n</li>\n<li><p>你不可能写出完美的软件<br>You Can’t Write Perfect Software<br>软件不可能完美。保护你的代码和用户，使它（他）们免于能够预见的错误。</p>\n</li>\n<li><p>通过合约进行设计<br>Design with Caontracts<br>使用合约建立文档，并检验代码所做的事情正好是它声明要做的。</p>\n</li>\n<li><p>早崩溃<br>Crash Early<br>死程序造成的危害通常比有问题的程序要小得多。</p>\n</li>\n<li><p>用断言避免不可能发生的事情<br>Use Assertions to Prevent the Impossible<br>断言验证你的各种假定。在一个不确定的世界里，用断言保护你的代码。</p>\n</li>\n<li><p>将异常用于异常的问题<br>Use Exceptions for Exceptional Problems<br>异常可能会遭受经典的意大利面条式的所有可能性和可维护性问题的折磨。将异常保给异常的事物。</p>\n</li>\n<li><p>要有始有终<br>Finish What You Start<br>只要可能，分配某资源的例程或对象也应该负责接触其分配。</p>\n</li>\n<li><p>是模块之间的耦合减至最少<br>Minimize Coupling Between Modules<br>通过编写“羞涩的”代码并应用得墨芯耳法则来避免耦合。</p>\n</li>\n<li><p>要配置，不要集成<br>Configure, Don’t Integrate<br>要将应用的各种技术选择实现为可配置，而不是通过集成或工程方法实现。</p>\n</li>\n<li><p>将抽象放进代码，细节放进元数据<br>Put Abstractions in Code, Details in Metadata<br>为一本情况编程，将细节放在被编译的代码库之外。</p>\n</li>\n<li><p>分析工作流，以改善并发性<br>Analyze Workflow to Improve Concurrency<br>利用你的用户的工作流中的并发性。</p>\n</li>\n<li><p>用服务进行设计<br>Design Using Services<br>根据服务 — 独立的、在良好定义、一致的接口之后的并发对象 — 进行设计。</p>\n</li>\n<li><p>总是为并发进行设计<br>Always Design for Concurrency<br>容许并发，你将会设计出更整洁、具有更少假定的接口。</p>\n</li>\n<li><p>使试图与模型分离<br>Separate Views form Medels<br>要根据模型和视图设计你的应用，从而以低廉的代码获取灵活性。</p>\n</li>\n<li><p>用黑板协调工作流<br>Use BlackBoards to Coordinate Workflow<br>用黑板协调完全不同的事实和因素，同时又使各参与方保持独立和隔离。</p>\n</li>\n<li><p>不要靠巧合编程<br>Dont’t Program by Coincidence<br>只依靠可靠的事物。注意偶发现的复杂性，不要把幸运的巧合与有目的的计划混为一谈。</p>\n</li>\n<li><p>估算你的算法的阶<br>Estimate the Order of Your Algorithms<br>在你编写代码之前，先大致估算事情需要多长时间。</p>\n</li>\n<li><p>测试你的估算<br>Test Your Estimates<br>对算法的数据分析并不会告诉你每一件事情。在你的代码的目标环境中测定它的速度。</p>\n</li>\n<li><p>早重构，常重构<br>Refactor Early, Refactor Often<br>就和你会在花园里除草、并重新布置一样，在需要时对代码进行重新、重做和重新架构。要铲除问题的根源。</p>\n</li>\n<li><p>为测试而设计<br>Design to Test<br>在你还没有编写代码时就开始思考问题。</p>\n</li>\n<li><p>测试你的软件，否则你的用户就得测试<br>Test Your Software, or Your Users Will<br>无情地测试。不要让你的用户为你查找bug。</p>\n</li>\n<li><p>不要使用你不理解的向导代码<br>Don’t Use Wizard Code You Don’t Understand<br>向导可以生成大量代码。在你把它们合并进你的项目之前，确保你理解全部的代码。</p>\n</li>\n<li><p>不要搜集需求 — 挖掘它们<br>Don’t Gather Requirements — Dig for Them<br>需求很少存于表面上。它们深深地埋藏在层层假定、误解和政治手段的下面。</p>\n</li>\n<li><p>与用户一同工作，以像用户一样思考<br>Work with a User to Think Like a User<br>要了解系统实际上将如何被使用，这是最好的方法。</p>\n</li>\n<li><p>抽象比细节活得更长久<br>Abstractions Live Longer than Details<br>“投资”于抽象，而不是实现。抽象能在来自不同的实现和新技术的变化的“攻击”之下活下去。</p>\n</li>\n<li><p>使用项目词汇表<br>Use a Project Glossary<br>创建并维护项目中使用的专用术语和词汇的单一信息源。</p>\n</li>\n<li><p>不要在盒子外面思考 — 要找到盒子<br>Don’t Think Outside the Box — Find the Box<br>在遇到不可能解决的问题时，要确定真正的约束。问问你自己：“它必须以这种方式完成吗？它真的必须完成吗？”</p>\n</li>\n<li><p>等你准备好再开始<br>Start When You’re Ready<br>你的一生都在积累经验。不要忽视反复出现的疑虑。</p>\n</li>\n<li><p>对有些事情“做”胜于“描述”<br>Some Things Are Better Done than Described<br>不要掉进规范的螺旋 — 在某个时刻，你需要开始编码。</p>\n</li>\n<li><p>不要做形式方法的奴隶<br>Don’t Be a Slave to Formal Methods<br>如果你没有把某些技术放进你的开发实践和能力的语境中，不要盲目地采用它。</p>\n</li>\n<li><p>昂贵的工具不一定能制作出更好的设计<br>Costly Tools Don’t Produce Better Designs<br>小心供应商的炒作、行业教条、以及价格标签的诱惑。要根据工具的价值判断它们。</p>\n</li>\n<li><p>围绕功能组织团队<br>Organize Teams Around Functionality<br>不要把设计师与编码员分开，也不要把测试员与数据建模员分开。按照你构建代码的方式构建团队。</p>\n</li>\n<li><p>不要使用手工流程<br>Don’t Use Manual Procedures<br>shell脚本或批文件会一次次地以同一顺序执行相同的指令。</p>\n</li>\n<li><p>早测试、常测试、自动测试<br>Test Early, Text Often, Text Automatically<br>与待在书架上的测试计划相比，每次构建时运行测试要有效得多。</p>\n</li>\n<li><p>要到通过全部测试，编码才算完成<br>Coding Ain’t Done, Till All the Tests Run<br>就是这样。</p>\n</li>\n<li><p>通过“蓄意破坏”测试你的测试<br>Use Saboteurs to Test Your Testing<br>在单独的软件副本上故意引入bug，以检验测试能够抓住它们。</p>\n</li>\n<li><p>测试状态覆盖，而不是代码覆盖<br>Test State Coverage, Not Code Coverage<br>确定并测试重要的程序状态。只是测试代码行是不够的。</p>\n</li>\n<li><p>一个bug只抓一次<br>Find Bugs Once<br>一旦测试员找到一个bug，这应该是测试员最后一次找到它。此后自动测试应该对其进行检查。</p>\n</li>\n<li><p>英语就是一种编程语言<br>English is just a Programming Language<br>像你编写代码一样编写文档：遵守DRY原则、使用元数据、MVC、自动生成等等。</p>\n</li>\n<li><p>把文档建在里面，不要栓在外面<br>Build Documentation In. Don’t Bolt It On<br>与代码分离的文档不太可能被修正和更新。</p>\n</li>\n<li><p>温和地超出用户的期待<br>Gently Exceed Your Users’ Expectations<br>要理解你的用户的期望，然后给他们的东西要多那么一点。</p>\n</li>\n<li><p>在你的作品上签名<br>Sign Your Work<br>过去时代的手艺人为能在他们的作品上签名而自豪。你也应该如此。</p>\n<p>​</p>\n<p>​<br>​<br>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在生活中，每个人都有一套自己的价值观，并形成一套处事原则，根据这套原则决定自己应该做什么，不应该做什么。可以说，所有的主动选择都是由价值观决定的。同理，在编程的世界里，程序员也需要一套原则，来规定自己应该做什么，不应该做什么。</p>\n<p>《程序员修炼之道 — 从小工到专家》一书给出了70条原则，可以作为每一个程序员的基本原则，我们可以根据这些原则来做正确的事情。</p>\n<ol>\n<li><p>关心你的技艺<br>Care About Your Craft<br>如果你不在乎能否漂亮地开发出软件，你又为何要耗费生命去开发软件呢？</p>\n</li>\n<li><p>思考！你的工作<br>Think! About Your Work<br>关掉自动驾驶仪，接管操作。不断地批评和评估你的工作。</p>\n</li>\n<li><p>提供各种选择，不要找蹩脚的借口<br>Provide Options, Don’t Make Lame Excuses<br>要提供各种选择，而不是找借口。不要说事情做不到；说明能够做什么。</p>\n</li>\n<li><p>不要容忍破窗户<br>Don‘t Live with Broken Windows<br>当你看到糟糕的设计、错误的决策和糟糕的代码，修正它们。</p>\n</li>\n<li><p>做变化的催化剂<br>Be a Catalyst for Change<br>你不能强迫人们改变。相反，要向他们展示未来可能会怎样，并帮助他们参与对未来的创造。</p>\n</li>\n<li><p>记住大图景<br>Remember the Big Picture<br>不要太过于专注细节，一致忘了查看你周围正在发生什么。</p>\n</li>\n<li><p>使质量成为需求问题<br>Make Quality a Requirements Issue<br>让你的用户参与确定真正的质量需求。</p>\n</li>\n<li><p>定期为你的知识资产投资<br>Invest Regularly in Your Knowledge Portfolio<br>让学习成为习惯。</p>\n</li>\n<li><p>批评地分析你读到的和听到的<br>Critically Analyze What You Read and Hear<br>不要被供应商、媒体炒作、或胶条左右。要按照你自己的看法和你的项目的情况去对信息进行分析。</p>\n</li>\n<li><p>你说什么和你怎么说同样重要<br>It’s Both What You Say and the Way You Say It<br>如果你不能有效地向他人传达你的了不起想法，这些想法就毫无用处。</p>\n</li>\n<li><p>不要重复你自己<br>DRY - Don’t Repeat Yourself<br>系统中的每一项知识都必须具有单一、无歧义、权威的表示。</p>\n</li>\n<li><p>让复用变得容易<br>Make It Easy to Reuse<br>如果复用很容易，人们就会去复用。创造一个支持复用的环境。</p>\n</li>\n<li><p>消除无关事物之间的影响<br>Eliminate Effects Between Unrelated Thins<br>设计自足、独立、并具有单一、良好定义的目的的组件。</p>\n</li>\n<li><p>不存在最终决策<br>There Are No Final Decisions<br>没有决策是浇铸在石头上的。相反，要把每项决策都视为是写在沙滩上的，并为变化做好计划。</p>\n</li>\n<li><p>用曳光弹找到目标<br>Use Tracer Bullets to Find the Target<br>用曳光弹能通过试验各种事物并检查它们离目标有多远来让你追踪目标。</p>\n</li>\n<li><p>为了学习而制作原型<br>Prototype to learn<br>原型制作是一种学习经验。其价值并不在于所产生的代码，而在于所学到的教经验教训。</p>\n</li>\n<li><p>靠近问题领域编程<br>Program Close to the Problem domain<br>用你的用户的语言进行设计和编码</p>\n</li>\n<li><p>估算，以避免发生意外<br>Estimate to Avoid Surprises<br>在着手之前先进行估算。你将提前发现潜在的问题。</p>\n</li>\n<li><p>通过代码对进度表进行迭代<br>Iterate the Schedule with the Code<br>用你在进行实现时获得的经验提炼项目的时间标度。</p>\n</li>\n<li><p>用纯文本保存知识<br>Keep Knowledge in Plain Text<br>纯文本不会过时。它能够帮助你有效利用你的工作，并简化调试和测试。</p>\n</li>\n<li><p>利用命令shell的力量<br>Use the Power of Command Shells<br>当图形用户界面无能为力时使用shell。</p>\n</li>\n<li><p>用好一种编辑器<br>Use a Single Editor Well<br>编辑器应该是你的手的延伸；确保你的编辑器是可配置、可拓展和可编程的。</p>\n</li>\n<li><p>总是使用源码控制<br>Always Use Source Code Control<br>源码控制是你的工作的时间机器 — 你能够回到过去。</p>\n</li>\n<li><p>要修正问题，而不是发出指责<br>Fix the Problem, Not the Blame<br>bug是你的过程还是别人的过程，并不是很重要 — 它仍然是你的问题，它仍然需要被修正。</p>\n</li>\n<li><p>不要恐慌<br>Don’t Panic When Debuging<br>做一次深呼吸，思考什么可能是bug的原因。</p>\n</li>\n<li><p>“Select”没有问题<br>“select” Isn’t Broken<br>在OS或者是编译器、或者是第三方产品或库中很少发现bug。bug很可能在应用中。</p>\n</li>\n<li><p>不要假定，要证明<br>Don’t Assume It — Prove It<br>在实际环境中 — 使用真正的数据和边界条件 — 证明你的假定。</p>\n</li>\n<li><p>学习一种文本操作语言<br>Learn a Text Manipilation Language<br>你用每天的很大一部分时间处理文本，为什么不让计算机替你完成部分工作呢？</p>\n</li>\n<li><p>编写能编写代码的代码<br>Write Code That Writes Code<br>代码生成器能提高你的生产率，并有助于避免重复。</p>\n</li>\n<li><p>你不可能写出完美的软件<br>You Can’t Write Perfect Software<br>软件不可能完美。保护你的代码和用户，使它（他）们免于能够预见的错误。</p>\n</li>\n<li><p>通过合约进行设计<br>Design with Caontracts<br>使用合约建立文档，并检验代码所做的事情正好是它声明要做的。</p>\n</li>\n<li><p>早崩溃<br>Crash Early<br>死程序造成的危害通常比有问题的程序要小得多。</p>\n</li>\n<li><p>用断言避免不可能发生的事情<br>Use Assertions to Prevent the Impossible<br>断言验证你的各种假定。在一个不确定的世界里，用断言保护你的代码。</p>\n</li>\n<li><p>将异常用于异常的问题<br>Use Exceptions for Exceptional Problems<br>异常可能会遭受经典的意大利面条式的所有可能性和可维护性问题的折磨。将异常保给异常的事物。</p>\n</li>\n<li><p>要有始有终<br>Finish What You Start<br>只要可能，分配某资源的例程或对象也应该负责接触其分配。</p>\n</li>\n<li><p>是模块之间的耦合减至最少<br>Minimize Coupling Between Modules<br>通过编写“羞涩的”代码并应用得墨芯耳法则来避免耦合。</p>\n</li>\n<li><p>要配置，不要集成<br>Configure, Don’t Integrate<br>要将应用的各种技术选择实现为可配置，而不是通过集成或工程方法实现。</p>\n</li>\n<li><p>将抽象放进代码，细节放进元数据<br>Put Abstractions in Code, Details in Metadata<br>为一本情况编程，将细节放在被编译的代码库之外。</p>\n</li>\n<li><p>分析工作流，以改善并发性<br>Analyze Workflow to Improve Concurrency<br>利用你的用户的工作流中的并发性。</p>\n</li>\n<li><p>用服务进行设计<br>Design Using Services<br>根据服务 — 独立的、在良好定义、一致的接口之后的并发对象 — 进行设计。</p>\n</li>\n<li><p>总是为并发进行设计<br>Always Design for Concurrency<br>容许并发，你将会设计出更整洁、具有更少假定的接口。</p>\n</li>\n<li><p>使试图与模型分离<br>Separate Views form Medels<br>要根据模型和视图设计你的应用，从而以低廉的代码获取灵活性。</p>\n</li>\n<li><p>用黑板协调工作流<br>Use BlackBoards to Coordinate Workflow<br>用黑板协调完全不同的事实和因素，同时又使各参与方保持独立和隔离。</p>\n</li>\n<li><p>不要靠巧合编程<br>Dont’t Program by Coincidence<br>只依靠可靠的事物。注意偶发现的复杂性，不要把幸运的巧合与有目的的计划混为一谈。</p>\n</li>\n<li><p>估算你的算法的阶<br>Estimate the Order of Your Algorithms<br>在你编写代码之前，先大致估算事情需要多长时间。</p>\n</li>\n<li><p>测试你的估算<br>Test Your Estimates<br>对算法的数据分析并不会告诉你每一件事情。在你的代码的目标环境中测定它的速度。</p>\n</li>\n<li><p>早重构，常重构<br>Refactor Early, Refactor Often<br>就和你会在花园里除草、并重新布置一样，在需要时对代码进行重新、重做和重新架构。要铲除问题的根源。</p>\n</li>\n<li><p>为测试而设计<br>Design to Test<br>在你还没有编写代码时就开始思考问题。</p>\n</li>\n<li><p>测试你的软件，否则你的用户就得测试<br>Test Your Software, or Your Users Will<br>无情地测试。不要让你的用户为你查找bug。</p>\n</li>\n<li><p>不要使用你不理解的向导代码<br>Don’t Use Wizard Code You Don’t Understand<br>向导可以生成大量代码。在你把它们合并进你的项目之前，确保你理解全部的代码。</p>\n</li>\n<li><p>不要搜集需求 — 挖掘它们<br>Don’t Gather Requirements — Dig for Them<br>需求很少存于表面上。它们深深地埋藏在层层假定、误解和政治手段的下面。</p>\n</li>\n<li><p>与用户一同工作，以像用户一样思考<br>Work with a User to Think Like a User<br>要了解系统实际上将如何被使用，这是最好的方法。</p>\n</li>\n<li><p>抽象比细节活得更长久<br>Abstractions Live Longer than Details<br>“投资”于抽象，而不是实现。抽象能在来自不同的实现和新技术的变化的“攻击”之下活下去。</p>\n</li>\n<li><p>使用项目词汇表<br>Use a Project Glossary<br>创建并维护项目中使用的专用术语和词汇的单一信息源。</p>\n</li>\n<li><p>不要在盒子外面思考 — 要找到盒子<br>Don’t Think Outside the Box — Find the Box<br>在遇到不可能解决的问题时，要确定真正的约束。问问你自己：“它必须以这种方式完成吗？它真的必须完成吗？”</p>\n</li>\n<li><p>等你准备好再开始<br>Start When You’re Ready<br>你的一生都在积累经验。不要忽视反复出现的疑虑。</p>\n</li>\n<li><p>对有些事情“做”胜于“描述”<br>Some Things Are Better Done than Described<br>不要掉进规范的螺旋 — 在某个时刻，你需要开始编码。</p>\n</li>\n<li><p>不要做形式方法的奴隶<br>Don’t Be a Slave to Formal Methods<br>如果你没有把某些技术放进你的开发实践和能力的语境中，不要盲目地采用它。</p>\n</li>\n<li><p>昂贵的工具不一定能制作出更好的设计<br>Costly Tools Don’t Produce Better Designs<br>小心供应商的炒作、行业教条、以及价格标签的诱惑。要根据工具的价值判断它们。</p>\n</li>\n<li><p>围绕功能组织团队<br>Organize Teams Around Functionality<br>不要把设计师与编码员分开，也不要把测试员与数据建模员分开。按照你构建代码的方式构建团队。</p>\n</li>\n<li><p>不要使用手工流程<br>Don’t Use Manual Procedures<br>shell脚本或批文件会一次次地以同一顺序执行相同的指令。</p>\n</li>\n<li><p>早测试、常测试、自动测试<br>Test Early, Text Often, Text Automatically<br>与待在书架上的测试计划相比，每次构建时运行测试要有效得多。</p>\n</li>\n<li><p>要到通过全部测试，编码才算完成<br>Coding Ain’t Done, Till All the Tests Run<br>就是这样。</p>\n</li>\n<li><p>通过“蓄意破坏”测试你的测试<br>Use Saboteurs to Test Your Testing<br>在单独的软件副本上故意引入bug，以检验测试能够抓住它们。</p>\n</li>\n<li><p>测试状态覆盖，而不是代码覆盖<br>Test State Coverage, Not Code Coverage<br>确定并测试重要的程序状态。只是测试代码行是不够的。</p>\n</li>\n<li><p>一个bug只抓一次<br>Find Bugs Once<br>一旦测试员找到一个bug，这应该是测试员最后一次找到它。此后自动测试应该对其进行检查。</p>\n</li>\n<li><p>英语就是一种编程语言<br>English is just a Programming Language<br>像你编写代码一样编写文档：遵守DRY原则、使用元数据、MVC、自动生成等等。</p>\n</li>\n<li><p>把文档建在里面，不要栓在外面<br>Build Documentation In. Don’t Bolt It On<br>与代码分离的文档不太可能被修正和更新。</p>\n</li>\n<li><p>温和地超出用户的期待<br>Gently Exceed Your Users’ Expectations<br>要理解你的用户的期望，然后给他们的东西要多那么一点。</p>\n</li>\n<li><p>在你的作品上签名<br>Sign Your Work<br>过去时代的手艺人为能在他们的作品上签名而自豪。你也应该如此。</p>\n<p>​</p>\n<p>​<br>​<br>​</p>\n</li>\n</ol>\n"},{"title":"使用vue容易犯的错误","_content":"\n- [在data里面声明的属性才是reactive][1]。在声明vue实例之后，如果要添加reactive的变量，可以通过[set方法][2]。\n- 在vue实例的属性或者回调函数中，[使用箭头函数][3]，因为使用箭头函数，this就不是指向vue实例，而是指向父级作用域。\n- `vm.items[indexOfItem] = newValue`更新数据，但不会更新视图，应该使用[set方法][4]。\n- `vm.items.length = newLength`更新数据，但不会更新视图，应该使用[splice方法][5]\n- [component的data必须是一个函数][6]，而且必须返回一个干净的对象（fresh data object），如果不是一个干净的对象，那么所有的组件都会引用同一个对象，这不是我们想要的结果。\n- [camelCase vs kebab-case][7]。组件的props在js里面是camelCase写法，而在HTML里面是kebab-case写法。同理，[组件的命名][8]也是如此。\n- [Literal vs Dynamic][9]。如果想要给子组件传递一个数字而不是字符串，那就要使用v-bind。\n- [One Way Data Flow][10]。父组件可以修改props，但子组件不允许修改props，也就说数据的单向的，只允许 `父 -> 子`，不允许 `子 -> 父`。子组件要改变父组件的数据只能通过events up。父子组件的通信方式可以总结为：[props down, events up][11]。\n- [Compilation-Scope][12]。父组件的模板只能使用父组件作用域里面的变量，子组件的模板只能使用子组件作用域里面的变量。\n- [Child Component Refs][13]。子组件的$refs不是reactive的，所以不要用在template或者computed\n\n[1]:\thttp://vuejs.org/guide/instance.html#Properties-and-Methods\n[2]:\thttp://vuejs.org/guide/reactivity.html#Change-Detection-Caveats\n[3]:\thttp://vuejs.org/guide/instance.html#Properties-and-Methods\n[4]:\thttp://vuejs.org/guide/list.html#Caveats\n[5]:\thttp://vuejs.org/guide/list.html#Caveats\n[6]:\thttp://vuejs.org/guide/components.html#data-Must-Be-a-Function\n[7]:\thttp://vuejs.org/guide/components.html#camelCase-vs-kebab-case\n[8]:\thttp://vuejs.org/guide/components.html#Component-Naming-Conventions\n[9]:\thttp://vuejs.org/guide/components.html#Literal-vs-Dynamic\n[10]:\thttp://vuejs.org/guide/components.html#One-Way-Data-Flow\n[11]:\thttp://vuejs.org/guide/components.html#Composing-Components\n[12]:\thttp://vuejs.org/guide/components.html#Compilation-Scope\n[13]:\thttp://vuejs.org/guide/components.html#Child-Component-Refs","source":"_posts/2016-10-24-vue-caveats.md","raw":"---\ntitle: 使用vue容易犯的错误\ncategories: Javascript\n\n\n---\n\n- [在data里面声明的属性才是reactive][1]。在声明vue实例之后，如果要添加reactive的变量，可以通过[set方法][2]。\n- 在vue实例的属性或者回调函数中，[使用箭头函数][3]，因为使用箭头函数，this就不是指向vue实例，而是指向父级作用域。\n- `vm.items[indexOfItem] = newValue`更新数据，但不会更新视图，应该使用[set方法][4]。\n- `vm.items.length = newLength`更新数据，但不会更新视图，应该使用[splice方法][5]\n- [component的data必须是一个函数][6]，而且必须返回一个干净的对象（fresh data object），如果不是一个干净的对象，那么所有的组件都会引用同一个对象，这不是我们想要的结果。\n- [camelCase vs kebab-case][7]。组件的props在js里面是camelCase写法，而在HTML里面是kebab-case写法。同理，[组件的命名][8]也是如此。\n- [Literal vs Dynamic][9]。如果想要给子组件传递一个数字而不是字符串，那就要使用v-bind。\n- [One Way Data Flow][10]。父组件可以修改props，但子组件不允许修改props，也就说数据的单向的，只允许 `父 -> 子`，不允许 `子 -> 父`。子组件要改变父组件的数据只能通过events up。父子组件的通信方式可以总结为：[props down, events up][11]。\n- [Compilation-Scope][12]。父组件的模板只能使用父组件作用域里面的变量，子组件的模板只能使用子组件作用域里面的变量。\n- [Child Component Refs][13]。子组件的$refs不是reactive的，所以不要用在template或者computed\n\n[1]:\thttp://vuejs.org/guide/instance.html#Properties-and-Methods\n[2]:\thttp://vuejs.org/guide/reactivity.html#Change-Detection-Caveats\n[3]:\thttp://vuejs.org/guide/instance.html#Properties-and-Methods\n[4]:\thttp://vuejs.org/guide/list.html#Caveats\n[5]:\thttp://vuejs.org/guide/list.html#Caveats\n[6]:\thttp://vuejs.org/guide/components.html#data-Must-Be-a-Function\n[7]:\thttp://vuejs.org/guide/components.html#camelCase-vs-kebab-case\n[8]:\thttp://vuejs.org/guide/components.html#Component-Naming-Conventions\n[9]:\thttp://vuejs.org/guide/components.html#Literal-vs-Dynamic\n[10]:\thttp://vuejs.org/guide/components.html#One-Way-Data-Flow\n[11]:\thttp://vuejs.org/guide/components.html#Composing-Components\n[12]:\thttp://vuejs.org/guide/components.html#Compilation-Scope\n[13]:\thttp://vuejs.org/guide/components.html#Child-Component-Refs","slug":"2016-10-24-vue-caveats","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicah001hfsonno7wal3o","content":"<ul>\n<li><a href=\"http://vuejs.org/guide/instance.html#Properties-and-Methods\" target=\"_blank\" rel=\"noopener\">在data里面声明的属性才是reactive</a>。在声明vue实例之后，如果要添加reactive的变量，可以通过<a href=\"http://vuejs.org/guide/reactivity.html#Change-Detection-Caveats\" target=\"_blank\" rel=\"noopener\">set方法</a>。</li>\n<li>在vue实例的属性或者回调函数中，<a href=\"http://vuejs.org/guide/instance.html#Properties-and-Methods\" target=\"_blank\" rel=\"noopener\">使用箭头函数</a>，因为使用箭头函数，this就不是指向vue实例，而是指向父级作用域。</li>\n<li><code>vm.items[indexOfItem] = newValue</code>更新数据，但不会更新视图，应该使用<a href=\"http://vuejs.org/guide/list.html#Caveats\" target=\"_blank\" rel=\"noopener\">set方法</a>。</li>\n<li><code>vm.items.length = newLength</code>更新数据，但不会更新视图，应该使用<a href=\"http://vuejs.org/guide/list.html#Caveats\" target=\"_blank\" rel=\"noopener\">splice方法</a></li>\n<li><a href=\"http://vuejs.org/guide/components.html#data-Must-Be-a-Function\" target=\"_blank\" rel=\"noopener\">component的data必须是一个函数</a>，而且必须返回一个干净的对象（fresh data object），如果不是一个干净的对象，那么所有的组件都会引用同一个对象，这不是我们想要的结果。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#camelCase-vs-kebab-case\" target=\"_blank\" rel=\"noopener\">camelCase vs kebab-case</a>。组件的props在js里面是camelCase写法，而在HTML里面是kebab-case写法。同理，<a href=\"http://vuejs.org/guide/components.html#Component-Naming-Conventions\" target=\"_blank\" rel=\"noopener\">组件的命名</a>也是如此。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#Literal-vs-Dynamic\" target=\"_blank\" rel=\"noopener\">Literal vs Dynamic</a>。如果想要给子组件传递一个数字而不是字符串，那就要使用v-bind。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#One-Way-Data-Flow\" target=\"_blank\" rel=\"noopener\">One Way Data Flow</a>。父组件可以修改props，但子组件不允许修改props，也就说数据的单向的，只允许 <code>父 -&gt; 子</code>，不允许 <code>子 -&gt; 父</code>。子组件要改变父组件的数据只能通过events up。父子组件的通信方式可以总结为：<a href=\"http://vuejs.org/guide/components.html#Composing-Components\" target=\"_blank\" rel=\"noopener\">props down, events up</a>。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#Compilation-Scope\" target=\"_blank\" rel=\"noopener\">Compilation-Scope</a>。父组件的模板只能使用父组件作用域里面的变量，子组件的模板只能使用子组件作用域里面的变量。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#Child-Component-Refs\" target=\"_blank\" rel=\"noopener\">Child Component Refs</a>。子组件的$refs不是reactive的，所以不要用在template或者computed</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"http://vuejs.org/guide/instance.html#Properties-and-Methods\" target=\"_blank\" rel=\"noopener\">在data里面声明的属性才是reactive</a>。在声明vue实例之后，如果要添加reactive的变量，可以通过<a href=\"http://vuejs.org/guide/reactivity.html#Change-Detection-Caveats\" target=\"_blank\" rel=\"noopener\">set方法</a>。</li>\n<li>在vue实例的属性或者回调函数中，<a href=\"http://vuejs.org/guide/instance.html#Properties-and-Methods\" target=\"_blank\" rel=\"noopener\">使用箭头函数</a>，因为使用箭头函数，this就不是指向vue实例，而是指向父级作用域。</li>\n<li><code>vm.items[indexOfItem] = newValue</code>更新数据，但不会更新视图，应该使用<a href=\"http://vuejs.org/guide/list.html#Caveats\" target=\"_blank\" rel=\"noopener\">set方法</a>。</li>\n<li><code>vm.items.length = newLength</code>更新数据，但不会更新视图，应该使用<a href=\"http://vuejs.org/guide/list.html#Caveats\" target=\"_blank\" rel=\"noopener\">splice方法</a></li>\n<li><a href=\"http://vuejs.org/guide/components.html#data-Must-Be-a-Function\" target=\"_blank\" rel=\"noopener\">component的data必须是一个函数</a>，而且必须返回一个干净的对象（fresh data object），如果不是一个干净的对象，那么所有的组件都会引用同一个对象，这不是我们想要的结果。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#camelCase-vs-kebab-case\" target=\"_blank\" rel=\"noopener\">camelCase vs kebab-case</a>。组件的props在js里面是camelCase写法，而在HTML里面是kebab-case写法。同理，<a href=\"http://vuejs.org/guide/components.html#Component-Naming-Conventions\" target=\"_blank\" rel=\"noopener\">组件的命名</a>也是如此。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#Literal-vs-Dynamic\" target=\"_blank\" rel=\"noopener\">Literal vs Dynamic</a>。如果想要给子组件传递一个数字而不是字符串，那就要使用v-bind。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#One-Way-Data-Flow\" target=\"_blank\" rel=\"noopener\">One Way Data Flow</a>。父组件可以修改props，但子组件不允许修改props，也就说数据的单向的，只允许 <code>父 -&gt; 子</code>，不允许 <code>子 -&gt; 父</code>。子组件要改变父组件的数据只能通过events up。父子组件的通信方式可以总结为：<a href=\"http://vuejs.org/guide/components.html#Composing-Components\" target=\"_blank\" rel=\"noopener\">props down, events up</a>。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#Compilation-Scope\" target=\"_blank\" rel=\"noopener\">Compilation-Scope</a>。父组件的模板只能使用父组件作用域里面的变量，子组件的模板只能使用子组件作用域里面的变量。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#Child-Component-Refs\" target=\"_blank\" rel=\"noopener\">Child Component Refs</a>。子组件的$refs不是reactive的，所以不要用在template或者computed</li>\n</ul>\n"},{"title":"JavaScript作用域","_content":"\n## 什么是作用域（Scope）？\n\n所有的编程语言都有一个空间，既可以存放变量，也可以在我们需要的时候读取变量，我们把这个空间叫做作用域。\n\n## js引擎\n\n计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。\n\n编译器翻译的方式有两种：一个是编译，一个是解释。根据编译的时机不同，可以把语言分成编译型语言和解释性语言。\n\n> 编译型语言必须事先经过编译才能运行。\n> \n> 解释性语言不需要提前编译，而是在运行的时候，才通过编译器进行解释。\n\njs是一门解释型语言，它的编译器就是js引擎。与编译型语言不同的是，解释性语言没有很多的时间去编译代码，因为它是在运行的时候才开始编译的，这就要求它的编译速度必须足够快，为了提高编译速度，js引擎的实现使用了很多花招或者说是奇淫技巧。\n\n> To ensure the fastest performance, JS engines use all kinds of tricks (like JITs, which lazy compile and even hot re-compile, etc.) \n\n所以，js引擎的编译过程非常复杂，想要弄明白实现原理是一件非常困难的事情。我们只需要简单地明白一件事：所有的js代码首先通过编译器进行解释，然后才能执行。\n\n## 理解作用域\n\n三个重要的概念：\n\n> 引擎：负责开启和关闭编译器以及执行器。\n> \n> 编译器：引擎的一个“好朋友”，负责编译js代码。\n> \n> 作用域：存放所有已经声明的变量。\n\n他们三个是怎么合作的呢？举个例子：\n\n假如要执这条语句\n\n```javascript\nvar a = 2;\n```\n\n编译器会有下面进行两个操作：\n\n> 1. 询问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”，如果已经声明，编译器就忽略声明的过程继续往下编译，否则编译器对作用域说：“你需要声明一个变量a，放在作用域里面”。\n> 2. 编译器编译出一堆代码，给到引擎这边，准备执行，引擎开始尝试执行 `a = 2`，首先，引擎会问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”。如果已经声明，引擎就会使用变量a。否则，引擎就会从当前作用域一层一层地往上找（下面会解释）。\n\n如果引擎最终在作用域里面找到了变量a，那么就会把a的值设置为2，否则，引擎就是举手并且大喊：“这有bug呀！”\n\n总结一下：一条赋值语句的执行过程分为两步，第一步，编译器**声明变量**（如果变量还没有声明的话），第二步，**执行代码**，前提是引擎在作用域里面找得到变量。\n\n## 引擎寻找变量的两种方式\n\n引擎在作用域里面寻找变量有两种方式：LHS和RHS（ \"Left-hand Side\" and \"Right-hand Side\"），从表层意思来看，它指的是`=`的左边和右边，比如说\n\n```javascript\nvar a = b;\n```\n\n这里面的b是RHS引用，引擎会对作用域说：“帮我找一下b，它是RHS引用”，也即是引擎并不想改变b的值，只是想读取它的值。\n\na则是LHS引用，引擎会对作用域说：“帮我找一下a，它是LHS引用”，也就是说引擎并不关注a现在的值是什么，它只是把a的值改成和b一样。\n\n不过，用`=`的左边和右边来区分LHS和RHS并不准确，更准确的区分是\n\n> LHS：我要改变这个变量的值，也就是set。\n> \n> RHS：我要读取这个变量的值，也就是get。\n\n比如说下面这条语句:\n\n```javascript\nconsole.log(a);\n```\n\n这里只是要读取a的值，并不想改变a的值，所以它是RHS引用。\n\n再举个LHS的例子来对一下：\n\n```javascript\na = 2;\n```\n\n这里只是要把a的值设置为2，压根不关心a现在的值是多少，这就是LHS引用。\n\n在看一个例子：\n\n```javascript\nfunction foo(a) {\n    console.log( a ); // 2\n}\n\nfoo( 2 );\n```\n\n让我们来分析一下这里面发生的LHS和RHS。\n\n最后一行，`foo(..)`是RHS引用。也是引擎会对作用域说：“hi，把我找一下foo的值，然后给我”。\n\n在这里，有一个非常重要而且容易被忽视的地方：\n\n当你把2作为参数传给`foo`函数时，实际上就是在执行`a = 2`，所以这里有一个隐藏的LHS引用。\n\n当执行`console.log(..)`时，需要寻找console对象，这是一个RHS引用，然后检查console是不是有一个属性`log`。\n\n最后，还有一个同时具备LHS/RHS引用的操作，`log(a)`，我们假定`log(..)`的参数是`arg1`，所以有`arg1 = a`，这是LHS引用，而读取a这是RHS引用。\n\n不过，你可能会认为声明`function foo(a){…`等同于`var foo = function (a){…`，所以这里也有一个LHS引用。\n\n然而这一步是发生在编译阶段，而我们这里讨论的LHS/RHS是发生在第二个阶段，也就是引擎阶段，所以就没必要把它看成是赋值一个函数给`foo`啦。\n\n## 引擎和作用域是怎么交流的？\n\n```javascript\nfunction foo(a) {\n    console.log( a ); // 2\n}\n\nfoo( 2 );\n```\n\n他们之间的交流过程如下：\n\n> 引擎：“Hi，作用域，帮我找一下`foo`，是RHS引用，你有听过它吗？”\n> \n> 作用域：“当然有，编译器一分钟前刚刚声明过，它是一个函数，呐，给你”\n> \n> 引擎：“太棒啦，谢谢哈，我执行以下`foo`”\n> \n> 引擎：“Hey，作用域，帮我找一下变量`a`，是个LHS引用，你有听过它吗？”\n> \n> 作用域：“当然有，编译器刚刚声明它为`foo`函数的一个参数，呐，给你”\n> \n> 引擎：“wow，真是帮了我大忙，在次谢谢你，现在，我把`2`复杂给`a`”\n> \n> 引擎：“Hey，作用域，不要意思又来打扰你，你需要一个`console`，它是一个RHS引用，你有听过它吗？”\n> \n> 作用域：“没问题，引擎，这是我应该做的，我有一个`console`，它是系统内建对象，给你”\n> \n> 引擎：“太完美了，找找一下`log(..)`，ok，太棒啦，它是个函数”\n> \n> 引擎：“Yo，作用域，你能帮我找一下变量a吗？它是个RHS引用，我记得它，刚才有来找你拿过，但是现在想在次确认一下。”\n> \n> 作用域：“你的，你刚才有拿过，同一个变量来着，没有发生任何改变，呐，给你”\n> \n> 引擎：“太酷了，把`2`复制给`a`”，然后执行`log(..)`\n\n## 嵌套作用域\n\n上面提高过，如果引擎没有从当前作用域中找到变量，那么它就会从当前作用域一层一层地往上找，一直找到顶层，也就是global，打个比喻：\n\n![][image-1]\n\n这是一栋楼，目前的作用域是在一楼，如果找不到变量，那么就坐电梯到二楼找，如果找到了就停止，否则就一直找知道最顶层global。\n\n## 报错\n\n你可能会问了，区分LHS和RHS有什么实际意义呢？因为他们出错的类型是不一样的。\n\n对于LHS来说，如果引擎在作用域中找不到变量而且代码不是在“Strict Mode”模式下，那么它会在全局作用域（Global Scope）中创建这个变量。然后把它拿到引擎中处理。而如果是在“Strict Mode”模式下，那就会抛出一个`ReferenceError`类型的错误\n\n对于RHS来说，如果引擎在作用域中找不到变量，那就会抛出一个`ReferenceError`类型的错误。\n\n还有，如果引擎在作用域中找到了RHS引用的变量，但是你尝试去用不可能的方式进行操作，比如从`null`或者`undefined`中读取一个属性，这是引擎就会抛出一个`TypeError`错误。\n\n## 参考链接\n\n[You Don't Know JS: Scope & Closures][1] \n\n\n[1]:\thttps://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&%20closures/ch1.md\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/b7xrs.png","source":"_posts/2016-11-13-scope.md","raw":"---\ntitle: JavaScript作用域\ncategories: Javascript\n---\n\n## 什么是作用域（Scope）？\n\n所有的编程语言都有一个空间，既可以存放变量，也可以在我们需要的时候读取变量，我们把这个空间叫做作用域。\n\n## js引擎\n\n计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。\n\n编译器翻译的方式有两种：一个是编译，一个是解释。根据编译的时机不同，可以把语言分成编译型语言和解释性语言。\n\n> 编译型语言必须事先经过编译才能运行。\n> \n> 解释性语言不需要提前编译，而是在运行的时候，才通过编译器进行解释。\n\njs是一门解释型语言，它的编译器就是js引擎。与编译型语言不同的是，解释性语言没有很多的时间去编译代码，因为它是在运行的时候才开始编译的，这就要求它的编译速度必须足够快，为了提高编译速度，js引擎的实现使用了很多花招或者说是奇淫技巧。\n\n> To ensure the fastest performance, JS engines use all kinds of tricks (like JITs, which lazy compile and even hot re-compile, etc.) \n\n所以，js引擎的编译过程非常复杂，想要弄明白实现原理是一件非常困难的事情。我们只需要简单地明白一件事：所有的js代码首先通过编译器进行解释，然后才能执行。\n\n## 理解作用域\n\n三个重要的概念：\n\n> 引擎：负责开启和关闭编译器以及执行器。\n> \n> 编译器：引擎的一个“好朋友”，负责编译js代码。\n> \n> 作用域：存放所有已经声明的变量。\n\n他们三个是怎么合作的呢？举个例子：\n\n假如要执这条语句\n\n```javascript\nvar a = 2;\n```\n\n编译器会有下面进行两个操作：\n\n> 1. 询问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”，如果已经声明，编译器就忽略声明的过程继续往下编译，否则编译器对作用域说：“你需要声明一个变量a，放在作用域里面”。\n> 2. 编译器编译出一堆代码，给到引擎这边，准备执行，引擎开始尝试执行 `a = 2`，首先，引擎会问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”。如果已经声明，引擎就会使用变量a。否则，引擎就会从当前作用域一层一层地往上找（下面会解释）。\n\n如果引擎最终在作用域里面找到了变量a，那么就会把a的值设置为2，否则，引擎就是举手并且大喊：“这有bug呀！”\n\n总结一下：一条赋值语句的执行过程分为两步，第一步，编译器**声明变量**（如果变量还没有声明的话），第二步，**执行代码**，前提是引擎在作用域里面找得到变量。\n\n## 引擎寻找变量的两种方式\n\n引擎在作用域里面寻找变量有两种方式：LHS和RHS（ \"Left-hand Side\" and \"Right-hand Side\"），从表层意思来看，它指的是`=`的左边和右边，比如说\n\n```javascript\nvar a = b;\n```\n\n这里面的b是RHS引用，引擎会对作用域说：“帮我找一下b，它是RHS引用”，也即是引擎并不想改变b的值，只是想读取它的值。\n\na则是LHS引用，引擎会对作用域说：“帮我找一下a，它是LHS引用”，也就是说引擎并不关注a现在的值是什么，它只是把a的值改成和b一样。\n\n不过，用`=`的左边和右边来区分LHS和RHS并不准确，更准确的区分是\n\n> LHS：我要改变这个变量的值，也就是set。\n> \n> RHS：我要读取这个变量的值，也就是get。\n\n比如说下面这条语句:\n\n```javascript\nconsole.log(a);\n```\n\n这里只是要读取a的值，并不想改变a的值，所以它是RHS引用。\n\n再举个LHS的例子来对一下：\n\n```javascript\na = 2;\n```\n\n这里只是要把a的值设置为2，压根不关心a现在的值是多少，这就是LHS引用。\n\n在看一个例子：\n\n```javascript\nfunction foo(a) {\n    console.log( a ); // 2\n}\n\nfoo( 2 );\n```\n\n让我们来分析一下这里面发生的LHS和RHS。\n\n最后一行，`foo(..)`是RHS引用。也是引擎会对作用域说：“hi，把我找一下foo的值，然后给我”。\n\n在这里，有一个非常重要而且容易被忽视的地方：\n\n当你把2作为参数传给`foo`函数时，实际上就是在执行`a = 2`，所以这里有一个隐藏的LHS引用。\n\n当执行`console.log(..)`时，需要寻找console对象，这是一个RHS引用，然后检查console是不是有一个属性`log`。\n\n最后，还有一个同时具备LHS/RHS引用的操作，`log(a)`，我们假定`log(..)`的参数是`arg1`，所以有`arg1 = a`，这是LHS引用，而读取a这是RHS引用。\n\n不过，你可能会认为声明`function foo(a){…`等同于`var foo = function (a){…`，所以这里也有一个LHS引用。\n\n然而这一步是发生在编译阶段，而我们这里讨论的LHS/RHS是发生在第二个阶段，也就是引擎阶段，所以就没必要把它看成是赋值一个函数给`foo`啦。\n\n## 引擎和作用域是怎么交流的？\n\n```javascript\nfunction foo(a) {\n    console.log( a ); // 2\n}\n\nfoo( 2 );\n```\n\n他们之间的交流过程如下：\n\n> 引擎：“Hi，作用域，帮我找一下`foo`，是RHS引用，你有听过它吗？”\n> \n> 作用域：“当然有，编译器一分钟前刚刚声明过，它是一个函数，呐，给你”\n> \n> 引擎：“太棒啦，谢谢哈，我执行以下`foo`”\n> \n> 引擎：“Hey，作用域，帮我找一下变量`a`，是个LHS引用，你有听过它吗？”\n> \n> 作用域：“当然有，编译器刚刚声明它为`foo`函数的一个参数，呐，给你”\n> \n> 引擎：“wow，真是帮了我大忙，在次谢谢你，现在，我把`2`复杂给`a`”\n> \n> 引擎：“Hey，作用域，不要意思又来打扰你，你需要一个`console`，它是一个RHS引用，你有听过它吗？”\n> \n> 作用域：“没问题，引擎，这是我应该做的，我有一个`console`，它是系统内建对象，给你”\n> \n> 引擎：“太完美了，找找一下`log(..)`，ok，太棒啦，它是个函数”\n> \n> 引擎：“Yo，作用域，你能帮我找一下变量a吗？它是个RHS引用，我记得它，刚才有来找你拿过，但是现在想在次确认一下。”\n> \n> 作用域：“你的，你刚才有拿过，同一个变量来着，没有发生任何改变，呐，给你”\n> \n> 引擎：“太酷了，把`2`复制给`a`”，然后执行`log(..)`\n\n## 嵌套作用域\n\n上面提高过，如果引擎没有从当前作用域中找到变量，那么它就会从当前作用域一层一层地往上找，一直找到顶层，也就是global，打个比喻：\n\n![][image-1]\n\n这是一栋楼，目前的作用域是在一楼，如果找不到变量，那么就坐电梯到二楼找，如果找到了就停止，否则就一直找知道最顶层global。\n\n## 报错\n\n你可能会问了，区分LHS和RHS有什么实际意义呢？因为他们出错的类型是不一样的。\n\n对于LHS来说，如果引擎在作用域中找不到变量而且代码不是在“Strict Mode”模式下，那么它会在全局作用域（Global Scope）中创建这个变量。然后把它拿到引擎中处理。而如果是在“Strict Mode”模式下，那就会抛出一个`ReferenceError`类型的错误\n\n对于RHS来说，如果引擎在作用域中找不到变量，那就会抛出一个`ReferenceError`类型的错误。\n\n还有，如果引擎在作用域中找到了RHS引用的变量，但是你尝试去用不可能的方式进行操作，比如从`null`或者`undefined`中读取一个属性，这是引擎就会抛出一个`TypeError`错误。\n\n## 参考链接\n\n[You Don't Know JS: Scope & Closures][1] \n\n\n[1]:\thttps://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&%20closures/ch1.md\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/b7xrs.png","slug":"2016-11-13-scope","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicai001lfsong34fql9u","content":"<h2 id=\"什么是作用域（Scope）？\"><a href=\"#什么是作用域（Scope）？\" class=\"headerlink\" title=\"什么是作用域（Scope）？\"></a>什么是作用域（Scope）？</h2><p>所有的编程语言都有一个空间，既可以存放变量，也可以在我们需要的时候读取变量，我们把这个空间叫做作用域。</p>\n<h2 id=\"js引擎\"><a href=\"#js引擎\" class=\"headerlink\" title=\"js引擎\"></a>js引擎</h2><p>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。</p>\n<p>编译器翻译的方式有两种：一个是编译，一个是解释。根据编译的时机不同，可以把语言分成编译型语言和解释性语言。</p>\n<blockquote>\n<p>编译型语言必须事先经过编译才能运行。</p>\n<p>解释性语言不需要提前编译，而是在运行的时候，才通过编译器进行解释。</p>\n</blockquote>\n<p>js是一门解释型语言，它的编译器就是js引擎。与编译型语言不同的是，解释性语言没有很多的时间去编译代码，因为它是在运行的时候才开始编译的，这就要求它的编译速度必须足够快，为了提高编译速度，js引擎的实现使用了很多花招或者说是奇淫技巧。</p>\n<blockquote>\n<p>To ensure the fastest performance, JS engines use all kinds of tricks (like JITs, which lazy compile and even hot re-compile, etc.) </p>\n</blockquote>\n<p>所以，js引擎的编译过程非常复杂，想要弄明白实现原理是一件非常困难的事情。我们只需要简单地明白一件事：所有的js代码首先通过编译器进行解释，然后才能执行。</p>\n<h2 id=\"理解作用域\"><a href=\"#理解作用域\" class=\"headerlink\" title=\"理解作用域\"></a>理解作用域</h2><p>三个重要的概念：</p>\n<blockquote>\n<p>引擎：负责开启和关闭编译器以及执行器。</p>\n<p>编译器：引擎的一个“好朋友”，负责编译js代码。</p>\n<p>作用域：存放所有已经声明的变量。</p>\n</blockquote>\n<p>他们三个是怎么合作的呢？举个例子：</p>\n<p>假如要执这条语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>编译器会有下面进行两个操作：</p>\n<blockquote>\n<ol>\n<li>询问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”，如果已经声明，编译器就忽略声明的过程继续往下编译，否则编译器对作用域说：“你需要声明一个变量a，放在作用域里面”。</li>\n<li>编译器编译出一堆代码，给到引擎这边，准备执行，引擎开始尝试执行 <code>a = 2</code>，首先，引擎会问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”。如果已经声明，引擎就会使用变量a。否则，引擎就会从当前作用域一层一层地往上找（下面会解释）。</li>\n</ol>\n</blockquote>\n<p>如果引擎最终在作用域里面找到了变量a，那么就会把a的值设置为2，否则，引擎就是举手并且大喊：“这有bug呀！”</p>\n<p>总结一下：一条赋值语句的执行过程分为两步，第一步，编译器<strong>声明变量</strong>（如果变量还没有声明的话），第二步，<strong>执行代码</strong>，前提是引擎在作用域里面找得到变量。</p>\n<h2 id=\"引擎寻找变量的两种方式\"><a href=\"#引擎寻找变量的两种方式\" class=\"headerlink\" title=\"引擎寻找变量的两种方式\"></a>引擎寻找变量的两种方式</h2><p>引擎在作用域里面寻找变量有两种方式：LHS和RHS（ “Left-hand Side” and “Right-hand Side”），从表层意思来看，它指的是<code>=</code>的左边和右边，比如说</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = b;</span><br></pre></td></tr></table></figure>\n<p>这里面的b是RHS引用，引擎会对作用域说：“帮我找一下b，它是RHS引用”，也即是引擎并不想改变b的值，只是想读取它的值。</p>\n<p>a则是LHS引用，引擎会对作用域说：“帮我找一下a，它是LHS引用”，也就是说引擎并不关注a现在的值是什么，它只是把a的值改成和b一样。</p>\n<p>不过，用<code>=</code>的左边和右边来区分LHS和RHS并不准确，更准确的区分是</p>\n<blockquote>\n<p>LHS：我要改变这个变量的值，也就是set。</p>\n<p>RHS：我要读取这个变量的值，也就是get。</p>\n</blockquote>\n<p>比如说下面这条语句:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n<p>这里只是要读取a的值，并不想改变a的值，所以它是RHS引用。</p>\n<p>再举个LHS的例子来对一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>这里只是要把a的值设置为2，压根不关心a现在的值是多少，这就是LHS引用。</p>\n<p>在看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo( <span class=\"number\">2</span> );</span><br></pre></td></tr></table></figure>\n<p>让我们来分析一下这里面发生的LHS和RHS。</p>\n<p>最后一行，<code>foo(..)</code>是RHS引用。也是引擎会对作用域说：“hi，把我找一下foo的值，然后给我”。</p>\n<p>在这里，有一个非常重要而且容易被忽视的地方：</p>\n<p>当你把2作为参数传给<code>foo</code>函数时，实际上就是在执行<code>a = 2</code>，所以这里有一个隐藏的LHS引用。</p>\n<p>当执行<code>console.log(..)</code>时，需要寻找console对象，这是一个RHS引用，然后检查console是不是有一个属性<code>log</code>。</p>\n<p>最后，还有一个同时具备LHS/RHS引用的操作，<code>log(a)</code>，我们假定<code>log(..)</code>的参数是<code>arg1</code>，所以有<code>arg1 = a</code>，这是LHS引用，而读取a这是RHS引用。</p>\n<p>不过，你可能会认为声明<code>function foo(a){…</code>等同于<code>var foo = function (a){…</code>，所以这里也有一个LHS引用。</p>\n<p>然而这一步是发生在编译阶段，而我们这里讨论的LHS/RHS是发生在第二个阶段，也就是引擎阶段，所以就没必要把它看成是赋值一个函数给<code>foo</code>啦。</p>\n<h2 id=\"引擎和作用域是怎么交流的？\"><a href=\"#引擎和作用域是怎么交流的？\" class=\"headerlink\" title=\"引擎和作用域是怎么交流的？\"></a>引擎和作用域是怎么交流的？</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo( <span class=\"number\">2</span> );</span><br></pre></td></tr></table></figure>\n<p>他们之间的交流过程如下：</p>\n<blockquote>\n<p>引擎：“Hi，作用域，帮我找一下<code>foo</code>，是RHS引用，你有听过它吗？”</p>\n<p>作用域：“当然有，编译器一分钟前刚刚声明过，它是一个函数，呐，给你”</p>\n<p>引擎：“太棒啦，谢谢哈，我执行以下<code>foo</code>”</p>\n<p>引擎：“Hey，作用域，帮我找一下变量<code>a</code>，是个LHS引用，你有听过它吗？”</p>\n<p>作用域：“当然有，编译器刚刚声明它为<code>foo</code>函数的一个参数，呐，给你”</p>\n<p>引擎：“wow，真是帮了我大忙，在次谢谢你，现在，我把<code>2</code>复杂给<code>a</code>”</p>\n<p>引擎：“Hey，作用域，不要意思又来打扰你，你需要一个<code>console</code>，它是一个RHS引用，你有听过它吗？”</p>\n<p>作用域：“没问题，引擎，这是我应该做的，我有一个<code>console</code>，它是系统内建对象，给你”</p>\n<p>引擎：“太完美了，找找一下<code>log(..)</code>，ok，太棒啦，它是个函数”</p>\n<p>引擎：“Yo，作用域，你能帮我找一下变量a吗？它是个RHS引用，我记得它，刚才有来找你拿过，但是现在想在次确认一下。”</p>\n<p>作用域：“你的，你刚才有拿过，同一个变量来着，没有发生任何改变，呐，给你”</p>\n<p>引擎：“太酷了，把<code>2</code>复制给<code>a</code>”，然后执行<code>log(..)</code></p>\n</blockquote>\n<h2 id=\"嵌套作用域\"><a href=\"#嵌套作用域\" class=\"headerlink\" title=\"嵌套作用域\"></a>嵌套作用域</h2><p>上面提高过，如果引擎没有从当前作用域中找到变量，那么它就会从当前作用域一层一层地往上找，一直找到顶层，也就是global，打个比喻：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/b7xrs.png\" alt=\"\"></p>\n<p>这是一栋楼，目前的作用域是在一楼，如果找不到变量，那么就坐电梯到二楼找，如果找到了就停止，否则就一直找知道最顶层global。</p>\n<h2 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h2><p>你可能会问了，区分LHS和RHS有什么实际意义呢？因为他们出错的类型是不一样的。</p>\n<p>对于LHS来说，如果引擎在作用域中找不到变量而且代码不是在“Strict Mode”模式下，那么它会在全局作用域（Global Scope）中创建这个变量。然后把它拿到引擎中处理。而如果是在“Strict Mode”模式下，那就会抛出一个<code>ReferenceError</code>类型的错误</p>\n<p>对于RHS来说，如果引擎在作用域中找不到变量，那就会抛出一个<code>ReferenceError</code>类型的错误。</p>\n<p>还有，如果引擎在作用域中找到了RHS引用的变量，但是你尝试去用不可能的方式进行操作，比如从<code>null</code>或者<code>undefined</code>中读取一个属性，这是引擎就会抛出一个<code>TypeError</code>错误。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&amp;%20closures/ch1.md\" target=\"_blank\" rel=\"noopener\">You Don’t Know JS: Scope &amp; Closures</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是作用域（Scope）？\"><a href=\"#什么是作用域（Scope）？\" class=\"headerlink\" title=\"什么是作用域（Scope）？\"></a>什么是作用域（Scope）？</h2><p>所有的编程语言都有一个空间，既可以存放变量，也可以在我们需要的时候读取变量，我们把这个空间叫做作用域。</p>\n<h2 id=\"js引擎\"><a href=\"#js引擎\" class=\"headerlink\" title=\"js引擎\"></a>js引擎</h2><p>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。</p>\n<p>编译器翻译的方式有两种：一个是编译，一个是解释。根据编译的时机不同，可以把语言分成编译型语言和解释性语言。</p>\n<blockquote>\n<p>编译型语言必须事先经过编译才能运行。</p>\n<p>解释性语言不需要提前编译，而是在运行的时候，才通过编译器进行解释。</p>\n</blockquote>\n<p>js是一门解释型语言，它的编译器就是js引擎。与编译型语言不同的是，解释性语言没有很多的时间去编译代码，因为它是在运行的时候才开始编译的，这就要求它的编译速度必须足够快，为了提高编译速度，js引擎的实现使用了很多花招或者说是奇淫技巧。</p>\n<blockquote>\n<p>To ensure the fastest performance, JS engines use all kinds of tricks (like JITs, which lazy compile and even hot re-compile, etc.) </p>\n</blockquote>\n<p>所以，js引擎的编译过程非常复杂，想要弄明白实现原理是一件非常困难的事情。我们只需要简单地明白一件事：所有的js代码首先通过编译器进行解释，然后才能执行。</p>\n<h2 id=\"理解作用域\"><a href=\"#理解作用域\" class=\"headerlink\" title=\"理解作用域\"></a>理解作用域</h2><p>三个重要的概念：</p>\n<blockquote>\n<p>引擎：负责开启和关闭编译器以及执行器。</p>\n<p>编译器：引擎的一个“好朋友”，负责编译js代码。</p>\n<p>作用域：存放所有已经声明的变量。</p>\n</blockquote>\n<p>他们三个是怎么合作的呢？举个例子：</p>\n<p>假如要执这条语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>编译器会有下面进行两个操作：</p>\n<blockquote>\n<ol>\n<li>询问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”，如果已经声明，编译器就忽略声明的过程继续往下编译，否则编译器对作用域说：“你需要声明一个变量a，放在作用域里面”。</li>\n<li>编译器编译出一堆代码，给到引擎这边，准备执行，引擎开始尝试执行 <code>a = 2</code>，首先，引擎会问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”。如果已经声明，引擎就会使用变量a。否则，引擎就会从当前作用域一层一层地往上找（下面会解释）。</li>\n</ol>\n</blockquote>\n<p>如果引擎最终在作用域里面找到了变量a，那么就会把a的值设置为2，否则，引擎就是举手并且大喊：“这有bug呀！”</p>\n<p>总结一下：一条赋值语句的执行过程分为两步，第一步，编译器<strong>声明变量</strong>（如果变量还没有声明的话），第二步，<strong>执行代码</strong>，前提是引擎在作用域里面找得到变量。</p>\n<h2 id=\"引擎寻找变量的两种方式\"><a href=\"#引擎寻找变量的两种方式\" class=\"headerlink\" title=\"引擎寻找变量的两种方式\"></a>引擎寻找变量的两种方式</h2><p>引擎在作用域里面寻找变量有两种方式：LHS和RHS（ “Left-hand Side” and “Right-hand Side”），从表层意思来看，它指的是<code>=</code>的左边和右边，比如说</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = b;</span><br></pre></td></tr></table></figure>\n<p>这里面的b是RHS引用，引擎会对作用域说：“帮我找一下b，它是RHS引用”，也即是引擎并不想改变b的值，只是想读取它的值。</p>\n<p>a则是LHS引用，引擎会对作用域说：“帮我找一下a，它是LHS引用”，也就是说引擎并不关注a现在的值是什么，它只是把a的值改成和b一样。</p>\n<p>不过，用<code>=</code>的左边和右边来区分LHS和RHS并不准确，更准确的区分是</p>\n<blockquote>\n<p>LHS：我要改变这个变量的值，也就是set。</p>\n<p>RHS：我要读取这个变量的值，也就是get。</p>\n</blockquote>\n<p>比如说下面这条语句:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n<p>这里只是要读取a的值，并不想改变a的值，所以它是RHS引用。</p>\n<p>再举个LHS的例子来对一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>这里只是要把a的值设置为2，压根不关心a现在的值是多少，这就是LHS引用。</p>\n<p>在看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo( <span class=\"number\">2</span> );</span><br></pre></td></tr></table></figure>\n<p>让我们来分析一下这里面发生的LHS和RHS。</p>\n<p>最后一行，<code>foo(..)</code>是RHS引用。也是引擎会对作用域说：“hi，把我找一下foo的值，然后给我”。</p>\n<p>在这里，有一个非常重要而且容易被忽视的地方：</p>\n<p>当你把2作为参数传给<code>foo</code>函数时，实际上就是在执行<code>a = 2</code>，所以这里有一个隐藏的LHS引用。</p>\n<p>当执行<code>console.log(..)</code>时，需要寻找console对象，这是一个RHS引用，然后检查console是不是有一个属性<code>log</code>。</p>\n<p>最后，还有一个同时具备LHS/RHS引用的操作，<code>log(a)</code>，我们假定<code>log(..)</code>的参数是<code>arg1</code>，所以有<code>arg1 = a</code>，这是LHS引用，而读取a这是RHS引用。</p>\n<p>不过，你可能会认为声明<code>function foo(a){…</code>等同于<code>var foo = function (a){…</code>，所以这里也有一个LHS引用。</p>\n<p>然而这一步是发生在编译阶段，而我们这里讨论的LHS/RHS是发生在第二个阶段，也就是引擎阶段，所以就没必要把它看成是赋值一个函数给<code>foo</code>啦。</p>\n<h2 id=\"引擎和作用域是怎么交流的？\"><a href=\"#引擎和作用域是怎么交流的？\" class=\"headerlink\" title=\"引擎和作用域是怎么交流的？\"></a>引擎和作用域是怎么交流的？</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo( <span class=\"number\">2</span> );</span><br></pre></td></tr></table></figure>\n<p>他们之间的交流过程如下：</p>\n<blockquote>\n<p>引擎：“Hi，作用域，帮我找一下<code>foo</code>，是RHS引用，你有听过它吗？”</p>\n<p>作用域：“当然有，编译器一分钟前刚刚声明过，它是一个函数，呐，给你”</p>\n<p>引擎：“太棒啦，谢谢哈，我执行以下<code>foo</code>”</p>\n<p>引擎：“Hey，作用域，帮我找一下变量<code>a</code>，是个LHS引用，你有听过它吗？”</p>\n<p>作用域：“当然有，编译器刚刚声明它为<code>foo</code>函数的一个参数，呐，给你”</p>\n<p>引擎：“wow，真是帮了我大忙，在次谢谢你，现在，我把<code>2</code>复杂给<code>a</code>”</p>\n<p>引擎：“Hey，作用域，不要意思又来打扰你，你需要一个<code>console</code>，它是一个RHS引用，你有听过它吗？”</p>\n<p>作用域：“没问题，引擎，这是我应该做的，我有一个<code>console</code>，它是系统内建对象，给你”</p>\n<p>引擎：“太完美了，找找一下<code>log(..)</code>，ok，太棒啦，它是个函数”</p>\n<p>引擎：“Yo，作用域，你能帮我找一下变量a吗？它是个RHS引用，我记得它，刚才有来找你拿过，但是现在想在次确认一下。”</p>\n<p>作用域：“你的，你刚才有拿过，同一个变量来着，没有发生任何改变，呐，给你”</p>\n<p>引擎：“太酷了，把<code>2</code>复制给<code>a</code>”，然后执行<code>log(..)</code></p>\n</blockquote>\n<h2 id=\"嵌套作用域\"><a href=\"#嵌套作用域\" class=\"headerlink\" title=\"嵌套作用域\"></a>嵌套作用域</h2><p>上面提高过，如果引擎没有从当前作用域中找到变量，那么它就会从当前作用域一层一层地往上找，一直找到顶层，也就是global，打个比喻：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/b7xrs.png\" alt=\"\"></p>\n<p>这是一栋楼，目前的作用域是在一楼，如果找不到变量，那么就坐电梯到二楼找，如果找到了就停止，否则就一直找知道最顶层global。</p>\n<h2 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h2><p>你可能会问了，区分LHS和RHS有什么实际意义呢？因为他们出错的类型是不一样的。</p>\n<p>对于LHS来说，如果引擎在作用域中找不到变量而且代码不是在“Strict Mode”模式下，那么它会在全局作用域（Global Scope）中创建这个变量。然后把它拿到引擎中处理。而如果是在“Strict Mode”模式下，那就会抛出一个<code>ReferenceError</code>类型的错误</p>\n<p>对于RHS来说，如果引擎在作用域中找不到变量，那就会抛出一个<code>ReferenceError</code>类型的错误。</p>\n<p>还有，如果引擎在作用域中找到了RHS引用的变量，但是你尝试去用不可能的方式进行操作，比如从<code>null</code>或者<code>undefined</code>中读取一个属性，这是引擎就会抛出一个<code>TypeError</code>错误。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&amp;%20closures/ch1.md\" target=\"_blank\" rel=\"noopener\">You Don’t Know JS: Scope &amp; Closures</a> </p>\n"},{"title":"《React Native开源项目 — Snowflake》学习总结","_content":"\nsnowflake是一个非常好的[react naitve开源项目][1]，功能其实并不复杂，但是讲解却非常详细，它的功能主要是实现手机app的登录、注册、修改密码以及获取和修改用户信息等功能，是个很常见的业务场景。\n\n通过它可以了解一个完整的React Native项目是长什么样子的，有哪些常用的模块，以及代码是怎么规划的，组件和组件之间是如何通过redux来进行通信交流的。\n\n## 新发现的几个模块\n\n开发React Native有一些几乎是必备的模块，比如`react-redux`，`redux-thunk`，在看这个项目的过程中，发现了几个之前不知道的模块。\n\n### react-native-i18n\n\n[https://github.com/AlexanderZaytsev/react-native-i18n][2]\n\n一开始不明白`i18n`是什么意思，后来google之后才知道，原来是internationalization，国际化的意思，nternationalization去掉头尾的i和n刚好还剩下18个字符。这个模块可以让app自动地切换成当前移动设备使用的语言。\n\n比如在一份json文件中定义不同的语言：\n\n```javascript\n{\n  \"zh\": {\n    \"App\": {\n      \"version\": \"版本\"\n    },\n    \"Header\": {\n      \"current_state\": \"当前状态\",\n      \"see_console\": \"查看控制台\",\n      \"update_state\": \"更新状态\"\n    }\n  },\n  \"en\": {\n    \"App\": {\n      \"version\": \"Version\"\n    },\n    \"Header\": {\n      \"current_state\": \"Current State\",\n      \"see_console\": \"see console\",\n      \"update_state\": \"Update State\"\n    }\n  },\n  \"fr\": {\n    \"App\": {\n      \"version\": \"Version\"\n    },\n    \"Header\": {\n      \"current_state\": \"état actuel\",\n      \"see_console\": \"voir console\",\n      \"update_state\": \"état de mise à jour\"      \n    }    \n  },\n  \"es\": {\n    \"App\": {\n      \"version\": \"Versión\"\n    },\n    \"Header\": {\n      \"current_state\": \"Estado actual\",\n      \"see_console\": \"ver la consola\",\n      \"update_state\": \"Estado de actualización\"      \n    }  \n  }\n}\n```\n\n引用这份json文件：\n\n```javascript\nvar I18n = require('react-native-i18n')\nimport Translations from '../lib/Translations'\nI18n.translations = Translations\n\nlet version = I18n.t('App.version')\n```\n\n变量version的值在中文的手机会显示：“版本”，在英文的手机会显示：“Version”。\n\n### tcomb-form-native\n\n[https://github.com/gcanti/tcomb-form-native][3]\n\n一个非常好用的表单库，根据配置可以快速生成表单，使用的方法如下\n\n```javascript\nconst t = require('tcomb-form-native')\nlet Form = t.form.Form\n\nloginForm = t.struct({\n  username: t.String,\n  email: t.String,\n  password: t.String,\n  passwordAgain: t.String\n})\noptions.fields['username'] = username\noptions.fields['username'].placeholder = I18n.t('LoginForm.username')\noptions.fields['username'].autoCapitalize = 'none'\noptions.fields['email'] = email\noptions.fields['email'].placeholder = I18n.t('LoginForm.email')\noptions.fields['email'].autoCapitalize = 'none'\noptions.fields['password'] = password\noptions.fields['password'].placeholder = I18n.t('LoginForm.password')\noptions.fields['passwordAgain'] = passwordAgain\noptions.fields['passwordAgain'].placeholder = I18n.t('LoginForm.password_again')\n```\n\n最终可以生成相应的表单\n\n![][image-1]\n\n### react-native-router-flux\n\n[https://github.com/aksonov/react-native-router-flux][4]\n\nReact Native路由模块，轻松实现不同组件的切换。使用方法：\n\n```javascript\n// 引入模块\nimport {\n    Router,\n    Scene} from 'react-native-router-flux'\n\n// 配置组件\n<Router sceneStyle={{ backgroundColor: 'white' }}>\n  <Scene key='root' hideNavBar>\n    <Scene key='App'\n      component={App}\n      type='replace'\n      initial />\n\n    <Scene key='InitialLoginForm'\n      component={Register}\n      type='replace' />\n\n    <Scene key='Login'\n      component={Login}\n      type='replace' />\n\n    <Scene key='Register'\n      component={Register}\n      type='replace' />\n\n    <Scene key='ForgotPassword'\n      component={ForgotPassword}\n      type='replace' />\n\n    <Scene key='Subview'\n      component={Subview} />\n  </Scene>\n</Router>\n         \n```\n\nkey就是组件的标志，比如说，如果要跳转到`Register`组件，可以这么做：\n\n```javascript\nimport { Actions } from 'react-native-router-flux'\nActions.Register()\n```\n\n### react-native-simple-store\n\n[https://github.com/jasonmerino/react-native-simple-store][5]\n\nReact Native本地的异步储存，使用方法如下：\n\n```javascript\nimport store from 'react-native-simple-store';\n\nstore\n  .save('coffee', {\n    isAwesome: true\n  })\n  .then(() => store.get('coffee'))\n  .then(coffee => {\n    console.assert(coffee.isAwesome === true);\n  })\n  .then(() => store.update('coffee', {\n    isNotEssential: false\n  }))\n  .then(() => store.get('coffee'))\n  .then(coffee => {\n    console.assert(coffee.isNotEssential === false);\n    console.assert(coffee.isAwesome === true);\n    return store.delete('coffee');\n  })\n  .then(() => store.get('coffee'))\n  .then(coffee => {\n    console.assert(coffee === null);\n  })\n  .catch(error => {\n    console.error(error.message);\n  });\n```\n\n## 代码规划\n\n- 入口文件，index.ios.js和index.android.js\n- 所有业务代码放在src目录中\n- reducers单独一个文件夹，里面分成4个模块，分别是auth、device、global和profile，每个模块里面有3份文件，分别是installState.js（初始化数据）、actions.js（dispatch行为）和reducer.js（接受diapatch，更改数据），每个模块里面还有一个tests文件夹，用来存放actions和reducer的测试用例。\n- containers存放所有路由组件，也就是所有的页面\n- lib存放config、数据请求以及工具类文件\n- images存放图片\n- componengs存放通用的小组件\n\n项目虽然不是很复杂，但是代码的规划非常合理，也有完整的单元测试，确实学到了很多东西。\n\n[1]:\thttps://github.com/bartonhammond/snowflake\n[2]:\thttps://github.com/AlexanderZaytsev/react-native-i18n\n[3]:\thttps://github.com/gcanti/tcomb-form-native\n[4]:\thttps://github.com/aksonov/react-native-router-flux\n[5]:\thttps://github.com/jasonmerino/react-native-simple-store\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/v2jdt.png","source":"_posts/2016-11-14-snowflake.md","raw":"---\ntitle: 《React Native开源项目 — Snowflake》学习总结\ncategories: Javascript\ntags: [React]\n---\n\nsnowflake是一个非常好的[react naitve开源项目][1]，功能其实并不复杂，但是讲解却非常详细，它的功能主要是实现手机app的登录、注册、修改密码以及获取和修改用户信息等功能，是个很常见的业务场景。\n\n通过它可以了解一个完整的React Native项目是长什么样子的，有哪些常用的模块，以及代码是怎么规划的，组件和组件之间是如何通过redux来进行通信交流的。\n\n## 新发现的几个模块\n\n开发React Native有一些几乎是必备的模块，比如`react-redux`，`redux-thunk`，在看这个项目的过程中，发现了几个之前不知道的模块。\n\n### react-native-i18n\n\n[https://github.com/AlexanderZaytsev/react-native-i18n][2]\n\n一开始不明白`i18n`是什么意思，后来google之后才知道，原来是internationalization，国际化的意思，nternationalization去掉头尾的i和n刚好还剩下18个字符。这个模块可以让app自动地切换成当前移动设备使用的语言。\n\n比如在一份json文件中定义不同的语言：\n\n```javascript\n{\n  \"zh\": {\n    \"App\": {\n      \"version\": \"版本\"\n    },\n    \"Header\": {\n      \"current_state\": \"当前状态\",\n      \"see_console\": \"查看控制台\",\n      \"update_state\": \"更新状态\"\n    }\n  },\n  \"en\": {\n    \"App\": {\n      \"version\": \"Version\"\n    },\n    \"Header\": {\n      \"current_state\": \"Current State\",\n      \"see_console\": \"see console\",\n      \"update_state\": \"Update State\"\n    }\n  },\n  \"fr\": {\n    \"App\": {\n      \"version\": \"Version\"\n    },\n    \"Header\": {\n      \"current_state\": \"état actuel\",\n      \"see_console\": \"voir console\",\n      \"update_state\": \"état de mise à jour\"      \n    }    \n  },\n  \"es\": {\n    \"App\": {\n      \"version\": \"Versión\"\n    },\n    \"Header\": {\n      \"current_state\": \"Estado actual\",\n      \"see_console\": \"ver la consola\",\n      \"update_state\": \"Estado de actualización\"      \n    }  \n  }\n}\n```\n\n引用这份json文件：\n\n```javascript\nvar I18n = require('react-native-i18n')\nimport Translations from '../lib/Translations'\nI18n.translations = Translations\n\nlet version = I18n.t('App.version')\n```\n\n变量version的值在中文的手机会显示：“版本”，在英文的手机会显示：“Version”。\n\n### tcomb-form-native\n\n[https://github.com/gcanti/tcomb-form-native][3]\n\n一个非常好用的表单库，根据配置可以快速生成表单，使用的方法如下\n\n```javascript\nconst t = require('tcomb-form-native')\nlet Form = t.form.Form\n\nloginForm = t.struct({\n  username: t.String,\n  email: t.String,\n  password: t.String,\n  passwordAgain: t.String\n})\noptions.fields['username'] = username\noptions.fields['username'].placeholder = I18n.t('LoginForm.username')\noptions.fields['username'].autoCapitalize = 'none'\noptions.fields['email'] = email\noptions.fields['email'].placeholder = I18n.t('LoginForm.email')\noptions.fields['email'].autoCapitalize = 'none'\noptions.fields['password'] = password\noptions.fields['password'].placeholder = I18n.t('LoginForm.password')\noptions.fields['passwordAgain'] = passwordAgain\noptions.fields['passwordAgain'].placeholder = I18n.t('LoginForm.password_again')\n```\n\n最终可以生成相应的表单\n\n![][image-1]\n\n### react-native-router-flux\n\n[https://github.com/aksonov/react-native-router-flux][4]\n\nReact Native路由模块，轻松实现不同组件的切换。使用方法：\n\n```javascript\n// 引入模块\nimport {\n    Router,\n    Scene} from 'react-native-router-flux'\n\n// 配置组件\n<Router sceneStyle={{ backgroundColor: 'white' }}>\n  <Scene key='root' hideNavBar>\n    <Scene key='App'\n      component={App}\n      type='replace'\n      initial />\n\n    <Scene key='InitialLoginForm'\n      component={Register}\n      type='replace' />\n\n    <Scene key='Login'\n      component={Login}\n      type='replace' />\n\n    <Scene key='Register'\n      component={Register}\n      type='replace' />\n\n    <Scene key='ForgotPassword'\n      component={ForgotPassword}\n      type='replace' />\n\n    <Scene key='Subview'\n      component={Subview} />\n  </Scene>\n</Router>\n         \n```\n\nkey就是组件的标志，比如说，如果要跳转到`Register`组件，可以这么做：\n\n```javascript\nimport { Actions } from 'react-native-router-flux'\nActions.Register()\n```\n\n### react-native-simple-store\n\n[https://github.com/jasonmerino/react-native-simple-store][5]\n\nReact Native本地的异步储存，使用方法如下：\n\n```javascript\nimport store from 'react-native-simple-store';\n\nstore\n  .save('coffee', {\n    isAwesome: true\n  })\n  .then(() => store.get('coffee'))\n  .then(coffee => {\n    console.assert(coffee.isAwesome === true);\n  })\n  .then(() => store.update('coffee', {\n    isNotEssential: false\n  }))\n  .then(() => store.get('coffee'))\n  .then(coffee => {\n    console.assert(coffee.isNotEssential === false);\n    console.assert(coffee.isAwesome === true);\n    return store.delete('coffee');\n  })\n  .then(() => store.get('coffee'))\n  .then(coffee => {\n    console.assert(coffee === null);\n  })\n  .catch(error => {\n    console.error(error.message);\n  });\n```\n\n## 代码规划\n\n- 入口文件，index.ios.js和index.android.js\n- 所有业务代码放在src目录中\n- reducers单独一个文件夹，里面分成4个模块，分别是auth、device、global和profile，每个模块里面有3份文件，分别是installState.js（初始化数据）、actions.js（dispatch行为）和reducer.js（接受diapatch，更改数据），每个模块里面还有一个tests文件夹，用来存放actions和reducer的测试用例。\n- containers存放所有路由组件，也就是所有的页面\n- lib存放config、数据请求以及工具类文件\n- images存放图片\n- componengs存放通用的小组件\n\n项目虽然不是很复杂，但是代码的规划非常合理，也有完整的单元测试，确实学到了很多东西。\n\n[1]:\thttps://github.com/bartonhammond/snowflake\n[2]:\thttps://github.com/AlexanderZaytsev/react-native-i18n\n[3]:\thttps://github.com/gcanti/tcomb-form-native\n[4]:\thttps://github.com/aksonov/react-native-router-flux\n[5]:\thttps://github.com/jasonmerino/react-native-simple-store\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/v2jdt.png","slug":"2016-11-14-snowflake","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicak001ofsonsoywz6bq","content":"<p>snowflake是一个非常好的<a href=\"https://github.com/bartonhammond/snowflake\" target=\"_blank\" rel=\"noopener\">react naitve开源项目</a>，功能其实并不复杂，但是讲解却非常详细，它的功能主要是实现手机app的登录、注册、修改密码以及获取和修改用户信息等功能，是个很常见的业务场景。</p>\n<p>通过它可以了解一个完整的React Native项目是长什么样子的，有哪些常用的模块，以及代码是怎么规划的，组件和组件之间是如何通过redux来进行通信交流的。</p>\n<h2 id=\"新发现的几个模块\"><a href=\"#新发现的几个模块\" class=\"headerlink\" title=\"新发现的几个模块\"></a>新发现的几个模块</h2><p>开发React Native有一些几乎是必备的模块，比如<code>react-redux</code>，<code>redux-thunk</code>，在看这个项目的过程中，发现了几个之前不知道的模块。</p>\n<h3 id=\"react-native-i18n\"><a href=\"#react-native-i18n\" class=\"headerlink\" title=\"react-native-i18n\"></a>react-native-i18n</h3><p><a href=\"https://github.com/AlexanderZaytsev/react-native-i18n\" target=\"_blank\" rel=\"noopener\">https://github.com/AlexanderZaytsev/react-native-i18n</a></p>\n<p>一开始不明白<code>i18n</code>是什么意思，后来google之后才知道，原来是internationalization，国际化的意思，nternationalization去掉头尾的i和n刚好还剩下18个字符。这个模块可以让app自动地切换成当前移动设备使用的语言。</p>\n<p>比如在一份json文件中定义不同的语言：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"zh\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"版本\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"当前状态\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"查看控制台\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"更新状态\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"en\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"Version\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"Current State\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"see console\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"Update State\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"fr\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"Version\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"état actuel\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"voir console\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"état de mise à jour\"</span>      </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"es\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"Versión\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"Estado actual\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"ver la consola\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"Estado de actualización\"</span>      </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>引用这份json文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> I18n = <span class=\"built_in\">require</span>(<span class=\"string\">'react-native-i18n'</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> Translations <span class=\"keyword\">from</span> <span class=\"string\">'../lib/Translations'</span></span><br><span class=\"line\">I18n.translations = Translations</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> version = I18n.t(<span class=\"string\">'App.version'</span>)</span><br></pre></td></tr></table></figure>\n<p>变量version的值在中文的手机会显示：“版本”，在英文的手机会显示：“Version”。</p>\n<h3 id=\"tcomb-form-native\"><a href=\"#tcomb-form-native\" class=\"headerlink\" title=\"tcomb-form-native\"></a>tcomb-form-native</h3><p><a href=\"https://github.com/gcanti/tcomb-form-native\" target=\"_blank\" rel=\"noopener\">https://github.com/gcanti/tcomb-form-native</a></p>\n<p>一个非常好用的表单库，根据配置可以快速生成表单，使用的方法如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'tcomb-form-native'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> Form = t.form.Form</span><br><span class=\"line\"></span><br><span class=\"line\">loginForm = t.struct(&#123;</span><br><span class=\"line\">  username: t.String,</span><br><span class=\"line\">  email: t.String,</span><br><span class=\"line\">  password: t.String,</span><br><span class=\"line\">  passwordAgain: t.String</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">options.fields[<span class=\"string\">'username'</span>] = username</span><br><span class=\"line\">options.fields[<span class=\"string\">'username'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.username'</span>)</span><br><span class=\"line\">options.fields[<span class=\"string\">'username'</span>].autoCapitalize = <span class=\"string\">'none'</span></span><br><span class=\"line\">options.fields[<span class=\"string\">'email'</span>] = email</span><br><span class=\"line\">options.fields[<span class=\"string\">'email'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.email'</span>)</span><br><span class=\"line\">options.fields[<span class=\"string\">'email'</span>].autoCapitalize = <span class=\"string\">'none'</span></span><br><span class=\"line\">options.fields[<span class=\"string\">'password'</span>] = password</span><br><span class=\"line\">options.fields[<span class=\"string\">'password'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.password'</span>)</span><br><span class=\"line\">options.fields[<span class=\"string\">'passwordAgain'</span>] = passwordAgain</span><br><span class=\"line\">options.fields[<span class=\"string\">'passwordAgain'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.password_again'</span>)</span><br></pre></td></tr></table></figure>\n<p>最终可以生成相应的表单</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/v2jdt.png\" alt=\"\"></p>\n<h3 id=\"react-native-router-flux\"><a href=\"#react-native-router-flux\" class=\"headerlink\" title=\"react-native-router-flux\"></a>react-native-router-flux</h3><p><a href=\"https://github.com/aksonov/react-native-router-flux\" target=\"_blank\" rel=\"noopener\">https://github.com/aksonov/react-native-router-flux</a></p>\n<p>React Native路由模块，轻松实现不同组件的切换。使用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    Router,</span><br><span class=\"line\">    Scene&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native-router-flux'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置组件</span></span><br><span class=\"line\">&lt;Router sceneStyle=&#123;&#123; <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'white'</span> &#125;&#125;&gt;</span><br><span class=\"line\">  &lt;Scene key=<span class=\"string\">'root'</span> hideNavBar&gt;</span><br><span class=\"line\">    &lt;Scene key=<span class=\"string\">'App'</span></span><br><span class=\"line\">      component=&#123;App&#125;</span><br><span class=\"line\">      type=<span class=\"string\">'replace'</span></span><br><span class=\"line\">      initial /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key=<span class=\"string\">'InitialLoginForm'</span></span><br><span class=\"line\">      component=&#123;Register&#125;</span><br><span class=\"line\">      type=<span class=\"string\">'replace'</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key=<span class=\"string\">'Login'</span></span><br><span class=\"line\">      component=&#123;Login&#125;</span><br><span class=\"line\">      type=<span class=\"string\">'replace'</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key=<span class=\"string\">'Register'</span></span><br><span class=\"line\">      component=&#123;Register&#125;</span><br><span class=\"line\">      type=<span class=\"string\">'replace'</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key=<span class=\"string\">'ForgotPassword'</span></span><br><span class=\"line\">      component=&#123;ForgotPassword&#125;</span><br><span class=\"line\">      type=<span class=\"string\">'replace'</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key=<span class=\"string\">'Subview'</span></span><br><span class=\"line\">      component=&#123;Subview&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Scene&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>key就是组件的标志，比如说，如果要跳转到<code>Register</code>组件，可以这么做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Actions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native-router-flux'</span></span><br><span class=\"line\">Actions.Register()</span><br></pre></td></tr></table></figure>\n<h3 id=\"react-native-simple-store\"><a href=\"#react-native-simple-store\" class=\"headerlink\" title=\"react-native-simple-store\"></a>react-native-simple-store</h3><p><a href=\"https://github.com/jasonmerino/react-native-simple-store\" target=\"_blank\" rel=\"noopener\">https://github.com/jasonmerino/react-native-simple-store</a></p>\n<p>React Native本地的异步储存，使用方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'react-native-simple-store'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">store</span><br><span class=\"line\">  .save(<span class=\"string\">'coffee'</span>, &#123;</span><br><span class=\"line\">    isAwesome: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> store.get(<span class=\"string\">'coffee'</span>))</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">coffee</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee.isAwesome === <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> store.update(<span class=\"string\">'coffee'</span>, &#123;</span><br><span class=\"line\">    isNotEssential: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> store.get(<span class=\"string\">'coffee'</span>))</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">coffee</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee.isNotEssential === <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee.isAwesome === <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> store.delete(<span class=\"string\">'coffee'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> store.get(<span class=\"string\">'coffee'</span>))</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">coffee</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee === <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error.message);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码规划\"><a href=\"#代码规划\" class=\"headerlink\" title=\"代码规划\"></a>代码规划</h2><ul>\n<li>入口文件，index.ios.js和index.android.js</li>\n<li>所有业务代码放在src目录中</li>\n<li>reducers单独一个文件夹，里面分成4个模块，分别是auth、device、global和profile，每个模块里面有3份文件，分别是installState.js（初始化数据）、actions.js（dispatch行为）和reducer.js（接受diapatch，更改数据），每个模块里面还有一个tests文件夹，用来存放actions和reducer的测试用例。</li>\n<li>containers存放所有路由组件，也就是所有的页面</li>\n<li>lib存放config、数据请求以及工具类文件</li>\n<li>images存放图片</li>\n<li>componengs存放通用的小组件</li>\n</ul>\n<p>项目虽然不是很复杂，但是代码的规划非常合理，也有完整的单元测试，确实学到了很多东西。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>snowflake是一个非常好的<a href=\"https://github.com/bartonhammond/snowflake\" target=\"_blank\" rel=\"noopener\">react naitve开源项目</a>，功能其实并不复杂，但是讲解却非常详细，它的功能主要是实现手机app的登录、注册、修改密码以及获取和修改用户信息等功能，是个很常见的业务场景。</p>\n<p>通过它可以了解一个完整的React Native项目是长什么样子的，有哪些常用的模块，以及代码是怎么规划的，组件和组件之间是如何通过redux来进行通信交流的。</p>\n<h2 id=\"新发现的几个模块\"><a href=\"#新发现的几个模块\" class=\"headerlink\" title=\"新发现的几个模块\"></a>新发现的几个模块</h2><p>开发React Native有一些几乎是必备的模块，比如<code>react-redux</code>，<code>redux-thunk</code>，在看这个项目的过程中，发现了几个之前不知道的模块。</p>\n<h3 id=\"react-native-i18n\"><a href=\"#react-native-i18n\" class=\"headerlink\" title=\"react-native-i18n\"></a>react-native-i18n</h3><p><a href=\"https://github.com/AlexanderZaytsev/react-native-i18n\" target=\"_blank\" rel=\"noopener\">https://github.com/AlexanderZaytsev/react-native-i18n</a></p>\n<p>一开始不明白<code>i18n</code>是什么意思，后来google之后才知道，原来是internationalization，国际化的意思，nternationalization去掉头尾的i和n刚好还剩下18个字符。这个模块可以让app自动地切换成当前移动设备使用的语言。</p>\n<p>比如在一份json文件中定义不同的语言：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"zh\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"版本\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"当前状态\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"查看控制台\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"更新状态\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"en\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"Version\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"Current State\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"see console\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"Update State\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"fr\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"Version\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"état actuel\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"voir console\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"état de mise à jour\"</span>      </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"es\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"Versión\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"Estado actual\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"ver la consola\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"Estado de actualización\"</span>      </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>引用这份json文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> I18n = <span class=\"built_in\">require</span>(<span class=\"string\">'react-native-i18n'</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> Translations <span class=\"keyword\">from</span> <span class=\"string\">'../lib/Translations'</span></span><br><span class=\"line\">I18n.translations = Translations</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> version = I18n.t(<span class=\"string\">'App.version'</span>)</span><br></pre></td></tr></table></figure>\n<p>变量version的值在中文的手机会显示：“版本”，在英文的手机会显示：“Version”。</p>\n<h3 id=\"tcomb-form-native\"><a href=\"#tcomb-form-native\" class=\"headerlink\" title=\"tcomb-form-native\"></a>tcomb-form-native</h3><p><a href=\"https://github.com/gcanti/tcomb-form-native\" target=\"_blank\" rel=\"noopener\">https://github.com/gcanti/tcomb-form-native</a></p>\n<p>一个非常好用的表单库，根据配置可以快速生成表单，使用的方法如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'tcomb-form-native'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> Form = t.form.Form</span><br><span class=\"line\"></span><br><span class=\"line\">loginForm = t.struct(&#123;</span><br><span class=\"line\">  username: t.String,</span><br><span class=\"line\">  email: t.String,</span><br><span class=\"line\">  password: t.String,</span><br><span class=\"line\">  passwordAgain: t.String</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">options.fields[<span class=\"string\">'username'</span>] = username</span><br><span class=\"line\">options.fields[<span class=\"string\">'username'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.username'</span>)</span><br><span class=\"line\">options.fields[<span class=\"string\">'username'</span>].autoCapitalize = <span class=\"string\">'none'</span></span><br><span class=\"line\">options.fields[<span class=\"string\">'email'</span>] = email</span><br><span class=\"line\">options.fields[<span class=\"string\">'email'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.email'</span>)</span><br><span class=\"line\">options.fields[<span class=\"string\">'email'</span>].autoCapitalize = <span class=\"string\">'none'</span></span><br><span class=\"line\">options.fields[<span class=\"string\">'password'</span>] = password</span><br><span class=\"line\">options.fields[<span class=\"string\">'password'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.password'</span>)</span><br><span class=\"line\">options.fields[<span class=\"string\">'passwordAgain'</span>] = passwordAgain</span><br><span class=\"line\">options.fields[<span class=\"string\">'passwordAgain'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.password_again'</span>)</span><br></pre></td></tr></table></figure>\n<p>最终可以生成相应的表单</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/v2jdt.png\" alt=\"\"></p>\n<h3 id=\"react-native-router-flux\"><a href=\"#react-native-router-flux\" class=\"headerlink\" title=\"react-native-router-flux\"></a>react-native-router-flux</h3><p><a href=\"https://github.com/aksonov/react-native-router-flux\" target=\"_blank\" rel=\"noopener\">https://github.com/aksonov/react-native-router-flux</a></p>\n<p>React Native路由模块，轻松实现不同组件的切换。使用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    Router,</span><br><span class=\"line\">    Scene&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native-router-flux'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置组件</span></span><br><span class=\"line\">&lt;Router sceneStyle=&#123;&#123; <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'white'</span> &#125;&#125;&gt;</span><br><span class=\"line\">  &lt;Scene key=<span class=\"string\">'root'</span> hideNavBar&gt;</span><br><span class=\"line\">    &lt;Scene key=<span class=\"string\">'App'</span></span><br><span class=\"line\">      component=&#123;App&#125;</span><br><span class=\"line\">      type=<span class=\"string\">'replace'</span></span><br><span class=\"line\">      initial /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key=<span class=\"string\">'InitialLoginForm'</span></span><br><span class=\"line\">      component=&#123;Register&#125;</span><br><span class=\"line\">      type=<span class=\"string\">'replace'</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key=<span class=\"string\">'Login'</span></span><br><span class=\"line\">      component=&#123;Login&#125;</span><br><span class=\"line\">      type=<span class=\"string\">'replace'</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key=<span class=\"string\">'Register'</span></span><br><span class=\"line\">      component=&#123;Register&#125;</span><br><span class=\"line\">      type=<span class=\"string\">'replace'</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key=<span class=\"string\">'ForgotPassword'</span></span><br><span class=\"line\">      component=&#123;ForgotPassword&#125;</span><br><span class=\"line\">      type=<span class=\"string\">'replace'</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key=<span class=\"string\">'Subview'</span></span><br><span class=\"line\">      component=&#123;Subview&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Scene&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>key就是组件的标志，比如说，如果要跳转到<code>Register</code>组件，可以这么做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Actions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native-router-flux'</span></span><br><span class=\"line\">Actions.Register()</span><br></pre></td></tr></table></figure>\n<h3 id=\"react-native-simple-store\"><a href=\"#react-native-simple-store\" class=\"headerlink\" title=\"react-native-simple-store\"></a>react-native-simple-store</h3><p><a href=\"https://github.com/jasonmerino/react-native-simple-store\" target=\"_blank\" rel=\"noopener\">https://github.com/jasonmerino/react-native-simple-store</a></p>\n<p>React Native本地的异步储存，使用方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'react-native-simple-store'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">store</span><br><span class=\"line\">  .save(<span class=\"string\">'coffee'</span>, &#123;</span><br><span class=\"line\">    isAwesome: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> store.get(<span class=\"string\">'coffee'</span>))</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">coffee</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee.isAwesome === <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> store.update(<span class=\"string\">'coffee'</span>, &#123;</span><br><span class=\"line\">    isNotEssential: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> store.get(<span class=\"string\">'coffee'</span>))</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">coffee</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee.isNotEssential === <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee.isAwesome === <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> store.delete(<span class=\"string\">'coffee'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> store.get(<span class=\"string\">'coffee'</span>))</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">coffee</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee === <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error.message);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码规划\"><a href=\"#代码规划\" class=\"headerlink\" title=\"代码规划\"></a>代码规划</h2><ul>\n<li>入口文件，index.ios.js和index.android.js</li>\n<li>所有业务代码放在src目录中</li>\n<li>reducers单独一个文件夹，里面分成4个模块，分别是auth、device、global和profile，每个模块里面有3份文件，分别是installState.js（初始化数据）、actions.js（dispatch行为）和reducer.js（接受diapatch，更改数据），每个模块里面还有一个tests文件夹，用来存放actions和reducer的测试用例。</li>\n<li>containers存放所有路由组件，也就是所有的页面</li>\n<li>lib存放config、数据请求以及工具类文件</li>\n<li>images存放图片</li>\n<li>componengs存放通用的小组件</li>\n</ul>\n<p>项目虽然不是很复杂，但是代码的规划非常合理，也有完整的单元测试，确实学到了很多东西。</p>\n"},{"title":"vue从1.0升级到2.0","_content":"\n原先有一个项目，想要使用[饿了么的UI库][1]来提高项目的简洁度以及可扩展性，也提高开发效率，所以决定将项目的基础库vuejs，从1.0升级为2.0。\n\nvue2.0移除和替换了很多api，所以在升级的过程中，修改了无数个bug，最终费了很大的劲才升级成功，同时也集成了UI库，界面变简洁美观了，开发变得更加容易了，所以升级还是非常值得的。\n\n在这个过程中，记录了很多的东西，在此总结一下。\n\n## 检测需要升级的代码工具\n\n[vue-migration-helper][2]能用来检测定位需要升级的代码，可以快速定位，批量修改代码，很实用。\n\n## vuex的dispatch\n\n1.0是通过actions的dispatch来派发mutation。\n\n2.0改成用dispatch派发action，然后action通过commit派发mutation，然后对数据进行修改。\n\n## router\n\n1.0在组件中监听路由变化的写法\n\n```javascript\nnew Vue({\n  route ({to}) {\n    //to是路由实例，可以拿到路由的各种信息，比如params，path等等\n  }\n})\n```\n\n2.0改成用watch监听\n\n```javascript\nnew Vue({\n  watch: {\n    '$store' () {\n      // ...\n    }\n  }\n})\n```\n\n路由信息通过`this.$route`获取，路由实例是`this.$router`。\n\n## filter\n\n1.0的过滤器filter可以在指令中使用，比如说\n\n```html\n<div v-html=\"startTime | date\"></div>\n```\n\n2.0将filter改成只能在取值的时候使用，而不能在指令中使用\n\n```html\n<div>{{startTime | date}}</div>\n```\n\n## 数据必须提前声明\n\n1.0没有提前声明数据并不会有任何问题。\n\n2.0如果提前声明数据就会有警告。\n\n## for遍历中的$index\n\n1.0的for遍历可以通过这种方式拿到$index\n\n```html\n<li v-for=\"item in items\">\n    {{$index}}\n</li>\n```\n\n2.0这取消这种快捷写法，改成必须提前声明\n\n```html\n<li v-for=\"(item, index) in items\">\n    {{index}}\n</li>\n```\n\n## 取消数组的$set和$remove方法\n\n1.0可以这样子操作数组\n\n```javascript\nvm.list.$set(index, item)\nvm.list.$remove(item)\n```\n\n2.0将$set改成全局的Vue.$set，$remove改用splice\n\n```\nVue.set(list, index, item)\nvm.list.splice(index, 1)\n```\n\n## 数据绑定的写法\n\n1.0可以这样子绑定数据\n\n```html\n<div href=\"{{item.url}}\"></div>\n```\n\n2.0不允许在内联属性中使用插值符号，所以要这么做\n\n```html\n<div :href=\"item.url\"></div>\n```\n\n## vuex中getters和actions\n\n1.0中getters和actions的写法\n\n```javascript\nnew Vue({\n  vuex: {\n    actions: {\n      getUserInfo\n    },\n    getters: {\n      userId: ({ userInfo }) => userInfo.id,\n    }\n  }\n})\n```\n\n2.0的写法是\n\n```javascript\nimport { setTip } from '../../vuex/actions/doc_actions'\nimport { mapGetters } from 'vuex'\n\ncomputed: {\n  ...mapGetters({\n    userId\n  })\n}\n```\n\n而action的调用方式为`this.$store.dispatch(action_name, payload)`\n\n[1]:\thttp://element.eleme.io/#/zh-CN\n[2]:\thttps://github.com/vuejs/vue-migration-helper","source":"_posts/2016-12-07-vue-upgrade.md","raw":"---\ntitle: vue从1.0升级到2.0\ncategories: Javascript\n\n---\n\n原先有一个项目，想要使用[饿了么的UI库][1]来提高项目的简洁度以及可扩展性，也提高开发效率，所以决定将项目的基础库vuejs，从1.0升级为2.0。\n\nvue2.0移除和替换了很多api，所以在升级的过程中，修改了无数个bug，最终费了很大的劲才升级成功，同时也集成了UI库，界面变简洁美观了，开发变得更加容易了，所以升级还是非常值得的。\n\n在这个过程中，记录了很多的东西，在此总结一下。\n\n## 检测需要升级的代码工具\n\n[vue-migration-helper][2]能用来检测定位需要升级的代码，可以快速定位，批量修改代码，很实用。\n\n## vuex的dispatch\n\n1.0是通过actions的dispatch来派发mutation。\n\n2.0改成用dispatch派发action，然后action通过commit派发mutation，然后对数据进行修改。\n\n## router\n\n1.0在组件中监听路由变化的写法\n\n```javascript\nnew Vue({\n  route ({to}) {\n    //to是路由实例，可以拿到路由的各种信息，比如params，path等等\n  }\n})\n```\n\n2.0改成用watch监听\n\n```javascript\nnew Vue({\n  watch: {\n    '$store' () {\n      // ...\n    }\n  }\n})\n```\n\n路由信息通过`this.$route`获取，路由实例是`this.$router`。\n\n## filter\n\n1.0的过滤器filter可以在指令中使用，比如说\n\n```html\n<div v-html=\"startTime | date\"></div>\n```\n\n2.0将filter改成只能在取值的时候使用，而不能在指令中使用\n\n```html\n<div>{{startTime | date}}</div>\n```\n\n## 数据必须提前声明\n\n1.0没有提前声明数据并不会有任何问题。\n\n2.0如果提前声明数据就会有警告。\n\n## for遍历中的$index\n\n1.0的for遍历可以通过这种方式拿到$index\n\n```html\n<li v-for=\"item in items\">\n    {{$index}}\n</li>\n```\n\n2.0这取消这种快捷写法，改成必须提前声明\n\n```html\n<li v-for=\"(item, index) in items\">\n    {{index}}\n</li>\n```\n\n## 取消数组的$set和$remove方法\n\n1.0可以这样子操作数组\n\n```javascript\nvm.list.$set(index, item)\nvm.list.$remove(item)\n```\n\n2.0将$set改成全局的Vue.$set，$remove改用splice\n\n```\nVue.set(list, index, item)\nvm.list.splice(index, 1)\n```\n\n## 数据绑定的写法\n\n1.0可以这样子绑定数据\n\n```html\n<div href=\"{{item.url}}\"></div>\n```\n\n2.0不允许在内联属性中使用插值符号，所以要这么做\n\n```html\n<div :href=\"item.url\"></div>\n```\n\n## vuex中getters和actions\n\n1.0中getters和actions的写法\n\n```javascript\nnew Vue({\n  vuex: {\n    actions: {\n      getUserInfo\n    },\n    getters: {\n      userId: ({ userInfo }) => userInfo.id,\n    }\n  }\n})\n```\n\n2.0的写法是\n\n```javascript\nimport { setTip } from '../../vuex/actions/doc_actions'\nimport { mapGetters } from 'vuex'\n\ncomputed: {\n  ...mapGetters({\n    userId\n  })\n}\n```\n\n而action的调用方式为`this.$store.dispatch(action_name, payload)`\n\n[1]:\thttp://element.eleme.io/#/zh-CN\n[2]:\thttps://github.com/vuejs/vue-migration-helper","slug":"2016-12-07-vue-upgrade","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dical001sfsonfnczr7s0","content":"<p>原先有一个项目，想要使用<a href=\"http://element.eleme.io/#/zh-CN\" target=\"_blank\" rel=\"noopener\">饿了么的UI库</a>来提高项目的简洁度以及可扩展性，也提高开发效率，所以决定将项目的基础库vuejs，从1.0升级为2.0。</p>\n<p>vue2.0移除和替换了很多api，所以在升级的过程中，修改了无数个bug，最终费了很大的劲才升级成功，同时也集成了UI库，界面变简洁美观了，开发变得更加容易了，所以升级还是非常值得的。</p>\n<p>在这个过程中，记录了很多的东西，在此总结一下。</p>\n<h2 id=\"检测需要升级的代码工具\"><a href=\"#检测需要升级的代码工具\" class=\"headerlink\" title=\"检测需要升级的代码工具\"></a>检测需要升级的代码工具</h2><p><a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">vue-migration-helper</a>能用来检测定位需要升级的代码，可以快速定位，批量修改代码，很实用。</p>\n<h2 id=\"vuex的dispatch\"><a href=\"#vuex的dispatch\" class=\"headerlink\" title=\"vuex的dispatch\"></a>vuex的dispatch</h2><p>1.0是通过actions的dispatch来派发mutation。</p>\n<p>2.0改成用dispatch派发action，然后action通过commit派发mutation，然后对数据进行修改。</p>\n<h2 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h2><p>1.0在组件中监听路由变化的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  route (&#123;to&#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//to是路由实例，可以拿到路由的各种信息，比如params，path等等</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.0改成用watch监听</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">'$store'</span> () &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>路由信息通过<code>this.$route</code>获取，路由实例是<code>this.$router</code>。</p>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p>1.0的过滤器filter可以在指令中使用，比如说</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"startTime | date\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.0将filter改成只能在取值的时候使用，而不能在指令中使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;startTime | date&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数据必须提前声明\"><a href=\"#数据必须提前声明\" class=\"headerlink\" title=\"数据必须提前声明\"></a>数据必须提前声明</h2><p>1.0没有提前声明数据并不会有任何问题。</p>\n<p>2.0如果提前声明数据就会有警告。</p>\n<h2 id=\"for遍历中的-index\"><a href=\"#for遍历中的-index\" class=\"headerlink\" title=\"for遍历中的$index\"></a>for遍历中的$index</h2><p>1.0的for遍历可以通过这种方式拿到$index</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;$index&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.0这取消这种快捷写法，改成必须提前声明</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;index&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"取消数组的-set和-remove方法\"><a href=\"#取消数组的-set和-remove方法\" class=\"headerlink\" title=\"取消数组的$set和$remove方法\"></a>取消数组的$set和$remove方法</h2><p>1.0可以这样子操作数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.list.$set(index, item)</span><br><span class=\"line\">vm.list.$remove(item)</span><br></pre></td></tr></table></figure>\n<p>2.0将$set改成全局的Vue.$set，$remove改用splice</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(list, index, item)</span><br><span class=\"line\">vm.list.splice(index, 1)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据绑定的写法\"><a href=\"#数据绑定的写法\" class=\"headerlink\" title=\"数据绑定的写法\"></a>数据绑定的写法</h2><p>1.0可以这样子绑定数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123;item.url&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.0不允许在内联属性中使用插值符号，所以要这么做</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"item.url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"vuex中getters和actions\"><a href=\"#vuex中getters和actions\" class=\"headerlink\" title=\"vuex中getters和actions\"></a>vuex中getters和actions</h2><p>1.0中getters和actions的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  vuex: &#123;</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">      getUserInfo</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">      userId: <span class=\"function\">(<span class=\"params\">&#123; userInfo &#125;</span>) =&gt;</span> userInfo.id,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.0的写法是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; setTip &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../vuex/actions/doc_actions'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters(&#123;</span><br><span class=\"line\">    userId</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而action的调用方式为<code>this.$store.dispatch(action_name, payload)</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>原先有一个项目，想要使用<a href=\"http://element.eleme.io/#/zh-CN\" target=\"_blank\" rel=\"noopener\">饿了么的UI库</a>来提高项目的简洁度以及可扩展性，也提高开发效率，所以决定将项目的基础库vuejs，从1.0升级为2.0。</p>\n<p>vue2.0移除和替换了很多api，所以在升级的过程中，修改了无数个bug，最终费了很大的劲才升级成功，同时也集成了UI库，界面变简洁美观了，开发变得更加容易了，所以升级还是非常值得的。</p>\n<p>在这个过程中，记录了很多的东西，在此总结一下。</p>\n<h2 id=\"检测需要升级的代码工具\"><a href=\"#检测需要升级的代码工具\" class=\"headerlink\" title=\"检测需要升级的代码工具\"></a>检测需要升级的代码工具</h2><p><a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">vue-migration-helper</a>能用来检测定位需要升级的代码，可以快速定位，批量修改代码，很实用。</p>\n<h2 id=\"vuex的dispatch\"><a href=\"#vuex的dispatch\" class=\"headerlink\" title=\"vuex的dispatch\"></a>vuex的dispatch</h2><p>1.0是通过actions的dispatch来派发mutation。</p>\n<p>2.0改成用dispatch派发action，然后action通过commit派发mutation，然后对数据进行修改。</p>\n<h2 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h2><p>1.0在组件中监听路由变化的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  route (&#123;to&#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//to是路由实例，可以拿到路由的各种信息，比如params，path等等</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.0改成用watch监听</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">'$store'</span> () &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>路由信息通过<code>this.$route</code>获取，路由实例是<code>this.$router</code>。</p>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p>1.0的过滤器filter可以在指令中使用，比如说</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"startTime | date\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.0将filter改成只能在取值的时候使用，而不能在指令中使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;startTime | date&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数据必须提前声明\"><a href=\"#数据必须提前声明\" class=\"headerlink\" title=\"数据必须提前声明\"></a>数据必须提前声明</h2><p>1.0没有提前声明数据并不会有任何问题。</p>\n<p>2.0如果提前声明数据就会有警告。</p>\n<h2 id=\"for遍历中的-index\"><a href=\"#for遍历中的-index\" class=\"headerlink\" title=\"for遍历中的$index\"></a>for遍历中的$index</h2><p>1.0的for遍历可以通过这种方式拿到$index</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;$index&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.0这取消这种快捷写法，改成必须提前声明</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;index&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"取消数组的-set和-remove方法\"><a href=\"#取消数组的-set和-remove方法\" class=\"headerlink\" title=\"取消数组的$set和$remove方法\"></a>取消数组的$set和$remove方法</h2><p>1.0可以这样子操作数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.list.$set(index, item)</span><br><span class=\"line\">vm.list.$remove(item)</span><br></pre></td></tr></table></figure>\n<p>2.0将$set改成全局的Vue.$set，$remove改用splice</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(list, index, item)</span><br><span class=\"line\">vm.list.splice(index, 1)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据绑定的写法\"><a href=\"#数据绑定的写法\" class=\"headerlink\" title=\"数据绑定的写法\"></a>数据绑定的写法</h2><p>1.0可以这样子绑定数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123;item.url&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.0不允许在内联属性中使用插值符号，所以要这么做</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"item.url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"vuex中getters和actions\"><a href=\"#vuex中getters和actions\" class=\"headerlink\" title=\"vuex中getters和actions\"></a>vuex中getters和actions</h2><p>1.0中getters和actions的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  vuex: &#123;</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">      getUserInfo</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">      userId: <span class=\"function\">(<span class=\"params\">&#123; userInfo &#125;</span>) =&gt;</span> userInfo.id,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.0的写法是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; setTip &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../vuex/actions/doc_actions'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters(&#123;</span><br><span class=\"line\">    userId</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而action的调用方式为<code>this.$store.dispatch(action_name, payload)</code></p>\n"},{"title":"【ORID总结】2016/12/08","_content":"\n## Objective\n\n下班之后，花一个半小时，做第三遍rails 101，完成1-5节。\n\n## Relective\n\n做第三次遍，感觉越来越熟练了，敲代码的速度也更快了，很有成就感。\n\n## Interpretive\n\n### git 存档\n\n平时做项目时，经常会改很多很多东西，然后要提交git时才发现，怎么修改了这么多！！！经常搞不清楚到底哪个步骤修改了哪些文件，最终往往会写一句可能以后自己都看不懂的提交信息，草草了事。在练习rails101时，因为rails101的教程对项目进行了分解，每一个步骤对应一次commit，目标明确，循序渐进，写完一节就提交一节，所以我才发现，原来每次只做一件小事情，做好了就马上提交，一点都不会乱，这点我是学到了，很棒。\n\n### 漏写了无数次的 “end”\n\n犯错误最多的就是忘了写end，所以我决定每次写if或者循环等语法时，先把end写了再说，养成一个好习惯。\n\n### 慢慢地能默写了\n\n已经做了两遍rails，在做第三遍时，已经比较熟练了，比较意外的是，竟然可以在看了教程的一句引导词之后，可以不看后面的步骤，自己把下一步给写出来了，比如说CRUD，这非常有成就感，真是熟能生巧呀。\n\n### 情不自禁地和nodejs做比较\n\n平时学后端用nodejs，所以不自觉地会比较ruby on rails(RoR)和nodej\u0010s，最让我刚到惊讶的是，rails帮开发者做了很多很多事情，就拿路由来说，rails只需要在routes.rb写一句\n\n```rub\nresources :groups\n```\n\n它就能帮你生成7个Action\n\n```ruby\n              groups GET    /groups(.:format)              groups#index\n                     POST   /groups(.:format)              groups#create\n           new_group GET    /groups/new(.:format)          groups#new\n          edit_group GET    /groups/:id/edit(.:format)     groups#edit\n               group GET    /groups/:id(.:format)          groups#show\n                     PATCH  /groups/:id(.:format)          groups#update\n                     PUT    /groups/:id(.:format)          groups#update\n                     DELETE /groups/:id(.:format)          groups#destroy\n                root GET    /                              groups#index\n```\n\n如果用nodejs的框架koa来写的话，是需要一个一个手动定义的\n\n```javascript\nrouter.get('/', controller.getUser)\nrouter.post('/', controller.addUser)\nrouter.put('/', controller.updateUser)\nrouter.delete('/:id', controller.destroy)\n...\n```\n\n因为rails帮开发者做很多事情，所以开发者的开发效率会更高。\n\n另外，发现了一个node和RoR一个很相似的地方，那就是rails的`gemfile`和node的`package.json`，都是用来安装一些模块的，RoR的安装命令是`bundle install `，而node是`npm install`。\n\n### ApplicationRecord 和 ActiveRecord\n\n用rails创建model时，默认是长这个样子的\n\n```ruby\nclass Group < ApplicationRecord\nend\n\n```\n\n教程要求把`ApplicationRecord`改成`ActiveRecord::Base`，但是因为教程没有明说，所以我经常忘记。现在我还弄不清楚为什么要改成`ActiveRecord::Base`，所以先背起来再说。\n\n### 良好的编程规范\n\nrails提供的一些功能是有助于帮助程序员养成良好的习惯的，比如说\n\n- html模板代码重复太多，冗余了把？用partial。\n- 很多请求都要先经过登录认证吧？用before_action。\n- 很多html模板都需要用到工具函数吧？用Helper。\n- 很多action里面都用到同一个函数吗？把它封装成函数，写在private里面。\n\n### 做得越多，想写的东西就越多。\n\n一开始做的时候，感觉没有可以写，于是就偷懒没写学习日记，随着练习次数的增加，学到的东西越来越多，慢慢地就开始有很多东西可以写了，继续保持。\n\n### 加入一个登录系统也太轻松了吧？\n\n前阵子有nodejs开发一套登录系统，费力很大的劲，还算是比较复杂的，开发起来有点麻烦，而RoR可以直接使用devise模块，直接搞定登录系统，哇塞，太轻松了吧。\n\n### <% %> 和 <%= %>\n\n这两者经常搞混，虽然现在也没有彻底弄清楚，不过还是发现一些规律的，很多情况下，都用到`<%= %>`，比如说\n\n```ruby\n<h2><%= @group.title %></h2>\n\n<%= link_to(\"Edit\", edit_group_path(@group), class: \"btn btn-primary pull-right\") %>\n\n<%= f.input :title, input_html: { class: \"form-control\"} %>\n\n<%= render \"common/navbar\" %>\n```\n\n而`<% %>`是用在一些判断或者遍历的关键词上面的，比如说\n\n```ruby\n<% if current_user && current_user == @group.user %>\n\n<% end %>\n```\n\n```ruby\n<% @groups.each do |group| %>\n\n<% end %>\n```\n\n## Decisional\n\n放下之前无效的学习方式，摒弃傲慢的态度，一心一意按照教程的指示做，养成好的学习习惯，相信一定会有惊喜的。\n","source":"_posts/2016-12-08-coding-diary.md","raw":"---\ntitle: 【ORID总结】2016/12/08\ncategories: 全栈营\n---\n\n## Objective\n\n下班之后，花一个半小时，做第三遍rails 101，完成1-5节。\n\n## Relective\n\n做第三次遍，感觉越来越熟练了，敲代码的速度也更快了，很有成就感。\n\n## Interpretive\n\n### git 存档\n\n平时做项目时，经常会改很多很多东西，然后要提交git时才发现，怎么修改了这么多！！！经常搞不清楚到底哪个步骤修改了哪些文件，最终往往会写一句可能以后自己都看不懂的提交信息，草草了事。在练习rails101时，因为rails101的教程对项目进行了分解，每一个步骤对应一次commit，目标明确，循序渐进，写完一节就提交一节，所以我才发现，原来每次只做一件小事情，做好了就马上提交，一点都不会乱，这点我是学到了，很棒。\n\n### 漏写了无数次的 “end”\n\n犯错误最多的就是忘了写end，所以我决定每次写if或者循环等语法时，先把end写了再说，养成一个好习惯。\n\n### 慢慢地能默写了\n\n已经做了两遍rails，在做第三遍时，已经比较熟练了，比较意外的是，竟然可以在看了教程的一句引导词之后，可以不看后面的步骤，自己把下一步给写出来了，比如说CRUD，这非常有成就感，真是熟能生巧呀。\n\n### 情不自禁地和nodejs做比较\n\n平时学后端用nodejs，所以不自觉地会比较ruby on rails(RoR)和nodej\u0010s，最让我刚到惊讶的是，rails帮开发者做了很多很多事情，就拿路由来说，rails只需要在routes.rb写一句\n\n```rub\nresources :groups\n```\n\n它就能帮你生成7个Action\n\n```ruby\n              groups GET    /groups(.:format)              groups#index\n                     POST   /groups(.:format)              groups#create\n           new_group GET    /groups/new(.:format)          groups#new\n          edit_group GET    /groups/:id/edit(.:format)     groups#edit\n               group GET    /groups/:id(.:format)          groups#show\n                     PATCH  /groups/:id(.:format)          groups#update\n                     PUT    /groups/:id(.:format)          groups#update\n                     DELETE /groups/:id(.:format)          groups#destroy\n                root GET    /                              groups#index\n```\n\n如果用nodejs的框架koa来写的话，是需要一个一个手动定义的\n\n```javascript\nrouter.get('/', controller.getUser)\nrouter.post('/', controller.addUser)\nrouter.put('/', controller.updateUser)\nrouter.delete('/:id', controller.destroy)\n...\n```\n\n因为rails帮开发者做很多事情，所以开发者的开发效率会更高。\n\n另外，发现了一个node和RoR一个很相似的地方，那就是rails的`gemfile`和node的`package.json`，都是用来安装一些模块的，RoR的安装命令是`bundle install `，而node是`npm install`。\n\n### ApplicationRecord 和 ActiveRecord\n\n用rails创建model时，默认是长这个样子的\n\n```ruby\nclass Group < ApplicationRecord\nend\n\n```\n\n教程要求把`ApplicationRecord`改成`ActiveRecord::Base`，但是因为教程没有明说，所以我经常忘记。现在我还弄不清楚为什么要改成`ActiveRecord::Base`，所以先背起来再说。\n\n### 良好的编程规范\n\nrails提供的一些功能是有助于帮助程序员养成良好的习惯的，比如说\n\n- html模板代码重复太多，冗余了把？用partial。\n- 很多请求都要先经过登录认证吧？用before_action。\n- 很多html模板都需要用到工具函数吧？用Helper。\n- 很多action里面都用到同一个函数吗？把它封装成函数，写在private里面。\n\n### 做得越多，想写的东西就越多。\n\n一开始做的时候，感觉没有可以写，于是就偷懒没写学习日记，随着练习次数的增加，学到的东西越来越多，慢慢地就开始有很多东西可以写了，继续保持。\n\n### 加入一个登录系统也太轻松了吧？\n\n前阵子有nodejs开发一套登录系统，费力很大的劲，还算是比较复杂的，开发起来有点麻烦，而RoR可以直接使用devise模块，直接搞定登录系统，哇塞，太轻松了吧。\n\n### <% %> 和 <%= %>\n\n这两者经常搞混，虽然现在也没有彻底弄清楚，不过还是发现一些规律的，很多情况下，都用到`<%= %>`，比如说\n\n```ruby\n<h2><%= @group.title %></h2>\n\n<%= link_to(\"Edit\", edit_group_path(@group), class: \"btn btn-primary pull-right\") %>\n\n<%= f.input :title, input_html: { class: \"form-control\"} %>\n\n<%= render \"common/navbar\" %>\n```\n\n而`<% %>`是用在一些判断或者遍历的关键词上面的，比如说\n\n```ruby\n<% if current_user && current_user == @group.user %>\n\n<% end %>\n```\n\n```ruby\n<% @groups.each do |group| %>\n\n<% end %>\n```\n\n## Decisional\n\n放下之前无效的学习方式，摒弃傲慢的态度，一心一意按照教程的指示做，养成好的学习习惯，相信一定会有惊喜的。\n","slug":"2016-12-08-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicao001vfsonl1ttx4lq","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>下班之后，花一个半小时，做第三遍rails 101，完成1-5节。</p>\n<h2 id=\"Relective\"><a href=\"#Relective\" class=\"headerlink\" title=\"Relective\"></a>Relective</h2><p>做第三次遍，感觉越来越熟练了，敲代码的速度也更快了，很有成就感。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"git-存档\"><a href=\"#git-存档\" class=\"headerlink\" title=\"git 存档\"></a>git 存档</h3><p>平时做项目时，经常会改很多很多东西，然后要提交git时才发现，怎么修改了这么多！！！经常搞不清楚到底哪个步骤修改了哪些文件，最终往往会写一句可能以后自己都看不懂的提交信息，草草了事。在练习rails101时，因为rails101的教程对项目进行了分解，每一个步骤对应一次commit，目标明确，循序渐进，写完一节就提交一节，所以我才发现，原来每次只做一件小事情，做好了就马上提交，一点都不会乱，这点我是学到了，很棒。</p>\n<h3 id=\"漏写了无数次的-“end”\"><a href=\"#漏写了无数次的-“end”\" class=\"headerlink\" title=\"漏写了无数次的 “end”\"></a>漏写了无数次的 “end”</h3><p>犯错误最多的就是忘了写end，所以我决定每次写if或者循环等语法时，先把end写了再说，养成一个好习惯。</p>\n<h3 id=\"慢慢地能默写了\"><a href=\"#慢慢地能默写了\" class=\"headerlink\" title=\"慢慢地能默写了\"></a>慢慢地能默写了</h3><p>已经做了两遍rails，在做第三遍时，已经比较熟练了，比较意外的是，竟然可以在看了教程的一句引导词之后，可以不看后面的步骤，自己把下一步给写出来了，比如说CRUD，这非常有成就感，真是熟能生巧呀。</p>\n<h3 id=\"情不自禁地和nodejs做比较\"><a href=\"#情不自禁地和nodejs做比较\" class=\"headerlink\" title=\"情不自禁地和nodejs做比较\"></a>情不自禁地和nodejs做比较</h3><p>平时学后端用nodejs，所以不自觉地会比较ruby on rails(RoR)和nodej\u0010s，最让我刚到惊讶的是，rails帮开发者做了很多很多事情，就拿路由来说，rails只需要在routes.rb写一句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resources :groups</span><br></pre></td></tr></table></figure>\n<p>它就能帮你生成7个Action</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    groups GET    /groups(.<span class=\"symbol\">:format</span>)              groups<span class=\"comment\">#index</span></span><br><span class=\"line\">           POST   /groups(.<span class=\"symbol\">:format</span>)              groups<span class=\"comment\">#create</span></span><br><span class=\"line\"> new_group GET    /groups/new(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#new</span></span><br><span class=\"line\">edit_group GET    /groups/<span class=\"symbol\">:id/edit</span>(.<span class=\"symbol\">:format</span>)     groups<span class=\"comment\">#edit</span></span><br><span class=\"line\">     group GET    /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#show</span></span><br><span class=\"line\">           PATCH  /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#update</span></span><br><span class=\"line\">           PUT    /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#update</span></span><br><span class=\"line\">           DELETE /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#destroy</span></span><br><span class=\"line\">      root GET    /                              groups<span class=\"comment\">#index</span></span><br></pre></td></tr></table></figure>\n<p>如果用nodejs的框架koa来写的话，是需要一个一个手动定义的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, controller.getUser)</span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, controller.addUser)</span><br><span class=\"line\">router.put(<span class=\"string\">'/'</span>, controller.updateUser)</span><br><span class=\"line\">router.delete(<span class=\"string\">'/:id'</span>, controller.destroy)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>因为rails帮开发者做很多事情，所以开发者的开发效率会更高。</p>\n<p>另外，发现了一个node和RoR一个很相似的地方，那就是rails的<code>gemfile</code>和node的<code>package.json</code>，都是用来安装一些模块的，RoR的安装命令是<code>bundle install</code>，而node是<code>npm install</code>。</p>\n<h3 id=\"ApplicationRecord-和-ActiveRecord\"><a href=\"#ApplicationRecord-和-ActiveRecord\" class=\"headerlink\" title=\"ApplicationRecord 和 ActiveRecord\"></a>ApplicationRecord 和 ActiveRecord</h3><p>用rails创建model时，默认是长这个样子的</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span> &lt; ApplicationRecord</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>教程要求把<code>ApplicationRecord</code>改成<code>ActiveRecord::Base</code>，但是因为教程没有明说，所以我经常忘记。现在我还弄不清楚为什么要改成<code>ActiveRecord::Base</code>，所以先背起来再说。</p>\n<h3 id=\"良好的编程规范\"><a href=\"#良好的编程规范\" class=\"headerlink\" title=\"良好的编程规范\"></a>良好的编程规范</h3><p>rails提供的一些功能是有助于帮助程序员养成良好的习惯的，比如说</p>\n<ul>\n<li>html模板代码重复太多，冗余了把？用partial。</li>\n<li>很多请求都要先经过登录认证吧？用before_action。</li>\n<li>很多html模板都需要用到工具函数吧？用Helper。</li>\n<li>很多action里面都用到同一个函数吗？把它封装成函数，写在private里面。</li>\n</ul>\n<h3 id=\"做得越多，想写的东西就越多。\"><a href=\"#做得越多，想写的东西就越多。\" class=\"headerlink\" title=\"做得越多，想写的东西就越多。\"></a>做得越多，想写的东西就越多。</h3><p>一开始做的时候，感觉没有可以写，于是就偷懒没写学习日记，随着练习次数的增加，学到的东西越来越多，慢慢地就开始有很多东西可以写了，继续保持。</p>\n<h3 id=\"加入一个登录系统也太轻松了吧？\"><a href=\"#加入一个登录系统也太轻松了吧？\" class=\"headerlink\" title=\"加入一个登录系统也太轻松了吧？\"></a>加入一个登录系统也太轻松了吧？</h3><p>前阵子有nodejs开发一套登录系统，费力很大的劲，还算是比较复杂的，开发起来有点麻烦，而RoR可以直接使用devise模块，直接搞定登录系统，哇塞，太轻松了吧。</p>\n<h3 id=\"lt-gt-和-lt-gt\"><a href=\"#lt-gt-和-lt-gt\" class=\"headerlink\" title=\"&lt;% %&gt; 和 &lt;%= %&gt;\"></a>&lt;% %&gt; 和 &lt;%= %&gt;</h3><p>这两者经常搞混，虽然现在也没有彻底弄清楚，不过还是发现一些规律的，很多情况下，都用到<code>&lt;%= %&gt;</code>，比如说</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2&gt;&lt;%= @group.title %&gt;&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;%= link_to(\"Edit\", edit_group_path(@group), class: \"btn btn-primary pull-right\") %&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;%= f.input :title, input_html: &#123; class: \"form-control\"&#125; %&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;%= render \"common/navbar</span><span class=\"string\">\" %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>而<code>&lt;% %&gt;</code>是用在一些判断或者遍历的关键词上面的，比如说</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> current_user &amp;&amp; current_user == @group.user %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% <span class=\"keyword\">end</span> %&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% @groups.each <span class=\"keyword\">do</span> <span class=\"params\">|group|</span> %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% <span class=\"keyword\">end</span> %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>放下之前无效的学习方式，摒弃傲慢的态度，一心一意按照教程的指示做，养成好的学习习惯，相信一定会有惊喜的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>下班之后，花一个半小时，做第三遍rails 101，完成1-5节。</p>\n<h2 id=\"Relective\"><a href=\"#Relective\" class=\"headerlink\" title=\"Relective\"></a>Relective</h2><p>做第三次遍，感觉越来越熟练了，敲代码的速度也更快了，很有成就感。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"git-存档\"><a href=\"#git-存档\" class=\"headerlink\" title=\"git 存档\"></a>git 存档</h3><p>平时做项目时，经常会改很多很多东西，然后要提交git时才发现，怎么修改了这么多！！！经常搞不清楚到底哪个步骤修改了哪些文件，最终往往会写一句可能以后自己都看不懂的提交信息，草草了事。在练习rails101时，因为rails101的教程对项目进行了分解，每一个步骤对应一次commit，目标明确，循序渐进，写完一节就提交一节，所以我才发现，原来每次只做一件小事情，做好了就马上提交，一点都不会乱，这点我是学到了，很棒。</p>\n<h3 id=\"漏写了无数次的-“end”\"><a href=\"#漏写了无数次的-“end”\" class=\"headerlink\" title=\"漏写了无数次的 “end”\"></a>漏写了无数次的 “end”</h3><p>犯错误最多的就是忘了写end，所以我决定每次写if或者循环等语法时，先把end写了再说，养成一个好习惯。</p>\n<h3 id=\"慢慢地能默写了\"><a href=\"#慢慢地能默写了\" class=\"headerlink\" title=\"慢慢地能默写了\"></a>慢慢地能默写了</h3><p>已经做了两遍rails，在做第三遍时，已经比较熟练了，比较意外的是，竟然可以在看了教程的一句引导词之后，可以不看后面的步骤，自己把下一步给写出来了，比如说CRUD，这非常有成就感，真是熟能生巧呀。</p>\n<h3 id=\"情不自禁地和nodejs做比较\"><a href=\"#情不自禁地和nodejs做比较\" class=\"headerlink\" title=\"情不自禁地和nodejs做比较\"></a>情不自禁地和nodejs做比较</h3><p>平时学后端用nodejs，所以不自觉地会比较ruby on rails(RoR)和nodej\u0010s，最让我刚到惊讶的是，rails帮开发者做了很多很多事情，就拿路由来说，rails只需要在routes.rb写一句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resources :groups</span><br></pre></td></tr></table></figure>\n<p>它就能帮你生成7个Action</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    groups GET    /groups(.<span class=\"symbol\">:format</span>)              groups<span class=\"comment\">#index</span></span><br><span class=\"line\">           POST   /groups(.<span class=\"symbol\">:format</span>)              groups<span class=\"comment\">#create</span></span><br><span class=\"line\"> new_group GET    /groups/new(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#new</span></span><br><span class=\"line\">edit_group GET    /groups/<span class=\"symbol\">:id/edit</span>(.<span class=\"symbol\">:format</span>)     groups<span class=\"comment\">#edit</span></span><br><span class=\"line\">     group GET    /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#show</span></span><br><span class=\"line\">           PATCH  /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#update</span></span><br><span class=\"line\">           PUT    /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#update</span></span><br><span class=\"line\">           DELETE /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#destroy</span></span><br><span class=\"line\">      root GET    /                              groups<span class=\"comment\">#index</span></span><br></pre></td></tr></table></figure>\n<p>如果用nodejs的框架koa来写的话，是需要一个一个手动定义的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, controller.getUser)</span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, controller.addUser)</span><br><span class=\"line\">router.put(<span class=\"string\">'/'</span>, controller.updateUser)</span><br><span class=\"line\">router.delete(<span class=\"string\">'/:id'</span>, controller.destroy)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>因为rails帮开发者做很多事情，所以开发者的开发效率会更高。</p>\n<p>另外，发现了一个node和RoR一个很相似的地方，那就是rails的<code>gemfile</code>和node的<code>package.json</code>，都是用来安装一些模块的，RoR的安装命令是<code>bundle install</code>，而node是<code>npm install</code>。</p>\n<h3 id=\"ApplicationRecord-和-ActiveRecord\"><a href=\"#ApplicationRecord-和-ActiveRecord\" class=\"headerlink\" title=\"ApplicationRecord 和 ActiveRecord\"></a>ApplicationRecord 和 ActiveRecord</h3><p>用rails创建model时，默认是长这个样子的</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span> &lt; ApplicationRecord</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>教程要求把<code>ApplicationRecord</code>改成<code>ActiveRecord::Base</code>，但是因为教程没有明说，所以我经常忘记。现在我还弄不清楚为什么要改成<code>ActiveRecord::Base</code>，所以先背起来再说。</p>\n<h3 id=\"良好的编程规范\"><a href=\"#良好的编程规范\" class=\"headerlink\" title=\"良好的编程规范\"></a>良好的编程规范</h3><p>rails提供的一些功能是有助于帮助程序员养成良好的习惯的，比如说</p>\n<ul>\n<li>html模板代码重复太多，冗余了把？用partial。</li>\n<li>很多请求都要先经过登录认证吧？用before_action。</li>\n<li>很多html模板都需要用到工具函数吧？用Helper。</li>\n<li>很多action里面都用到同一个函数吗？把它封装成函数，写在private里面。</li>\n</ul>\n<h3 id=\"做得越多，想写的东西就越多。\"><a href=\"#做得越多，想写的东西就越多。\" class=\"headerlink\" title=\"做得越多，想写的东西就越多。\"></a>做得越多，想写的东西就越多。</h3><p>一开始做的时候，感觉没有可以写，于是就偷懒没写学习日记，随着练习次数的增加，学到的东西越来越多，慢慢地就开始有很多东西可以写了，继续保持。</p>\n<h3 id=\"加入一个登录系统也太轻松了吧？\"><a href=\"#加入一个登录系统也太轻松了吧？\" class=\"headerlink\" title=\"加入一个登录系统也太轻松了吧？\"></a>加入一个登录系统也太轻松了吧？</h3><p>前阵子有nodejs开发一套登录系统，费力很大的劲，还算是比较复杂的，开发起来有点麻烦，而RoR可以直接使用devise模块，直接搞定登录系统，哇塞，太轻松了吧。</p>\n<h3 id=\"lt-gt-和-lt-gt\"><a href=\"#lt-gt-和-lt-gt\" class=\"headerlink\" title=\"&lt;% %&gt; 和 &lt;%= %&gt;\"></a>&lt;% %&gt; 和 &lt;%= %&gt;</h3><p>这两者经常搞混，虽然现在也没有彻底弄清楚，不过还是发现一些规律的，很多情况下，都用到<code>&lt;%= %&gt;</code>，比如说</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2&gt;&lt;%= @group.title %&gt;&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;%= link_to(\"Edit\", edit_group_path(@group), class: \"btn btn-primary pull-right\") %&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;%= f.input :title, input_html: &#123; class: \"form-control\"&#125; %&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;%= render \"common/navbar</span><span class=\"string\">\" %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>而<code>&lt;% %&gt;</code>是用在一些判断或者遍历的关键词上面的，比如说</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> current_user &amp;&amp; current_user == @group.user %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% <span class=\"keyword\">end</span> %&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% @groups.each <span class=\"keyword\">do</span> <span class=\"params\">|group|</span> %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% <span class=\"keyword\">end</span> %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>放下之前无效的学习方式，摒弃傲慢的态度，一心一意按照教程的指示做，养成好的学习习惯，相信一定会有惊喜的。</p>\n"},{"title":"【报错】vuex requires a Promise polyfill in this browser","_content":"\n使用vue2.0脚手架生成的项目，并且继承vuex和vue-router，在谷歌浏览器是正常的，但是在微信和uc浏览器就会出现这个错误。\n\n后来知道了原来需要加一个补丁，因为有些浏览器并不支持promise。\n\n解决方法：\n\nstep1：安装babel-polyfill。\n\n\tnpm i babel-polyfill -S\n\nstep2：将babel-polyfill添加到webpack的entry\n\n\tentry: {\n\t  app: ['babel-polyfill', './src/main.js']\n\t}","source":"_posts/2016-12-08-vuex-error.md","raw":"\n---\ntitle: 【报错】vuex requires a Promise polyfill in this browser\ncategories: Javascript\n\n---\n\n使用vue2.0脚手架生成的项目，并且继承vuex和vue-router，在谷歌浏览器是正常的，但是在微信和uc浏览器就会出现这个错误。\n\n后来知道了原来需要加一个补丁，因为有些浏览器并不支持promise。\n\n解决方法：\n\nstep1：安装babel-polyfill。\n\n\tnpm i babel-polyfill -S\n\nstep2：将babel-polyfill添加到webpack的entry\n\n\tentry: {\n\t  app: ['babel-polyfill', './src/main.js']\n\t}","slug":"2016-12-08-vuex-error","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicaq001zfsonpj4wfpdk","content":"<p>使用vue2.0脚手架生成的项目，并且继承vuex和vue-router，在谷歌浏览器是正常的，但是在微信和uc浏览器就会出现这个错误。</p>\n<p>后来知道了原来需要加一个补丁，因为有些浏览器并不支持promise。</p>\n<p>解决方法：</p>\n<p>step1：安装babel-polyfill。</p>\n<pre><code>npm i babel-polyfill -S\n</code></pre><p>step2：将babel-polyfill添加到webpack的entry</p>\n<pre><code>entry: {\n  app: [&apos;babel-polyfill&apos;, &apos;./src/main.js&apos;]\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>使用vue2.0脚手架生成的项目，并且继承vuex和vue-router，在谷歌浏览器是正常的，但是在微信和uc浏览器就会出现这个错误。</p>\n<p>后来知道了原来需要加一个补丁，因为有些浏览器并不支持promise。</p>\n<p>解决方法：</p>\n<p>step1：安装babel-polyfill。</p>\n<pre><code>npm i babel-polyfill -S\n</code></pre><p>step2：将babel-polyfill添加到webpack的entry</p>\n<pre><code>entry: {\n  app: [&apos;babel-polyfill&apos;, &apos;./src/main.js&apos;]\n}\n</code></pre>"},{"title":"【ORID总结】2016/12/09","_content":"\n## Objective\n\n第三遍rails101，6-10节\n\n![](http://oggx6lf7f.bkt.clouddn.com/ktbph.png)\n\n## Reflective\n\n### 今天的高峰是什么？\n\n完成了rails101第三遍练习，并且把额外的作业也完成了，很有成就感。\n\n## Interpretive\n\n### 终于做出了额外的作业\n\n之前的两遍练习，都没有做额外作业，因为心里有点畏难情绪，习惯了照着教程打，尽量不做太多的思考。其实前两遍也确实不应该想太多，不然就会不自觉地开启左脑进行逻辑分析，由于刚开始很多东西都不懂，甚至有很多的代码根本不知道什么意思，遇到不懂的问题，不管三七二十一，先把解法给背下来。这样一来，这些知识在我做第三遍的时候，就会慢慢地产生连接，突然间就懂了很多解法的由来，自然而然地也就能独立完成额外的作业了。\n\n### 相同的功能，不同的写法\n\n在练习的过程中，发现了一些代码，虽然实现的功能是一样的，但是写法却不太一样，比如说，提示信息的写法\n\n![](http://oggx6lf7f.bkt.clouddn.com/22dpr.jpg)\n\n关联表的写法:\n\n![](http://oggx6lf7f.bkt.clouddn.com/0mut7.jpg)\n\n![](http://oggx6lf7f.bkt.clouddn.com/t6tv4.jpg)\n\n\n\n## Decisional\n\n明天完成《初级练习》剩余的部分，并完成加分题。","source":"_posts/2016-12-09-coding-diary.md","raw":"---\ntitle: 【ORID总结】2016/12/09\ncategories: 全栈营\n---\n\n## Objective\n\n第三遍rails101，6-10节\n\n![](http://oggx6lf7f.bkt.clouddn.com/ktbph.png)\n\n## Reflective\n\n### 今天的高峰是什么？\n\n完成了rails101第三遍练习，并且把额外的作业也完成了，很有成就感。\n\n## Interpretive\n\n### 终于做出了额外的作业\n\n之前的两遍练习，都没有做额外作业，因为心里有点畏难情绪，习惯了照着教程打，尽量不做太多的思考。其实前两遍也确实不应该想太多，不然就会不自觉地开启左脑进行逻辑分析，由于刚开始很多东西都不懂，甚至有很多的代码根本不知道什么意思，遇到不懂的问题，不管三七二十一，先把解法给背下来。这样一来，这些知识在我做第三遍的时候，就会慢慢地产生连接，突然间就懂了很多解法的由来，自然而然地也就能独立完成额外的作业了。\n\n### 相同的功能，不同的写法\n\n在练习的过程中，发现了一些代码，虽然实现的功能是一样的，但是写法却不太一样，比如说，提示信息的写法\n\n![](http://oggx6lf7f.bkt.clouddn.com/22dpr.jpg)\n\n关联表的写法:\n\n![](http://oggx6lf7f.bkt.clouddn.com/0mut7.jpg)\n\n![](http://oggx6lf7f.bkt.clouddn.com/t6tv4.jpg)\n\n\n\n## Decisional\n\n明天完成《初级练习》剩余的部分，并完成加分题。","slug":"2016-12-09-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicas0022fsonznlgsf7t","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>第三遍rails101，6-10节</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ktbph.png\" alt=\"\"></p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><h3 id=\"今天的高峰是什么？\"><a href=\"#今天的高峰是什么？\" class=\"headerlink\" title=\"今天的高峰是什么？\"></a>今天的高峰是什么？</h3><p>完成了rails101第三遍练习，并且把额外的作业也完成了，很有成就感。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"终于做出了额外的作业\"><a href=\"#终于做出了额外的作业\" class=\"headerlink\" title=\"终于做出了额外的作业\"></a>终于做出了额外的作业</h3><p>之前的两遍练习，都没有做额外作业，因为心里有点畏难情绪，习惯了照着教程打，尽量不做太多的思考。其实前两遍也确实不应该想太多，不然就会不自觉地开启左脑进行逻辑分析，由于刚开始很多东西都不懂，甚至有很多的代码根本不知道什么意思，遇到不懂的问题，不管三七二十一，先把解法给背下来。这样一来，这些知识在我做第三遍的时候，就会慢慢地产生连接，突然间就懂了很多解法的由来，自然而然地也就能独立完成额外的作业了。</p>\n<h3 id=\"相同的功能，不同的写法\"><a href=\"#相同的功能，不同的写法\" class=\"headerlink\" title=\"相同的功能，不同的写法\"></a>相同的功能，不同的写法</h3><p>在练习的过程中，发现了一些代码，虽然实现的功能是一样的，但是写法却不太一样，比如说，提示信息的写法</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/22dpr.jpg\" alt=\"\"></p>\n<p>关联表的写法:</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0mut7.jpg\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/t6tv4.jpg\" alt=\"\"></p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天完成《初级练习》剩余的部分，并完成加分题。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>第三遍rails101，6-10节</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ktbph.png\" alt=\"\"></p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><h3 id=\"今天的高峰是什么？\"><a href=\"#今天的高峰是什么？\" class=\"headerlink\" title=\"今天的高峰是什么？\"></a>今天的高峰是什么？</h3><p>完成了rails101第三遍练习，并且把额外的作业也完成了，很有成就感。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"终于做出了额外的作业\"><a href=\"#终于做出了额外的作业\" class=\"headerlink\" title=\"终于做出了额外的作业\"></a>终于做出了额外的作业</h3><p>之前的两遍练习，都没有做额外作业，因为心里有点畏难情绪，习惯了照着教程打，尽量不做太多的思考。其实前两遍也确实不应该想太多，不然就会不自觉地开启左脑进行逻辑分析，由于刚开始很多东西都不懂，甚至有很多的代码根本不知道什么意思，遇到不懂的问题，不管三七二十一，先把解法给背下来。这样一来，这些知识在我做第三遍的时候，就会慢慢地产生连接，突然间就懂了很多解法的由来，自然而然地也就能独立完成额外的作业了。</p>\n<h3 id=\"相同的功能，不同的写法\"><a href=\"#相同的功能，不同的写法\" class=\"headerlink\" title=\"相同的功能，不同的写法\"></a>相同的功能，不同的写法</h3><p>在练习的过程中，发现了一些代码，虽然实现的功能是一样的，但是写法却不太一样，比如说，提示信息的写法</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/22dpr.jpg\" alt=\"\"></p>\n<p>关联表的写法:</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0mut7.jpg\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/t6tv4.jpg\" alt=\"\"></p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天完成《初级练习》剩余的部分，并完成加分题。</p>\n"},{"title":"【ORID总结】2016/12/10","_content":"\n## Objective\n\n重新做一遍基础练习，并完成加分题。\n\n（倒叙题尝试了很多种方法，最后还是没有做出来 XD）\n\n## Relective\n\n### 高峰是什么？\n\n虽然今天练了一天车，很累，但还是坚持完成了昨天定下的计划。\n\n## Interpretive\n\n### 新建'about'页面\n\n一开始路由是怎么写的\n\n![](http://oggx6lf7f.bkt.clouddn.com/mwdwh.jpg)\n\n但却得到这种结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/f5evc.jpg)\n\n后来看到文档里面原来是怎么写的\n\n![](http://oggx6lf7f.bkt.clouddn.com/sqxax.jpg)\n\n于是就改一下写法\n\n![](http://oggx6lf7f.bkt.clouddn.com/idf0m.jpg)\n\nok\n\n![](http://oggx6lf7f.bkt.clouddn.com/bpry1.jpg)\n\n### 加一个'扣分'按钮\n\n```ruby\ndef downvote\n  @topic = Topic.find(params[:id])\n  @topic.votes.first.destroy\n  redirect_to(topics_path)\nend\n```\n\n## Decisional\n\n明天完成基础练习的加分题，然后再练习一遍rails 101","source":"_posts/2016-12-10-coding-diary.md","raw":"---\ntitle: 【ORID总结】2016/12/10\ncategories: 全栈营\n---\n\n## Objective\n\n重新做一遍基础练习，并完成加分题。\n\n（倒叙题尝试了很多种方法，最后还是没有做出来 XD）\n\n## Relective\n\n### 高峰是什么？\n\n虽然今天练了一天车，很累，但还是坚持完成了昨天定下的计划。\n\n## Interpretive\n\n### 新建'about'页面\n\n一开始路由是怎么写的\n\n![](http://oggx6lf7f.bkt.clouddn.com/mwdwh.jpg)\n\n但却得到这种结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/f5evc.jpg)\n\n后来看到文档里面原来是怎么写的\n\n![](http://oggx6lf7f.bkt.clouddn.com/sqxax.jpg)\n\n于是就改一下写法\n\n![](http://oggx6lf7f.bkt.clouddn.com/idf0m.jpg)\n\nok\n\n![](http://oggx6lf7f.bkt.clouddn.com/bpry1.jpg)\n\n### 加一个'扣分'按钮\n\n```ruby\ndef downvote\n  @topic = Topic.find(params[:id])\n  @topic.votes.first.destroy\n  redirect_to(topics_path)\nend\n```\n\n## Decisional\n\n明天完成基础练习的加分题，然后再练习一遍rails 101","slug":"2016-12-10-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicat0026fsonqizf2f2s","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>重新做一遍基础练习，并完成加分题。</p>\n<p>（倒叙题尝试了很多种方法，最后还是没有做出来 XD）</p>\n<h2 id=\"Relective\"><a href=\"#Relective\" class=\"headerlink\" title=\"Relective\"></a>Relective</h2><h3 id=\"高峰是什么？\"><a href=\"#高峰是什么？\" class=\"headerlink\" title=\"高峰是什么？\"></a>高峰是什么？</h3><p>虽然今天练了一天车，很累，但还是坚持完成了昨天定下的计划。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"新建’about’页面\"><a href=\"#新建’about’页面\" class=\"headerlink\" title=\"新建’about’页面\"></a>新建’about’页面</h3><p>一开始路由是怎么写的</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/mwdwh.jpg\" alt=\"\"></p>\n<p>但却得到这种结果</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/f5evc.jpg\" alt=\"\"></p>\n<p>后来看到文档里面原来是怎么写的</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/sqxax.jpg\" alt=\"\"></p>\n<p>于是就改一下写法</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/idf0m.jpg\" alt=\"\"></p>\n<p>ok</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bpry1.jpg\" alt=\"\"></p>\n<h3 id=\"加一个’扣分’按钮\"><a href=\"#加一个’扣分’按钮\" class=\"headerlink\" title=\"加一个’扣分’按钮\"></a>加一个’扣分’按钮</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">downvote</span></span></span><br><span class=\"line\">  @topic = Topic.find(params[<span class=\"symbol\">:id</span>])</span><br><span class=\"line\">  @topic.votes.first.destroy</span><br><span class=\"line\">  redirect_to(topics_path)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天完成基础练习的加分题，然后再练习一遍rails 101</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>重新做一遍基础练习，并完成加分题。</p>\n<p>（倒叙题尝试了很多种方法，最后还是没有做出来 XD）</p>\n<h2 id=\"Relective\"><a href=\"#Relective\" class=\"headerlink\" title=\"Relective\"></a>Relective</h2><h3 id=\"高峰是什么？\"><a href=\"#高峰是什么？\" class=\"headerlink\" title=\"高峰是什么？\"></a>高峰是什么？</h3><p>虽然今天练了一天车，很累，但还是坚持完成了昨天定下的计划。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"新建’about’页面\"><a href=\"#新建’about’页面\" class=\"headerlink\" title=\"新建’about’页面\"></a>新建’about’页面</h3><p>一开始路由是怎么写的</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/mwdwh.jpg\" alt=\"\"></p>\n<p>但却得到这种结果</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/f5evc.jpg\" alt=\"\"></p>\n<p>后来看到文档里面原来是怎么写的</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/sqxax.jpg\" alt=\"\"></p>\n<p>于是就改一下写法</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/idf0m.jpg\" alt=\"\"></p>\n<p>ok</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bpry1.jpg\" alt=\"\"></p>\n<h3 id=\"加一个’扣分’按钮\"><a href=\"#加一个’扣分’按钮\" class=\"headerlink\" title=\"加一个’扣分’按钮\"></a>加一个’扣分’按钮</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">downvote</span></span></span><br><span class=\"line\">  @topic = Topic.find(params[<span class=\"symbol\">:id</span>])</span><br><span class=\"line\">  @topic.votes.first.destroy</span><br><span class=\"line\">  redirect_to(topics_path)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天完成基础练习的加分题，然后再练习一遍rails 101</p>\n"},{"title":"【ORID总结】2016/12/11","_content":"\n## Objective\n\n完成第4遍rails 101的第1-5节。\n\n## Reflective\n\n情绪非常一般，学习rails并没有特别大的收获。\n\n## Interpretive\n\n### 不断地练习做rails 101\n\n今天决定开始做第四遍rails 101，因为目前的教程只有3个，所以没有太多的选择，就好好练吧。\n\n### 肌肉记忆与刻意练习\n\n在编程时，要先把高频小套路背下来，重复地练习，知道形成肌肉记忆。今天，我把这个方法论迁移到学车上面，在听完教练的讲解之后，先把重要的操作都背下来，不断地在脑中重复，然后开始一遍一遍地实操，于是，很快就上手了，学科目三用了1.5天就能在车流量很大的路段正常地驾驶了，非常有成就感。\n\n## Decisional\n\n今天遇到了几个bug，还没完全解决，明天将错误整理写成文章。","source":"_posts/2016-12-11-coding-diary.md","raw":"---\ntitle: 【ORID总结】2016/12/11\ncategories: 全栈营\n---\n\n## Objective\n\n完成第4遍rails 101的第1-5节。\n\n## Reflective\n\n情绪非常一般，学习rails并没有特别大的收获。\n\n## Interpretive\n\n### 不断地练习做rails 101\n\n今天决定开始做第四遍rails 101，因为目前的教程只有3个，所以没有太多的选择，就好好练吧。\n\n### 肌肉记忆与刻意练习\n\n在编程时，要先把高频小套路背下来，重复地练习，知道形成肌肉记忆。今天，我把这个方法论迁移到学车上面，在听完教练的讲解之后，先把重要的操作都背下来，不断地在脑中重复，然后开始一遍一遍地实操，于是，很快就上手了，学科目三用了1.5天就能在车流量很大的路段正常地驾驶了，非常有成就感。\n\n## Decisional\n\n今天遇到了几个bug，还没完全解决，明天将错误整理写成文章。","slug":"2016-12-11-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicav0028fsonudajczm1","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成第4遍rails 101的第1-5节。</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>情绪非常一般，学习rails并没有特别大的收获。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"不断地练习做rails-101\"><a href=\"#不断地练习做rails-101\" class=\"headerlink\" title=\"不断地练习做rails 101\"></a>不断地练习做rails 101</h3><p>今天决定开始做第四遍rails 101，因为目前的教程只有3个，所以没有太多的选择，就好好练吧。</p>\n<h3 id=\"肌肉记忆与刻意练习\"><a href=\"#肌肉记忆与刻意练习\" class=\"headerlink\" title=\"肌肉记忆与刻意练习\"></a>肌肉记忆与刻意练习</h3><p>在编程时，要先把高频小套路背下来，重复地练习，知道形成肌肉记忆。今天，我把这个方法论迁移到学车上面，在听完教练的讲解之后，先把重要的操作都背下来，不断地在脑中重复，然后开始一遍一遍地实操，于是，很快就上手了，学科目三用了1.5天就能在车流量很大的路段正常地驾驶了，非常有成就感。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>今天遇到了几个bug，还没完全解决，明天将错误整理写成文章。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成第4遍rails 101的第1-5节。</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>情绪非常一般，学习rails并没有特别大的收获。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"不断地练习做rails-101\"><a href=\"#不断地练习做rails-101\" class=\"headerlink\" title=\"不断地练习做rails 101\"></a>不断地练习做rails 101</h3><p>今天决定开始做第四遍rails 101，因为目前的教程只有3个，所以没有太多的选择，就好好练吧。</p>\n<h3 id=\"肌肉记忆与刻意练习\"><a href=\"#肌肉记忆与刻意练习\" class=\"headerlink\" title=\"肌肉记忆与刻意练习\"></a>肌肉记忆与刻意练习</h3><p>在编程时，要先把高频小套路背下来，重复地练习，知道形成肌肉记忆。今天，我把这个方法论迁移到学车上面，在听完教练的讲解之后，先把重要的操作都背下来，不断地在脑中重复，然后开始一遍一遍地实操，于是，很快就上手了，学科目三用了1.5天就能在车流量很大的路段正常地驾驶了，非常有成就感。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>今天遇到了几个bug，还没完全解决，明天将错误整理写成文章。</p>\n"},{"title":"单元测试之常用的ES6语法","_content":"\n之前粗略的看过[ECMAScript 6入门][1]教程，对于ES6的语法有了大概的了解，比如箭头函数，let和const声明，设置函数参数的默认值等等，一直没有系统地学习，今天抽空阅读一遍[es6-cheatsheet][2]，针对常用的语法写了单元测试，以加强对ES6语法的理解，下面是测试代码和测试结果。\n\n## 测试代码\n\n``` Javascript\n'use strict'\n\nvar chai = require('chai');\nchai.should()\n\ndescribe('var versus let / const', function () {\n  it('let statements are not hoisted to the top of their enclosing scope', function () {\n    let snack = 'Meow Mix';\n\n    function getFood(food){\n      if (food) {\n        let snack = 'Friskies';\n        return snack;\n      }\n      return snack;\n    }\n\n    getFood(false).should.be.equal('Meow Mix');\n  });\n});\n\ndescribe('Replacing IIFEs with Blocks', function () {\n  it('create block-based scopes', function () {\n    let food = 'noodle';\n    {\n      let food = 'Meow Mix';\n    }\n    food.should.be.equal('noodle');\n  });\n});\n\ndescribe('Arrow Functions', function () {\n  it('preserve the lexical value of this', function () {\n    function Person(name) {\n      this.name = name;\n    }\n\n    Person.prototype.prefixName = function (arr) {\n      return arr.map(character => this.name + character);\n    }\n\n    var person = new Person();\n    person.name = 'prefix-';\n    var resultArr = person.prefixName(['raimon', 'raimonfuns']);\n\n    resultArr.length.should.be.equal(2);\n    resultArr[0].should.be.equal('prefix-raimon');\n  });\n\n  describe('Strings', function () {\n    it('.includes()', function () {\n      const string = 'food';\n      const substring = 'foo';\n\n      string.includes(substring).should.be.equal(true);\n    });\n\n    it('.repeat()', function () {\n      'raimon'.repeat(3).should.be.equal('raimonraimonraimon');\n    });\n  });\n\n  describe('Template Literals', function () {\n    it('do not need to be escaped anymore', function () {\n      let test = `This string contains \"double quotes\" which don't need to be escaped anymore.`;\n\n      test.should.be.equal(\"This string contains \\\"double quotes\\\" which don't need to be escaped anymore.\");\n    });\n\n    it('interpolation', function () {\n      const name = 'raimon';\n      const age = 24;\n\n      let test = `My cat is named ${name} and is ${age} years old.`;\n      test.should.be.equal('My cat is named raimon and is 24 years old.');\n    });\n\n    it('expressions', function () {\n      let string = 'nba';\n      let test = `${string.toUpperCase()}, where amazing happens`;\n\n      test.should.be.equal('NBA, where amazing happens');\n    });\n  });\n\n  describe('Destructuring', function () {\n    it('Destructuring Arrays', function () {\n      let [a, b] = [1, 2];\n\n      a.should.be.equal(1);\n      b.should.be.equal(2);\n    });\n\n    it('Destructuring Objects', function () {\n      let luke = {occupation: 'jeki', father: 'anakin'};\n      let {occupation, father} = luke;\n\n      occupation.should.be.equal('jeki');\n      father.should.be.equal('anakin');\n    });\n  });\n\n  describe('Parameters', function () {\n    it('Default Parameters', function () {\n      function addTwoNumbers(x=0, y=0) {\n        return x + y;\n      }\n\n      addTwoNumbers(2, 4).should.be.equal(6);\n      addTwoNumbers(2).should.be.equal(2);\n      addTwoNumbers().should.be.equal(0);\n    });\n\n    it('Rest Parameters', function () {\n      function joinArguments(...args) {\n        return args.join('');\n      }\n\n      joinArguments('a', 'b').should.be.equal('ab');\n    });\n\n    it('Named Parameters', function () {\n      function initializeCanvas({ height=600, width=400, lineStroke='black' }) {\n        return 'height:' + height + ';' + 'width:' + width + ';' + 'lineStroke:' + lineStroke;\n      }\n\n      initializeCanvas({height: 100, width: 100, lineStroke: 'black'}).should.be.equal('height:100;width:100;lineStroke:black');\n      initializeCanvas({height: 100, lineStroke: 'black'}).should.be.equal('height:100;width:400;lineStroke:black');\n    });\n  });\n\n  describe('Spread Operator', function () {\n    it('pass an array of values to be used as parameters to a function', function () {\n      Math.max(...[1, 100, 9001, -32]).should.be.equal(9001);\n    });\n\n    it('concat array literals', function () {\n      let cities = ['San Francisco', 'Los Angeles'];\n      let places = ['Miami', ...cities, 'Chicago'];\n\n      places.length.should.be.equal(4);\n      places[1].should.be.equal('San Francisco');\n    });\n  });\n\n  describe('Maps', function () {\n    it('set, get, search', function () {\n      let map = new Map();\n      map.set('name', 'david');\n\n      map.get('name').should.be.equal('david');\n      map.has('name').should.be.equal(true);\n    });\n\n    it('use any type as a key', function () {\n      var typeStr = '';\n      let map = new Map([\n        ['name', 'david'],\n        [true, 'false'],\n        [1, 'one'],\n        [{}, 'object'],\n        [function () {}, 'function']\n      ]);\n\n      for (let key of map.keys()) {\n        typeStr += typeof key + '|';\n      }\n\n      typeStr.should.be.equal('string|boolean|number|object|function|');\n    });\n\n    it('.entries()', function () {\n      var resultStr = '';\n      let map = new Map([\n        ['name', 'david'],\n        ['age', '24']\n      ]);\n\n      for (let [key, value] of map.entries()) {\n        resultStr += key + ': ' + value + '|';\n      }\n\n      resultStr.should.be.equal('name: david|age: 24|');\n    });\n  });\n});\n\n```\n\n## 测试结果\n![unit test result][image-1]\n\n[1]:\thttp://es6.ruanyifeng.com/\n[2]:\thttps://github.com/DrkSephy/es6-cheatsheet\n\n[image-1]:\thttp://chuantu.biz/t5/14/1467467341x2918528194.png","source":"_posts/2016-12-19-es6-unit-test.md","raw":"---\ntitle: 单元测试之常用的ES6语法\ncategories: Javascript\ntags: [ES6, 单元测试]\n---\n\n之前粗略的看过[ECMAScript 6入门][1]教程，对于ES6的语法有了大概的了解，比如箭头函数，let和const声明，设置函数参数的默认值等等，一直没有系统地学习，今天抽空阅读一遍[es6-cheatsheet][2]，针对常用的语法写了单元测试，以加强对ES6语法的理解，下面是测试代码和测试结果。\n\n## 测试代码\n\n``` Javascript\n'use strict'\n\nvar chai = require('chai');\nchai.should()\n\ndescribe('var versus let / const', function () {\n  it('let statements are not hoisted to the top of their enclosing scope', function () {\n    let snack = 'Meow Mix';\n\n    function getFood(food){\n      if (food) {\n        let snack = 'Friskies';\n        return snack;\n      }\n      return snack;\n    }\n\n    getFood(false).should.be.equal('Meow Mix');\n  });\n});\n\ndescribe('Replacing IIFEs with Blocks', function () {\n  it('create block-based scopes', function () {\n    let food = 'noodle';\n    {\n      let food = 'Meow Mix';\n    }\n    food.should.be.equal('noodle');\n  });\n});\n\ndescribe('Arrow Functions', function () {\n  it('preserve the lexical value of this', function () {\n    function Person(name) {\n      this.name = name;\n    }\n\n    Person.prototype.prefixName = function (arr) {\n      return arr.map(character => this.name + character);\n    }\n\n    var person = new Person();\n    person.name = 'prefix-';\n    var resultArr = person.prefixName(['raimon', 'raimonfuns']);\n\n    resultArr.length.should.be.equal(2);\n    resultArr[0].should.be.equal('prefix-raimon');\n  });\n\n  describe('Strings', function () {\n    it('.includes()', function () {\n      const string = 'food';\n      const substring = 'foo';\n\n      string.includes(substring).should.be.equal(true);\n    });\n\n    it('.repeat()', function () {\n      'raimon'.repeat(3).should.be.equal('raimonraimonraimon');\n    });\n  });\n\n  describe('Template Literals', function () {\n    it('do not need to be escaped anymore', function () {\n      let test = `This string contains \"double quotes\" which don't need to be escaped anymore.`;\n\n      test.should.be.equal(\"This string contains \\\"double quotes\\\" which don't need to be escaped anymore.\");\n    });\n\n    it('interpolation', function () {\n      const name = 'raimon';\n      const age = 24;\n\n      let test = `My cat is named ${name} and is ${age} years old.`;\n      test.should.be.equal('My cat is named raimon and is 24 years old.');\n    });\n\n    it('expressions', function () {\n      let string = 'nba';\n      let test = `${string.toUpperCase()}, where amazing happens`;\n\n      test.should.be.equal('NBA, where amazing happens');\n    });\n  });\n\n  describe('Destructuring', function () {\n    it('Destructuring Arrays', function () {\n      let [a, b] = [1, 2];\n\n      a.should.be.equal(1);\n      b.should.be.equal(2);\n    });\n\n    it('Destructuring Objects', function () {\n      let luke = {occupation: 'jeki', father: 'anakin'};\n      let {occupation, father} = luke;\n\n      occupation.should.be.equal('jeki');\n      father.should.be.equal('anakin');\n    });\n  });\n\n  describe('Parameters', function () {\n    it('Default Parameters', function () {\n      function addTwoNumbers(x=0, y=0) {\n        return x + y;\n      }\n\n      addTwoNumbers(2, 4).should.be.equal(6);\n      addTwoNumbers(2).should.be.equal(2);\n      addTwoNumbers().should.be.equal(0);\n    });\n\n    it('Rest Parameters', function () {\n      function joinArguments(...args) {\n        return args.join('');\n      }\n\n      joinArguments('a', 'b').should.be.equal('ab');\n    });\n\n    it('Named Parameters', function () {\n      function initializeCanvas({ height=600, width=400, lineStroke='black' }) {\n        return 'height:' + height + ';' + 'width:' + width + ';' + 'lineStroke:' + lineStroke;\n      }\n\n      initializeCanvas({height: 100, width: 100, lineStroke: 'black'}).should.be.equal('height:100;width:100;lineStroke:black');\n      initializeCanvas({height: 100, lineStroke: 'black'}).should.be.equal('height:100;width:400;lineStroke:black');\n    });\n  });\n\n  describe('Spread Operator', function () {\n    it('pass an array of values to be used as parameters to a function', function () {\n      Math.max(...[1, 100, 9001, -32]).should.be.equal(9001);\n    });\n\n    it('concat array literals', function () {\n      let cities = ['San Francisco', 'Los Angeles'];\n      let places = ['Miami', ...cities, 'Chicago'];\n\n      places.length.should.be.equal(4);\n      places[1].should.be.equal('San Francisco');\n    });\n  });\n\n  describe('Maps', function () {\n    it('set, get, search', function () {\n      let map = new Map();\n      map.set('name', 'david');\n\n      map.get('name').should.be.equal('david');\n      map.has('name').should.be.equal(true);\n    });\n\n    it('use any type as a key', function () {\n      var typeStr = '';\n      let map = new Map([\n        ['name', 'david'],\n        [true, 'false'],\n        [1, 'one'],\n        [{}, 'object'],\n        [function () {}, 'function']\n      ]);\n\n      for (let key of map.keys()) {\n        typeStr += typeof key + '|';\n      }\n\n      typeStr.should.be.equal('string|boolean|number|object|function|');\n    });\n\n    it('.entries()', function () {\n      var resultStr = '';\n      let map = new Map([\n        ['name', 'david'],\n        ['age', '24']\n      ]);\n\n      for (let [key, value] of map.entries()) {\n        resultStr += key + ': ' + value + '|';\n      }\n\n      resultStr.should.be.equal('name: david|age: 24|');\n    });\n  });\n});\n\n```\n\n## 测试结果\n![unit test result][image-1]\n\n[1]:\thttp://es6.ruanyifeng.com/\n[2]:\thttps://github.com/DrkSephy/es6-cheatsheet\n\n[image-1]:\thttp://chuantu.biz/t5/14/1467467341x2918528194.png","slug":"2016-12-19-es6-unit-test","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicaw002bfsonfi04z67z","content":"<p>之前粗略的看过<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ECMAScript 6入门</a>教程，对于ES6的语法有了大概的了解，比如箭头函数，let和const声明，设置函数参数的默认值等等，一直没有系统地学习，今天抽空阅读一遍<a href=\"https://github.com/DrkSephy/es6-cheatsheet\" target=\"_blank\" rel=\"noopener\">es6-cheatsheet</a>，针对常用的语法写了单元测试，以加强对ES6语法的理解，下面是测试代码和测试结果。</p>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> chai = <span class=\"built_in\">require</span>(<span class=\"string\">'chai'</span>);</span><br><span class=\"line\">chai.should()</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'var versus let / const'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'let statements are not hoisted to the top of their enclosing scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> snack = <span class=\"string\">'Meow Mix'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFood</span>(<span class=\"params\">food</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (food) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> snack = <span class=\"string\">'Friskies'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> snack;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> snack;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getFood(<span class=\"literal\">false</span>).should.be.equal(<span class=\"string\">'Meow Mix'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Replacing IIFEs with Blocks'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'create block-based scopes'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> food = <span class=\"string\">'noodle'</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> food = <span class=\"string\">'Meow Mix'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    food.should.be.equal(<span class=\"string\">'noodle'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Arrow Functions'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'preserve the lexical value of this'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person.prototype.prefixName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr.map(<span class=\"function\"><span class=\"params\">character</span> =&gt;</span> <span class=\"keyword\">this</span>.name + character);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    person.name = <span class=\"string\">'prefix-'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resultArr = person.prefixName([<span class=\"string\">'raimon'</span>, <span class=\"string\">'raimonfuns'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    resultArr.length.should.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">    resultArr[<span class=\"number\">0</span>].should.be.equal(<span class=\"string\">'prefix-raimon'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Strings'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'.includes()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> string = <span class=\"string\">'food'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> substring = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      string.includes(substring).should.be.equal(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'.repeat()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"string\">'raimon'</span>.repeat(<span class=\"number\">3</span>).should.be.equal(<span class=\"string\">'raimonraimonraimon'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Template Literals'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'do not need to be escaped anymore'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = <span class=\"string\">`This string contains \"double quotes\" which don't need to be escaped anymore.`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      test.should.be.equal(<span class=\"string\">\"This string contains \\\"double quotes\\\" which don't need to be escaped anymore.\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'interpolation'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> name = <span class=\"string\">'raimon'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> age = <span class=\"number\">24</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = <span class=\"string\">`My cat is named <span class=\"subst\">$&#123;name&#125;</span> and is <span class=\"subst\">$&#123;age&#125;</span> years old.`</span>;</span><br><span class=\"line\">      test.should.be.equal(<span class=\"string\">'My cat is named raimon and is 24 years old.'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'expressions'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> string = <span class=\"string\">'nba'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = <span class=\"string\">`<span class=\"subst\">$&#123;string.toUpperCase()&#125;</span>, where amazing happens`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      test.should.be.equal(<span class=\"string\">'NBA, where amazing happens'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Destructuring'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'Destructuring Arrays'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> [a, b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      a.should.be.equal(<span class=\"number\">1</span>);</span><br><span class=\"line\">      b.should.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'Destructuring Objects'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> luke = &#123;<span class=\"attr\">occupation</span>: <span class=\"string\">'jeki'</span>, <span class=\"attr\">father</span>: <span class=\"string\">'anakin'</span>&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;occupation, father&#125; = luke;</span><br><span class=\"line\"></span><br><span class=\"line\">      occupation.should.be.equal(<span class=\"string\">'jeki'</span>);</span><br><span class=\"line\">      father.should.be.equal(<span class=\"string\">'anakin'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'Default Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTwoNumbers</span>(<span class=\"params\">x=<span class=\"number\">0</span>, y=<span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      addTwoNumbers(<span class=\"number\">2</span>, <span class=\"number\">4</span>).should.be.equal(<span class=\"number\">6</span>);</span><br><span class=\"line\">      addTwoNumbers(<span class=\"number\">2</span>).should.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">      addTwoNumbers().should.be.equal(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'Rest Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">joinArguments</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> args.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      joinArguments(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>).should.be.equal(<span class=\"string\">'ab'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'Named Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeCanvas</span>(<span class=\"params\">&#123; height=<span class=\"number\">600</span>, width=<span class=\"number\">400</span>, lineStroke=<span class=\"string\">'black'</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'height:'</span> + height + <span class=\"string\">';'</span> + <span class=\"string\">'width:'</span> + width + <span class=\"string\">';'</span> + <span class=\"string\">'lineStroke:'</span> + lineStroke;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      initializeCanvas(&#123;<span class=\"attr\">height</span>: <span class=\"number\">100</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span>, <span class=\"attr\">lineStroke</span>: <span class=\"string\">'black'</span>&#125;).should.be.equal(<span class=\"string\">'height:100;width:100;lineStroke:black'</span>);</span><br><span class=\"line\">      initializeCanvas(&#123;<span class=\"attr\">height</span>: <span class=\"number\">100</span>, <span class=\"attr\">lineStroke</span>: <span class=\"string\">'black'</span>&#125;).should.be.equal(<span class=\"string\">'height:100;width:400;lineStroke:black'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Spread Operator'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'pass an array of values to be used as parameters to a function'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.max(...[<span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">9001</span>, <span class=\"number\">-32</span>]).should.be.equal(<span class=\"number\">9001</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'concat array literals'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cities = [<span class=\"string\">'San Francisco'</span>, <span class=\"string\">'Los Angeles'</span>];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> places = [<span class=\"string\">'Miami'</span>, ...cities, <span class=\"string\">'Chicago'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      places.length.should.be.equal(<span class=\"number\">4</span>);</span><br><span class=\"line\">      places[<span class=\"number\">1</span>].should.be.equal(<span class=\"string\">'San Francisco'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Maps'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'set, get, search'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">      map.set(<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      map.get(<span class=\"string\">'name'</span>).should.be.equal(<span class=\"string\">'david'</span>);</span><br><span class=\"line\">      map.has(<span class=\"string\">'name'</span>).should.be.equal(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'use any type as a key'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> typeStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">        [<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>],</span><br><span class=\"line\">        [<span class=\"literal\">true</span>, <span class=\"string\">'false'</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">        [&#123;&#125;, <span class=\"string\">'object'</span>],</span><br><span class=\"line\">        [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"string\">'function'</span>]</span><br><span class=\"line\">      ]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> map.keys()) &#123;</span><br><span class=\"line\">        typeStr += <span class=\"keyword\">typeof</span> key + <span class=\"string\">'|'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      typeStr.should.be.equal(<span class=\"string\">'string|boolean|number|object|function|'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'.entries()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> resultStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">        [<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>],</span><br><span class=\"line\">        [<span class=\"string\">'age'</span>, <span class=\"string\">'24'</span>]</span><br><span class=\"line\">      ]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map.entries()) &#123;</span><br><span class=\"line\">        resultStr += key + <span class=\"string\">': '</span> + value + <span class=\"string\">'|'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      resultStr.should.be.equal(<span class=\"string\">'name: david|age: 24|'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><p><img src=\"http://chuantu.biz/t5/14/1467467341x2918528194.png\" alt=\"unit test result\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前粗略的看过<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ECMAScript 6入门</a>教程，对于ES6的语法有了大概的了解，比如箭头函数，let和const声明，设置函数参数的默认值等等，一直没有系统地学习，今天抽空阅读一遍<a href=\"https://github.com/DrkSephy/es6-cheatsheet\" target=\"_blank\" rel=\"noopener\">es6-cheatsheet</a>，针对常用的语法写了单元测试，以加强对ES6语法的理解，下面是测试代码和测试结果。</p>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> chai = <span class=\"built_in\">require</span>(<span class=\"string\">'chai'</span>);</span><br><span class=\"line\">chai.should()</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'var versus let / const'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'let statements are not hoisted to the top of their enclosing scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> snack = <span class=\"string\">'Meow Mix'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFood</span>(<span class=\"params\">food</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (food) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> snack = <span class=\"string\">'Friskies'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> snack;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> snack;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getFood(<span class=\"literal\">false</span>).should.be.equal(<span class=\"string\">'Meow Mix'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Replacing IIFEs with Blocks'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'create block-based scopes'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> food = <span class=\"string\">'noodle'</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> food = <span class=\"string\">'Meow Mix'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    food.should.be.equal(<span class=\"string\">'noodle'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Arrow Functions'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'preserve the lexical value of this'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person.prototype.prefixName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr.map(<span class=\"function\"><span class=\"params\">character</span> =&gt;</span> <span class=\"keyword\">this</span>.name + character);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    person.name = <span class=\"string\">'prefix-'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resultArr = person.prefixName([<span class=\"string\">'raimon'</span>, <span class=\"string\">'raimonfuns'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    resultArr.length.should.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">    resultArr[<span class=\"number\">0</span>].should.be.equal(<span class=\"string\">'prefix-raimon'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Strings'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'.includes()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> string = <span class=\"string\">'food'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> substring = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      string.includes(substring).should.be.equal(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'.repeat()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"string\">'raimon'</span>.repeat(<span class=\"number\">3</span>).should.be.equal(<span class=\"string\">'raimonraimonraimon'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Template Literals'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'do not need to be escaped anymore'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = <span class=\"string\">`This string contains \"double quotes\" which don't need to be escaped anymore.`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      test.should.be.equal(<span class=\"string\">\"This string contains \\\"double quotes\\\" which don't need to be escaped anymore.\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'interpolation'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> name = <span class=\"string\">'raimon'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> age = <span class=\"number\">24</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = <span class=\"string\">`My cat is named <span class=\"subst\">$&#123;name&#125;</span> and is <span class=\"subst\">$&#123;age&#125;</span> years old.`</span>;</span><br><span class=\"line\">      test.should.be.equal(<span class=\"string\">'My cat is named raimon and is 24 years old.'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'expressions'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> string = <span class=\"string\">'nba'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = <span class=\"string\">`<span class=\"subst\">$&#123;string.toUpperCase()&#125;</span>, where amazing happens`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      test.should.be.equal(<span class=\"string\">'NBA, where amazing happens'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Destructuring'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'Destructuring Arrays'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> [a, b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      a.should.be.equal(<span class=\"number\">1</span>);</span><br><span class=\"line\">      b.should.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'Destructuring Objects'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> luke = &#123;<span class=\"attr\">occupation</span>: <span class=\"string\">'jeki'</span>, <span class=\"attr\">father</span>: <span class=\"string\">'anakin'</span>&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;occupation, father&#125; = luke;</span><br><span class=\"line\"></span><br><span class=\"line\">      occupation.should.be.equal(<span class=\"string\">'jeki'</span>);</span><br><span class=\"line\">      father.should.be.equal(<span class=\"string\">'anakin'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'Default Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTwoNumbers</span>(<span class=\"params\">x=<span class=\"number\">0</span>, y=<span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      addTwoNumbers(<span class=\"number\">2</span>, <span class=\"number\">4</span>).should.be.equal(<span class=\"number\">6</span>);</span><br><span class=\"line\">      addTwoNumbers(<span class=\"number\">2</span>).should.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">      addTwoNumbers().should.be.equal(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'Rest Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">joinArguments</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> args.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      joinArguments(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>).should.be.equal(<span class=\"string\">'ab'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'Named Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeCanvas</span>(<span class=\"params\">&#123; height=<span class=\"number\">600</span>, width=<span class=\"number\">400</span>, lineStroke=<span class=\"string\">'black'</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'height:'</span> + height + <span class=\"string\">';'</span> + <span class=\"string\">'width:'</span> + width + <span class=\"string\">';'</span> + <span class=\"string\">'lineStroke:'</span> + lineStroke;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      initializeCanvas(&#123;<span class=\"attr\">height</span>: <span class=\"number\">100</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span>, <span class=\"attr\">lineStroke</span>: <span class=\"string\">'black'</span>&#125;).should.be.equal(<span class=\"string\">'height:100;width:100;lineStroke:black'</span>);</span><br><span class=\"line\">      initializeCanvas(&#123;<span class=\"attr\">height</span>: <span class=\"number\">100</span>, <span class=\"attr\">lineStroke</span>: <span class=\"string\">'black'</span>&#125;).should.be.equal(<span class=\"string\">'height:100;width:400;lineStroke:black'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Spread Operator'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'pass an array of values to be used as parameters to a function'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.max(...[<span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">9001</span>, <span class=\"number\">-32</span>]).should.be.equal(<span class=\"number\">9001</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'concat array literals'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cities = [<span class=\"string\">'San Francisco'</span>, <span class=\"string\">'Los Angeles'</span>];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> places = [<span class=\"string\">'Miami'</span>, ...cities, <span class=\"string\">'Chicago'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      places.length.should.be.equal(<span class=\"number\">4</span>);</span><br><span class=\"line\">      places[<span class=\"number\">1</span>].should.be.equal(<span class=\"string\">'San Francisco'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Maps'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'set, get, search'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">      map.set(<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      map.get(<span class=\"string\">'name'</span>).should.be.equal(<span class=\"string\">'david'</span>);</span><br><span class=\"line\">      map.has(<span class=\"string\">'name'</span>).should.be.equal(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'use any type as a key'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> typeStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">        [<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>],</span><br><span class=\"line\">        [<span class=\"literal\">true</span>, <span class=\"string\">'false'</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">        [&#123;&#125;, <span class=\"string\">'object'</span>],</span><br><span class=\"line\">        [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"string\">'function'</span>]</span><br><span class=\"line\">      ]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> map.keys()) &#123;</span><br><span class=\"line\">        typeStr += <span class=\"keyword\">typeof</span> key + <span class=\"string\">'|'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      typeStr.should.be.equal(<span class=\"string\">'string|boolean|number|object|function|'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'.entries()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> resultStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">        [<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>],</span><br><span class=\"line\">        [<span class=\"string\">'age'</span>, <span class=\"string\">'24'</span>]</span><br><span class=\"line\">      ]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map.entries()) &#123;</span><br><span class=\"line\">        resultStr += key + <span class=\"string\">': '</span> + value + <span class=\"string\">'|'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      resultStr.should.be.equal(<span class=\"string\">'name: david|age: 24|'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><p><img src=\"http://chuantu.biz/t5/14/1467467341x2918528194.png\" alt=\"unit test result\"></p>\n"},{"title":"【项目】文章分享平台","_content":"\n在平时的工作中，主要是通过群聊天来分析文章，随着聊天记录越来越多，分享文章的链接如果没有保存，那就基本上被刷掉了，要找回之前的链接就得去翻聊天记录，非常麻烦。那么，怎么解决这个问题，让有用的文章沉淀下来呢？\n\n> 做一个文章分享平台。\n\n这就是做这个平台的初衷。\n\n让组内的成员把平时看过的好文章，分享到平台上，并且写上自己的笔记或者是评价，这对于其他同事来说可能是一件有帮助的事情，对于新人来说更是如此。只有把知识流动起来，才能实现最大程度的共同成长。\n\n主要的技术栈：\n\n>  koa2 + mongodb + vue + elementUI\n\n项目地址：[文章分享平台][1]\n\n[1]:\thttps://polar-journey-84008.herokuapp.com/","source":"_posts/2016-12-19-share.md","raw":"---\ntitle: 【项目】文章分享平台\ncategories: 作品\n---\n\n在平时的工作中，主要是通过群聊天来分析文章，随着聊天记录越来越多，分享文章的链接如果没有保存，那就基本上被刷掉了，要找回之前的链接就得去翻聊天记录，非常麻烦。那么，怎么解决这个问题，让有用的文章沉淀下来呢？\n\n> 做一个文章分享平台。\n\n这就是做这个平台的初衷。\n\n让组内的成员把平时看过的好文章，分享到平台上，并且写上自己的笔记或者是评价，这对于其他同事来说可能是一件有帮助的事情，对于新人来说更是如此。只有把知识流动起来，才能实现最大程度的共同成长。\n\n主要的技术栈：\n\n>  koa2 + mongodb + vue + elementUI\n\n项目地址：[文章分享平台][1]\n\n[1]:\thttps://polar-journey-84008.herokuapp.com/","slug":"2016-12-19-share","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicax002dfson9twb39rl","content":"<p>在平时的工作中，主要是通过群聊天来分析文章，随着聊天记录越来越多，分享文章的链接如果没有保存，那就基本上被刷掉了，要找回之前的链接就得去翻聊天记录，非常麻烦。那么，怎么解决这个问题，让有用的文章沉淀下来呢？</p>\n<blockquote>\n<p>做一个文章分享平台。</p>\n</blockquote>\n<p>这就是做这个平台的初衷。</p>\n<p>让组内的成员把平时看过的好文章，分享到平台上，并且写上自己的笔记或者是评价，这对于其他同事来说可能是一件有帮助的事情，对于新人来说更是如此。只有把知识流动起来，才能实现最大程度的共同成长。</p>\n<p>主要的技术栈：</p>\n<blockquote>\n<p> koa2 + mongodb + vue + elementUI</p>\n</blockquote>\n<p>项目地址：<a href=\"https://polar-journey-84008.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">文章分享平台</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在平时的工作中，主要是通过群聊天来分析文章，随着聊天记录越来越多，分享文章的链接如果没有保存，那就基本上被刷掉了，要找回之前的链接就得去翻聊天记录，非常麻烦。那么，怎么解决这个问题，让有用的文章沉淀下来呢？</p>\n<blockquote>\n<p>做一个文章分享平台。</p>\n</blockquote>\n<p>这就是做这个平台的初衷。</p>\n<p>让组内的成员把平时看过的好文章，分享到平台上，并且写上自己的笔记或者是评价，这对于其他同事来说可能是一件有帮助的事情，对于新人来说更是如此。只有把知识流动起来，才能实现最大程度的共同成长。</p>\n<p>主要的技术栈：</p>\n<blockquote>\n<p> koa2 + mongodb + vue + elementUI</p>\n</blockquote>\n<p>项目地址：<a href=\"https://polar-journey-84008.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">文章分享平台</a></p>\n"},{"title":"【错误】ApplicationRecord","_content":"\n新建model时，默认的代码是长这个样子的\n\n```ruby\nclass Group < ApplicationRecord\nend\n```\n\n经常忘记把`ApplicationRecord`改成`ActiveRecord::Base`，同样的错误，犯了2-3次，所以还是把错误记录下来，以免将来再犯。","source":"_posts/2016-12-21-applicationRecord-error.md","raw":"---\ntitle: 【错误】ApplicationRecord\ncategories: 全栈营\n\n---\n\n新建model时，默认的代码是长这个样子的\n\n```ruby\nclass Group < ApplicationRecord\nend\n```\n\n经常忘记把`ApplicationRecord`改成`ActiveRecord::Base`，同样的错误，犯了2-3次，所以还是把错误记录下来，以免将来再犯。","slug":"2016-12-21-applicationRecord-error","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicaz002gfsonpg1fxrj0","content":"<p>新建model时，默认的代码是长这个样子的</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span> &lt; ApplicationRecord</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>经常忘记把<code>ApplicationRecord</code>改成<code>ActiveRecord::Base</code>，同样的错误，犯了2-3次，所以还是把错误记录下来，以免将来再犯。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>新建model时，默认的代码是长这个样子的</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span> &lt; ApplicationRecord</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>经常忘记把<code>ApplicationRecord</code>改成<code>ActiveRecord::Base</code>，同样的错误，犯了2-3次，所以还是把错误记录下来，以免将来再犯。</p>\n"},{"title":"函数式编程","_content":"\n## 什么是函数式编程？\n\n首先说说什么是编程范式，它指的是计算机编程的基本风格或典范模式。打个比喻，如果说每个编程者都在创造一个虚拟世界，那么编程范式就是他们所采用的世界观和方法论。常见的编程范式有两种：面向过程编程（C）和面向对象编程（C++，JAVA）。\n\n函数式编程是一种编程范性，它有如下特点：\n\n- 函数是有确定性输出的（也就是维基百科上面所说的：避免使用程序状态以及易变对象）。\n- 使用函数进行编程（恩，貌似是废话^\\_^）。\n- 可以接受函数当作输入和输出（函数可以作为参数，也可以作为返回值）。\n- 强调执行的结果而非执行的过程（比如这个函数 getUserInfo 就是针对结果的，我只关注这个函数需要什么参数，以及它会返回什么 ）。\n- 倡导利用若干简单的执行单元让计算结果不断渐进，逐层推到复杂的运算，而不是设计一个复杂的执行过程。（循序渐进，不要一口气吃成一个大胖子）。\n\n## 基本要求\n\n- 函数是一等公民（函数可以作为参数，也可以作为返回值，也可以把函数赋给变量）。\n- 函数没有副作用、不修改状态。\n- 参数、对象不可变。\n- 只用表达式，不用语句。\n- 不鼓励使用this\n\n## 种类\n\n### 普通函数\n\n```javascript\ny = f(x)\n```\n\n![][image-1]\n\n将一个输入（x）隐射到一个输出（y）上。\n\n### 隐射函数（map）\n\n```javascript\ny = map(f, x)\n```\n\n![][image-2]\n\n将一组输入映射到一组输出上。\n\n如果用面向过程编程来写的话就要分别执行3次f函数：\n\n```javascript\nx1 = f(y1)\nx2 = f(y2)\nx3 = f(y3)\n```\n\n### 组合函数（compose）\n\n```javascript\nz = h(g(x))\n```\n\n设：z = f(x)，则\n\n```javascript\nf = compose(h, g)\n```\n\nh就好比是工厂里面的一条生产流水线，而g和h是流水线上的两道工序。\n\n![][image-3]\n\n组合函数实例：\n\n```javascript\nfunction compose() {\n  var fns = arguments\n  return function (result) {\n    for (var i = fns.length - 1; i >= 0; i--) {\n      result = fns[i](result)\n    }\n    return result\n  }\n}\n\nfunction a(x) {\n  return x + 'a'\n}\n\nfunction b(x) {\n  return x + 'b'\n}\n\nconst add_ab = compose(b, a)\nconst str = add_ab('')\nconsole.log(str) // 'ab'\n```\n\n### 隐射 + 组合\n\n```javascript\nz = map(compose(h, g), x)\n```\n\n![][image-4]\n\n### 柯里化（currify）\n\n柯里化的函数：可以固定一部分参数的函数。\n\n```javascript\nz = h(c, y)\n```\n\n当c为定值时 z = f(y)\n\n```javascript\nh = currify(h) // 柯里话之后的函数h，接受一个固定参数c，并返回一个新的函数\nf = h(c)\n```\n\n![][image-5]\n\ncurrify函数实例：\n\n```javascript\nfunction curry(f) {\n  return function (...a) {\n    if (a.length < f.length) {\n      return function (...b) {\n        return f(...a, ...b)\n      }\n    } else {\n      return f(...a)\n    }\n  }\n}\n\nconst foo = curry(function (a, b, c, d) {\n  return a*b + c*d\n})\n\nconsole.log(foo(1, 2, 3, 4)) // 14\nconst bar = foo(1, 2)\nconsole.log(bar(3, 4)) // 14\n```\n\n### 隐射 + 组合 + 柯里化\n\n```javascript\nz = map(compose(furrify(h)(c), g), x)\n```\n\n![][image-6]\n\n### filter\n\n```javascript\nz = map(compose(h(c), g), filter(x))\n```\n\n通过filter函数过滤掉特定的输入。\n\n![][image-7]\n\n### 总结\n\n```javascript\ny = f(x)\n```\n\nf函数就是各种其他函数的组合和变形\n\n![][image-8]\n\n## 高阶函数\n\n接受一个或多个函数作为参数，返回一个新的函数。\n\n## 什么是纯函数？\n\n纯函数指的是确定输入能得到确定输出的函数，举个例子\n\n```javascript\nvar minimum = 21\n\n// 非纯函数，输出受到外部变量（minimum）的影响，同一个输入可能得到不同的输出\nfunction checkAge(age) {\n  return age >= minimum\n}\n\nminimum = 50\n\n// 纯函数，确定输入得到确定输出\nfunction checkAge(minimum, age) {\n  return age >= minimum\n}\n```\n\n纯函数有什么好处呢？\n\n- 确定性/可缓存性\n- 自文档化\n- 可测试性\n- 可序列化远程执行\n- 无锁/并行\n\n## 什么是副作用\n\n副作用就是做了与处理输入输出之外的一些事情，常见的有以下场景：\n\n- 更改文件系统\n- 访问系统状态\n- 往数据库插入记录\n- 发送一个http请求\n- 可变数据\n- 打印/log\n- 获取用户输入\n- DOM查询\n\n当然，上面这些操作是必不可少的，我们要做的就是将副作用的影响降到最低，或者是明确地在某一些地方使用这个操作。\n\nPS：npm 有个库叫作[Immutable][1]，可以创建一个不可更改的数据，已减少副作用。\n\n## 一个很重要原则\n\n**尽可能**将纯函数（图中的f，g，也就是有确定性输入和输出的函数）集中在一起，不要和有副作用（不确定性）的函数混合在一起。\n\n![][image-9]\n\n## 与面向过程式编程的比较\n\n- for loop 对应 map，forEach。\n- if else 对应 filter。\n- 各种运算符，对应各种函数。\n- 变量对应参数和返回值，理论上没有变量。\n\n[1]:\thttps://github.com/facebook/immutable-js\n\n[image-1]:\thttp://ww1.sinaimg.cn/large/801b780ajw1f84lcsj027j20cl02bjrc.jpg\n[image-2]:\thttp://ww2.sinaimg.cn/large/801b780ajw1f84lffn529j20ch07n74t.jpg\n[image-3]:\thttp://ww3.sinaimg.cn/large/801b780ajw1f84lo0y7q7j20ke028q30.jpg\n[image-4]:\thttp://ww4.sinaimg.cn/large/801b780ajw1f84lpe8qnrj20l70940tr.jpg\n[image-5]:\thttp://ww2.sinaimg.cn/large/801b780ajw1f84lrce3jtj20sh0bf0th.jpg\n[image-6]:\thttp://ww3.sinaimg.cn/large/801b780ajw1f84m3nyl17j20l90cg3zt.jpg\n[image-7]:\thttp://ww1.sinaimg.cn/large/801b780ajw1f84m6rchlqj20se0cigmx.jpg\n[image-8]:\thttp://ww1.sinaimg.cn/large/801b780ajw1f84m9zypkdj20la08q0tb.jpg\n[image-9]:\thttp://ww3.sinaimg.cn/large/801b780ajw1f84mdl00pfj20x208tt9y.jpg","source":"_posts/2016-12-21-functional_programming.md","raw":"---\ntitle: 函数式编程\ncategories: Javascript\ntags: 函数式编程\n---\n\n## 什么是函数式编程？\n\n首先说说什么是编程范式，它指的是计算机编程的基本风格或典范模式。打个比喻，如果说每个编程者都在创造一个虚拟世界，那么编程范式就是他们所采用的世界观和方法论。常见的编程范式有两种：面向过程编程（C）和面向对象编程（C++，JAVA）。\n\n函数式编程是一种编程范性，它有如下特点：\n\n- 函数是有确定性输出的（也就是维基百科上面所说的：避免使用程序状态以及易变对象）。\n- 使用函数进行编程（恩，貌似是废话^\\_^）。\n- 可以接受函数当作输入和输出（函数可以作为参数，也可以作为返回值）。\n- 强调执行的结果而非执行的过程（比如这个函数 getUserInfo 就是针对结果的，我只关注这个函数需要什么参数，以及它会返回什么 ）。\n- 倡导利用若干简单的执行单元让计算结果不断渐进，逐层推到复杂的运算，而不是设计一个复杂的执行过程。（循序渐进，不要一口气吃成一个大胖子）。\n\n## 基本要求\n\n- 函数是一等公民（函数可以作为参数，也可以作为返回值，也可以把函数赋给变量）。\n- 函数没有副作用、不修改状态。\n- 参数、对象不可变。\n- 只用表达式，不用语句。\n- 不鼓励使用this\n\n## 种类\n\n### 普通函数\n\n```javascript\ny = f(x)\n```\n\n![][image-1]\n\n将一个输入（x）隐射到一个输出（y）上。\n\n### 隐射函数（map）\n\n```javascript\ny = map(f, x)\n```\n\n![][image-2]\n\n将一组输入映射到一组输出上。\n\n如果用面向过程编程来写的话就要分别执行3次f函数：\n\n```javascript\nx1 = f(y1)\nx2 = f(y2)\nx3 = f(y3)\n```\n\n### 组合函数（compose）\n\n```javascript\nz = h(g(x))\n```\n\n设：z = f(x)，则\n\n```javascript\nf = compose(h, g)\n```\n\nh就好比是工厂里面的一条生产流水线，而g和h是流水线上的两道工序。\n\n![][image-3]\n\n组合函数实例：\n\n```javascript\nfunction compose() {\n  var fns = arguments\n  return function (result) {\n    for (var i = fns.length - 1; i >= 0; i--) {\n      result = fns[i](result)\n    }\n    return result\n  }\n}\n\nfunction a(x) {\n  return x + 'a'\n}\n\nfunction b(x) {\n  return x + 'b'\n}\n\nconst add_ab = compose(b, a)\nconst str = add_ab('')\nconsole.log(str) // 'ab'\n```\n\n### 隐射 + 组合\n\n```javascript\nz = map(compose(h, g), x)\n```\n\n![][image-4]\n\n### 柯里化（currify）\n\n柯里化的函数：可以固定一部分参数的函数。\n\n```javascript\nz = h(c, y)\n```\n\n当c为定值时 z = f(y)\n\n```javascript\nh = currify(h) // 柯里话之后的函数h，接受一个固定参数c，并返回一个新的函数\nf = h(c)\n```\n\n![][image-5]\n\ncurrify函数实例：\n\n```javascript\nfunction curry(f) {\n  return function (...a) {\n    if (a.length < f.length) {\n      return function (...b) {\n        return f(...a, ...b)\n      }\n    } else {\n      return f(...a)\n    }\n  }\n}\n\nconst foo = curry(function (a, b, c, d) {\n  return a*b + c*d\n})\n\nconsole.log(foo(1, 2, 3, 4)) // 14\nconst bar = foo(1, 2)\nconsole.log(bar(3, 4)) // 14\n```\n\n### 隐射 + 组合 + 柯里化\n\n```javascript\nz = map(compose(furrify(h)(c), g), x)\n```\n\n![][image-6]\n\n### filter\n\n```javascript\nz = map(compose(h(c), g), filter(x))\n```\n\n通过filter函数过滤掉特定的输入。\n\n![][image-7]\n\n### 总结\n\n```javascript\ny = f(x)\n```\n\nf函数就是各种其他函数的组合和变形\n\n![][image-8]\n\n## 高阶函数\n\n接受一个或多个函数作为参数，返回一个新的函数。\n\n## 什么是纯函数？\n\n纯函数指的是确定输入能得到确定输出的函数，举个例子\n\n```javascript\nvar minimum = 21\n\n// 非纯函数，输出受到外部变量（minimum）的影响，同一个输入可能得到不同的输出\nfunction checkAge(age) {\n  return age >= minimum\n}\n\nminimum = 50\n\n// 纯函数，确定输入得到确定输出\nfunction checkAge(minimum, age) {\n  return age >= minimum\n}\n```\n\n纯函数有什么好处呢？\n\n- 确定性/可缓存性\n- 自文档化\n- 可测试性\n- 可序列化远程执行\n- 无锁/并行\n\n## 什么是副作用\n\n副作用就是做了与处理输入输出之外的一些事情，常见的有以下场景：\n\n- 更改文件系统\n- 访问系统状态\n- 往数据库插入记录\n- 发送一个http请求\n- 可变数据\n- 打印/log\n- 获取用户输入\n- DOM查询\n\n当然，上面这些操作是必不可少的，我们要做的就是将副作用的影响降到最低，或者是明确地在某一些地方使用这个操作。\n\nPS：npm 有个库叫作[Immutable][1]，可以创建一个不可更改的数据，已减少副作用。\n\n## 一个很重要原则\n\n**尽可能**将纯函数（图中的f，g，也就是有确定性输入和输出的函数）集中在一起，不要和有副作用（不确定性）的函数混合在一起。\n\n![][image-9]\n\n## 与面向过程式编程的比较\n\n- for loop 对应 map，forEach。\n- if else 对应 filter。\n- 各种运算符，对应各种函数。\n- 变量对应参数和返回值，理论上没有变量。\n\n[1]:\thttps://github.com/facebook/immutable-js\n\n[image-1]:\thttp://ww1.sinaimg.cn/large/801b780ajw1f84lcsj027j20cl02bjrc.jpg\n[image-2]:\thttp://ww2.sinaimg.cn/large/801b780ajw1f84lffn529j20ch07n74t.jpg\n[image-3]:\thttp://ww3.sinaimg.cn/large/801b780ajw1f84lo0y7q7j20ke028q30.jpg\n[image-4]:\thttp://ww4.sinaimg.cn/large/801b780ajw1f84lpe8qnrj20l70940tr.jpg\n[image-5]:\thttp://ww2.sinaimg.cn/large/801b780ajw1f84lrce3jtj20sh0bf0th.jpg\n[image-6]:\thttp://ww3.sinaimg.cn/large/801b780ajw1f84m3nyl17j20l90cg3zt.jpg\n[image-7]:\thttp://ww1.sinaimg.cn/large/801b780ajw1f84m6rchlqj20se0cigmx.jpg\n[image-8]:\thttp://ww1.sinaimg.cn/large/801b780ajw1f84m9zypkdj20la08q0tb.jpg\n[image-9]:\thttp://ww3.sinaimg.cn/large/801b780ajw1f84mdl00pfj20x208tt9y.jpg","slug":"2016-12-21-functional_programming","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicb1002jfsonx48wud4l","content":"<h2 id=\"什么是函数式编程？\"><a href=\"#什么是函数式编程？\" class=\"headerlink\" title=\"什么是函数式编程？\"></a>什么是函数式编程？</h2><p>首先说说什么是编程范式，它指的是计算机编程的基本风格或典范模式。打个比喻，如果说每个编程者都在创造一个虚拟世界，那么编程范式就是他们所采用的世界观和方法论。常见的编程范式有两种：面向过程编程（C）和面向对象编程（C++，JAVA）。</p>\n<p>函数式编程是一种编程范性，它有如下特点：</p>\n<ul>\n<li>函数是有确定性输出的（也就是维基百科上面所说的：避免使用程序状态以及易变对象）。</li>\n<li>使用函数进行编程（恩，貌似是废话^_^）。</li>\n<li>可以接受函数当作输入和输出（函数可以作为参数，也可以作为返回值）。</li>\n<li>强调执行的结果而非执行的过程（比如这个函数 getUserInfo 就是针对结果的，我只关注这个函数需要什么参数，以及它会返回什么 ）。</li>\n<li>倡导利用若干简单的执行单元让计算结果不断渐进，逐层推到复杂的运算，而不是设计一个复杂的执行过程。（循序渐进，不要一口气吃成一个大胖子）。</li>\n</ul>\n<h2 id=\"基本要求\"><a href=\"#基本要求\" class=\"headerlink\" title=\"基本要求\"></a>基本要求</h2><ul>\n<li>函数是一等公民（函数可以作为参数，也可以作为返回值，也可以把函数赋给变量）。</li>\n<li>函数没有副作用、不修改状态。</li>\n<li>参数、对象不可变。</li>\n<li>只用表达式，不用语句。</li>\n<li>不鼓励使用this</li>\n</ul>\n<h2 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h2><h3 id=\"普通函数\"><a href=\"#普通函数\" class=\"headerlink\" title=\"普通函数\"></a>普通函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = f(x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780ajw1f84lcsj027j20cl02bjrc.jpg\" alt=\"\"></p>\n<p>将一个输入（x）隐射到一个输出（y）上。</p>\n<h3 id=\"隐射函数（map）\"><a href=\"#隐射函数（map）\" class=\"headerlink\" title=\"隐射函数（map）\"></a>隐射函数（map）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = map(f, x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww2.sinaimg.cn/large/801b780ajw1f84lffn529j20ch07n74t.jpg\" alt=\"\"></p>\n<p>将一组输入映射到一组输出上。</p>\n<p>如果用面向过程编程来写的话就要分别执行3次f函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1 = f(y1)</span><br><span class=\"line\">x2 = f(y2)</span><br><span class=\"line\">x3 = f(y3)</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合函数（compose）\"><a href=\"#组合函数（compose）\" class=\"headerlink\" title=\"组合函数（compose）\"></a>组合函数（compose）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = h(g(x))</span><br></pre></td></tr></table></figure>\n<p>设：z = f(x)，则</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = compose(h, g)</span><br></pre></td></tr></table></figure>\n<p>h就好比是工厂里面的一条生产流水线，而g和h是流水线上的两道工序。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780ajw1f84lo0y7q7j20ke028q30.jpg\" alt=\"\"></p>\n<p>组合函数实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fns = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = fns.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      result = fns[i](result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"string\">'a'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"string\">'b'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> add_ab = compose(b, a)</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = add_ab(<span class=\"string\">''</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str) <span class=\"comment\">// 'ab'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"隐射-组合\"><a href=\"#隐射-组合\" class=\"headerlink\" title=\"隐射 + 组合\"></a>隐射 + 组合</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = map(compose(h, g), x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww4.sinaimg.cn/large/801b780ajw1f84lpe8qnrj20l70940tr.jpg\" alt=\"\"></p>\n<h3 id=\"柯里化（currify）\"><a href=\"#柯里化（currify）\" class=\"headerlink\" title=\"柯里化（currify）\"></a>柯里化（currify）</h3><p>柯里化的函数：可以固定一部分参数的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = h(c, y)</span><br></pre></td></tr></table></figure>\n<p>当c为定值时 z = f(y)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h = currify(h) <span class=\"comment\">// 柯里话之后的函数h，接受一个固定参数c，并返回一个新的函数</span></span><br><span class=\"line\">f = h(c)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww2.sinaimg.cn/large/801b780ajw1f84lrce3jtj20sh0bf0th.jpg\" alt=\"\"></p>\n<p>currify函数实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.length &lt; f.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(...a, ...b)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> f(...a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = curry(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a*b + c*d</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// 14</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar(<span class=\"number\">3</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// 14</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"隐射-组合-柯里化\"><a href=\"#隐射-组合-柯里化\" class=\"headerlink\" title=\"隐射 + 组合 + 柯里化\"></a>隐射 + 组合 + 柯里化</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = map(compose(furrify(h)(c), g), x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780ajw1f84m3nyl17j20l90cg3zt.jpg\" alt=\"\"></p>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = map(compose(h(c), g), filter(x))</span><br></pre></td></tr></table></figure>\n<p>通过filter函数过滤掉特定的输入。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780ajw1f84m6rchlqj20se0cigmx.jpg\" alt=\"\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = f(x)</span><br></pre></td></tr></table></figure>\n<p>f函数就是各种其他函数的组合和变形</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780ajw1f84m9zypkdj20la08q0tb.jpg\" alt=\"\"></p>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p>接受一个或多个函数作为参数，返回一个新的函数。</p>\n<h2 id=\"什么是纯函数？\"><a href=\"#什么是纯函数？\" class=\"headerlink\" title=\"什么是纯函数？\"></a>什么是纯函数？</h2><p>纯函数指的是确定输入能得到确定输出的函数，举个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minimum = <span class=\"number\">21</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非纯函数，输出受到外部变量（minimum）的影响，同一个输入可能得到不同的输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAge</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= minimum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">minimum = <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 纯函数，确定输入得到确定输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAge</span>(<span class=\"params\">minimum, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= minimum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>纯函数有什么好处呢？</p>\n<ul>\n<li>确定性/可缓存性</li>\n<li>自文档化</li>\n<li>可测试性</li>\n<li>可序列化远程执行</li>\n<li>无锁/并行</li>\n</ul>\n<h2 id=\"什么是副作用\"><a href=\"#什么是副作用\" class=\"headerlink\" title=\"什么是副作用\"></a>什么是副作用</h2><p>副作用就是做了与处理输入输出之外的一些事情，常见的有以下场景：</p>\n<ul>\n<li>更改文件系统</li>\n<li>访问系统状态</li>\n<li>往数据库插入记录</li>\n<li>发送一个http请求</li>\n<li>可变数据</li>\n<li>打印/log</li>\n<li>获取用户输入</li>\n<li>DOM查询</li>\n</ul>\n<p>当然，上面这些操作是必不可少的，我们要做的就是将副作用的影响降到最低，或者是明确地在某一些地方使用这个操作。</p>\n<p>PS：npm 有个库叫作<a href=\"https://github.com/facebook/immutable-js\" target=\"_blank\" rel=\"noopener\">Immutable</a>，可以创建一个不可更改的数据，已减少副作用。</p>\n<h2 id=\"一个很重要原则\"><a href=\"#一个很重要原则\" class=\"headerlink\" title=\"一个很重要原则\"></a>一个很重要原则</h2><p><strong>尽可能</strong>将纯函数（图中的f，g，也就是有确定性输入和输出的函数）集中在一起，不要和有副作用（不确定性）的函数混合在一起。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780ajw1f84mdl00pfj20x208tt9y.jpg\" alt=\"\"></p>\n<h2 id=\"与面向过程式编程的比较\"><a href=\"#与面向过程式编程的比较\" class=\"headerlink\" title=\"与面向过程式编程的比较\"></a>与面向过程式编程的比较</h2><ul>\n<li>for loop 对应 map，forEach。</li>\n<li>if else 对应 filter。</li>\n<li>各种运算符，对应各种函数。</li>\n<li>变量对应参数和返回值，理论上没有变量。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是函数式编程？\"><a href=\"#什么是函数式编程？\" class=\"headerlink\" title=\"什么是函数式编程？\"></a>什么是函数式编程？</h2><p>首先说说什么是编程范式，它指的是计算机编程的基本风格或典范模式。打个比喻，如果说每个编程者都在创造一个虚拟世界，那么编程范式就是他们所采用的世界观和方法论。常见的编程范式有两种：面向过程编程（C）和面向对象编程（C++，JAVA）。</p>\n<p>函数式编程是一种编程范性，它有如下特点：</p>\n<ul>\n<li>函数是有确定性输出的（也就是维基百科上面所说的：避免使用程序状态以及易变对象）。</li>\n<li>使用函数进行编程（恩，貌似是废话^_^）。</li>\n<li>可以接受函数当作输入和输出（函数可以作为参数，也可以作为返回值）。</li>\n<li>强调执行的结果而非执行的过程（比如这个函数 getUserInfo 就是针对结果的，我只关注这个函数需要什么参数，以及它会返回什么 ）。</li>\n<li>倡导利用若干简单的执行单元让计算结果不断渐进，逐层推到复杂的运算，而不是设计一个复杂的执行过程。（循序渐进，不要一口气吃成一个大胖子）。</li>\n</ul>\n<h2 id=\"基本要求\"><a href=\"#基本要求\" class=\"headerlink\" title=\"基本要求\"></a>基本要求</h2><ul>\n<li>函数是一等公民（函数可以作为参数，也可以作为返回值，也可以把函数赋给变量）。</li>\n<li>函数没有副作用、不修改状态。</li>\n<li>参数、对象不可变。</li>\n<li>只用表达式，不用语句。</li>\n<li>不鼓励使用this</li>\n</ul>\n<h2 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h2><h3 id=\"普通函数\"><a href=\"#普通函数\" class=\"headerlink\" title=\"普通函数\"></a>普通函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = f(x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780ajw1f84lcsj027j20cl02bjrc.jpg\" alt=\"\"></p>\n<p>将一个输入（x）隐射到一个输出（y）上。</p>\n<h3 id=\"隐射函数（map）\"><a href=\"#隐射函数（map）\" class=\"headerlink\" title=\"隐射函数（map）\"></a>隐射函数（map）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = map(f, x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww2.sinaimg.cn/large/801b780ajw1f84lffn529j20ch07n74t.jpg\" alt=\"\"></p>\n<p>将一组输入映射到一组输出上。</p>\n<p>如果用面向过程编程来写的话就要分别执行3次f函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1 = f(y1)</span><br><span class=\"line\">x2 = f(y2)</span><br><span class=\"line\">x3 = f(y3)</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合函数（compose）\"><a href=\"#组合函数（compose）\" class=\"headerlink\" title=\"组合函数（compose）\"></a>组合函数（compose）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = h(g(x))</span><br></pre></td></tr></table></figure>\n<p>设：z = f(x)，则</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = compose(h, g)</span><br></pre></td></tr></table></figure>\n<p>h就好比是工厂里面的一条生产流水线，而g和h是流水线上的两道工序。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780ajw1f84lo0y7q7j20ke028q30.jpg\" alt=\"\"></p>\n<p>组合函数实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fns = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = fns.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      result = fns[i](result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"string\">'a'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"string\">'b'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> add_ab = compose(b, a)</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = add_ab(<span class=\"string\">''</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str) <span class=\"comment\">// 'ab'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"隐射-组合\"><a href=\"#隐射-组合\" class=\"headerlink\" title=\"隐射 + 组合\"></a>隐射 + 组合</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = map(compose(h, g), x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww4.sinaimg.cn/large/801b780ajw1f84lpe8qnrj20l70940tr.jpg\" alt=\"\"></p>\n<h3 id=\"柯里化（currify）\"><a href=\"#柯里化（currify）\" class=\"headerlink\" title=\"柯里化（currify）\"></a>柯里化（currify）</h3><p>柯里化的函数：可以固定一部分参数的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = h(c, y)</span><br></pre></td></tr></table></figure>\n<p>当c为定值时 z = f(y)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h = currify(h) <span class=\"comment\">// 柯里话之后的函数h，接受一个固定参数c，并返回一个新的函数</span></span><br><span class=\"line\">f = h(c)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww2.sinaimg.cn/large/801b780ajw1f84lrce3jtj20sh0bf0th.jpg\" alt=\"\"></p>\n<p>currify函数实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.length &lt; f.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(...a, ...b)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> f(...a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = curry(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a*b + c*d</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// 14</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar(<span class=\"number\">3</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// 14</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"隐射-组合-柯里化\"><a href=\"#隐射-组合-柯里化\" class=\"headerlink\" title=\"隐射 + 组合 + 柯里化\"></a>隐射 + 组合 + 柯里化</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = map(compose(furrify(h)(c), g), x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780ajw1f84m3nyl17j20l90cg3zt.jpg\" alt=\"\"></p>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = map(compose(h(c), g), filter(x))</span><br></pre></td></tr></table></figure>\n<p>通过filter函数过滤掉特定的输入。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780ajw1f84m6rchlqj20se0cigmx.jpg\" alt=\"\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = f(x)</span><br></pre></td></tr></table></figure>\n<p>f函数就是各种其他函数的组合和变形</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780ajw1f84m9zypkdj20la08q0tb.jpg\" alt=\"\"></p>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p>接受一个或多个函数作为参数，返回一个新的函数。</p>\n<h2 id=\"什么是纯函数？\"><a href=\"#什么是纯函数？\" class=\"headerlink\" title=\"什么是纯函数？\"></a>什么是纯函数？</h2><p>纯函数指的是确定输入能得到确定输出的函数，举个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minimum = <span class=\"number\">21</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非纯函数，输出受到外部变量（minimum）的影响，同一个输入可能得到不同的输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAge</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= minimum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">minimum = <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 纯函数，确定输入得到确定输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAge</span>(<span class=\"params\">minimum, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= minimum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>纯函数有什么好处呢？</p>\n<ul>\n<li>确定性/可缓存性</li>\n<li>自文档化</li>\n<li>可测试性</li>\n<li>可序列化远程执行</li>\n<li>无锁/并行</li>\n</ul>\n<h2 id=\"什么是副作用\"><a href=\"#什么是副作用\" class=\"headerlink\" title=\"什么是副作用\"></a>什么是副作用</h2><p>副作用就是做了与处理输入输出之外的一些事情，常见的有以下场景：</p>\n<ul>\n<li>更改文件系统</li>\n<li>访问系统状态</li>\n<li>往数据库插入记录</li>\n<li>发送一个http请求</li>\n<li>可变数据</li>\n<li>打印/log</li>\n<li>获取用户输入</li>\n<li>DOM查询</li>\n</ul>\n<p>当然，上面这些操作是必不可少的，我们要做的就是将副作用的影响降到最低，或者是明确地在某一些地方使用这个操作。</p>\n<p>PS：npm 有个库叫作<a href=\"https://github.com/facebook/immutable-js\" target=\"_blank\" rel=\"noopener\">Immutable</a>，可以创建一个不可更改的数据，已减少副作用。</p>\n<h2 id=\"一个很重要原则\"><a href=\"#一个很重要原则\" class=\"headerlink\" title=\"一个很重要原则\"></a>一个很重要原则</h2><p><strong>尽可能</strong>将纯函数（图中的f，g，也就是有确定性输入和输出的函数）集中在一起，不要和有副作用（不确定性）的函数混合在一起。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780ajw1f84mdl00pfj20x208tt9y.jpg\" alt=\"\"></p>\n<h2 id=\"与面向过程式编程的比较\"><a href=\"#与面向过程式编程的比较\" class=\"headerlink\" title=\"与面向过程式编程的比较\"></a>与面向过程式编程的比较</h2><ul>\n<li>for loop 对应 map，forEach。</li>\n<li>if else 对应 filter。</li>\n<li>各种运算符，对应各种函数。</li>\n<li>变量对应参数和返回值，理论上没有变量。</li>\n</ul>\n"},{"title":"【教程】如何修改最近的提交？","_content":"\n## 问题\n\n有时把代码提交了之后，发现少提交东西了，或者里面有包含错误代码的文件，怎么办？\n\n## 解决方法\n\n如果是少提交东西了，那就执行`git add`添加文件到暂存区。\n\n如果是有提交了错误的代码，那就改成代码，同样地，执行`git add`添加文件到暂存区。\n\n这时候就不能直接运行\n\n```bash\ngit commit -m \"xxx\"\n```\n\n因为这会产生一条新的提交记录。\n\n正确的解法是运行\n\n```bash\ngit commit --amend\n```\n\n然后，你就会进入编辑模式，如果有需要，就可以修改上一次的注释，然后`:wq`退出，再运行`git log`就能看到，以上操作并不会产生新的commit，而是修改上一次commit，done！\n","source":"_posts/2016-12-21-git-amend.md","raw":"---\ntitle: 【教程】如何修改最近的提交？\ncategories: 工具\ntags: [Git]\n---\n\n## 问题\n\n有时把代码提交了之后，发现少提交东西了，或者里面有包含错误代码的文件，怎么办？\n\n## 解决方法\n\n如果是少提交东西了，那就执行`git add`添加文件到暂存区。\n\n如果是有提交了错误的代码，那就改成代码，同样地，执行`git add`添加文件到暂存区。\n\n这时候就不能直接运行\n\n```bash\ngit commit -m \"xxx\"\n```\n\n因为这会产生一条新的提交记录。\n\n正确的解法是运行\n\n```bash\ngit commit --amend\n```\n\n然后，你就会进入编辑模式，如果有需要，就可以修改上一次的注释，然后`:wq`退出，再运行`git log`就能看到，以上操作并不会产生新的commit，而是修改上一次commit，done！\n","slug":"2016-12-21-git-amend","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicb3002lfsonlpxso8bd","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>有时把代码提交了之后，发现少提交东西了，或者里面有包含错误代码的文件，怎么办？</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>如果是少提交东西了，那就执行<code>git add</code>添加文件到暂存区。</p>\n<p>如果是有提交了错误的代码，那就改成代码，同样地，执行<code>git add</code>添加文件到暂存区。</p>\n<p>这时候就不能直接运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"xxx\"</span></span><br></pre></td></tr></table></figure>\n<p>因为这会产生一条新的提交记录。</p>\n<p>正确的解法是运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n<p>然后，你就会进入编辑模式，如果有需要，就可以修改上一次的注释，然后<code>:wq</code>退出，再运行<code>git log</code>就能看到，以上操作并不会产生新的commit，而是修改上一次commit，done！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>有时把代码提交了之后，发现少提交东西了，或者里面有包含错误代码的文件，怎么办？</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>如果是少提交东西了，那就执行<code>git add</code>添加文件到暂存区。</p>\n<p>如果是有提交了错误的代码，那就改成代码，同样地，执行<code>git add</code>添加文件到暂存区。</p>\n<p>这时候就不能直接运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"xxx\"</span></span><br></pre></td></tr></table></figure>\n<p>因为这会产生一条新的提交记录。</p>\n<p>正确的解法是运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n<p>然后，你就会进入编辑模式，如果有需要，就可以修改上一次的注释，然后<code>:wq</code>退出，再运行<code>git log</code>就能看到，以上操作并不会产生新的commit，而是修改上一次commit，done！</p>\n"},{"title":"【教程】为什么在.gitignore设置忽略文件夹无效？","_content":"\n当我不想把某个文件夹提交到git时，可以在`.gitignore`文件中写入要忽略的文件夹。当时我的操作是这样子的，先把所有的文件夹都提交上去，然后才意识到有一个文件夹不应该提交，所以我就在`.gitignore`中写（我要忽略的文件夹是buildfiles）\n\n```\nbuildfiles/\n```\n\n![](http://oggx6lf7f.bkt.clouddn.com/n2v9e.jpg)\n\n然后当我修改buildfiles里面的文件夹时，用`git status`查看git状态，发现里面竟然还有buildfiles的内容！！！我不是忽略它了吗，怎么还有？\n\n![](http://oggx6lf7f.bkt.clouddn.com/820n4.jpg)\n\n后来才知道，**已经提交到git的文件，就会一直存在着，无法没忽略，除非你把它从git上面删除**。于是，我把本地`buildfiles`里面所有的文件都删除，重新提交一遍，之后在添加文件就会自动被git忽略掉了，done！\n","source":"_posts/2016-12-21-git-ignore.md","raw":"---\ntitle: 【教程】为什么在.gitignore设置忽略文件夹无效？\ncategories: 工具\ntags: [Git]\n---\n\n当我不想把某个文件夹提交到git时，可以在`.gitignore`文件中写入要忽略的文件夹。当时我的操作是这样子的，先把所有的文件夹都提交上去，然后才意识到有一个文件夹不应该提交，所以我就在`.gitignore`中写（我要忽略的文件夹是buildfiles）\n\n```\nbuildfiles/\n```\n\n![](http://oggx6lf7f.bkt.clouddn.com/n2v9e.jpg)\n\n然后当我修改buildfiles里面的文件夹时，用`git status`查看git状态，发现里面竟然还有buildfiles的内容！！！我不是忽略它了吗，怎么还有？\n\n![](http://oggx6lf7f.bkt.clouddn.com/820n4.jpg)\n\n后来才知道，**已经提交到git的文件，就会一直存在着，无法没忽略，除非你把它从git上面删除**。于是，我把本地`buildfiles`里面所有的文件都删除，重新提交一遍，之后在添加文件就会自动被git忽略掉了，done！\n","slug":"2016-12-21-git-ignore","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicb5002qfsonhvarmjh2","content":"<p>当我不想把某个文件夹提交到git时，可以在<code>.gitignore</code>文件中写入要忽略的文件夹。当时我的操作是这样子的，先把所有的文件夹都提交上去，然后才意识到有一个文件夹不应该提交，所以我就在<code>.gitignore</code>中写（我要忽略的文件夹是buildfiles）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildfiles/</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/n2v9e.jpg\" alt=\"\"></p>\n<p>然后当我修改buildfiles里面的文件夹时，用<code>git status</code>查看git状态，发现里面竟然还有buildfiles的内容！！！我不是忽略它了吗，怎么还有？</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/820n4.jpg\" alt=\"\"></p>\n<p>后来才知道，<strong>已经提交到git的文件，就会一直存在着，无法没忽略，除非你把它从git上面删除</strong>。于是，我把本地<code>buildfiles</code>里面所有的文件都删除，重新提交一遍，之后在添加文件就会自动被git忽略掉了，done！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当我不想把某个文件夹提交到git时，可以在<code>.gitignore</code>文件中写入要忽略的文件夹。当时我的操作是这样子的，先把所有的文件夹都提交上去，然后才意识到有一个文件夹不应该提交，所以我就在<code>.gitignore</code>中写（我要忽略的文件夹是buildfiles）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildfiles/</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/n2v9e.jpg\" alt=\"\"></p>\n<p>然后当我修改buildfiles里面的文件夹时，用<code>git status</code>查看git状态，发现里面竟然还有buildfiles的内容！！！我不是忽略它了吗，怎么还有？</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/820n4.jpg\" alt=\"\"></p>\n<p>后来才知道，<strong>已经提交到git的文件，就会一直存在着，无法没忽略，除非你把它从git上面删除</strong>。于是，我把本地<code>buildfiles</code>里面所有的文件都删除，重新提交一遍，之后在添加文件就会自动被git忽略掉了，done！</p>\n"},{"title":"【错误】项目上传到heroku之后，访问报错","_content":"\n## 动作\n\n《rails 初级练习》3-14，上传项目到heroku，运行\n\n```bash\n$ heroku create\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n然后访问[项目页面](https://protected-coast-71491.herokuapp.com/)\n\n## 结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/f46bz.jpg)\n\n原因：运行`git status`查看git工作区的状态，发现有文件没有提交\n\n![](http://oggx6lf7f.bkt.clouddn.com/bjkoi.jpg)\n\n## 解决方法\n\n提交文件到heroku，done！\n\n","source":"_posts/2016-12-21-heroku-publish-error.md","raw":"---\ntitle: 【错误】项目上传到heroku之后，访问报错\ncategories: 全栈营\n\n---\n\n## 动作\n\n《rails 初级练习》3-14，上传项目到heroku，运行\n\n```bash\n$ heroku create\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n然后访问[项目页面](https://protected-coast-71491.herokuapp.com/)\n\n## 结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/f46bz.jpg)\n\n原因：运行`git status`查看git工作区的状态，发现有文件没有提交\n\n![](http://oggx6lf7f.bkt.clouddn.com/bjkoi.jpg)\n\n## 解决方法\n\n提交文件到heroku，done！\n\n","slug":"2016-12-21-heroku-publish-error","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicb7002tfsong9gm8phi","content":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>《rails 初级练习》3-14，上传项目到heroku，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ heroku create</span><br><span class=\"line\">$ git push heroku master</span><br><span class=\"line\">$ heroku run rake db:migrate</span><br></pre></td></tr></table></figure>\n<p>然后访问<a href=\"https://protected-coast-71491.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">项目页面</a></p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/f46bz.jpg\" alt=\"\"></p>\n<p>原因：运行<code>git status</code>查看git工作区的状态，发现有文件没有提交</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bjkoi.jpg\" alt=\"\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>提交文件到heroku，done！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>《rails 初级练习》3-14，上传项目到heroku，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ heroku create</span><br><span class=\"line\">$ git push heroku master</span><br><span class=\"line\">$ heroku run rake db:migrate</span><br></pre></td></tr></table></figure>\n<p>然后访问<a href=\"https://protected-coast-71491.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">项目页面</a></p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/f46bz.jpg\" alt=\"\"></p>\n<p>原因：运行<code>git status</code>查看git工作区的状态，发现有文件没有提交</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bjkoi.jpg\" alt=\"\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>提交文件到heroku，done！</p>\n"},{"title":"【错误】安装devise出错","_content":"\n## 动作\n\n《rails 101》5-2节，本来是要运行\n\n```bash\nrails g devise:install\n```\n\n但是手误，写成了\n\n```bash\nrails g divise:install\n```\n\n但没有发现，接着执行\n\n```bash\nrails g devise user\n```\n\n执行完之后，才发现`devise`敲成了`divise`，所以想着重新执行\n\n```bash\nrails g devise:install\n```\n\n## 结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/hc004.jpg)\n\n## 解决方法\n\n一开始就想着，既然安装不了devise了，那就卸载devise咯，于是就上网查了很多删除devise的资料，越找越复杂，心里就在想：“为什么一个简单的问题，搞得那么复杂呢？”，就在这时候，我想到的解决方法！\n\ngit是什么？时光机呀！如果你在某一个分支搞砸了，那就回到之前的分支，重新来过就行了。\n\n于是，我先回到上一个分支\n\n```bash\ngit checkout ch03\n```\n\n这时，服务已经能够正常运行了，时光机果然名不虚传，哈哈。\n\n然后，我删除当前这个有着脏代码的分支\n\n```bash\ngit branch -D ch04\n```\n\n最后，再次新建`ch04`分支，按照教程重新操作一遍，done！\n\n这个经历这让我想起了一个比喻 ：\n\n> 一道锁着的门，钥匙可能不在锁上面，而是在其他地方。\n\n","source":"_posts/2016-12-21-install-devise-error.md","raw":"---\ntitle: 【错误】安装devise出错\ncategories: 全栈营\n\n---\n\n## 动作\n\n《rails 101》5-2节，本来是要运行\n\n```bash\nrails g devise:install\n```\n\n但是手误，写成了\n\n```bash\nrails g divise:install\n```\n\n但没有发现，接着执行\n\n```bash\nrails g devise user\n```\n\n执行完之后，才发现`devise`敲成了`divise`，所以想着重新执行\n\n```bash\nrails g devise:install\n```\n\n## 结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/hc004.jpg)\n\n## 解决方法\n\n一开始就想着，既然安装不了devise了，那就卸载devise咯，于是就上网查了很多删除devise的资料，越找越复杂，心里就在想：“为什么一个简单的问题，搞得那么复杂呢？”，就在这时候，我想到的解决方法！\n\ngit是什么？时光机呀！如果你在某一个分支搞砸了，那就回到之前的分支，重新来过就行了。\n\n于是，我先回到上一个分支\n\n```bash\ngit checkout ch03\n```\n\n这时，服务已经能够正常运行了，时光机果然名不虚传，哈哈。\n\n然后，我删除当前这个有着脏代码的分支\n\n```bash\ngit branch -D ch04\n```\n\n最后，再次新建`ch04`分支，按照教程重新操作一遍，done！\n\n这个经历这让我想起了一个比喻 ：\n\n> 一道锁着的门，钥匙可能不在锁上面，而是在其他地方。\n\n","slug":"2016-12-21-install-devise-error","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicb9002wfson4w5bwqt6","content":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>《rails 101》5-2节，本来是要运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g devise:install</span><br></pre></td></tr></table></figure>\n<p>但是手误，写成了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g divise:install</span><br></pre></td></tr></table></figure>\n<p>但没有发现，接着执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g devise user</span><br></pre></td></tr></table></figure>\n<p>执行完之后，才发现<code>devise</code>敲成了<code>divise</code>，所以想着重新执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g devise:install</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/hc004.jpg\" alt=\"\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>一开始就想着，既然安装不了devise了，那就卸载devise咯，于是就上网查了很多删除devise的资料，越找越复杂，心里就在想：“为什么一个简单的问题，搞得那么复杂呢？”，就在这时候，我想到的解决方法！</p>\n<p>git是什么？时光机呀！如果你在某一个分支搞砸了，那就回到之前的分支，重新来过就行了。</p>\n<p>于是，我先回到上一个分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout ch03</span><br></pre></td></tr></table></figure>\n<p>这时，服务已经能够正常运行了，时光机果然名不虚传，哈哈。</p>\n<p>然后，我删除当前这个有着脏代码的分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D ch04</span><br></pre></td></tr></table></figure>\n<p>最后，再次新建<code>ch04</code>分支，按照教程重新操作一遍，done！</p>\n<p>这个经历这让我想起了一个比喻 ：</p>\n<blockquote>\n<p>一道锁着的门，钥匙可能不在锁上面，而是在其他地方。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>《rails 101》5-2节，本来是要运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g devise:install</span><br></pre></td></tr></table></figure>\n<p>但是手误，写成了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g divise:install</span><br></pre></td></tr></table></figure>\n<p>但没有发现，接着执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g devise user</span><br></pre></td></tr></table></figure>\n<p>执行完之后，才发现<code>devise</code>敲成了<code>divise</code>，所以想着重新执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g devise:install</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/hc004.jpg\" alt=\"\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>一开始就想着，既然安装不了devise了，那就卸载devise咯，于是就上网查了很多删除devise的资料，越找越复杂，心里就在想：“为什么一个简单的问题，搞得那么复杂呢？”，就在这时候，我想到的解决方法！</p>\n<p>git是什么？时光机呀！如果你在某一个分支搞砸了，那就回到之前的分支，重新来过就行了。</p>\n<p>于是，我先回到上一个分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout ch03</span><br></pre></td></tr></table></figure>\n<p>这时，服务已经能够正常运行了，时光机果然名不虚传，哈哈。</p>\n<p>然后，我删除当前这个有着脏代码的分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D ch04</span><br></pre></td></tr></table></figure>\n<p>最后，再次新建<code>ch04</code>分支，按照教程重新操作一遍，done！</p>\n<p>这个经历这让我想起了一个比喻 ：</p>\n<blockquote>\n<p>一道锁着的门，钥匙可能不在锁上面，而是在其他地方。</p>\n</blockquote>\n"},{"title":"rails 101 额外作业","_content":"\n![](http://oggx6lf7f.bkt.clouddn.com/3xg77.jpg)\n\n\n\n一开始认为，既然是删除我的文章，那肯定是写在`account/posts`里面咯，于是就写了`account/posts#edit`这个action。然后打开刷新页面，却出现这个结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/iofxy.png)\n\n百思不得其解...\n\n后来，发现点击编辑文章是，跳转的路径是`edit_group_post_path(post.group, post)`，焕然大悟\n\n![](http://oggx6lf7f.bkt.clouddn.com/m35el.jpg)\n\n于是就把`edit`这个action从`controllers/account/posts.controller.rb`搬到`controllers/posts.controller.rb`，再把`edit.html.erb`从`views/account/posts`搬到`views/posts`，然后刷新页面，done！\n\n同样的，接着写`posts#destroy`，可以删除文章了，done！\n\n另外一点，我发现教程上的路径函数中传入了当前文章对应的group\n\n![](http://oggx6lf7f.bkt.clouddn.com/bscpf.jpg)\n\n一开始真不知道是要用来干嘛的，所以在写controller时，一直想着怎么用这个group，想不明白，后来才想到，原来是用跳转页面时要用到的。\n\n![](http://oggx6lf7f.bkt.clouddn.com/qn5r7.jpg)\n\n\n","source":"_posts/2016-12-21-rails-101-extra-jobs.md","raw":"---\ntitle: rails 101 额外作业\ncategories: 全栈营\n---\n\n![](http://oggx6lf7f.bkt.clouddn.com/3xg77.jpg)\n\n\n\n一开始认为，既然是删除我的文章，那肯定是写在`account/posts`里面咯，于是就写了`account/posts#edit`这个action。然后打开刷新页面，却出现这个结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/iofxy.png)\n\n百思不得其解...\n\n后来，发现点击编辑文章是，跳转的路径是`edit_group_post_path(post.group, post)`，焕然大悟\n\n![](http://oggx6lf7f.bkt.clouddn.com/m35el.jpg)\n\n于是就把`edit`这个action从`controllers/account/posts.controller.rb`搬到`controllers/posts.controller.rb`，再把`edit.html.erb`从`views/account/posts`搬到`views/posts`，然后刷新页面，done！\n\n同样的，接着写`posts#destroy`，可以删除文章了，done！\n\n另外一点，我发现教程上的路径函数中传入了当前文章对应的group\n\n![](http://oggx6lf7f.bkt.clouddn.com/bscpf.jpg)\n\n一开始真不知道是要用来干嘛的，所以在写controller时，一直想着怎么用这个group，想不明白，后来才想到，原来是用跳转页面时要用到的。\n\n![](http://oggx6lf7f.bkt.clouddn.com/qn5r7.jpg)\n\n\n","slug":"2016-12-21-rails-101-extra-jobs","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicba0030fsonvnmjgzhr","content":"<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/3xg77.jpg\" alt=\"\"></p>\n<p>一开始认为，既然是删除我的文章，那肯定是写在<code>account/posts</code>里面咯，于是就写了<code>account/posts#edit</code>这个action。然后打开刷新页面，却出现这个结果</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/iofxy.png\" alt=\"\"></p>\n<p>百思不得其解…</p>\n<p>后来，发现点击编辑文章是，跳转的路径是<code>edit_group_post_path(post.group, post)</code>，焕然大悟</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/m35el.jpg\" alt=\"\"></p>\n<p>于是就把<code>edit</code>这个action从<code>controllers/account/posts.controller.rb</code>搬到<code>controllers/posts.controller.rb</code>，再把<code>edit.html.erb</code>从<code>views/account/posts</code>搬到<code>views/posts</code>，然后刷新页面，done！</p>\n<p>同样的，接着写<code>posts#destroy</code>，可以删除文章了，done！</p>\n<p>另外一点，我发现教程上的路径函数中传入了当前文章对应的group</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bscpf.jpg\" alt=\"\"></p>\n<p>一开始真不知道是要用来干嘛的，所以在写controller时，一直想着怎么用这个group，想不明白，后来才想到，原来是用跳转页面时要用到的。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/qn5r7.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/3xg77.jpg\" alt=\"\"></p>\n<p>一开始认为，既然是删除我的文章，那肯定是写在<code>account/posts</code>里面咯，于是就写了<code>account/posts#edit</code>这个action。然后打开刷新页面，却出现这个结果</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/iofxy.png\" alt=\"\"></p>\n<p>百思不得其解…</p>\n<p>后来，发现点击编辑文章是，跳转的路径是<code>edit_group_post_path(post.group, post)</code>，焕然大悟</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/m35el.jpg\" alt=\"\"></p>\n<p>于是就把<code>edit</code>这个action从<code>controllers/account/posts.controller.rb</code>搬到<code>controllers/posts.controller.rb</code>，再把<code>edit.html.erb</code>从<code>views/account/posts</code>搬到<code>views/posts</code>，然后刷新页面，done！</p>\n<p>同样的，接着写<code>posts#destroy</code>，可以删除文章了，done！</p>\n<p>另外一点，我发现教程上的路径函数中传入了当前文章对应的group</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bscpf.jpg\" alt=\"\"></p>\n<p>一开始真不知道是要用来干嘛的，所以在写controller时，一直想着怎么用这个group，想不明白，后来才想到，原来是用跳转页面时要用到的。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/qn5r7.jpg\" alt=\"\"></p>\n"},{"title":"【错误】在rails console中操作数据库报错","_content":"\n## 动作\n\n《rails初级练习》3-8节，进入rails console，运行`Topic.count`。\n\n## 结果\n\n![2016-11-26 13-25-19](http://oggx6lf7f.bkt.clouddn.com/69foq.jpg)\n\n## 解决方法\n运行 `bundle update`，如果问题没有解决，执行`spring stop`应该就ok。\n\n## 参考链接\n[Segmentation fault with Rails after upgrading to OS Sierra, possibly related to sqlite3 gem](http://stackoverflow.com/questions/39812707/segmentation-fault-with-rails-after-upgrading-to-os-sierra-possibly-related-to)\n","source":"_posts/2016-12-21-rails-console-error.md","raw":"---\ntitle: 【错误】在rails console中操作数据库报错\ncategories: 全栈营\n\n---\n\n## 动作\n\n《rails初级练习》3-8节，进入rails console，运行`Topic.count`。\n\n## 结果\n\n![2016-11-26 13-25-19](http://oggx6lf7f.bkt.clouddn.com/69foq.jpg)\n\n## 解决方法\n运行 `bundle update`，如果问题没有解决，执行`spring stop`应该就ok。\n\n## 参考链接\n[Segmentation fault with Rails after upgrading to OS Sierra, possibly related to sqlite3 gem](http://stackoverflow.com/questions/39812707/segmentation-fault-with-rails-after-upgrading-to-os-sierra-possibly-related-to)\n","slug":"2016-12-21-rails-console-error","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbc0033fsonjm8jgrht","content":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>《rails初级练习》3-8节，进入rails console，运行<code>Topic.count</code>。</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/69foq.jpg\" alt=\"2016-11-26 13-25-19\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>运行 <code>bundle update</code>，如果问题没有解决，执行<code>spring stop</code>应该就ok。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://stackoverflow.com/questions/39812707/segmentation-fault-with-rails-after-upgrading-to-os-sierra-possibly-related-to\" target=\"_blank\" rel=\"noopener\">Segmentation fault with Rails after upgrading to OS Sierra, possibly related to sqlite3 gem</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>《rails初级练习》3-8节，进入rails console，运行<code>Topic.count</code>。</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/69foq.jpg\" alt=\"2016-11-26 13-25-19\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>运行 <code>bundle update</code>，如果问题没有解决，执行<code>spring stop</code>应该就ok。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://stackoverflow.com/questions/39812707/segmentation-fault-with-rails-after-upgrading-to-os-sierra-possibly-related-to\" target=\"_blank\" rel=\"noopener\">Segmentation fault with Rails after upgrading to OS Sierra, possibly related to sqlite3 gem</a></p>\n"},{"title":"【错误】textarea为啥变成了input？","_content":"\n## 位置\n\n《rails 101》4-8节：将表单换为 Bootstrap 提供的版型。\n\n## 动作\n\n使用`simple_form`简化表单\n\n## 预期结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/k2owp.jpg)\n\n## 错误结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/ixyqh.jpg)\n\n## 分析\n\n首先，上`simple_form`[官网](https://github.com/plataformatec/simple_form)看看寻找解决方法，看到这样一句话：\n\n![](http://oggx6lf7f.bkt.clouddn.com/d07z3.jpg)\n\n也就是说，有可能是我创建model时，把description的类型设置成了`string`，而不是`text`。\n\n于是，我看了一下db里面的文件，果然\n\n![](http://oggx6lf7f.bkt.clouddn.com/4zlkt.jpg)\n\n证据确凿，真的是类型搞错了。\n\n## 解决方法\n\n### step1\n\n执行`rails g migration change_description_type_in_groups`创建migrate\n\n### step2\n\n在`db/migrate`目录中，打开刚才生成的文件，让它变成这样：\n\n```ruby\nclass ChangeDescriptionTypeInGroup < ActiveRecord::Migration[5.0]\n  def change\n  \tchange_column :groups, :description, :text\n  end\nend\n```\n\n### step3\n\n运行`rake db:migrate`，done！\n\n## 参考链接\n\n[http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration](http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration)","source":"_posts/2016-12-21-textarea-input.md","raw":"---\ntitle: 【错误】textarea为啥变成了input？\ncategories: 全栈营\n\n---\n\n## 位置\n\n《rails 101》4-8节：将表单换为 Bootstrap 提供的版型。\n\n## 动作\n\n使用`simple_form`简化表单\n\n## 预期结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/k2owp.jpg)\n\n## 错误结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/ixyqh.jpg)\n\n## 分析\n\n首先，上`simple_form`[官网](https://github.com/plataformatec/simple_form)看看寻找解决方法，看到这样一句话：\n\n![](http://oggx6lf7f.bkt.clouddn.com/d07z3.jpg)\n\n也就是说，有可能是我创建model时，把description的类型设置成了`string`，而不是`text`。\n\n于是，我看了一下db里面的文件，果然\n\n![](http://oggx6lf7f.bkt.clouddn.com/4zlkt.jpg)\n\n证据确凿，真的是类型搞错了。\n\n## 解决方法\n\n### step1\n\n执行`rails g migration change_description_type_in_groups`创建migrate\n\n### step2\n\n在`db/migrate`目录中，打开刚才生成的文件，让它变成这样：\n\n```ruby\nclass ChangeDescriptionTypeInGroup < ActiveRecord::Migration[5.0]\n  def change\n  \tchange_column :groups, :description, :text\n  end\nend\n```\n\n### step3\n\n运行`rake db:migrate`，done！\n\n## 参考链接\n\n[http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration](http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration)","slug":"2016-12-21-textarea-input","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbd0036fsony3gir6yd","content":"<h2 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h2><p>《rails 101》4-8节：将表单换为 Bootstrap 提供的版型。</p>\n<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>使用<code>simple_form</code>简化表单</p>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/k2owp.jpg\" alt=\"\"></p>\n<h2 id=\"错误结果\"><a href=\"#错误结果\" class=\"headerlink\" title=\"错误结果\"></a>错误结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ixyqh.jpg\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先，上<code>simple_form</code><a href=\"https://github.com/plataformatec/simple_form\" target=\"_blank\" rel=\"noopener\">官网</a>看看寻找解决方法，看到这样一句话：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/d07z3.jpg\" alt=\"\"></p>\n<p>也就是说，有可能是我创建model时，把description的类型设置成了<code>string</code>，而不是<code>text</code>。</p>\n<p>于是，我看了一下db里面的文件，果然</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/4zlkt.jpg\" alt=\"\"></p>\n<p>证据确凿，真的是类型搞错了。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><h3 id=\"step1\"><a href=\"#step1\" class=\"headerlink\" title=\"step1\"></a>step1</h3><p>执行<code>rails g migration change_description_type_in_groups</code>创建migrate</p>\n<h3 id=\"step2\"><a href=\"#step2\" class=\"headerlink\" title=\"step2\"></a>step2</h3><p>在<code>db/migrate</code>目录中，打开刚才生成的文件，让它变成这样：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangeDescriptionTypeInGroup</span> &lt; ActiveRecord::Migration[5.0]</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span></span></span><br><span class=\"line\">  \tchange_column <span class=\"symbol\">:groups</span>, <span class=\"symbol\">:description</span>, <span class=\"symbol\">:text</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"step3\"><a href=\"#step3\" class=\"headerlink\" title=\"step3\"></a>step3</h3><p>运行<code>rake db:migrate</code>，done！</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h2><p>《rails 101》4-8节：将表单换为 Bootstrap 提供的版型。</p>\n<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>使用<code>simple_form</code>简化表单</p>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/k2owp.jpg\" alt=\"\"></p>\n<h2 id=\"错误结果\"><a href=\"#错误结果\" class=\"headerlink\" title=\"错误结果\"></a>错误结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ixyqh.jpg\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先，上<code>simple_form</code><a href=\"https://github.com/plataformatec/simple_form\" target=\"_blank\" rel=\"noopener\">官网</a>看看寻找解决方法，看到这样一句话：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/d07z3.jpg\" alt=\"\"></p>\n<p>也就是说，有可能是我创建model时，把description的类型设置成了<code>string</code>，而不是<code>text</code>。</p>\n<p>于是，我看了一下db里面的文件，果然</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/4zlkt.jpg\" alt=\"\"></p>\n<p>证据确凿，真的是类型搞错了。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><h3 id=\"step1\"><a href=\"#step1\" class=\"headerlink\" title=\"step1\"></a>step1</h3><p>执行<code>rails g migration change_description_type_in_groups</code>创建migrate</p>\n<h3 id=\"step2\"><a href=\"#step2\" class=\"headerlink\" title=\"step2\"></a>step2</h3><p>在<code>db/migrate</code>目录中，打开刚才生成的文件，让它变成这样：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangeDescriptionTypeInGroup</span> &lt; ActiveRecord::Migration[5.0]</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span></span></span><br><span class=\"line\">  \tchange_column <span class=\"symbol\">:groups</span>, <span class=\"symbol\">:description</span>, <span class=\"symbol\">:text</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"step3\"><a href=\"#step3\" class=\"headerlink\" title=\"step3\"></a>step3</h3><p>运行<code>rake db:migrate</code>，done！</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration</a></p>\n"},{"title":"【错误】关联表的计数问题","_content":"\n## 位置\n\n《rails 初级练习》3-13 加分题 & 下一步\n\n## 动作\n\n当投票数为0时，让检票按钮失效，处于不能点击的状态\n\n## 预期结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/0lj8k.jpg)\n\n## 实际结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/xq6yg.jpg)\n\n## 分析\n\n我将`-1`按钮封装成helper，代码如下：\n\n![](http://oggx6lf7f.bkt.clouddn.com/5s8kk.jpg)\n\n当投票数为0时，让按钮变成disabled状态。但是结果却不是预期的那样子，说明这个的`topic.count`不是0，于是我就把它显示出来看一下究竟，在view写如下代码\n\n```ruby\n<td><%= topic.votes.count %> -- <%= topic.count %></td>\n```\n\n得到：\n\n![](http://oggx6lf7f.bkt.clouddn.com/bo9j2.jpg)\n\n哦！当点击`-1`时，原来`topic.votes.count`是会减少的，而topic.count没有减少，这样一来，错误可能出在`downvote`这个action中，果然\n\n![](http://oggx6lf7f.bkt.clouddn.com/rdgvi.jpg)\n\n原来是在执行`-1`时，没有更新count的值。\n\n## 解决方法\n\n![](http://oggx6lf7f.bkt.clouddn.com/4ybed.jpg)\n\n而且，更为合理的是，在view中使用`topic.count`而不是`topic.votes.count`，虽然这两个的值是一样的，但因为在helper中使用到`topic.count`，所以在view中也使用它就能防止本次遇到的错误。view的代码如下\n\n```ruby\n<td><%= pluralize(topic.count, \"voute\") %></td>\n```\n\n## 参考链接\n\n[RailsBridge：初探rails加分題](http://lesley.logdown.com/posts/736430-rails-beginners-the-practice-of-lu-series-railsbridge)","source":"_posts/2016-12-21-the-wrong-count-for-the-associated-table-problem.md","raw":"---\ntitle: 【错误】关联表的计数问题\ncategories: 全栈营\n\n---\n\n## 位置\n\n《rails 初级练习》3-13 加分题 & 下一步\n\n## 动作\n\n当投票数为0时，让检票按钮失效，处于不能点击的状态\n\n## 预期结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/0lj8k.jpg)\n\n## 实际结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/xq6yg.jpg)\n\n## 分析\n\n我将`-1`按钮封装成helper，代码如下：\n\n![](http://oggx6lf7f.bkt.clouddn.com/5s8kk.jpg)\n\n当投票数为0时，让按钮变成disabled状态。但是结果却不是预期的那样子，说明这个的`topic.count`不是0，于是我就把它显示出来看一下究竟，在view写如下代码\n\n```ruby\n<td><%= topic.votes.count %> -- <%= topic.count %></td>\n```\n\n得到：\n\n![](http://oggx6lf7f.bkt.clouddn.com/bo9j2.jpg)\n\n哦！当点击`-1`时，原来`topic.votes.count`是会减少的，而topic.count没有减少，这样一来，错误可能出在`downvote`这个action中，果然\n\n![](http://oggx6lf7f.bkt.clouddn.com/rdgvi.jpg)\n\n原来是在执行`-1`时，没有更新count的值。\n\n## 解决方法\n\n![](http://oggx6lf7f.bkt.clouddn.com/4ybed.jpg)\n\n而且，更为合理的是，在view中使用`topic.count`而不是`topic.votes.count`，虽然这两个的值是一样的，但因为在helper中使用到`topic.count`，所以在view中也使用它就能防止本次遇到的错误。view的代码如下\n\n```ruby\n<td><%= pluralize(topic.count, \"voute\") %></td>\n```\n\n## 参考链接\n\n[RailsBridge：初探rails加分題](http://lesley.logdown.com/posts/736430-rails-beginners-the-practice-of-lu-series-railsbridge)","slug":"2016-12-21-the-wrong-count-for-the-associated-table-problem","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbe0039fsono480uo1b","content":"<h2 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h2><p>《rails 初级练习》3-13 加分题 &amp; 下一步</p>\n<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>当投票数为0时，让检票按钮失效，处于不能点击的状态</p>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0lj8k.jpg\" alt=\"\"></p>\n<h2 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/xq6yg.jpg\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我将<code>-1</code>按钮封装成helper，代码如下：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/5s8kk.jpg\" alt=\"\"></p>\n<p>当投票数为0时，让按钮变成disabled状态。但是结果却不是预期的那样子，说明这个的<code>topic.count</code>不是0，于是我就把它显示出来看一下究竟，在view写如下代码</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;&lt;%= topic.votes.count %&gt; -- &lt;%= topic.count %&gt;&lt;<span class=\"regexp\">/td&gt;</span></span><br></pre></td></tr></table></figure>\n<p>得到：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bo9j2.jpg\" alt=\"\"></p>\n<p>哦！当点击<code>-1</code>时，原来<code>topic.votes.count</code>是会减少的，而topic.count没有减少，这样一来，错误可能出在<code>downvote</code>这个action中，果然</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/rdgvi.jpg\" alt=\"\"></p>\n<p>原来是在执行<code>-1</code>时，没有更新count的值。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/4ybed.jpg\" alt=\"\"></p>\n<p>而且，更为合理的是，在view中使用<code>topic.count</code>而不是<code>topic.votes.count</code>，虽然这两个的值是一样的，但因为在helper中使用到<code>topic.count</code>，所以在view中也使用它就能防止本次遇到的错误。view的代码如下</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;&lt;%= pluralize(topic.count, <span class=\"string\">\"voute\"</span>) %&gt;&lt;<span class=\"regexp\">/td&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://lesley.logdown.com/posts/736430-rails-beginners-the-practice-of-lu-series-railsbridge\" target=\"_blank\" rel=\"noopener\">RailsBridge：初探rails加分題</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h2><p>《rails 初级练习》3-13 加分题 &amp; 下一步</p>\n<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>当投票数为0时，让检票按钮失效，处于不能点击的状态</p>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0lj8k.jpg\" alt=\"\"></p>\n<h2 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/xq6yg.jpg\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我将<code>-1</code>按钮封装成helper，代码如下：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/5s8kk.jpg\" alt=\"\"></p>\n<p>当投票数为0时，让按钮变成disabled状态。但是结果却不是预期的那样子，说明这个的<code>topic.count</code>不是0，于是我就把它显示出来看一下究竟，在view写如下代码</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;&lt;%= topic.votes.count %&gt; -- &lt;%= topic.count %&gt;&lt;<span class=\"regexp\">/td&gt;</span></span><br></pre></td></tr></table></figure>\n<p>得到：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bo9j2.jpg\" alt=\"\"></p>\n<p>哦！当点击<code>-1</code>时，原来<code>topic.votes.count</code>是会减少的，而topic.count没有减少，这样一来，错误可能出在<code>downvote</code>这个action中，果然</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/rdgvi.jpg\" alt=\"\"></p>\n<p>原来是在执行<code>-1</code>时，没有更新count的值。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/4ybed.jpg\" alt=\"\"></p>\n<p>而且，更为合理的是，在view中使用<code>topic.count</code>而不是<code>topic.votes.count</code>，虽然这两个的值是一样的，但因为在helper中使用到<code>topic.count</code>，所以在view中也使用它就能防止本次遇到的错误。view的代码如下</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;&lt;%= pluralize(topic.count, <span class=\"string\">\"voute\"</span>) %&gt;&lt;<span class=\"regexp\">/td&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://lesley.logdown.com/posts/736430-rails-beginners-the-practice-of-lu-series-railsbridge\" target=\"_blank\" rel=\"noopener\">RailsBridge：初探rails加分題</a></p>\n"},{"title":"为什么要公开写文章？","_content":"\n## 很多东西你忘了，但是你却不知道你忘了。\n\n为什么这么说呢？让我引述一下，把时间当做朋友里面的一段话。\n\n> 大多数人会对自己的记忆力过分高估。这个幻觉来自每时每刻都有一些确实可以记得住的东西，而记不住的东西恰恰则因为没有被记住所以看上去“并不存在”。换言之，每时每刻都有“我记得住”的证据，而“我记不住”的证据基本上难觅其踪。这也就是为什么总有那么多人真诚地相信自己考试成绩差是因为“没发挥好”。\n\n我们可以看出来，很多人都会高估自己的注意力，对于那些你已经忘记的东西，在没有复习或者措施的前提下，你可能根本不知道你已经忘记了，你甚至会觉得你都记着，这是很可怕的，因为一不小心就活在了虚假的想象中。\n\n所以，好记性不如烂笔头，把学到的想到的东西写下来，一切都靠积累。\n\n## 写下来才能看清楚自己是否进步了。\n\n之前我一直没有写总结，因为我其实不太重视这一块，后来看到全栈班同学们的笔记，从笔记里面看得出来他们进步有多大，也看得到他们在这个过程中的各种情绪，非常真实。所以说，把学到的想到的经历的写下来，就能明显的看到自己的进步，这对自己来说本身就是一种强大的正反馈。\n\n## 倒逼学习和思考\n\n写作可以倒逼学习。如果你今天偷懒，没有学习，那你就没有东西可以写。所以你为了要写出东西，你就不得不去学习，去践行。\n\n写作可以倒逼思考。想要写清楚，前提是得先想明白，于是你每天就会自然而然地花一点时间去思考。而且，我觉得写出来的文字逻辑质量就等于思考的质量。\n\n## 你不站出来，世界怎么看得到你？\n\nxdite老师的文章[《写给大学生的程式技能》](http://blog.xdite.net/posts/2013/11/22/opensource-cheatsheets)里面有一段话：\n\n> 不斷的貼 code 以及練習在網路上發表文章，可以強化你的表達能力與邏輯組織能力。知名軟體公司 37Signals 甚至表示，他們不太注重程式底子，只雇用「寫作能力」良好的人。因為寫作能力強大代表著：組織能力與邏輯能力強。\n\n在[《给尚未大学毕业的朋友的几个人生建议》](http://blog.xdite.net/posts/2012/10/26/another-advice-for-undergraduate)也有提到：\n\n> 培養寫作能力與程式開發能力，其實最大的好處不是培養出強大的邏輯核心能力群。而是產生出來的副產品：「文章」以及「程式碼」。\n>\n> 很多 Developer 常常怨歎，我也很有能力，為什麼沒有人要挖掘我？很簡單的道理，因為沒有人知道你作過什麼。沒有文章放在 Blog 上，沒有程式碼放在 Github 上，沒有可以實際端出的 project。光憑短短的幾分鐘面談，和洋洋灑灑履歷。誰能在這麼短的時間，知道你是不世出的曠世奇才呢？\n>\n> 如果你想要世界看到你，你必須要做的就是，主動站出來。\n\n所以写文章是一件很有意义，很有使命感的事情，既可以锻炼思考能力，也可以成为自己学习的动力，还能让外部世界了解你。","source":"_posts/2016-12-21-why-writing.md","raw":"---\ntitle: 为什么要公开写文章？\ncategories: 随笔\n---\n\n## 很多东西你忘了，但是你却不知道你忘了。\n\n为什么这么说呢？让我引述一下，把时间当做朋友里面的一段话。\n\n> 大多数人会对自己的记忆力过分高估。这个幻觉来自每时每刻都有一些确实可以记得住的东西，而记不住的东西恰恰则因为没有被记住所以看上去“并不存在”。换言之，每时每刻都有“我记得住”的证据，而“我记不住”的证据基本上难觅其踪。这也就是为什么总有那么多人真诚地相信自己考试成绩差是因为“没发挥好”。\n\n我们可以看出来，很多人都会高估自己的注意力，对于那些你已经忘记的东西，在没有复习或者措施的前提下，你可能根本不知道你已经忘记了，你甚至会觉得你都记着，这是很可怕的，因为一不小心就活在了虚假的想象中。\n\n所以，好记性不如烂笔头，把学到的想到的东西写下来，一切都靠积累。\n\n## 写下来才能看清楚自己是否进步了。\n\n之前我一直没有写总结，因为我其实不太重视这一块，后来看到全栈班同学们的笔记，从笔记里面看得出来他们进步有多大，也看得到他们在这个过程中的各种情绪，非常真实。所以说，把学到的想到的经历的写下来，就能明显的看到自己的进步，这对自己来说本身就是一种强大的正反馈。\n\n## 倒逼学习和思考\n\n写作可以倒逼学习。如果你今天偷懒，没有学习，那你就没有东西可以写。所以你为了要写出东西，你就不得不去学习，去践行。\n\n写作可以倒逼思考。想要写清楚，前提是得先想明白，于是你每天就会自然而然地花一点时间去思考。而且，我觉得写出来的文字逻辑质量就等于思考的质量。\n\n## 你不站出来，世界怎么看得到你？\n\nxdite老师的文章[《写给大学生的程式技能》](http://blog.xdite.net/posts/2013/11/22/opensource-cheatsheets)里面有一段话：\n\n> 不斷的貼 code 以及練習在網路上發表文章，可以強化你的表達能力與邏輯組織能力。知名軟體公司 37Signals 甚至表示，他們不太注重程式底子，只雇用「寫作能力」良好的人。因為寫作能力強大代表著：組織能力與邏輯能力強。\n\n在[《给尚未大学毕业的朋友的几个人生建议》](http://blog.xdite.net/posts/2012/10/26/another-advice-for-undergraduate)也有提到：\n\n> 培養寫作能力與程式開發能力，其實最大的好處不是培養出強大的邏輯核心能力群。而是產生出來的副產品：「文章」以及「程式碼」。\n>\n> 很多 Developer 常常怨歎，我也很有能力，為什麼沒有人要挖掘我？很簡單的道理，因為沒有人知道你作過什麼。沒有文章放在 Blog 上，沒有程式碼放在 Github 上，沒有可以實際端出的 project。光憑短短的幾分鐘面談，和洋洋灑灑履歷。誰能在這麼短的時間，知道你是不世出的曠世奇才呢？\n>\n> 如果你想要世界看到你，你必須要做的就是，主動站出來。\n\n所以写文章是一件很有意义，很有使命感的事情，既可以锻炼思考能力，也可以成为自己学习的动力，还能让外部世界了解你。","slug":"2016-12-21-why-writing","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbg003bfson11cnqqcp","content":"<h2 id=\"很多东西你忘了，但是你却不知道你忘了。\"><a href=\"#很多东西你忘了，但是你却不知道你忘了。\" class=\"headerlink\" title=\"很多东西你忘了，但是你却不知道你忘了。\"></a>很多东西你忘了，但是你却不知道你忘了。</h2><p>为什么这么说呢？让我引述一下，把时间当做朋友里面的一段话。</p>\n<blockquote>\n<p>大多数人会对自己的记忆力过分高估。这个幻觉来自每时每刻都有一些确实可以记得住的东西，而记不住的东西恰恰则因为没有被记住所以看上去“并不存在”。换言之，每时每刻都有“我记得住”的证据，而“我记不住”的证据基本上难觅其踪。这也就是为什么总有那么多人真诚地相信自己考试成绩差是因为“没发挥好”。</p>\n</blockquote>\n<p>我们可以看出来，很多人都会高估自己的注意力，对于那些你已经忘记的东西，在没有复习或者措施的前提下，你可能根本不知道你已经忘记了，你甚至会觉得你都记着，这是很可怕的，因为一不小心就活在了虚假的想象中。</p>\n<p>所以，好记性不如烂笔头，把学到的想到的东西写下来，一切都靠积累。</p>\n<h2 id=\"写下来才能看清楚自己是否进步了。\"><a href=\"#写下来才能看清楚自己是否进步了。\" class=\"headerlink\" title=\"写下来才能看清楚自己是否进步了。\"></a>写下来才能看清楚自己是否进步了。</h2><p>之前我一直没有写总结，因为我其实不太重视这一块，后来看到全栈班同学们的笔记，从笔记里面看得出来他们进步有多大，也看得到他们在这个过程中的各种情绪，非常真实。所以说，把学到的想到的经历的写下来，就能明显的看到自己的进步，这对自己来说本身就是一种强大的正反馈。</p>\n<h2 id=\"倒逼学习和思考\"><a href=\"#倒逼学习和思考\" class=\"headerlink\" title=\"倒逼学习和思考\"></a>倒逼学习和思考</h2><p>写作可以倒逼学习。如果你今天偷懒，没有学习，那你就没有东西可以写。所以你为了要写出东西，你就不得不去学习，去践行。</p>\n<p>写作可以倒逼思考。想要写清楚，前提是得先想明白，于是你每天就会自然而然地花一点时间去思考。而且，我觉得写出来的文字逻辑质量就等于思考的质量。</p>\n<h2 id=\"你不站出来，世界怎么看得到你？\"><a href=\"#你不站出来，世界怎么看得到你？\" class=\"headerlink\" title=\"你不站出来，世界怎么看得到你？\"></a>你不站出来，世界怎么看得到你？</h2><p>xdite老师的文章<a href=\"http://blog.xdite.net/posts/2013/11/22/opensource-cheatsheets\" target=\"_blank\" rel=\"noopener\">《写给大学生的程式技能》</a>里面有一段话：</p>\n<blockquote>\n<p>不斷的貼 code 以及練習在網路上發表文章，可以強化你的表達能力與邏輯組織能力。知名軟體公司 37Signals 甚至表示，他們不太注重程式底子，只雇用「寫作能力」良好的人。因為寫作能力強大代表著：組織能力與邏輯能力強。</p>\n</blockquote>\n<p>在<a href=\"http://blog.xdite.net/posts/2012/10/26/another-advice-for-undergraduate\" target=\"_blank\" rel=\"noopener\">《给尚未大学毕业的朋友的几个人生建议》</a>也有提到：</p>\n<blockquote>\n<p>培養寫作能力與程式開發能力，其實最大的好處不是培養出強大的邏輯核心能力群。而是產生出來的副產品：「文章」以及「程式碼」。</p>\n<p>很多 Developer 常常怨歎，我也很有能力，為什麼沒有人要挖掘我？很簡單的道理，因為沒有人知道你作過什麼。沒有文章放在 Blog 上，沒有程式碼放在 Github 上，沒有可以實際端出的 project。光憑短短的幾分鐘面談，和洋洋灑灑履歷。誰能在這麼短的時間，知道你是不世出的曠世奇才呢？</p>\n<p>如果你想要世界看到你，你必須要做的就是，主動站出來。</p>\n</blockquote>\n<p>所以写文章是一件很有意义，很有使命感的事情，既可以锻炼思考能力，也可以成为自己学习的动力，还能让外部世界了解你。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"很多东西你忘了，但是你却不知道你忘了。\"><a href=\"#很多东西你忘了，但是你却不知道你忘了。\" class=\"headerlink\" title=\"很多东西你忘了，但是你却不知道你忘了。\"></a>很多东西你忘了，但是你却不知道你忘了。</h2><p>为什么这么说呢？让我引述一下，把时间当做朋友里面的一段话。</p>\n<blockquote>\n<p>大多数人会对自己的记忆力过分高估。这个幻觉来自每时每刻都有一些确实可以记得住的东西，而记不住的东西恰恰则因为没有被记住所以看上去“并不存在”。换言之，每时每刻都有“我记得住”的证据，而“我记不住”的证据基本上难觅其踪。这也就是为什么总有那么多人真诚地相信自己考试成绩差是因为“没发挥好”。</p>\n</blockquote>\n<p>我们可以看出来，很多人都会高估自己的注意力，对于那些你已经忘记的东西，在没有复习或者措施的前提下，你可能根本不知道你已经忘记了，你甚至会觉得你都记着，这是很可怕的，因为一不小心就活在了虚假的想象中。</p>\n<p>所以，好记性不如烂笔头，把学到的想到的东西写下来，一切都靠积累。</p>\n<h2 id=\"写下来才能看清楚自己是否进步了。\"><a href=\"#写下来才能看清楚自己是否进步了。\" class=\"headerlink\" title=\"写下来才能看清楚自己是否进步了。\"></a>写下来才能看清楚自己是否进步了。</h2><p>之前我一直没有写总结，因为我其实不太重视这一块，后来看到全栈班同学们的笔记，从笔记里面看得出来他们进步有多大，也看得到他们在这个过程中的各种情绪，非常真实。所以说，把学到的想到的经历的写下来，就能明显的看到自己的进步，这对自己来说本身就是一种强大的正反馈。</p>\n<h2 id=\"倒逼学习和思考\"><a href=\"#倒逼学习和思考\" class=\"headerlink\" title=\"倒逼学习和思考\"></a>倒逼学习和思考</h2><p>写作可以倒逼学习。如果你今天偷懒，没有学习，那你就没有东西可以写。所以你为了要写出东西，你就不得不去学习，去践行。</p>\n<p>写作可以倒逼思考。想要写清楚，前提是得先想明白，于是你每天就会自然而然地花一点时间去思考。而且，我觉得写出来的文字逻辑质量就等于思考的质量。</p>\n<h2 id=\"你不站出来，世界怎么看得到你？\"><a href=\"#你不站出来，世界怎么看得到你？\" class=\"headerlink\" title=\"你不站出来，世界怎么看得到你？\"></a>你不站出来，世界怎么看得到你？</h2><p>xdite老师的文章<a href=\"http://blog.xdite.net/posts/2013/11/22/opensource-cheatsheets\" target=\"_blank\" rel=\"noopener\">《写给大学生的程式技能》</a>里面有一段话：</p>\n<blockquote>\n<p>不斷的貼 code 以及練習在網路上發表文章，可以強化你的表達能力與邏輯組織能力。知名軟體公司 37Signals 甚至表示，他們不太注重程式底子，只雇用「寫作能力」良好的人。因為寫作能力強大代表著：組織能力與邏輯能力強。</p>\n</blockquote>\n<p>在<a href=\"http://blog.xdite.net/posts/2012/10/26/another-advice-for-undergraduate\" target=\"_blank\" rel=\"noopener\">《给尚未大学毕业的朋友的几个人生建议》</a>也有提到：</p>\n<blockquote>\n<p>培養寫作能力與程式開發能力，其實最大的好處不是培養出強大的邏輯核心能力群。而是產生出來的副產品：「文章」以及「程式碼」。</p>\n<p>很多 Developer 常常怨歎，我也很有能力，為什麼沒有人要挖掘我？很簡單的道理，因為沒有人知道你作過什麼。沒有文章放在 Blog 上，沒有程式碼放在 Github 上，沒有可以實際端出的 project。光憑短短的幾分鐘面談，和洋洋灑灑履歷。誰能在這麼短的時間，知道你是不世出的曠世奇才呢？</p>\n<p>如果你想要世界看到你，你必須要做的就是，主動站出來。</p>\n</blockquote>\n<p>所以写文章是一件很有意义，很有使命感的事情，既可以锻炼思考能力，也可以成为自己学习的动力，还能让外部世界了解你。</p>\n"},{"title":"【ORID总结】1/3","_content":"## Objective\n\n- 重新整理个人知识系统\n- 听全栈营第一课直播\n\n## Reflective\n\n- 重新整理的个人知识系统，感觉很清爽。\n- 听完全栈营的直播，感觉很兴奋。\n- 重听李笑来的写作课，感觉很震惊。\n\n## Interpretive\n\n### 重新整理个人知识系统\n\n平时我都是用印象笔记整理资料信息的，在印象笔记中，我创建了很多的目录以及很多的标签，因为里面收集的东西实在是太多太杂了，因为我觉得反正有搜索功能，需要的时候搜一下就行了，还是很方便的。\n\n昨天晚上在阳志平的公众号《心智工具箱》里面看到一篇推送文章《构建优雅的知识创造系统》，里面提高一种按照域名整理个人知识的管理方法，并且在标题处加上日期，还有比较反常识的一点：**不要分多级目录，只需要一层就够了**，于是，我打算尝试一下这种管理方法，这是我整理之后的目录\n\n![][image-1]\n\n\n\n每层目录下面不再新建目录，因为一旦创建二级目录，那将来就会有越来越多的目录，一发不可收拾，一旦目录结构变得复杂，拖延症就犯了，所以，多级目录不可取。\n\n你可能会说不分子目录，文件不好检索呀？其实不会，只要把一级目录建好，比如博客文章放一个目录，图片放一个目录，ppt放一个目录，然后规范所有的命名，让文件名成为其唯一的标识，在配合Spotlight全文检索，查找文件是很快的。\n\n![][image-2]\n\n最后，用百度网盘后者github同步内容，done！\n\n### 全阵营直播\n\n今天晚上的直播，可操作性最强，也是最重要的一个概念就是：**提取练习**。\n\n举个例子：以前我们读书背课文的时候，一开始先不断地通读课文，然后再合上课本，检验一下自己能不能背出来，当不看课文的时候，我们就得从脑子里面把之前记住的内容重新提取出来，这个过程就是提取练习。\n\n提取练习最大的好处就是**记得牢**。我和很多人一样，准备复习旧知识的姿势是这样子的：翻开笔记，从头到尾看一遍，然后觉得很熟悉，感觉都记住了。这种方式我经常使用，但事实上效果很差，为什么呢？因为这里面没有提取练习呀。单单只是把笔记过一遍，根本不足以检测出自己是否记住了这些知识、是否真正掌握这些知识。\n\n正确的姿势是这样子的：复习之前，先不看笔记，找一张纸，尽可能地把要复习的知识从脑子里面提取出来，写下来，然后再打开笔记对比其中的出入，这样一来你就能清楚的发现那些知识记住了、哪些知识忘记了、哪些记住了但说不出来、哪些是真正地掌握了。这种提取练习的效率才是最高的。\n\n知道了提取练习的好处，就可以很好地理解这张图的意思\n\n![][image-3]\n\n我们可以发现，金字塔上面的被动学习都是很少进行提取练习，甚至根本没有提取练习这个动作，所以最终的结果就是导致低效。而金字塔下的主动学习本质上都是在进行提取练习。小组讨论、实作演练、教授知识都是提取练习，因为他们都是脱稿之后，在大脑的记忆中搜索对应的知识，进而把知识记得更加牢固。\n\n其实，很多的方法论都是基于提取练习的，比如说：\n\n- 教是最好的学。\n- 费曼技巧。\n\n那么，为什么我们没有发现自己可能一直在使用低效率的方法呢？其实是在没有提取练习的情况下，我们不知道那些被我们遗忘的、或者说我们压根没有记住的知识，就好像它们“不存在一样”，所以就很容易犯一个错误：自欺欺人。听完一个讲座会觉得：“恩恩，很有道理，讲得太好了”。等到睡一觉醒来，基本上忘得差不多了，只记得一点点碎片，但心里还是会觉得：“我都懂了”，但是，从学校毕业之后，就很少有考试这种自我测试的机会，所以，我们就会面临一个残酷的事实：“不知道自己不知道”。\n\n由此得到：\n\n1. 学完一个知识点，可以和同伴进行小组讨论。\n2. 学完一个知识点，一定要配合实战训练。\n3. 遇到有人不懂，那就主动去教他们。\n4. 写文章，把学到的东西想明白，写下来，公开发表。\n\n### 笑来老师的写作课，又让我震惊了\n\n其实之前已经听过所有的写作课，今天晚上打算复习一遍，其中有一段话使我震惊，甚至羞愧。\n\n> 任何进步最大的障碍其实是一个看不见的东西，叫做**没有反馈。**没有反馈的是很可怕的。很多人一辈子吃的亏在于，他们希望在一个相对完美的世界里生存，他们希望有足够的条件能够进步，他们希望拥有足够的机会可以把握，殊不知这世界就是不完美的、这世界就是不公平的、这世界就是机会稀缺的、这世界就是条件总也不够完善的。于是，那些习惯在不完善的世界里跌跌撞撞前进的人，最终是那些能够真正走过一个又一个里程碑的人。\n\n我震惊，是因为我意识到反馈的重要性，举个例子，这阵子我在考驾照，教练坐在旁边手把手叫我，当我做错时立马给我反馈，所以我进步很快，很顺利地就把驾照搞定了。不过，这种反馈是花钱买来的，也是一种被动的反馈。而我真正需要做的是主动的寻求反馈，其实我意识到，大多数时候，我几乎没有获得反馈，有也只是少的可怜。\n\n由此得到：\n\n> 可以是沟通，可以是分享，也可以是公开写作，本质就是：**想尽一切办法主动地去获得所有真实的反馈**。\n\n## Decisional\n\n明天开始练习《招聘网站》。\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/mxvzv.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/lnmu6.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/jn07a.png","source":"_posts/2017-01-03-coding-diary.md","raw":"---\ntitle: 【ORID总结】1/3\ncategories: 全栈营\n---\n## Objective\n\n- 重新整理个人知识系统\n- 听全栈营第一课直播\n\n## Reflective\n\n- 重新整理的个人知识系统，感觉很清爽。\n- 听完全栈营的直播，感觉很兴奋。\n- 重听李笑来的写作课，感觉很震惊。\n\n## Interpretive\n\n### 重新整理个人知识系统\n\n平时我都是用印象笔记整理资料信息的，在印象笔记中，我创建了很多的目录以及很多的标签，因为里面收集的东西实在是太多太杂了，因为我觉得反正有搜索功能，需要的时候搜一下就行了，还是很方便的。\n\n昨天晚上在阳志平的公众号《心智工具箱》里面看到一篇推送文章《构建优雅的知识创造系统》，里面提高一种按照域名整理个人知识的管理方法，并且在标题处加上日期，还有比较反常识的一点：**不要分多级目录，只需要一层就够了**，于是，我打算尝试一下这种管理方法，这是我整理之后的目录\n\n![][image-1]\n\n\n\n每层目录下面不再新建目录，因为一旦创建二级目录，那将来就会有越来越多的目录，一发不可收拾，一旦目录结构变得复杂，拖延症就犯了，所以，多级目录不可取。\n\n你可能会说不分子目录，文件不好检索呀？其实不会，只要把一级目录建好，比如博客文章放一个目录，图片放一个目录，ppt放一个目录，然后规范所有的命名，让文件名成为其唯一的标识，在配合Spotlight全文检索，查找文件是很快的。\n\n![][image-2]\n\n最后，用百度网盘后者github同步内容，done！\n\n### 全阵营直播\n\n今天晚上的直播，可操作性最强，也是最重要的一个概念就是：**提取练习**。\n\n举个例子：以前我们读书背课文的时候，一开始先不断地通读课文，然后再合上课本，检验一下自己能不能背出来，当不看课文的时候，我们就得从脑子里面把之前记住的内容重新提取出来，这个过程就是提取练习。\n\n提取练习最大的好处就是**记得牢**。我和很多人一样，准备复习旧知识的姿势是这样子的：翻开笔记，从头到尾看一遍，然后觉得很熟悉，感觉都记住了。这种方式我经常使用，但事实上效果很差，为什么呢？因为这里面没有提取练习呀。单单只是把笔记过一遍，根本不足以检测出自己是否记住了这些知识、是否真正掌握这些知识。\n\n正确的姿势是这样子的：复习之前，先不看笔记，找一张纸，尽可能地把要复习的知识从脑子里面提取出来，写下来，然后再打开笔记对比其中的出入，这样一来你就能清楚的发现那些知识记住了、哪些知识忘记了、哪些记住了但说不出来、哪些是真正地掌握了。这种提取练习的效率才是最高的。\n\n知道了提取练习的好处，就可以很好地理解这张图的意思\n\n![][image-3]\n\n我们可以发现，金字塔上面的被动学习都是很少进行提取练习，甚至根本没有提取练习这个动作，所以最终的结果就是导致低效。而金字塔下的主动学习本质上都是在进行提取练习。小组讨论、实作演练、教授知识都是提取练习，因为他们都是脱稿之后，在大脑的记忆中搜索对应的知识，进而把知识记得更加牢固。\n\n其实，很多的方法论都是基于提取练习的，比如说：\n\n- 教是最好的学。\n- 费曼技巧。\n\n那么，为什么我们没有发现自己可能一直在使用低效率的方法呢？其实是在没有提取练习的情况下，我们不知道那些被我们遗忘的、或者说我们压根没有记住的知识，就好像它们“不存在一样”，所以就很容易犯一个错误：自欺欺人。听完一个讲座会觉得：“恩恩，很有道理，讲得太好了”。等到睡一觉醒来，基本上忘得差不多了，只记得一点点碎片，但心里还是会觉得：“我都懂了”，但是，从学校毕业之后，就很少有考试这种自我测试的机会，所以，我们就会面临一个残酷的事实：“不知道自己不知道”。\n\n由此得到：\n\n1. 学完一个知识点，可以和同伴进行小组讨论。\n2. 学完一个知识点，一定要配合实战训练。\n3. 遇到有人不懂，那就主动去教他们。\n4. 写文章，把学到的东西想明白，写下来，公开发表。\n\n### 笑来老师的写作课，又让我震惊了\n\n其实之前已经听过所有的写作课，今天晚上打算复习一遍，其中有一段话使我震惊，甚至羞愧。\n\n> 任何进步最大的障碍其实是一个看不见的东西，叫做**没有反馈。**没有反馈的是很可怕的。很多人一辈子吃的亏在于，他们希望在一个相对完美的世界里生存，他们希望有足够的条件能够进步，他们希望拥有足够的机会可以把握，殊不知这世界就是不完美的、这世界就是不公平的、这世界就是机会稀缺的、这世界就是条件总也不够完善的。于是，那些习惯在不完善的世界里跌跌撞撞前进的人，最终是那些能够真正走过一个又一个里程碑的人。\n\n我震惊，是因为我意识到反馈的重要性，举个例子，这阵子我在考驾照，教练坐在旁边手把手叫我，当我做错时立马给我反馈，所以我进步很快，很顺利地就把驾照搞定了。不过，这种反馈是花钱买来的，也是一种被动的反馈。而我真正需要做的是主动的寻求反馈，其实我意识到，大多数时候，我几乎没有获得反馈，有也只是少的可怜。\n\n由此得到：\n\n> 可以是沟通，可以是分享，也可以是公开写作，本质就是：**想尽一切办法主动地去获得所有真实的反馈**。\n\n## Decisional\n\n明天开始练习《招聘网站》。\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/mxvzv.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/lnmu6.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/jn07a.png","slug":"2017-01-03-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbh003efson0iurpu1a","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>重新整理个人知识系统</li>\n<li>听全栈营第一课直播</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><ul>\n<li>重新整理的个人知识系统，感觉很清爽。</li>\n<li>听完全栈营的直播，感觉很兴奋。</li>\n<li>重听李笑来的写作课，感觉很震惊。</li>\n</ul>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"重新整理个人知识系统\"><a href=\"#重新整理个人知识系统\" class=\"headerlink\" title=\"重新整理个人知识系统\"></a>重新整理个人知识系统</h3><p>平时我都是用印象笔记整理资料信息的，在印象笔记中，我创建了很多的目录以及很多的标签，因为里面收集的东西实在是太多太杂了，因为我觉得反正有搜索功能，需要的时候搜一下就行了，还是很方便的。</p>\n<p>昨天晚上在阳志平的公众号《心智工具箱》里面看到一篇推送文章《构建优雅的知识创造系统》，里面提高一种按照域名整理个人知识的管理方法，并且在标题处加上日期，还有比较反常识的一点：<strong>不要分多级目录，只需要一层就够了</strong>，于是，我打算尝试一下这种管理方法，这是我整理之后的目录</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/mxvzv.png\" alt=\"\"></p>\n<p>每层目录下面不再新建目录，因为一旦创建二级目录，那将来就会有越来越多的目录，一发不可收拾，一旦目录结构变得复杂，拖延症就犯了，所以，多级目录不可取。</p>\n<p>你可能会说不分子目录，文件不好检索呀？其实不会，只要把一级目录建好，比如博客文章放一个目录，图片放一个目录，ppt放一个目录，然后规范所有的命名，让文件名成为其唯一的标识，在配合Spotlight全文检索，查找文件是很快的。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lnmu6.png\" alt=\"\"></p>\n<p>最后，用百度网盘后者github同步内容，done！</p>\n<h3 id=\"全阵营直播\"><a href=\"#全阵营直播\" class=\"headerlink\" title=\"全阵营直播\"></a>全阵营直播</h3><p>今天晚上的直播，可操作性最强，也是最重要的一个概念就是：<strong>提取练习</strong>。</p>\n<p>举个例子：以前我们读书背课文的时候，一开始先不断地通读课文，然后再合上课本，检验一下自己能不能背出来，当不看课文的时候，我们就得从脑子里面把之前记住的内容重新提取出来，这个过程就是提取练习。</p>\n<p>提取练习最大的好处就是<strong>记得牢</strong>。我和很多人一样，准备复习旧知识的姿势是这样子的：翻开笔记，从头到尾看一遍，然后觉得很熟悉，感觉都记住了。这种方式我经常使用，但事实上效果很差，为什么呢？因为这里面没有提取练习呀。单单只是把笔记过一遍，根本不足以检测出自己是否记住了这些知识、是否真正掌握这些知识。</p>\n<p>正确的姿势是这样子的：复习之前，先不看笔记，找一张纸，尽可能地把要复习的知识从脑子里面提取出来，写下来，然后再打开笔记对比其中的出入，这样一来你就能清楚的发现那些知识记住了、哪些知识忘记了、哪些记住了但说不出来、哪些是真正地掌握了。这种提取练习的效率才是最高的。</p>\n<p>知道了提取练习的好处，就可以很好地理解这张图的意思</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/jn07a.png\" alt=\"\"></p>\n<p>我们可以发现，金字塔上面的被动学习都是很少进行提取练习，甚至根本没有提取练习这个动作，所以最终的结果就是导致低效。而金字塔下的主动学习本质上都是在进行提取练习。小组讨论、实作演练、教授知识都是提取练习，因为他们都是脱稿之后，在大脑的记忆中搜索对应的知识，进而把知识记得更加牢固。</p>\n<p>其实，很多的方法论都是基于提取练习的，比如说：</p>\n<ul>\n<li>教是最好的学。</li>\n<li>费曼技巧。</li>\n</ul>\n<p>那么，为什么我们没有发现自己可能一直在使用低效率的方法呢？其实是在没有提取练习的情况下，我们不知道那些被我们遗忘的、或者说我们压根没有记住的知识，就好像它们“不存在一样”，所以就很容易犯一个错误：自欺欺人。听完一个讲座会觉得：“恩恩，很有道理，讲得太好了”。等到睡一觉醒来，基本上忘得差不多了，只记得一点点碎片，但心里还是会觉得：“我都懂了”，但是，从学校毕业之后，就很少有考试这种自我测试的机会，所以，我们就会面临一个残酷的事实：“不知道自己不知道”。</p>\n<p>由此得到：</p>\n<ol>\n<li>学完一个知识点，可以和同伴进行小组讨论。</li>\n<li>学完一个知识点，一定要配合实战训练。</li>\n<li>遇到有人不懂，那就主动去教他们。</li>\n<li>写文章，把学到的东西想明白，写下来，公开发表。</li>\n</ol>\n<h3 id=\"笑来老师的写作课，又让我震惊了\"><a href=\"#笑来老师的写作课，又让我震惊了\" class=\"headerlink\" title=\"笑来老师的写作课，又让我震惊了\"></a>笑来老师的写作课，又让我震惊了</h3><p>其实之前已经听过所有的写作课，今天晚上打算复习一遍，其中有一段话使我震惊，甚至羞愧。</p>\n<blockquote>\n<p>任何进步最大的障碍其实是一个看不见的东西，叫做<strong>没有反馈。</strong>没有反馈的是很可怕的。很多人一辈子吃的亏在于，他们希望在一个相对完美的世界里生存，他们希望有足够的条件能够进步，他们希望拥有足够的机会可以把握，殊不知这世界就是不完美的、这世界就是不公平的、这世界就是机会稀缺的、这世界就是条件总也不够完善的。于是，那些习惯在不完善的世界里跌跌撞撞前进的人，最终是那些能够真正走过一个又一个里程碑的人。</p>\n</blockquote>\n<p>我震惊，是因为我意识到反馈的重要性，举个例子，这阵子我在考驾照，教练坐在旁边手把手叫我，当我做错时立马给我反馈，所以我进步很快，很顺利地就把驾照搞定了。不过，这种反馈是花钱买来的，也是一种被动的反馈。而我真正需要做的是主动的寻求反馈，其实我意识到，大多数时候，我几乎没有获得反馈，有也只是少的可怜。</p>\n<p>由此得到：</p>\n<blockquote>\n<p>可以是沟通，可以是分享，也可以是公开写作，本质就是：<strong>想尽一切办法主动地去获得所有真实的反馈</strong>。</p>\n</blockquote>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天开始练习《招聘网站》。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>重新整理个人知识系统</li>\n<li>听全栈营第一课直播</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><ul>\n<li>重新整理的个人知识系统，感觉很清爽。</li>\n<li>听完全栈营的直播，感觉很兴奋。</li>\n<li>重听李笑来的写作课，感觉很震惊。</li>\n</ul>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"重新整理个人知识系统\"><a href=\"#重新整理个人知识系统\" class=\"headerlink\" title=\"重新整理个人知识系统\"></a>重新整理个人知识系统</h3><p>平时我都是用印象笔记整理资料信息的，在印象笔记中，我创建了很多的目录以及很多的标签，因为里面收集的东西实在是太多太杂了，因为我觉得反正有搜索功能，需要的时候搜一下就行了，还是很方便的。</p>\n<p>昨天晚上在阳志平的公众号《心智工具箱》里面看到一篇推送文章《构建优雅的知识创造系统》，里面提高一种按照域名整理个人知识的管理方法，并且在标题处加上日期，还有比较反常识的一点：<strong>不要分多级目录，只需要一层就够了</strong>，于是，我打算尝试一下这种管理方法，这是我整理之后的目录</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/mxvzv.png\" alt=\"\"></p>\n<p>每层目录下面不再新建目录，因为一旦创建二级目录，那将来就会有越来越多的目录，一发不可收拾，一旦目录结构变得复杂，拖延症就犯了，所以，多级目录不可取。</p>\n<p>你可能会说不分子目录，文件不好检索呀？其实不会，只要把一级目录建好，比如博客文章放一个目录，图片放一个目录，ppt放一个目录，然后规范所有的命名，让文件名成为其唯一的标识，在配合Spotlight全文检索，查找文件是很快的。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lnmu6.png\" alt=\"\"></p>\n<p>最后，用百度网盘后者github同步内容，done！</p>\n<h3 id=\"全阵营直播\"><a href=\"#全阵营直播\" class=\"headerlink\" title=\"全阵营直播\"></a>全阵营直播</h3><p>今天晚上的直播，可操作性最强，也是最重要的一个概念就是：<strong>提取练习</strong>。</p>\n<p>举个例子：以前我们读书背课文的时候，一开始先不断地通读课文，然后再合上课本，检验一下自己能不能背出来，当不看课文的时候，我们就得从脑子里面把之前记住的内容重新提取出来，这个过程就是提取练习。</p>\n<p>提取练习最大的好处就是<strong>记得牢</strong>。我和很多人一样，准备复习旧知识的姿势是这样子的：翻开笔记，从头到尾看一遍，然后觉得很熟悉，感觉都记住了。这种方式我经常使用，但事实上效果很差，为什么呢？因为这里面没有提取练习呀。单单只是把笔记过一遍，根本不足以检测出自己是否记住了这些知识、是否真正掌握这些知识。</p>\n<p>正确的姿势是这样子的：复习之前，先不看笔记，找一张纸，尽可能地把要复习的知识从脑子里面提取出来，写下来，然后再打开笔记对比其中的出入，这样一来你就能清楚的发现那些知识记住了、哪些知识忘记了、哪些记住了但说不出来、哪些是真正地掌握了。这种提取练习的效率才是最高的。</p>\n<p>知道了提取练习的好处，就可以很好地理解这张图的意思</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/jn07a.png\" alt=\"\"></p>\n<p>我们可以发现，金字塔上面的被动学习都是很少进行提取练习，甚至根本没有提取练习这个动作，所以最终的结果就是导致低效。而金字塔下的主动学习本质上都是在进行提取练习。小组讨论、实作演练、教授知识都是提取练习，因为他们都是脱稿之后，在大脑的记忆中搜索对应的知识，进而把知识记得更加牢固。</p>\n<p>其实，很多的方法论都是基于提取练习的，比如说：</p>\n<ul>\n<li>教是最好的学。</li>\n<li>费曼技巧。</li>\n</ul>\n<p>那么，为什么我们没有发现自己可能一直在使用低效率的方法呢？其实是在没有提取练习的情况下，我们不知道那些被我们遗忘的、或者说我们压根没有记住的知识，就好像它们“不存在一样”，所以就很容易犯一个错误：自欺欺人。听完一个讲座会觉得：“恩恩，很有道理，讲得太好了”。等到睡一觉醒来，基本上忘得差不多了，只记得一点点碎片，但心里还是会觉得：“我都懂了”，但是，从学校毕业之后，就很少有考试这种自我测试的机会，所以，我们就会面临一个残酷的事实：“不知道自己不知道”。</p>\n<p>由此得到：</p>\n<ol>\n<li>学完一个知识点，可以和同伴进行小组讨论。</li>\n<li>学完一个知识点，一定要配合实战训练。</li>\n<li>遇到有人不懂，那就主动去教他们。</li>\n<li>写文章，把学到的东西想明白，写下来，公开发表。</li>\n</ol>\n<h3 id=\"笑来老师的写作课，又让我震惊了\"><a href=\"#笑来老师的写作课，又让我震惊了\" class=\"headerlink\" title=\"笑来老师的写作课，又让我震惊了\"></a>笑来老师的写作课，又让我震惊了</h3><p>其实之前已经听过所有的写作课，今天晚上打算复习一遍，其中有一段话使我震惊，甚至羞愧。</p>\n<blockquote>\n<p>任何进步最大的障碍其实是一个看不见的东西，叫做<strong>没有反馈。</strong>没有反馈的是很可怕的。很多人一辈子吃的亏在于，他们希望在一个相对完美的世界里生存，他们希望有足够的条件能够进步，他们希望拥有足够的机会可以把握，殊不知这世界就是不完美的、这世界就是不公平的、这世界就是机会稀缺的、这世界就是条件总也不够完善的。于是，那些习惯在不完善的世界里跌跌撞撞前进的人，最终是那些能够真正走过一个又一个里程碑的人。</p>\n</blockquote>\n<p>我震惊，是因为我意识到反馈的重要性，举个例子，这阵子我在考驾照，教练坐在旁边手把手叫我，当我做错时立马给我反馈，所以我进步很快，很顺利地就把驾照搞定了。不过，这种反馈是花钱买来的，也是一种被动的反馈。而我真正需要做的是主动的寻求反馈，其实我意识到，大多数时候，我几乎没有获得反馈，有也只是少的可怜。</p>\n<p>由此得到：</p>\n<blockquote>\n<p>可以是沟通，可以是分享，也可以是公开写作，本质就是：<strong>想尽一切办法主动地去获得所有真实的反馈</strong>。</p>\n</blockquote>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天开始练习《招聘网站》。</p>\n"},{"title":"【ORID总结】1/4","_content":"\n## Objective\n\n- 《招聘网站》第一遍（复制粘贴）\n\n## Reflective\n\n- 照着教程，复制粘贴，快速实现《招聘网站》，有点小成就感。\n- 中午闲着没事，到slack上面帮一个同学解决问题，我开始尝试主动地帮助别人，这很好，继续保持。\n\n## Interpretive\n\n昨天学到最有价值的概念是**提取练习**，在昨天的日记]中有提到这个方法。在知道了这个方法的重要性之后，还有更重要的一步要做，那就是践行。其实写ORID日记这件事本身就是很好的提取练习，当我意识到这一点之后，写文章更加有动力了。\n\n### 任务优先级\n\n先说说接触到这个概念之后，很多人（包括我）平时在做一个项目之前，会在事先对需求进行评估与规划，大概的是这个样子：\n\n- A功能肯定要有的；\n- B功能也不错，必须要有；\n- C功能看起来也不错呀，加上加上；\n- 某某公司实现了D功能，效果不错呀，加上加上；\n- ...\n\n这样做表面上看起来没有什么问题，但其实有一个很重要的点没有考虑到，那就是**任务的优先级**。\n\n根据任务的优先级，可以把需求分为4种：\n\n- Must have（必须有）\n- Should have（应该有）\n- Could have（可以有）\n- Nice to have（有的话最好了，没有也无伤大雅）\n\n在上面提到的例子中，其实是把所有的需求都当作Must have，也就是必须做，但仔细想想，一个初期的产品肯定不是所有的功能都非做不可的。\n\n举个生活中的例子，当你早上起床到公司上班的这个过程中，要做的事情有洗漱、穿衣、拿手机、拿钥匙，吃早餐、坐车等等。在这些事情当中，吃早餐是Should have，也就是应该吃，但如果偶尔不想吃，其实影响不大，对吧，而其他的事情就是Must have，不做肯定是不行的。\n\n所以，在一开始也就是在做最小可行性产品的时候，需要着重考虑的需求是：Must和Should。不然的话就后面就一发不可收拾了。\n\n在实际工作中，很多人程序员都会有遇到这种情况：正在做一个需求，中途冒出来很多小需求，怎么办？很多人可能会停下手中的活，然后去做这些小需求，想着把这些小需求做完，再回来做原先的需求，但事情往往不是按照我们想的那样进行的，后面还会不断地有新的想法冒出来，如果脑子里面没有优先级的概念，那就会想当然地认为每个任务都很重要，所以想法跳出来一个，就换一个，再跳出来一个，就再换一个，如此反复，**需求永远做不完，越做越多，产品永远都无法上线**。\n\n正确的姿势是当一个中途冒出来一个想法时，先记录下来，然后忽略它，等把手头的事情都做完之后，再**根据上面4个优先级，觉得要不要做这个需求，如果是Must或者Should，才可以把需求列入后续计划中**。\n\n由此得到：\n\n> 在刚开始做一个产品时，也就是打算做一个最小可行性产品时，对所有的需求按照4个优先级进行评估，然后**只做Must或者Should的功能**，不要添加太多无畏的个人想法，因为这些想法很可能只是开发者自己希望有的，而不是用户真正需要的。当用户只是需要一辆汽车时，造一辆飞机出来显然是错误的，也是注定失败的。\n\n### User Story（用户故事）\n\nUser Story就是把自己为某个角色，然后去做某事，以完成某商业价值。\n\n在一个招聘系统中，有两种角色\n\n- 身为管理员，可以发布职位，以达到招募人才的目的。\n- 身为应聘者，可以筛选职位，以达到获得自己心仪薪水的职位。\n\n使用User Story整理需求有什么好处？从用户的角度出发，把目光聚焦在各个角色的关键功能上（Must & Should的需求）。\n\n> “角色”正是系统复杂度的关键。\n\n在做一个系统之前，首先应该搞清楚这个系统里面有多少个角色，某些角色能不能削减，因为通常来说，每增加一个角色，系统的复杂度就会上一个“次方”，所以必须谨慎考虑。\n\n## Decisional\n\n《招聘系统》第二遍（手敲）","source":"_posts/2017-01-04-coding-diary.md","raw":"---\ntitle: 【ORID总结】1/4\ncategories: 全栈营\ntags: 用户故事\n---\n\n## Objective\n\n- 《招聘网站》第一遍（复制粘贴）\n\n## Reflective\n\n- 照着教程，复制粘贴，快速实现《招聘网站》，有点小成就感。\n- 中午闲着没事，到slack上面帮一个同学解决问题，我开始尝试主动地帮助别人，这很好，继续保持。\n\n## Interpretive\n\n昨天学到最有价值的概念是**提取练习**，在昨天的日记]中有提到这个方法。在知道了这个方法的重要性之后，还有更重要的一步要做，那就是践行。其实写ORID日记这件事本身就是很好的提取练习，当我意识到这一点之后，写文章更加有动力了。\n\n### 任务优先级\n\n先说说接触到这个概念之后，很多人（包括我）平时在做一个项目之前，会在事先对需求进行评估与规划，大概的是这个样子：\n\n- A功能肯定要有的；\n- B功能也不错，必须要有；\n- C功能看起来也不错呀，加上加上；\n- 某某公司实现了D功能，效果不错呀，加上加上；\n- ...\n\n这样做表面上看起来没有什么问题，但其实有一个很重要的点没有考虑到，那就是**任务的优先级**。\n\n根据任务的优先级，可以把需求分为4种：\n\n- Must have（必须有）\n- Should have（应该有）\n- Could have（可以有）\n- Nice to have（有的话最好了，没有也无伤大雅）\n\n在上面提到的例子中，其实是把所有的需求都当作Must have，也就是必须做，但仔细想想，一个初期的产品肯定不是所有的功能都非做不可的。\n\n举个生活中的例子，当你早上起床到公司上班的这个过程中，要做的事情有洗漱、穿衣、拿手机、拿钥匙，吃早餐、坐车等等。在这些事情当中，吃早餐是Should have，也就是应该吃，但如果偶尔不想吃，其实影响不大，对吧，而其他的事情就是Must have，不做肯定是不行的。\n\n所以，在一开始也就是在做最小可行性产品的时候，需要着重考虑的需求是：Must和Should。不然的话就后面就一发不可收拾了。\n\n在实际工作中，很多人程序员都会有遇到这种情况：正在做一个需求，中途冒出来很多小需求，怎么办？很多人可能会停下手中的活，然后去做这些小需求，想着把这些小需求做完，再回来做原先的需求，但事情往往不是按照我们想的那样进行的，后面还会不断地有新的想法冒出来，如果脑子里面没有优先级的概念，那就会想当然地认为每个任务都很重要，所以想法跳出来一个，就换一个，再跳出来一个，就再换一个，如此反复，**需求永远做不完，越做越多，产品永远都无法上线**。\n\n正确的姿势是当一个中途冒出来一个想法时，先记录下来，然后忽略它，等把手头的事情都做完之后，再**根据上面4个优先级，觉得要不要做这个需求，如果是Must或者Should，才可以把需求列入后续计划中**。\n\n由此得到：\n\n> 在刚开始做一个产品时，也就是打算做一个最小可行性产品时，对所有的需求按照4个优先级进行评估，然后**只做Must或者Should的功能**，不要添加太多无畏的个人想法，因为这些想法很可能只是开发者自己希望有的，而不是用户真正需要的。当用户只是需要一辆汽车时，造一辆飞机出来显然是错误的，也是注定失败的。\n\n### User Story（用户故事）\n\nUser Story就是把自己为某个角色，然后去做某事，以完成某商业价值。\n\n在一个招聘系统中，有两种角色\n\n- 身为管理员，可以发布职位，以达到招募人才的目的。\n- 身为应聘者，可以筛选职位，以达到获得自己心仪薪水的职位。\n\n使用User Story整理需求有什么好处？从用户的角度出发，把目光聚焦在各个角色的关键功能上（Must & Should的需求）。\n\n> “角色”正是系统复杂度的关键。\n\n在做一个系统之前，首先应该搞清楚这个系统里面有多少个角色，某些角色能不能削减，因为通常来说，每增加一个角色，系统的复杂度就会上一个“次方”，所以必须谨慎考虑。\n\n## Decisional\n\n《招聘系统》第二遍（手敲）","slug":"2017-01-04-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbi003gfson5aj749sa","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>《招聘网站》第一遍（复制粘贴）</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><ul>\n<li>照着教程，复制粘贴，快速实现《招聘网站》，有点小成就感。</li>\n<li>中午闲着没事，到slack上面帮一个同学解决问题，我开始尝试主动地帮助别人，这很好，继续保持。</li>\n</ul>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p>昨天学到最有价值的概念是<strong>提取练习</strong>，在昨天的日记]中有提到这个方法。在知道了这个方法的重要性之后，还有更重要的一步要做，那就是践行。其实写ORID日记这件事本身就是很好的提取练习，当我意识到这一点之后，写文章更加有动力了。</p>\n<h3 id=\"任务优先级\"><a href=\"#任务优先级\" class=\"headerlink\" title=\"任务优先级\"></a>任务优先级</h3><p>先说说接触到这个概念之后，很多人（包括我）平时在做一个项目之前，会在事先对需求进行评估与规划，大概的是这个样子：</p>\n<ul>\n<li>A功能肯定要有的；</li>\n<li>B功能也不错，必须要有；</li>\n<li>C功能看起来也不错呀，加上加上；</li>\n<li>某某公司实现了D功能，效果不错呀，加上加上；</li>\n<li>…</li>\n</ul>\n<p>这样做表面上看起来没有什么问题，但其实有一个很重要的点没有考虑到，那就是<strong>任务的优先级</strong>。</p>\n<p>根据任务的优先级，可以把需求分为4种：</p>\n<ul>\n<li>Must have（必须有）</li>\n<li>Should have（应该有）</li>\n<li>Could have（可以有）</li>\n<li>Nice to have（有的话最好了，没有也无伤大雅）</li>\n</ul>\n<p>在上面提到的例子中，其实是把所有的需求都当作Must have，也就是必须做，但仔细想想，一个初期的产品肯定不是所有的功能都非做不可的。</p>\n<p>举个生活中的例子，当你早上起床到公司上班的这个过程中，要做的事情有洗漱、穿衣、拿手机、拿钥匙，吃早餐、坐车等等。在这些事情当中，吃早餐是Should have，也就是应该吃，但如果偶尔不想吃，其实影响不大，对吧，而其他的事情就是Must have，不做肯定是不行的。</p>\n<p>所以，在一开始也就是在做最小可行性产品的时候，需要着重考虑的需求是：Must和Should。不然的话就后面就一发不可收拾了。</p>\n<p>在实际工作中，很多人程序员都会有遇到这种情况：正在做一个需求，中途冒出来很多小需求，怎么办？很多人可能会停下手中的活，然后去做这些小需求，想着把这些小需求做完，再回来做原先的需求，但事情往往不是按照我们想的那样进行的，后面还会不断地有新的想法冒出来，如果脑子里面没有优先级的概念，那就会想当然地认为每个任务都很重要，所以想法跳出来一个，就换一个，再跳出来一个，就再换一个，如此反复，<strong>需求永远做不完，越做越多，产品永远都无法上线</strong>。</p>\n<p>正确的姿势是当一个中途冒出来一个想法时，先记录下来，然后忽略它，等把手头的事情都做完之后，再<strong>根据上面4个优先级，觉得要不要做这个需求，如果是Must或者Should，才可以把需求列入后续计划中</strong>。</p>\n<p>由此得到：</p>\n<blockquote>\n<p>在刚开始做一个产品时，也就是打算做一个最小可行性产品时，对所有的需求按照4个优先级进行评估，然后<strong>只做Must或者Should的功能</strong>，不要添加太多无畏的个人想法，因为这些想法很可能只是开发者自己希望有的，而不是用户真正需要的。当用户只是需要一辆汽车时，造一辆飞机出来显然是错误的，也是注定失败的。</p>\n</blockquote>\n<h3 id=\"User-Story（用户故事）\"><a href=\"#User-Story（用户故事）\" class=\"headerlink\" title=\"User Story（用户故事）\"></a>User Story（用户故事）</h3><p>User Story就是把自己为某个角色，然后去做某事，以完成某商业价值。</p>\n<p>在一个招聘系统中，有两种角色</p>\n<ul>\n<li>身为管理员，可以发布职位，以达到招募人才的目的。</li>\n<li>身为应聘者，可以筛选职位，以达到获得自己心仪薪水的职位。</li>\n</ul>\n<p>使用User Story整理需求有什么好处？从用户的角度出发，把目光聚焦在各个角色的关键功能上（Must &amp; Should的需求）。</p>\n<blockquote>\n<p>“角色”正是系统复杂度的关键。</p>\n</blockquote>\n<p>在做一个系统之前，首先应该搞清楚这个系统里面有多少个角色，某些角色能不能削减，因为通常来说，每增加一个角色，系统的复杂度就会上一个“次方”，所以必须谨慎考虑。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>《招聘系统》第二遍（手敲）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>《招聘网站》第一遍（复制粘贴）</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><ul>\n<li>照着教程，复制粘贴，快速实现《招聘网站》，有点小成就感。</li>\n<li>中午闲着没事，到slack上面帮一个同学解决问题，我开始尝试主动地帮助别人，这很好，继续保持。</li>\n</ul>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p>昨天学到最有价值的概念是<strong>提取练习</strong>，在昨天的日记]中有提到这个方法。在知道了这个方法的重要性之后，还有更重要的一步要做，那就是践行。其实写ORID日记这件事本身就是很好的提取练习，当我意识到这一点之后，写文章更加有动力了。</p>\n<h3 id=\"任务优先级\"><a href=\"#任务优先级\" class=\"headerlink\" title=\"任务优先级\"></a>任务优先级</h3><p>先说说接触到这个概念之后，很多人（包括我）平时在做一个项目之前，会在事先对需求进行评估与规划，大概的是这个样子：</p>\n<ul>\n<li>A功能肯定要有的；</li>\n<li>B功能也不错，必须要有；</li>\n<li>C功能看起来也不错呀，加上加上；</li>\n<li>某某公司实现了D功能，效果不错呀，加上加上；</li>\n<li>…</li>\n</ul>\n<p>这样做表面上看起来没有什么问题，但其实有一个很重要的点没有考虑到，那就是<strong>任务的优先级</strong>。</p>\n<p>根据任务的优先级，可以把需求分为4种：</p>\n<ul>\n<li>Must have（必须有）</li>\n<li>Should have（应该有）</li>\n<li>Could have（可以有）</li>\n<li>Nice to have（有的话最好了，没有也无伤大雅）</li>\n</ul>\n<p>在上面提到的例子中，其实是把所有的需求都当作Must have，也就是必须做，但仔细想想，一个初期的产品肯定不是所有的功能都非做不可的。</p>\n<p>举个生活中的例子，当你早上起床到公司上班的这个过程中，要做的事情有洗漱、穿衣、拿手机、拿钥匙，吃早餐、坐车等等。在这些事情当中，吃早餐是Should have，也就是应该吃，但如果偶尔不想吃，其实影响不大，对吧，而其他的事情就是Must have，不做肯定是不行的。</p>\n<p>所以，在一开始也就是在做最小可行性产品的时候，需要着重考虑的需求是：Must和Should。不然的话就后面就一发不可收拾了。</p>\n<p>在实际工作中，很多人程序员都会有遇到这种情况：正在做一个需求，中途冒出来很多小需求，怎么办？很多人可能会停下手中的活，然后去做这些小需求，想着把这些小需求做完，再回来做原先的需求，但事情往往不是按照我们想的那样进行的，后面还会不断地有新的想法冒出来，如果脑子里面没有优先级的概念，那就会想当然地认为每个任务都很重要，所以想法跳出来一个，就换一个，再跳出来一个，就再换一个，如此反复，<strong>需求永远做不完，越做越多，产品永远都无法上线</strong>。</p>\n<p>正确的姿势是当一个中途冒出来一个想法时，先记录下来，然后忽略它，等把手头的事情都做完之后，再<strong>根据上面4个优先级，觉得要不要做这个需求，如果是Must或者Should，才可以把需求列入后续计划中</strong>。</p>\n<p>由此得到：</p>\n<blockquote>\n<p>在刚开始做一个产品时，也就是打算做一个最小可行性产品时，对所有的需求按照4个优先级进行评估，然后<strong>只做Must或者Should的功能</strong>，不要添加太多无畏的个人想法，因为这些想法很可能只是开发者自己希望有的，而不是用户真正需要的。当用户只是需要一辆汽车时，造一辆飞机出来显然是错误的，也是注定失败的。</p>\n</blockquote>\n<h3 id=\"User-Story（用户故事）\"><a href=\"#User-Story（用户故事）\" class=\"headerlink\" title=\"User Story（用户故事）\"></a>User Story（用户故事）</h3><p>User Story就是把自己为某个角色，然后去做某事，以完成某商业价值。</p>\n<p>在一个招聘系统中，有两种角色</p>\n<ul>\n<li>身为管理员，可以发布职位，以达到招募人才的目的。</li>\n<li>身为应聘者，可以筛选职位，以达到获得自己心仪薪水的职位。</li>\n</ul>\n<p>使用User Story整理需求有什么好处？从用户的角度出发，把目光聚焦在各个角色的关键功能上（Must &amp; Should的需求）。</p>\n<blockquote>\n<p>“角色”正是系统复杂度的关键。</p>\n</blockquote>\n<p>在做一个系统之前，首先应该搞清楚这个系统里面有多少个角色，某些角色能不能削减，因为通常来说，每增加一个角色，系统的复杂度就会上一个“次方”，所以必须谨慎考虑。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>《招聘系统》第二遍（手敲）</p>\n"},{"title":"【错误】UnknownFormat","_content":"\n### 动作\n\n写了controller，但是没有新建对应的html文件。\n\n### 结果\n\n![][image-1]\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/yy7dk.png\n","source":"_posts/2017-01-04-unkown-format.md","raw":"---\ntitle: 【错误】UnknownFormat\ncategories: 全栈营\n---\n\n### 动作\n\n写了controller，但是没有新建对应的html文件。\n\n### 结果\n\n![][image-1]\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/yy7dk.png\n","slug":"2017-01-04-unkown-format","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbk003ifsonl2j3g5ao","content":"<h3 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h3><p>写了controller，但是没有新建对应的html文件。</p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/yy7dk.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h3><p>写了controller，但是没有新建对应的html文件。</p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/yy7dk.png\" alt=\"\"></p>\n"},{"title":"【错误】无法执行post方法","_content":"\n### 动作\n\nhtml代码\n\n![][image-1]\n\n点击`hide`按钮\n\n![][image-2]\n\n### 结果\n\n![][image-3]\n\n### 分析\n\n从图中可以看出页面发出的是`get`请求\n\n而我定义的方法是post\n\n![][image-4]\n\n### 解决方法\n\n把方法定义为`post`\n\n![][image-5]\n\ndone！\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/lxhv1.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/czrzb.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/d5jjq.png\n[image-4]:\thttp://oggx6lf7f.bkt.clouddn.com/3cav2.png\n[image-5]:\thttp://oggx6lf7f.bkt.clouddn.com/n73pl.png\n","source":"_posts/2017-01-06-can-not-excute-post-method.md","raw":"---\ntitle: 【错误】无法执行post方法\ncategories: 全栈营\n---\n\n### 动作\n\nhtml代码\n\n![][image-1]\n\n点击`hide`按钮\n\n![][image-2]\n\n### 结果\n\n![][image-3]\n\n### 分析\n\n从图中可以看出页面发出的是`get`请求\n\n而我定义的方法是post\n\n![][image-4]\n\n### 解决方法\n\n把方法定义为`post`\n\n![][image-5]\n\ndone！\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/lxhv1.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/czrzb.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/d5jjq.png\n[image-4]:\thttp://oggx6lf7f.bkt.clouddn.com/3cav2.png\n[image-5]:\thttp://oggx6lf7f.bkt.clouddn.com/n73pl.png\n","slug":"2017-01-06-can-not-excute-post-method","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbm003lfsonii7ebkfk","content":"<h3 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h3><p>html代码</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lxhv1.png\" alt=\"\"></p>\n<p>点击<code>hide</code>按钮</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/czrzb.png\" alt=\"\"></p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/d5jjq.png\" alt=\"\"></p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>从图中可以看出页面发出的是<code>get</code>请求</p>\n<p>而我定义的方法是post</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/3cav2.png\" alt=\"\"></p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>把方法定义为<code>post</code></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/n73pl.png\" alt=\"\"></p>\n<p>done！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h3><p>html代码</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lxhv1.png\" alt=\"\"></p>\n<p>点击<code>hide</code>按钮</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/czrzb.png\" alt=\"\"></p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/d5jjq.png\" alt=\"\"></p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>从图中可以看出页面发出的是<code>get</code>请求</p>\n<p>而我定义的方法是post</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/3cav2.png\" alt=\"\"></p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>把方法定义为<code>post</code></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/n73pl.png\" alt=\"\"></p>\n<p>done！</p>\n"},{"title":"【错误】update action","_content":"\n### 动作\n\n在`views/admin/jobs/edit.html.erb`点击更新按钮。\n\n### 预期结果\n\n执行`admin/jobs#update`\n\n### 实际结果\n\n执行`jobs#update`\n","source":"_posts/2017-01-06-can-not-excute-update-action-in-right-way.md","raw":"---\ntitle: 【错误】update action\ncategories: 全栈营\n---\n\n### 动作\n\n在`views/admin/jobs/edit.html.erb`点击更新按钮。\n\n### 预期结果\n\n执行`admin/jobs#update`\n\n### 实际结果\n\n执行`jobs#update`\n","slug":"2017-01-06-can-not-excute-update-action-in-right-way","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbn003nfsonh417ep7l","content":"<h3 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h3><p>在<code>views/admin/jobs/edit.html.erb</code>点击更新按钮。</p>\n<h3 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h3><p>执行<code>admin/jobs#update</code></p>\n<h3 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h3><p>执行<code>jobs#update</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h3><p>在<code>views/admin/jobs/edit.html.erb</code>点击更新按钮。</p>\n<h3 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h3><p>执行<code>admin/jobs#update</code></p>\n<h3 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h3><p>执行<code>jobs#update</code></p>\n"},{"title":"【ORID总结】1/6","_content":"\n## Objective\n\n- 《招聘练习》加分题，完成作业100%\n- Try Git练习\n\n## Reflective\n\n平常心，没有很大的起伏，很享受心流状态。\n\n## Interpretive\n\n### 使用post方法\n\n如果要在views中使用`post`方法，需要声明，不然默认是`get`方法，今天针对这个错误写了一篇文章。[【错误】无法执行post方法][1]\n\n### layout\n\n用layout可以指定不同的模板，比如，如果在controller中，没有声明layout，这默认使用`views/layout/application.html.erb`作为模板，如果声明`layout: \"admin\"`，这会使用`views/layout/admin.html.erb`作为模板。\n\n这样一来就可以针对不同的界面，制作不同的layout模板。\n\n### Growth Hack\n\n今天在看xdite老师的《Growth Hack这样做》，这本书的金句或者说核心要点就8个字：\n\n> 增强信心，降低疑虑。\n\n所有的手法都是为了达到这两个目的。当知道Growth Hack的原理之后，才发现，原来生活中有很多很多的实例，毫不夸张地说，是多到爆炸，比如说：\n\n> 各种铺天盖地的广告 — Acquisition（用户获取）\n> \n> 理财产品注册送投资金额 — Activation（用户激活）\n> \n> 拉好友来注册，送投资券 — Referral（推荐使用）\n\n现在回过头来看全栈营的网站，满满都是Growth Hack的套路啊，哈哈，完全可以用书上提到的方法一一对应。下面把罗列一下全栈营所使用的、能看得见的Growth Hack手法。\n\n### Landing Page\n\n标准步骤：\n\n- 用一句话形容自己\n- 使用这个服务（产品）的三大好处\n- 叙述服务的运作原理或制作示意图、示意影片\n- 加上使用者见证或媒体报道\n- CALL TO ACTION（呼唤来客行动的按钮）\n- 强化信心的补充：免费注册或退款保证\n\n下面的全栈营的实例\n\n![][image-1]\n![][image-2]\n![][image-3]\n![][image-4]\n![][image-5]\n\n好处是什么：**减低疑虑，增强信心**。\n\n### 注册表格 + 注册好处 = 提高注册率\n\n![][image-6]\n\n好处是什么：**减低疑虑，增强信心**。\n\n### Customer Support\n\n![][image-7]\n![][image-8]\n\n好处是什么：**减低疑虑，增强信心**。\n\n### 主动出击！线上服务于产品不可或缺的FAQ\n\n![][image-9]\n\n好处依然是：**减低疑虑，增强信心**。\n\n### 最传统的寄信，是最好的留客手段\n\n这是我之前在xdite老师的growth school上面做rails 101时，做完一半的课程之后收到的一份邮件，非常地惊讶，作为一个用户，被重视感觉真好\\~\n\n![][image-10]\n\n最后总结一下：当不知道Growth Hack时，生活中很少有Growth Hack的资讯，当知道Growth Hack原理时，就会发现生活中处处都有Growth Hack的身影，而且是多到爆炸。\n\n## Decisional\n\n明天是周末，《招聘网站》接着练练练，开始尝试加入一些新的小功能。\n\n另外，还要写两篇文章：\n\n1. 《本周学到的最棒概念/工具》\n2. 《本周遇到最大的坑》\n\n[1]:\thttp://raimonfuns-blog.logdown.com/posts/1278452\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/h9q68.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/tif44.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/45l28.png\n[image-4]:\thttp://oggx6lf7f.bkt.clouddn.com/qqvat.png\n[image-5]:\thttp://oggx6lf7f.bkt.clouddn.com/p56mg.png\n[image-6]:\thttp://oggx6lf7f.bkt.clouddn.com/4jtej.png\n[image-7]:\thttp://oggx6lf7f.bkt.clouddn.com/5ij0o.png\n[image-8]:\thttp://oggx6lf7f.bkt.clouddn.com/ltzmn.png\n[image-9]:\thttp://oggx6lf7f.bkt.clouddn.com/59hks.png\n[image-10]:\thttp://oggx6lf7f.bkt.clouddn.com/jduy1.png","source":"_posts/2017-01-06-coding-diary.md","raw":"---\ntitle: 【ORID总结】1/6\ncategories: 全栈营\n---\n\n## Objective\n\n- 《招聘练习》加分题，完成作业100%\n- Try Git练习\n\n## Reflective\n\n平常心，没有很大的起伏，很享受心流状态。\n\n## Interpretive\n\n### 使用post方法\n\n如果要在views中使用`post`方法，需要声明，不然默认是`get`方法，今天针对这个错误写了一篇文章。[【错误】无法执行post方法][1]\n\n### layout\n\n用layout可以指定不同的模板，比如，如果在controller中，没有声明layout，这默认使用`views/layout/application.html.erb`作为模板，如果声明`layout: \"admin\"`，这会使用`views/layout/admin.html.erb`作为模板。\n\n这样一来就可以针对不同的界面，制作不同的layout模板。\n\n### Growth Hack\n\n今天在看xdite老师的《Growth Hack这样做》，这本书的金句或者说核心要点就8个字：\n\n> 增强信心，降低疑虑。\n\n所有的手法都是为了达到这两个目的。当知道Growth Hack的原理之后，才发现，原来生活中有很多很多的实例，毫不夸张地说，是多到爆炸，比如说：\n\n> 各种铺天盖地的广告 — Acquisition（用户获取）\n> \n> 理财产品注册送投资金额 — Activation（用户激活）\n> \n> 拉好友来注册，送投资券 — Referral（推荐使用）\n\n现在回过头来看全栈营的网站，满满都是Growth Hack的套路啊，哈哈，完全可以用书上提到的方法一一对应。下面把罗列一下全栈营所使用的、能看得见的Growth Hack手法。\n\n### Landing Page\n\n标准步骤：\n\n- 用一句话形容自己\n- 使用这个服务（产品）的三大好处\n- 叙述服务的运作原理或制作示意图、示意影片\n- 加上使用者见证或媒体报道\n- CALL TO ACTION（呼唤来客行动的按钮）\n- 强化信心的补充：免费注册或退款保证\n\n下面的全栈营的实例\n\n![][image-1]\n![][image-2]\n![][image-3]\n![][image-4]\n![][image-5]\n\n好处是什么：**减低疑虑，增强信心**。\n\n### 注册表格 + 注册好处 = 提高注册率\n\n![][image-6]\n\n好处是什么：**减低疑虑，增强信心**。\n\n### Customer Support\n\n![][image-7]\n![][image-8]\n\n好处是什么：**减低疑虑，增强信心**。\n\n### 主动出击！线上服务于产品不可或缺的FAQ\n\n![][image-9]\n\n好处依然是：**减低疑虑，增强信心**。\n\n### 最传统的寄信，是最好的留客手段\n\n这是我之前在xdite老师的growth school上面做rails 101时，做完一半的课程之后收到的一份邮件，非常地惊讶，作为一个用户，被重视感觉真好\\~\n\n![][image-10]\n\n最后总结一下：当不知道Growth Hack时，生活中很少有Growth Hack的资讯，当知道Growth Hack原理时，就会发现生活中处处都有Growth Hack的身影，而且是多到爆炸。\n\n## Decisional\n\n明天是周末，《招聘网站》接着练练练，开始尝试加入一些新的小功能。\n\n另外，还要写两篇文章：\n\n1. 《本周学到的最棒概念/工具》\n2. 《本周遇到最大的坑》\n\n[1]:\thttp://raimonfuns-blog.logdown.com/posts/1278452\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/h9q68.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/tif44.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/45l28.png\n[image-4]:\thttp://oggx6lf7f.bkt.clouddn.com/qqvat.png\n[image-5]:\thttp://oggx6lf7f.bkt.clouddn.com/p56mg.png\n[image-6]:\thttp://oggx6lf7f.bkt.clouddn.com/4jtej.png\n[image-7]:\thttp://oggx6lf7f.bkt.clouddn.com/5ij0o.png\n[image-8]:\thttp://oggx6lf7f.bkt.clouddn.com/ltzmn.png\n[image-9]:\thttp://oggx6lf7f.bkt.clouddn.com/59hks.png\n[image-10]:\thttp://oggx6lf7f.bkt.clouddn.com/jduy1.png","slug":"2017-01-06-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbp003pfsonb8k3lkbe","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>《招聘练习》加分题，完成作业100%</li>\n<li>Try Git练习</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>平常心，没有很大的起伏，很享受心流状态。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"使用post方法\"><a href=\"#使用post方法\" class=\"headerlink\" title=\"使用post方法\"></a>使用post方法</h3><p>如果要在views中使用<code>post</code>方法，需要声明，不然默认是<code>get</code>方法，今天针对这个错误写了一篇文章。<a href=\"http://raimonfuns-blog.logdown.com/posts/1278452\" target=\"_blank\" rel=\"noopener\">【错误】无法执行post方法</a></p>\n<h3 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h3><p>用layout可以指定不同的模板，比如，如果在controller中，没有声明layout，这默认使用<code>views/layout/application.html.erb</code>作为模板，如果声明<code>layout: &quot;admin&quot;</code>，这会使用<code>views/layout/admin.html.erb</code>作为模板。</p>\n<p>这样一来就可以针对不同的界面，制作不同的layout模板。</p>\n<h3 id=\"Growth-Hack\"><a href=\"#Growth-Hack\" class=\"headerlink\" title=\"Growth Hack\"></a>Growth Hack</h3><p>今天在看xdite老师的《Growth Hack这样做》，这本书的金句或者说核心要点就8个字：</p>\n<blockquote>\n<p>增强信心，降低疑虑。</p>\n</blockquote>\n<p>所有的手法都是为了达到这两个目的。当知道Growth Hack的原理之后，才发现，原来生活中有很多很多的实例，毫不夸张地说，是多到爆炸，比如说：</p>\n<blockquote>\n<p>各种铺天盖地的广告 — Acquisition（用户获取）</p>\n<p>理财产品注册送投资金额 — Activation（用户激活）</p>\n<p>拉好友来注册，送投资券 — Referral（推荐使用）</p>\n</blockquote>\n<p>现在回过头来看全栈营的网站，满满都是Growth Hack的套路啊，哈哈，完全可以用书上提到的方法一一对应。下面把罗列一下全栈营所使用的、能看得见的Growth Hack手法。</p>\n<h3 id=\"Landing-Page\"><a href=\"#Landing-Page\" class=\"headerlink\" title=\"Landing Page\"></a>Landing Page</h3><p>标准步骤：</p>\n<ul>\n<li>用一句话形容自己</li>\n<li>使用这个服务（产品）的三大好处</li>\n<li>叙述服务的运作原理或制作示意图、示意影片</li>\n<li>加上使用者见证或媒体报道</li>\n<li>CALL TO ACTION（呼唤来客行动的按钮）</li>\n<li>强化信心的补充：免费注册或退款保证</li>\n</ul>\n<p>下面的全栈营的实例</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/h9q68.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/tif44.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/45l28.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/qqvat.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/p56mg.png\" alt=\"\"></p>\n<p>好处是什么：<strong>减低疑虑，增强信心</strong>。</p>\n<h3 id=\"注册表格-注册好处-提高注册率\"><a href=\"#注册表格-注册好处-提高注册率\" class=\"headerlink\" title=\"注册表格 + 注册好处 = 提高注册率\"></a>注册表格 + 注册好处 = 提高注册率</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/4jtej.png\" alt=\"\"></p>\n<p>好处是什么：<strong>减低疑虑，增强信心</strong>。</p>\n<h3 id=\"Customer-Support\"><a href=\"#Customer-Support\" class=\"headerlink\" title=\"Customer Support\"></a>Customer Support</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/5ij0o.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/ltzmn.png\" alt=\"\"></p>\n<p>好处是什么：<strong>减低疑虑，增强信心</strong>。</p>\n<h3 id=\"主动出击！线上服务于产品不可或缺的FAQ\"><a href=\"#主动出击！线上服务于产品不可或缺的FAQ\" class=\"headerlink\" title=\"主动出击！线上服务于产品不可或缺的FAQ\"></a>主动出击！线上服务于产品不可或缺的FAQ</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/59hks.png\" alt=\"\"></p>\n<p>好处依然是：<strong>减低疑虑，增强信心</strong>。</p>\n<h3 id=\"最传统的寄信，是最好的留客手段\"><a href=\"#最传统的寄信，是最好的留客手段\" class=\"headerlink\" title=\"最传统的寄信，是最好的留客手段\"></a>最传统的寄信，是最好的留客手段</h3><p>这是我之前在xdite老师的growth school上面做rails 101时，做完一半的课程之后收到的一份邮件，非常地惊讶，作为一个用户，被重视感觉真好~</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/jduy1.png\" alt=\"\"></p>\n<p>最后总结一下：当不知道Growth Hack时，生活中很少有Growth Hack的资讯，当知道Growth Hack原理时，就会发现生活中处处都有Growth Hack的身影，而且是多到爆炸。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天是周末，《招聘网站》接着练练练，开始尝试加入一些新的小功能。</p>\n<p>另外，还要写两篇文章：</p>\n<ol>\n<li>《本周学到的最棒概念/工具》</li>\n<li>《本周遇到最大的坑》</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>《招聘练习》加分题，完成作业100%</li>\n<li>Try Git练习</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>平常心，没有很大的起伏，很享受心流状态。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"使用post方法\"><a href=\"#使用post方法\" class=\"headerlink\" title=\"使用post方法\"></a>使用post方法</h3><p>如果要在views中使用<code>post</code>方法，需要声明，不然默认是<code>get</code>方法，今天针对这个错误写了一篇文章。<a href=\"http://raimonfuns-blog.logdown.com/posts/1278452\" target=\"_blank\" rel=\"noopener\">【错误】无法执行post方法</a></p>\n<h3 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h3><p>用layout可以指定不同的模板，比如，如果在controller中，没有声明layout，这默认使用<code>views/layout/application.html.erb</code>作为模板，如果声明<code>layout: &quot;admin&quot;</code>，这会使用<code>views/layout/admin.html.erb</code>作为模板。</p>\n<p>这样一来就可以针对不同的界面，制作不同的layout模板。</p>\n<h3 id=\"Growth-Hack\"><a href=\"#Growth-Hack\" class=\"headerlink\" title=\"Growth Hack\"></a>Growth Hack</h3><p>今天在看xdite老师的《Growth Hack这样做》，这本书的金句或者说核心要点就8个字：</p>\n<blockquote>\n<p>增强信心，降低疑虑。</p>\n</blockquote>\n<p>所有的手法都是为了达到这两个目的。当知道Growth Hack的原理之后，才发现，原来生活中有很多很多的实例，毫不夸张地说，是多到爆炸，比如说：</p>\n<blockquote>\n<p>各种铺天盖地的广告 — Acquisition（用户获取）</p>\n<p>理财产品注册送投资金额 — Activation（用户激活）</p>\n<p>拉好友来注册，送投资券 — Referral（推荐使用）</p>\n</blockquote>\n<p>现在回过头来看全栈营的网站，满满都是Growth Hack的套路啊，哈哈，完全可以用书上提到的方法一一对应。下面把罗列一下全栈营所使用的、能看得见的Growth Hack手法。</p>\n<h3 id=\"Landing-Page\"><a href=\"#Landing-Page\" class=\"headerlink\" title=\"Landing Page\"></a>Landing Page</h3><p>标准步骤：</p>\n<ul>\n<li>用一句话形容自己</li>\n<li>使用这个服务（产品）的三大好处</li>\n<li>叙述服务的运作原理或制作示意图、示意影片</li>\n<li>加上使用者见证或媒体报道</li>\n<li>CALL TO ACTION（呼唤来客行动的按钮）</li>\n<li>强化信心的补充：免费注册或退款保证</li>\n</ul>\n<p>下面的全栈营的实例</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/h9q68.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/tif44.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/45l28.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/qqvat.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/p56mg.png\" alt=\"\"></p>\n<p>好处是什么：<strong>减低疑虑，增强信心</strong>。</p>\n<h3 id=\"注册表格-注册好处-提高注册率\"><a href=\"#注册表格-注册好处-提高注册率\" class=\"headerlink\" title=\"注册表格 + 注册好处 = 提高注册率\"></a>注册表格 + 注册好处 = 提高注册率</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/4jtej.png\" alt=\"\"></p>\n<p>好处是什么：<strong>减低疑虑，增强信心</strong>。</p>\n<h3 id=\"Customer-Support\"><a href=\"#Customer-Support\" class=\"headerlink\" title=\"Customer Support\"></a>Customer Support</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/5ij0o.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/ltzmn.png\" alt=\"\"></p>\n<p>好处是什么：<strong>减低疑虑，增强信心</strong>。</p>\n<h3 id=\"主动出击！线上服务于产品不可或缺的FAQ\"><a href=\"#主动出击！线上服务于产品不可或缺的FAQ\" class=\"headerlink\" title=\"主动出击！线上服务于产品不可或缺的FAQ\"></a>主动出击！线上服务于产品不可或缺的FAQ</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/59hks.png\" alt=\"\"></p>\n<p>好处依然是：<strong>减低疑虑，增强信心</strong>。</p>\n<h3 id=\"最传统的寄信，是最好的留客手段\"><a href=\"#最传统的寄信，是最好的留客手段\" class=\"headerlink\" title=\"最传统的寄信，是最好的留客手段\"></a>最传统的寄信，是最好的留客手段</h3><p>这是我之前在xdite老师的growth school上面做rails 101时，做完一半的课程之后收到的一份邮件，非常地惊讶，作为一个用户，被重视感觉真好~</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/jduy1.png\" alt=\"\"></p>\n<p>最后总结一下：当不知道Growth Hack时，生活中很少有Growth Hack的资讯，当知道Growth Hack原理时，就会发现生活中处处都有Growth Hack的身影，而且是多到爆炸。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天是周末，《招聘网站》接着练练练，开始尝试加入一些新的小功能。</p>\n<p>另外，还要写两篇文章：</p>\n<ol>\n<li>《本周学到的最棒概念/工具》</li>\n<li>《本周遇到最大的坑》</li>\n</ol>\n"},{"title":"【错误】不能执行正确的create和update（多级路由）","_content":"\n### 位置\n\n《招聘网站》admin的CURD\n\n### 动作\n\n在`views/admin/jobs/new.index.html`和`views/admin/jobs/update.index.html`中触发new和update\n\n### 预期结果\n\n分别执行`admin/jobs#new`和`admin/jobs#update`\n\n### 实际结果\n\n分别执行的是`jobs#new`和`jobs#update`\n\n### 分析\n\n在jobs和admin/jobs的模板是一样的，这样导致admin/jobs最终触发的都是jobs的controller里面的方法，所以要修改admin/jobs中的模板，加以区分。\n\n### 解决方法\n\n![][image-1]\n![][image-2]\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/8v9cd.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/l3bl7.png\n","source":"_posts/2017-01-07-admin-jobs-create-update.md","raw":"---\ntitle: 【错误】不能执行正确的create和update（多级路由）\ncategories: 全栈营\n---\n\n### 位置\n\n《招聘网站》admin的CURD\n\n### 动作\n\n在`views/admin/jobs/new.index.html`和`views/admin/jobs/update.index.html`中触发new和update\n\n### 预期结果\n\n分别执行`admin/jobs#new`和`admin/jobs#update`\n\n### 实际结果\n\n分别执行的是`jobs#new`和`jobs#update`\n\n### 分析\n\n在jobs和admin/jobs的模板是一样的，这样导致admin/jobs最终触发的都是jobs的controller里面的方法，所以要修改admin/jobs中的模板，加以区分。\n\n### 解决方法\n\n![][image-1]\n![][image-2]\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/8v9cd.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/l3bl7.png\n","slug":"2017-01-07-admin-jobs-create-update","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbr003sfsongfsvhpzo","content":"<h3 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h3><p>《招聘网站》admin的CURD</p>\n<h3 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h3><p>在<code>views/admin/jobs/new.index.html</code>和<code>views/admin/jobs/update.index.html</code>中触发new和update</p>\n<h3 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h3><p>分别执行<code>admin/jobs#new</code>和<code>admin/jobs#update</code></p>\n<h3 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h3><p>分别执行的是<code>jobs#new</code>和<code>jobs#update</code></p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>在jobs和admin/jobs的模板是一样的，这样导致admin/jobs最终触发的都是jobs的controller里面的方法，所以要修改admin/jobs中的模板，加以区分。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/8v9cd.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/l3bl7.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h3><p>《招聘网站》admin的CURD</p>\n<h3 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h3><p>在<code>views/admin/jobs/new.index.html</code>和<code>views/admin/jobs/update.index.html</code>中触发new和update</p>\n<h3 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h3><p>分别执行<code>admin/jobs#new</code>和<code>admin/jobs#update</code></p>\n<h3 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h3><p>分别执行的是<code>jobs#new</code>和<code>jobs#update</code></p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>在jobs和admin/jobs的模板是一样的，这样导致admin/jobs最终触发的都是jobs的controller里面的方法，所以要修改admin/jobs中的模板，加以区分。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/8v9cd.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/l3bl7.png\" alt=\"\"></p>\n"},{"title":"【教程】bootstrap中的row布局","_content":"\n如果没加`row`包裹，两边会有15px的padding\n\n![][image-1]\n\n再加上`col-md`两边也有15px的padding，所以会和顶部header产生15px的错位\n\n![][image-2]\n\n用`row`包裹住之后，就刚好对齐了\n\n![][image-3]\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/tc7bi.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/lkthv.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/lmxqm.png\n","source":"_posts/2017-01-07-bootstrap-row.md","raw":"---\ntitle: 【教程】bootstrap中的row布局\ncategories: 全栈营\n---\n\n如果没加`row`包裹，两边会有15px的padding\n\n![][image-1]\n\n再加上`col-md`两边也有15px的padding，所以会和顶部header产生15px的错位\n\n![][image-2]\n\n用`row`包裹住之后，就刚好对齐了\n\n![][image-3]\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/tc7bi.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/lkthv.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/lmxqm.png\n","slug":"2017-01-07-bootstrap-row","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbs003ufsonx7hmo519","content":"<p>如果没加<code>row</code>包裹，两边会有15px的padding</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/tc7bi.png\" alt=\"\"></p>\n<p>再加上<code>col-md</code>两边也有15px的padding，所以会和顶部header产生15px的错位</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lkthv.png\" alt=\"\"></p>\n<p>用<code>row</code>包裹住之后，就刚好对齐了</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lmxqm.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果没加<code>row</code>包裹，两边会有15px的padding</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/tc7bi.png\" alt=\"\"></p>\n<p>再加上<code>col-md</code>两边也有15px的padding，所以会和顶部header产生15px的错位</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lkthv.png\" alt=\"\"></p>\n<p>用<code>row</code>包裹住之后，就刚好对齐了</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lmxqm.png\" alt=\"\"></p>\n"},{"title":"【ORID总结】1/7","_content":"\n## Objective\n\n- 《招聘网站》第五部分，对照着解答优化自己的代码\n\n## Reflective\n\n- 发现的bug，脑中的想法是：“又能学到一点原先不知道的知识，挺好”。\n- 遇到不懂的东西，在论坛上面找到了答案，很开心。\n- 当发现自己的代码，对比别人的代码，从中学习，也挺开心。\n\n今天的低点：花比较少的时间在学习上，浪了一天。\n\n## Interpretive\n\n### 不能执行正确的create和update（多级路由）\n\n文章：http://raimonfuns-blog.logdown.com/posts/1285306\n\n### bootstrap中的row布局\n\n文章：http://raimonfuns-blog.logdown.com/posts/1285436\n\n### ! 和 ?\n\n我发现一个规律，当写在model里面的方法\n\n- 如果是要进行某个操作，则用`!`表示肯定的语气，比如说：`join!`,`quit!`, `publish!`,`hide!`；\n- 如果是用来判断状态，则用`？`表示疑问的语气，比如说：`is_member_of?`,`admin?`\n\n### 没有提供入口并不代表访问不到\n\n在《招聘网站》中，如果在后台把文章的状态设置为`false`，那么文章就不会再首页上显示，但用户还是可以从地址栏上面直接输入job地址，进而访问job页面，所以呢，要在job#show里面加一个条件判断\n\n![][image-1]\n\n之所以要总结一下这个知识点，不是因为它很难，而是因为它`太容易被忘记了`，因为一般情况下都会想当然的认为，文章隐藏了就是隐藏了，所以就会认为别人无法访问到了，但其实不是，这是个很容易犯的错误，切记切记。\n\n### self \n\n今天看到了这个代码：\n\n`contoller`\n\n![][image-2]\n\n`model`\n\n![][image-3]\n\n原来[self指的就是到物件本身][1]（@job），又学到了一招！\n\n### redirect\\_to :back\n\n![][image-4]\n\n`redirect_to :back`的作用是重定向到本页面，也就是相当于刷新页面，这样一来就不用写当前页面的路由，简洁易懂。\n\n## Decisional\n\n对照着《招聘网站》的解答版，优化自己写的代码，多做总结。\n\n[1]:\thttps://rocodev.gitbooks.io/rails-102/content/chapter3-ruby/self.html\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/qbdpb.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/fn8pn.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/ejfqd.png\n[image-4]:\thttp://oggx6lf7f.bkt.clouddn.com/3lici.png\n","source":"_posts/2017-01-07-coding-diary.md","raw":"---\ntitle: 【ORID总结】1/7\ncategories: 全栈营\n---\n\n## Objective\n\n- 《招聘网站》第五部分，对照着解答优化自己的代码\n\n## Reflective\n\n- 发现的bug，脑中的想法是：“又能学到一点原先不知道的知识，挺好”。\n- 遇到不懂的东西，在论坛上面找到了答案，很开心。\n- 当发现自己的代码，对比别人的代码，从中学习，也挺开心。\n\n今天的低点：花比较少的时间在学习上，浪了一天。\n\n## Interpretive\n\n### 不能执行正确的create和update（多级路由）\n\n文章：http://raimonfuns-blog.logdown.com/posts/1285306\n\n### bootstrap中的row布局\n\n文章：http://raimonfuns-blog.logdown.com/posts/1285436\n\n### ! 和 ?\n\n我发现一个规律，当写在model里面的方法\n\n- 如果是要进行某个操作，则用`!`表示肯定的语气，比如说：`join!`,`quit!`, `publish!`,`hide!`；\n- 如果是用来判断状态，则用`？`表示疑问的语气，比如说：`is_member_of?`,`admin?`\n\n### 没有提供入口并不代表访问不到\n\n在《招聘网站》中，如果在后台把文章的状态设置为`false`，那么文章就不会再首页上显示，但用户还是可以从地址栏上面直接输入job地址，进而访问job页面，所以呢，要在job#show里面加一个条件判断\n\n![][image-1]\n\n之所以要总结一下这个知识点，不是因为它很难，而是因为它`太容易被忘记了`，因为一般情况下都会想当然的认为，文章隐藏了就是隐藏了，所以就会认为别人无法访问到了，但其实不是，这是个很容易犯的错误，切记切记。\n\n### self \n\n今天看到了这个代码：\n\n`contoller`\n\n![][image-2]\n\n`model`\n\n![][image-3]\n\n原来[self指的就是到物件本身][1]（@job），又学到了一招！\n\n### redirect\\_to :back\n\n![][image-4]\n\n`redirect_to :back`的作用是重定向到本页面，也就是相当于刷新页面，这样一来就不用写当前页面的路由，简洁易懂。\n\n## Decisional\n\n对照着《招聘网站》的解答版，优化自己写的代码，多做总结。\n\n[1]:\thttps://rocodev.gitbooks.io/rails-102/content/chapter3-ruby/self.html\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/qbdpb.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/fn8pn.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/ejfqd.png\n[image-4]:\thttp://oggx6lf7f.bkt.clouddn.com/3lici.png\n","slug":"2017-01-07-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbu003wfsoner9bfvhq","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>《招聘网站》第五部分，对照着解答优化自己的代码</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><ul>\n<li>发现的bug，脑中的想法是：“又能学到一点原先不知道的知识，挺好”。</li>\n<li>遇到不懂的东西，在论坛上面找到了答案，很开心。</li>\n<li>当发现自己的代码，对比别人的代码，从中学习，也挺开心。</li>\n</ul>\n<p>今天的低点：花比较少的时间在学习上，浪了一天。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"不能执行正确的create和update（多级路由）\"><a href=\"#不能执行正确的create和update（多级路由）\" class=\"headerlink\" title=\"不能执行正确的create和update（多级路由）\"></a>不能执行正确的create和update（多级路由）</h3><p>文章：<a href=\"http://raimonfuns-blog.logdown.com/posts/1285306\" target=\"_blank\" rel=\"noopener\">http://raimonfuns-blog.logdown.com/posts/1285306</a></p>\n<h3 id=\"bootstrap中的row布局\"><a href=\"#bootstrap中的row布局\" class=\"headerlink\" title=\"bootstrap中的row布局\"></a>bootstrap中的row布局</h3><p>文章：<a href=\"http://raimonfuns-blog.logdown.com/posts/1285436\" target=\"_blank\" rel=\"noopener\">http://raimonfuns-blog.logdown.com/posts/1285436</a></p>\n<h3 id=\"和\"><a href=\"#和\" class=\"headerlink\" title=\"! 和 ?\"></a>! 和 ?</h3><p>我发现一个规律，当写在model里面的方法</p>\n<ul>\n<li>如果是要进行某个操作，则用<code>!</code>表示肯定的语气，比如说：<code>join!</code>,<code>quit!</code>, <code>publish!</code>,<code>hide!</code>；</li>\n<li>如果是用来判断状态，则用<code>？</code>表示疑问的语气，比如说：<code>is_member_of?</code>,<code>admin?</code></li>\n</ul>\n<h3 id=\"没有提供入口并不代表访问不到\"><a href=\"#没有提供入口并不代表访问不到\" class=\"headerlink\" title=\"没有提供入口并不代表访问不到\"></a>没有提供入口并不代表访问不到</h3><p>在《招聘网站》中，如果在后台把文章的状态设置为<code>false</code>，那么文章就不会再首页上显示，但用户还是可以从地址栏上面直接输入job地址，进而访问job页面，所以呢，要在job#show里面加一个条件判断</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/qbdpb.png\" alt=\"\"></p>\n<p>之所以要总结一下这个知识点，不是因为它很难，而是因为它<code>太容易被忘记了</code>，因为一般情况下都会想当然的认为，文章隐藏了就是隐藏了，所以就会认为别人无法访问到了，但其实不是，这是个很容易犯的错误，切记切记。</p>\n<h3 id=\"self\"><a href=\"#self\" class=\"headerlink\" title=\"self\"></a>self</h3><p>今天看到了这个代码：</p>\n<p><code>contoller</code></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/fn8pn.png\" alt=\"\"></p>\n<p><code>model</code></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ejfqd.png\" alt=\"\"></p>\n<p>原来<a href=\"https://rocodev.gitbooks.io/rails-102/content/chapter3-ruby/self.html\" target=\"_blank\" rel=\"noopener\">self指的就是到物件本身</a>（@job），又学到了一招！</p>\n<h3 id=\"redirect-to-back\"><a href=\"#redirect-to-back\" class=\"headerlink\" title=\"redirect_to :back\"></a>redirect_to :back</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/3lici.png\" alt=\"\"></p>\n<p><code>redirect_to :back</code>的作用是重定向到本页面，也就是相当于刷新页面，这样一来就不用写当前页面的路由，简洁易懂。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>对照着《招聘网站》的解答版，优化自己写的代码，多做总结。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>《招聘网站》第五部分，对照着解答优化自己的代码</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><ul>\n<li>发现的bug，脑中的想法是：“又能学到一点原先不知道的知识，挺好”。</li>\n<li>遇到不懂的东西，在论坛上面找到了答案，很开心。</li>\n<li>当发现自己的代码，对比别人的代码，从中学习，也挺开心。</li>\n</ul>\n<p>今天的低点：花比较少的时间在学习上，浪了一天。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"不能执行正确的create和update（多级路由）\"><a href=\"#不能执行正确的create和update（多级路由）\" class=\"headerlink\" title=\"不能执行正确的create和update（多级路由）\"></a>不能执行正确的create和update（多级路由）</h3><p>文章：<a href=\"http://raimonfuns-blog.logdown.com/posts/1285306\" target=\"_blank\" rel=\"noopener\">http://raimonfuns-blog.logdown.com/posts/1285306</a></p>\n<h3 id=\"bootstrap中的row布局\"><a href=\"#bootstrap中的row布局\" class=\"headerlink\" title=\"bootstrap中的row布局\"></a>bootstrap中的row布局</h3><p>文章：<a href=\"http://raimonfuns-blog.logdown.com/posts/1285436\" target=\"_blank\" rel=\"noopener\">http://raimonfuns-blog.logdown.com/posts/1285436</a></p>\n<h3 id=\"和\"><a href=\"#和\" class=\"headerlink\" title=\"! 和 ?\"></a>! 和 ?</h3><p>我发现一个规律，当写在model里面的方法</p>\n<ul>\n<li>如果是要进行某个操作，则用<code>!</code>表示肯定的语气，比如说：<code>join!</code>,<code>quit!</code>, <code>publish!</code>,<code>hide!</code>；</li>\n<li>如果是用来判断状态，则用<code>？</code>表示疑问的语气，比如说：<code>is_member_of?</code>,<code>admin?</code></li>\n</ul>\n<h3 id=\"没有提供入口并不代表访问不到\"><a href=\"#没有提供入口并不代表访问不到\" class=\"headerlink\" title=\"没有提供入口并不代表访问不到\"></a>没有提供入口并不代表访问不到</h3><p>在《招聘网站》中，如果在后台把文章的状态设置为<code>false</code>，那么文章就不会再首页上显示，但用户还是可以从地址栏上面直接输入job地址，进而访问job页面，所以呢，要在job#show里面加一个条件判断</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/qbdpb.png\" alt=\"\"></p>\n<p>之所以要总结一下这个知识点，不是因为它很难，而是因为它<code>太容易被忘记了</code>，因为一般情况下都会想当然的认为，文章隐藏了就是隐藏了，所以就会认为别人无法访问到了，但其实不是，这是个很容易犯的错误，切记切记。</p>\n<h3 id=\"self\"><a href=\"#self\" class=\"headerlink\" title=\"self\"></a>self</h3><p>今天看到了这个代码：</p>\n<p><code>contoller</code></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/fn8pn.png\" alt=\"\"></p>\n<p><code>model</code></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ejfqd.png\" alt=\"\"></p>\n<p>原来<a href=\"https://rocodev.gitbooks.io/rails-102/content/chapter3-ruby/self.html\" target=\"_blank\" rel=\"noopener\">self指的就是到物件本身</a>（@job），又学到了一招！</p>\n<h3 id=\"redirect-to-back\"><a href=\"#redirect-to-back\" class=\"headerlink\" title=\"redirect_to :back\"></a>redirect_to :back</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/3lici.png\" alt=\"\"></p>\n<p><code>redirect_to :back</code>的作用是重定向到本页面，也就是相当于刷新页面，这样一来就不用写当前页面的路由，简洁易懂。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>对照着《招聘网站》的解答版，优化自己写的代码，多做总结。</p>\n"},{"title":"【ORID总结】1/8","_content":"\n## Objective\n\n- 把自己做的《招聘网站》和解答版对比，从中学习并优化代码\n\n## Reflective\n\n高峰是什么?把rails 101的步骤以及提交信息都整理出来，更直观。\n\n低点是什么?自从《招聘网站》做完了之后，动力就降下来了。\n\n## Interpretive\n\n### 整理rails 101的步骤和提交信息\n\n![][image-1]\n\n这样做的目的是想更直观地分析rails 101是如何对需求进行切分的，以后如果做到某个小需求就能快速定位，找到对应的文章。另外，也顺便记忆一下提交的信息，因为平时写的提交信息，感觉都不对劲，可能语法有错误，所以，多学学如何描述正确的提交信息也是很有帮助的的。\n\n## Decisional\n\n没遇到太大的坑或者bug，感觉挺顺利的。\n\n明天给《招聘网站》添加一些新功能。\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/isf9j.png\n","source":"_posts/2017-01-08-coding-diary.md","raw":"---\ntitle: 【ORID总结】1/8\ncategories: 全栈营\n---\n\n## Objective\n\n- 把自己做的《招聘网站》和解答版对比，从中学习并优化代码\n\n## Reflective\n\n高峰是什么?把rails 101的步骤以及提交信息都整理出来，更直观。\n\n低点是什么?自从《招聘网站》做完了之后，动力就降下来了。\n\n## Interpretive\n\n### 整理rails 101的步骤和提交信息\n\n![][image-1]\n\n这样做的目的是想更直观地分析rails 101是如何对需求进行切分的，以后如果做到某个小需求就能快速定位，找到对应的文章。另外，也顺便记忆一下提交的信息，因为平时写的提交信息，感觉都不对劲，可能语法有错误，所以，多学学如何描述正确的提交信息也是很有帮助的的。\n\n## Decisional\n\n没遇到太大的坑或者bug，感觉挺顺利的。\n\n明天给《招聘网站》添加一些新功能。\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/isf9j.png\n","slug":"2017-01-08-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbv003yfsonf3brk7wr","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>把自己做的《招聘网站》和解答版对比，从中学习并优化代码</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>高峰是什么?把rails 101的步骤以及提交信息都整理出来，更直观。</p>\n<p>低点是什么?自从《招聘网站》做完了之后，动力就降下来了。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"整理rails-101的步骤和提交信息\"><a href=\"#整理rails-101的步骤和提交信息\" class=\"headerlink\" title=\"整理rails 101的步骤和提交信息\"></a>整理rails 101的步骤和提交信息</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/isf9j.png\" alt=\"\"></p>\n<p>这样做的目的是想更直观地分析rails 101是如何对需求进行切分的，以后如果做到某个小需求就能快速定位，找到对应的文章。另外，也顺便记忆一下提交的信息，因为平时写的提交信息，感觉都不对劲，可能语法有错误，所以，多学学如何描述正确的提交信息也是很有帮助的的。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>没遇到太大的坑或者bug，感觉挺顺利的。</p>\n<p>明天给《招聘网站》添加一些新功能。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>把自己做的《招聘网站》和解答版对比，从中学习并优化代码</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>高峰是什么?把rails 101的步骤以及提交信息都整理出来，更直观。</p>\n<p>低点是什么?自从《招聘网站》做完了之后，动力就降下来了。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"整理rails-101的步骤和提交信息\"><a href=\"#整理rails-101的步骤和提交信息\" class=\"headerlink\" title=\"整理rails 101的步骤和提交信息\"></a>整理rails 101的步骤和提交信息</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/isf9j.png\" alt=\"\"></p>\n<p>这样做的目的是想更直观地分析rails 101是如何对需求进行切分的，以后如果做到某个小需求就能快速定位，找到对应的文章。另外，也顺便记忆一下提交的信息，因为平时写的提交信息，感觉都不对劲，可能语法有错误，所以，多学学如何描述正确的提交信息也是很有帮助的的。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>没遇到太大的坑或者bug，感觉挺顺利的。</p>\n<p>明天给《招聘网站》添加一些新功能。</p>\n"},{"title":"【ORID总结】1/5","_content":"\n## Objective\n\n- 《招聘网站》第二遍（手敲）\n\n## Reflective\n\n开发速度越来越快，能明显感觉到进步，挺好。\n\n## Interpretive\n\n### 高频套路开始起作用了\n\n《rails 101》真的是一个高频小套路，在做《招聘网站》的过程中，有很多的操作都和《rails 101》相同，而且是大部分都相同，为什么？因为这些基本功能都是大多数网站所必须拥有的功能，所以，《rails 101》练得越熟练，对后面的开发帮助就越大，这一点今天感受尤其明显。\n\n### 开发目标明确，不会再迷路了！\n\n用User Story整理《招聘网站》的需求，最终整理得到这两这图\n\n![][image-1]\n\n![][image-2]\n\n从图中可以明显地看出来这个项目的关键点：\n\n- 角色\n- 实现的功能\n- 数据结构\n- 前台的功能、后台的功能\n\n原本很复杂的一个需求，结果这么分析和整理，竟然变得如此简洁，更重要的是它非常具有指导型，防止因为开发无谓的需求而浪费时间，防止因为中途产生新idea而打乱计划，防止因为需求太多太乱而怠工，这张图就好比一盏明灯，指引开发者以最短的时间走向终点。\n\n### gif录制倒逼实现完整的功能\n\n课程最后要求用gif软件，把项目的所有功能录制成一张动态图，交上去。我认为这么做的目的是为了倒逼同学做出一个完整的功能，因为只有完整的产品才能产生价值。如果费了很大的功夫，但没能做出完整的功能，而是一个完全没办法使用的功能，那这就不能称之为“功能”，而是一个没有用处的”玩具部件“。\n\n很多时候，我们会花很多的心思去做一个功能，心里只想着做出一个超级棒的功能，于是在这个过程中花了很长的时间。比如说，今天要实现A、B、C三个功能，三个功能只需要做到60分即可，但是，当在做A功能时，心里就想着把A做到90分，于是不断地优化加工，当晚上要收工的时候，才发现，尼玛，B和C都还没开始做，而A、B、C三个功能之间是需要互相配合的，于是呢，gif录制软件肯定是用不上了，因为A本身并不是一个完整的功能，也就没有什么可以展示的。\n\n由此得到：\n\n> 每天把最基本的功能实现了，并且让这些功能互相配合，形成一个”活“的产品，而不是一个个没有的”玩具部件“，可以用gif录制软件作为验收机制，这样做的好处是防止完美主义导致开发进度的停滞。\n\n最后，附上今天的gif图\n\n![][image-3]\n\n## Decisional\n\n练习《招聘网站》第三遍，完成所有的作业，把《基础知识补充》看完。\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/g127n.jpeg\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/q5ydu.jpeg\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/eb87l.gif","source":"_posts/2017-01-05-coding-diary.md","raw":"---\ntitle: 【ORID总结】1/5\ncategories: 全栈营\ntags: 用户故事\n---\n\n## Objective\n\n- 《招聘网站》第二遍（手敲）\n\n## Reflective\n\n开发速度越来越快，能明显感觉到进步，挺好。\n\n## Interpretive\n\n### 高频套路开始起作用了\n\n《rails 101》真的是一个高频小套路，在做《招聘网站》的过程中，有很多的操作都和《rails 101》相同，而且是大部分都相同，为什么？因为这些基本功能都是大多数网站所必须拥有的功能，所以，《rails 101》练得越熟练，对后面的开发帮助就越大，这一点今天感受尤其明显。\n\n### 开发目标明确，不会再迷路了！\n\n用User Story整理《招聘网站》的需求，最终整理得到这两这图\n\n![][image-1]\n\n![][image-2]\n\n从图中可以明显地看出来这个项目的关键点：\n\n- 角色\n- 实现的功能\n- 数据结构\n- 前台的功能、后台的功能\n\n原本很复杂的一个需求，结果这么分析和整理，竟然变得如此简洁，更重要的是它非常具有指导型，防止因为开发无谓的需求而浪费时间，防止因为中途产生新idea而打乱计划，防止因为需求太多太乱而怠工，这张图就好比一盏明灯，指引开发者以最短的时间走向终点。\n\n### gif录制倒逼实现完整的功能\n\n课程最后要求用gif软件，把项目的所有功能录制成一张动态图，交上去。我认为这么做的目的是为了倒逼同学做出一个完整的功能，因为只有完整的产品才能产生价值。如果费了很大的功夫，但没能做出完整的功能，而是一个完全没办法使用的功能，那这就不能称之为“功能”，而是一个没有用处的”玩具部件“。\n\n很多时候，我们会花很多的心思去做一个功能，心里只想着做出一个超级棒的功能，于是在这个过程中花了很长的时间。比如说，今天要实现A、B、C三个功能，三个功能只需要做到60分即可，但是，当在做A功能时，心里就想着把A做到90分，于是不断地优化加工，当晚上要收工的时候，才发现，尼玛，B和C都还没开始做，而A、B、C三个功能之间是需要互相配合的，于是呢，gif录制软件肯定是用不上了，因为A本身并不是一个完整的功能，也就没有什么可以展示的。\n\n由此得到：\n\n> 每天把最基本的功能实现了，并且让这些功能互相配合，形成一个”活“的产品，而不是一个个没有的”玩具部件“，可以用gif录制软件作为验收机制，这样做的好处是防止完美主义导致开发进度的停滞。\n\n最后，附上今天的gif图\n\n![][image-3]\n\n## Decisional\n\n练习《招聘网站》第三遍，完成所有的作业，把《基础知识补充》看完。\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/g127n.jpeg\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/q5ydu.jpeg\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/eb87l.gif","slug":"2017-01-05-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbw0040fson24bdp1eo","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>《招聘网站》第二遍（手敲）</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>开发速度越来越快，能明显感觉到进步，挺好。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"高频套路开始起作用了\"><a href=\"#高频套路开始起作用了\" class=\"headerlink\" title=\"高频套路开始起作用了\"></a>高频套路开始起作用了</h3><p>《rails 101》真的是一个高频小套路，在做《招聘网站》的过程中，有很多的操作都和《rails 101》相同，而且是大部分都相同，为什么？因为这些基本功能都是大多数网站所必须拥有的功能，所以，《rails 101》练得越熟练，对后面的开发帮助就越大，这一点今天感受尤其明显。</p>\n<h3 id=\"开发目标明确，不会再迷路了！\"><a href=\"#开发目标明确，不会再迷路了！\" class=\"headerlink\" title=\"开发目标明确，不会再迷路了！\"></a>开发目标明确，不会再迷路了！</h3><p>用User Story整理《招聘网站》的需求，最终整理得到这两这图</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/g127n.jpeg\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/q5ydu.jpeg\" alt=\"\"></p>\n<p>从图中可以明显地看出来这个项目的关键点：</p>\n<ul>\n<li>角色</li>\n<li>实现的功能</li>\n<li>数据结构</li>\n<li>前台的功能、后台的功能</li>\n</ul>\n<p>原本很复杂的一个需求，结果这么分析和整理，竟然变得如此简洁，更重要的是它非常具有指导型，防止因为开发无谓的需求而浪费时间，防止因为中途产生新idea而打乱计划，防止因为需求太多太乱而怠工，这张图就好比一盏明灯，指引开发者以最短的时间走向终点。</p>\n<h3 id=\"gif录制倒逼实现完整的功能\"><a href=\"#gif录制倒逼实现完整的功能\" class=\"headerlink\" title=\"gif录制倒逼实现完整的功能\"></a>gif录制倒逼实现完整的功能</h3><p>课程最后要求用gif软件，把项目的所有功能录制成一张动态图，交上去。我认为这么做的目的是为了倒逼同学做出一个完整的功能，因为只有完整的产品才能产生价值。如果费了很大的功夫，但没能做出完整的功能，而是一个完全没办法使用的功能，那这就不能称之为“功能”，而是一个没有用处的”玩具部件“。</p>\n<p>很多时候，我们会花很多的心思去做一个功能，心里只想着做出一个超级棒的功能，于是在这个过程中花了很长的时间。比如说，今天要实现A、B、C三个功能，三个功能只需要做到60分即可，但是，当在做A功能时，心里就想着把A做到90分，于是不断地优化加工，当晚上要收工的时候，才发现，尼玛，B和C都还没开始做，而A、B、C三个功能之间是需要互相配合的，于是呢，gif录制软件肯定是用不上了，因为A本身并不是一个完整的功能，也就没有什么可以展示的。</p>\n<p>由此得到：</p>\n<blockquote>\n<p>每天把最基本的功能实现了，并且让这些功能互相配合，形成一个”活“的产品，而不是一个个没有的”玩具部件“，可以用gif录制软件作为验收机制，这样做的好处是防止完美主义导致开发进度的停滞。</p>\n</blockquote>\n<p>最后，附上今天的gif图</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/eb87l.gif\" alt=\"\"></p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>练习《招聘网站》第三遍，完成所有的作业，把《基础知识补充》看完。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>《招聘网站》第二遍（手敲）</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>开发速度越来越快，能明显感觉到进步，挺好。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"高频套路开始起作用了\"><a href=\"#高频套路开始起作用了\" class=\"headerlink\" title=\"高频套路开始起作用了\"></a>高频套路开始起作用了</h3><p>《rails 101》真的是一个高频小套路，在做《招聘网站》的过程中，有很多的操作都和《rails 101》相同，而且是大部分都相同，为什么？因为这些基本功能都是大多数网站所必须拥有的功能，所以，《rails 101》练得越熟练，对后面的开发帮助就越大，这一点今天感受尤其明显。</p>\n<h3 id=\"开发目标明确，不会再迷路了！\"><a href=\"#开发目标明确，不会再迷路了！\" class=\"headerlink\" title=\"开发目标明确，不会再迷路了！\"></a>开发目标明确，不会再迷路了！</h3><p>用User Story整理《招聘网站》的需求，最终整理得到这两这图</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/g127n.jpeg\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/q5ydu.jpeg\" alt=\"\"></p>\n<p>从图中可以明显地看出来这个项目的关键点：</p>\n<ul>\n<li>角色</li>\n<li>实现的功能</li>\n<li>数据结构</li>\n<li>前台的功能、后台的功能</li>\n</ul>\n<p>原本很复杂的一个需求，结果这么分析和整理，竟然变得如此简洁，更重要的是它非常具有指导型，防止因为开发无谓的需求而浪费时间，防止因为中途产生新idea而打乱计划，防止因为需求太多太乱而怠工，这张图就好比一盏明灯，指引开发者以最短的时间走向终点。</p>\n<h3 id=\"gif录制倒逼实现完整的功能\"><a href=\"#gif录制倒逼实现完整的功能\" class=\"headerlink\" title=\"gif录制倒逼实现完整的功能\"></a>gif录制倒逼实现完整的功能</h3><p>课程最后要求用gif软件，把项目的所有功能录制成一张动态图，交上去。我认为这么做的目的是为了倒逼同学做出一个完整的功能，因为只有完整的产品才能产生价值。如果费了很大的功夫，但没能做出完整的功能，而是一个完全没办法使用的功能，那这就不能称之为“功能”，而是一个没有用处的”玩具部件“。</p>\n<p>很多时候，我们会花很多的心思去做一个功能，心里只想着做出一个超级棒的功能，于是在这个过程中花了很长的时间。比如说，今天要实现A、B、C三个功能，三个功能只需要做到60分即可，但是，当在做A功能时，心里就想着把A做到90分，于是不断地优化加工，当晚上要收工的时候，才发现，尼玛，B和C都还没开始做，而A、B、C三个功能之间是需要互相配合的，于是呢，gif录制软件肯定是用不上了，因为A本身并不是一个完整的功能，也就没有什么可以展示的。</p>\n<p>由此得到：</p>\n<blockquote>\n<p>每天把最基本的功能实现了，并且让这些功能互相配合，形成一个”活“的产品，而不是一个个没有的”玩具部件“，可以用gif录制软件作为验收机制，这样做的好处是防止完美主义导致开发进度的停滞。</p>\n</blockquote>\n<p>最后，附上今天的gif图</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/eb87l.gif\" alt=\"\"></p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>练习《招聘网站》第三遍，完成所有的作业，把《基础知识补充》看完。</p>\n"},{"title":"【错误】Could not find generator 'devise:install'","_content":"\n### 动作\n\n安装devise\n\n`rails g devise:install`\n\n### 结果\n\n![][image-1]\n### 解决方法\n\n`spring stop`\n\n### 参考链接\n\n[Could not find generator 'devise:install' unless using sudo rails generate devise:install][1]\n\n[1]:\thttp://stackoverflow.com/questions/35294002/could-not-find-generator-deviseinstall-unless-using-sudo-rails-generate-devis\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/xp510.png\n","source":"_posts/2017-01-05-devise-install-fail.md","raw":"---\ntitle: 【错误】Could not find generator 'devise:install'\ncategories: 全栈营\n---\n\n### 动作\n\n安装devise\n\n`rails g devise:install`\n\n### 结果\n\n![][image-1]\n### 解决方法\n\n`spring stop`\n\n### 参考链接\n\n[Could not find generator 'devise:install' unless using sudo rails generate devise:install][1]\n\n[1]:\thttp://stackoverflow.com/questions/35294002/could-not-find-generator-deviseinstall-unless-using-sudo-rails-generate-devis\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/xp510.png\n","slug":"2017-01-05-devise-install-fail","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbx0042fson1d7mwudt","content":"<h3 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h3><p>安装devise</p>\n<p><code>rails g devise:install</code></p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/xp510.png\" alt=\"\"></p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p><code>spring stop</code></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://stackoverflow.com/questions/35294002/could-not-find-generator-deviseinstall-unless-using-sudo-rails-generate-devis\" target=\"_blank\" rel=\"noopener\">Could not find generator ‘devise:install’ unless using sudo rails generate devise:install</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h3><p>安装devise</p>\n<p><code>rails g devise:install</code></p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/xp510.png\" alt=\"\"></p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p><code>spring stop</code></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://stackoverflow.com/questions/35294002/could-not-find-generator-deviseinstall-unless-using-sudo-rails-generate-devis\" target=\"_blank\" rel=\"noopener\">Could not find generator ‘devise:install’ unless using sudo rails generate devise:install</a></p>\n"},{"title":"《红鳉鱼》观后感","_content":"\n这是一部好电影，陪我度过一个愉快的下午。我很喜欢这些片段和歌曲：\n\n- 关于嫉妒\n- 谈春接纳谈乐\n- 关西模仿师父\n- 两个老男人的小眼神\n- 妈妈的咖喱饭\n- 最喜欢的歌曲\n\n### 关于嫉妒\n\n> 自己不努力，反而去数落对方的缺点，妄图拉低对方身份，让对方和自己站在同样的高度，就是嫉妒。本来只要采取行动，赶上并超越对方就行，但是人啊，却往往做不到这一点，因为嫉妒是毫不费力的啊。不过现实会给你答案，将责任推卸给时代，推卸给世界，你的处境也不会有任何改变。\n\n这段是全片最经典的一段台词，也是谈春成长的一大转折点。我超级喜欢这个片段\n\n![](http://oggx6lf7f.bkt.clouddn.com/vemkb.png)\n![](http://oggx6lf7f.bkt.clouddn.com/belql.png)\n![](http://oggx6lf7f.bkt.clouddn.com/jnehv.png)\n![](http://oggx6lf7f.bkt.clouddn.com/deuz2.png)\n![](http://oggx6lf7f.bkt.clouddn.com/ly1g1.png)\n\n谈春因为嫉妒和骄傲，犯了很多愚蠢的错误，所以受到的惩罚。\n\n在人生的某个时刻，一句话或者一段话可以彻底改变一个人，这就是重生。谈春学到了两点：\n\n- 不再嫉妒别人，而是专注于自己的成长；\n- 接受现实，不要埋怨现实，推卸责任；\n\n有时候看一本书，看一部电影也能体会到重生的感觉，这种感觉是非常好的。\n\n### 谈春接纳谈乐\n\n![](http://oggx6lf7f.bkt.clouddn.com/bp856.png)\n![](http://oggx6lf7f.bkt.clouddn.com/m25ym.png)\n\n踏出第一步：化敌为友。哈哈，这一段真的是燃爆了！\n\n### 关西模仿师父\n\n这一段是全局最逗的，哈哈。\n\n![](http://oggx6lf7f.bkt.clouddn.com/hjnep.png)\n![](http://oggx6lf7f.bkt.clouddn.com/3tdj6.png)\n![](http://oggx6lf7f.bkt.clouddn.com/nypcc.png)\n\n### 两个老男人的小眼神\n\n![](http://oggx6lf7f.bkt.clouddn.com/308il.png)\n\n### 妈妈的咖喱饭\n\n叛逆的谈春\n\n![](http://oggx6lf7f.bkt.clouddn.com/m4bic.png)\n![](http://oggx6lf7f.bkt.clouddn.com/vt9v9.png)\n![](http://oggx6lf7f.bkt.clouddn.com/b2ctz.png)\n\n后来谈春长大了，懂得尊重别人，懂得什么才是人生中最重要的东西。\n\n![](http://oggx6lf7f.bkt.clouddn.com/6adtf.png)\n![](http://oggx6lf7f.bkt.clouddn.com/keafp.png)\n![](http://oggx6lf7f.bkt.clouddn.com/6elp2.png)\n![](http://oggx6lf7f.bkt.clouddn.com/4g9vd.png)\n![](http://oggx6lf7f.bkt.clouddn.com/7v895.png)\n![](http://oggx6lf7f.bkt.clouddn.com/jt750.png)\n\n### 最喜欢的歌曲\n\n《青空 — THE BLUE HEARTS》，单曲循环了好久~\n","source":"_posts/2017-01-08-hong-jiang-yu.md","raw":"---\ntitle: 《红鳉鱼》观后感\ncategories: 随笔\n---\n\n这是一部好电影，陪我度过一个愉快的下午。我很喜欢这些片段和歌曲：\n\n- 关于嫉妒\n- 谈春接纳谈乐\n- 关西模仿师父\n- 两个老男人的小眼神\n- 妈妈的咖喱饭\n- 最喜欢的歌曲\n\n### 关于嫉妒\n\n> 自己不努力，反而去数落对方的缺点，妄图拉低对方身份，让对方和自己站在同样的高度，就是嫉妒。本来只要采取行动，赶上并超越对方就行，但是人啊，却往往做不到这一点，因为嫉妒是毫不费力的啊。不过现实会给你答案，将责任推卸给时代，推卸给世界，你的处境也不会有任何改变。\n\n这段是全片最经典的一段台词，也是谈春成长的一大转折点。我超级喜欢这个片段\n\n![](http://oggx6lf7f.bkt.clouddn.com/vemkb.png)\n![](http://oggx6lf7f.bkt.clouddn.com/belql.png)\n![](http://oggx6lf7f.bkt.clouddn.com/jnehv.png)\n![](http://oggx6lf7f.bkt.clouddn.com/deuz2.png)\n![](http://oggx6lf7f.bkt.clouddn.com/ly1g1.png)\n\n谈春因为嫉妒和骄傲，犯了很多愚蠢的错误，所以受到的惩罚。\n\n在人生的某个时刻，一句话或者一段话可以彻底改变一个人，这就是重生。谈春学到了两点：\n\n- 不再嫉妒别人，而是专注于自己的成长；\n- 接受现实，不要埋怨现实，推卸责任；\n\n有时候看一本书，看一部电影也能体会到重生的感觉，这种感觉是非常好的。\n\n### 谈春接纳谈乐\n\n![](http://oggx6lf7f.bkt.clouddn.com/bp856.png)\n![](http://oggx6lf7f.bkt.clouddn.com/m25ym.png)\n\n踏出第一步：化敌为友。哈哈，这一段真的是燃爆了！\n\n### 关西模仿师父\n\n这一段是全局最逗的，哈哈。\n\n![](http://oggx6lf7f.bkt.clouddn.com/hjnep.png)\n![](http://oggx6lf7f.bkt.clouddn.com/3tdj6.png)\n![](http://oggx6lf7f.bkt.clouddn.com/nypcc.png)\n\n### 两个老男人的小眼神\n\n![](http://oggx6lf7f.bkt.clouddn.com/308il.png)\n\n### 妈妈的咖喱饭\n\n叛逆的谈春\n\n![](http://oggx6lf7f.bkt.clouddn.com/m4bic.png)\n![](http://oggx6lf7f.bkt.clouddn.com/vt9v9.png)\n![](http://oggx6lf7f.bkt.clouddn.com/b2ctz.png)\n\n后来谈春长大了，懂得尊重别人，懂得什么才是人生中最重要的东西。\n\n![](http://oggx6lf7f.bkt.clouddn.com/6adtf.png)\n![](http://oggx6lf7f.bkt.clouddn.com/keafp.png)\n![](http://oggx6lf7f.bkt.clouddn.com/6elp2.png)\n![](http://oggx6lf7f.bkt.clouddn.com/4g9vd.png)\n![](http://oggx6lf7f.bkt.clouddn.com/7v895.png)\n![](http://oggx6lf7f.bkt.clouddn.com/jt750.png)\n\n### 最喜欢的歌曲\n\n《青空 — THE BLUE HEARTS》，单曲循环了好久~\n","slug":"2017-01-08-hong-jiang-yu","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicby0045fsonffmkdl70","content":"<p>这是一部好电影，陪我度过一个愉快的下午。我很喜欢这些片段和歌曲：</p>\n<ul>\n<li>关于嫉妒</li>\n<li>谈春接纳谈乐</li>\n<li>关西模仿师父</li>\n<li>两个老男人的小眼神</li>\n<li>妈妈的咖喱饭</li>\n<li>最喜欢的歌曲</li>\n</ul>\n<h3 id=\"关于嫉妒\"><a href=\"#关于嫉妒\" class=\"headerlink\" title=\"关于嫉妒\"></a>关于嫉妒</h3><blockquote>\n<p>自己不努力，反而去数落对方的缺点，妄图拉低对方身份，让对方和自己站在同样的高度，就是嫉妒。本来只要采取行动，赶上并超越对方就行，但是人啊，却往往做不到这一点，因为嫉妒是毫不费力的啊。不过现实会给你答案，将责任推卸给时代，推卸给世界，你的处境也不会有任何改变。</p>\n</blockquote>\n<p>这段是全片最经典的一段台词，也是谈春成长的一大转折点。我超级喜欢这个片段</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/vemkb.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/belql.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/jnehv.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/deuz2.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/ly1g1.png\" alt=\"\"></p>\n<p>谈春因为嫉妒和骄傲，犯了很多愚蠢的错误，所以受到的惩罚。</p>\n<p>在人生的某个时刻，一句话或者一段话可以彻底改变一个人，这就是重生。谈春学到了两点：</p>\n<ul>\n<li>不再嫉妒别人，而是专注于自己的成长；</li>\n<li>接受现实，不要埋怨现实，推卸责任；</li>\n</ul>\n<p>有时候看一本书，看一部电影也能体会到重生的感觉，这种感觉是非常好的。</p>\n<h3 id=\"谈春接纳谈乐\"><a href=\"#谈春接纳谈乐\" class=\"headerlink\" title=\"谈春接纳谈乐\"></a>谈春接纳谈乐</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bp856.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/m25ym.png\" alt=\"\"></p>\n<p>踏出第一步：化敌为友。哈哈，这一段真的是燃爆了！</p>\n<h3 id=\"关西模仿师父\"><a href=\"#关西模仿师父\" class=\"headerlink\" title=\"关西模仿师父\"></a>关西模仿师父</h3><p>这一段是全局最逗的，哈哈。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/hjnep.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/3tdj6.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/nypcc.png\" alt=\"\"></p>\n<h3 id=\"两个老男人的小眼神\"><a href=\"#两个老男人的小眼神\" class=\"headerlink\" title=\"两个老男人的小眼神\"></a>两个老男人的小眼神</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/308il.png\" alt=\"\"></p>\n<h3 id=\"妈妈的咖喱饭\"><a href=\"#妈妈的咖喱饭\" class=\"headerlink\" title=\"妈妈的咖喱饭\"></a>妈妈的咖喱饭</h3><p>叛逆的谈春</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/m4bic.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/vt9v9.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/b2ctz.png\" alt=\"\"></p>\n<p>后来谈春长大了，懂得尊重别人，懂得什么才是人生中最重要的东西。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/6adtf.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/keafp.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/6elp2.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/4g9vd.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/7v895.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/jt750.png\" alt=\"\"></p>\n<h3 id=\"最喜欢的歌曲\"><a href=\"#最喜欢的歌曲\" class=\"headerlink\" title=\"最喜欢的歌曲\"></a>最喜欢的歌曲</h3><p>《青空 — THE BLUE HEARTS》，单曲循环了好久~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一部好电影，陪我度过一个愉快的下午。我很喜欢这些片段和歌曲：</p>\n<ul>\n<li>关于嫉妒</li>\n<li>谈春接纳谈乐</li>\n<li>关西模仿师父</li>\n<li>两个老男人的小眼神</li>\n<li>妈妈的咖喱饭</li>\n<li>最喜欢的歌曲</li>\n</ul>\n<h3 id=\"关于嫉妒\"><a href=\"#关于嫉妒\" class=\"headerlink\" title=\"关于嫉妒\"></a>关于嫉妒</h3><blockquote>\n<p>自己不努力，反而去数落对方的缺点，妄图拉低对方身份，让对方和自己站在同样的高度，就是嫉妒。本来只要采取行动，赶上并超越对方就行，但是人啊，却往往做不到这一点，因为嫉妒是毫不费力的啊。不过现实会给你答案，将责任推卸给时代，推卸给世界，你的处境也不会有任何改变。</p>\n</blockquote>\n<p>这段是全片最经典的一段台词，也是谈春成长的一大转折点。我超级喜欢这个片段</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/vemkb.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/belql.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/jnehv.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/deuz2.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/ly1g1.png\" alt=\"\"></p>\n<p>谈春因为嫉妒和骄傲，犯了很多愚蠢的错误，所以受到的惩罚。</p>\n<p>在人生的某个时刻，一句话或者一段话可以彻底改变一个人，这就是重生。谈春学到了两点：</p>\n<ul>\n<li>不再嫉妒别人，而是专注于自己的成长；</li>\n<li>接受现实，不要埋怨现实，推卸责任；</li>\n</ul>\n<p>有时候看一本书，看一部电影也能体会到重生的感觉，这种感觉是非常好的。</p>\n<h3 id=\"谈春接纳谈乐\"><a href=\"#谈春接纳谈乐\" class=\"headerlink\" title=\"谈春接纳谈乐\"></a>谈春接纳谈乐</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bp856.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/m25ym.png\" alt=\"\"></p>\n<p>踏出第一步：化敌为友。哈哈，这一段真的是燃爆了！</p>\n<h3 id=\"关西模仿师父\"><a href=\"#关西模仿师父\" class=\"headerlink\" title=\"关西模仿师父\"></a>关西模仿师父</h3><p>这一段是全局最逗的，哈哈。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/hjnep.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/3tdj6.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/nypcc.png\" alt=\"\"></p>\n<h3 id=\"两个老男人的小眼神\"><a href=\"#两个老男人的小眼神\" class=\"headerlink\" title=\"两个老男人的小眼神\"></a>两个老男人的小眼神</h3><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/308il.png\" alt=\"\"></p>\n<h3 id=\"妈妈的咖喱饭\"><a href=\"#妈妈的咖喱饭\" class=\"headerlink\" title=\"妈妈的咖喱饭\"></a>妈妈的咖喱饭</h3><p>叛逆的谈春</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/m4bic.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/vt9v9.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/b2ctz.png\" alt=\"\"></p>\n<p>后来谈春长大了，懂得尊重别人，懂得什么才是人生中最重要的东西。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/6adtf.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/keafp.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/6elp2.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/4g9vd.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/7v895.png\" alt=\"\"><br><img src=\"http://oggx6lf7f.bkt.clouddn.com/jt750.png\" alt=\"\"></p>\n<h3 id=\"最喜欢的歌曲\"><a href=\"#最喜欢的歌曲\" class=\"headerlink\" title=\"最喜欢的歌曲\"></a>最喜欢的歌曲</h3><p>《青空 — THE BLUE HEARTS》，单曲循环了好久~</p>\n"},{"title":"第一周学到的最棒的概念/工具","_content":"\n第一周学到的最棒的概念：**提取练习**。\n\n学到这个概念给我代码最大的改变就是：写作变得更加有动力，交流变得更加积极。\n\n在写作的时候，一心想着把今天学到的东西用朴素的语言写下来，因为只有把东西清清出出地写下来，才证明自己已经懂了。\n\n在交流的时候也是抱着类似的想法，就想着把想说的话说清楚，让别人能听明白，如果能帮别人把现实问题也给解决了，那就更好了。\n\n对于提取练习的更多笔记，都记录在[【ORID总结】2017-01-03][1]。\n\n另外，**User Story**也是超棒的概念，当我知道了这个概念的定义时，真的感到很惊讶\n\n- 原来规划需求时，可以切换到用户的角度。\n- 原来所有的需求，都是从用户的角度来考虑的。\n- 原来角色才是决定一个系统复杂度的关键。\n\n对于User Story的更多笔记，都记录在[【ORID总结】2017-01-04][2]。\n\n[1]:\thttp://raimonfuns-blog.logdown.com/posts/1271320-summary-2017-01-03\n[2]:\thttp://raimonfuns-blog.logdown.com/posts/1274245","source":"_posts/2017-01-08-week-best-concept-or-tool.md","raw":"---\ntitle: 第一周学到的最棒的概念/工具\ncategories: 全栈营\ntags: [用户故事, 提取练习]\n---\n\n第一周学到的最棒的概念：**提取练习**。\n\n学到这个概念给我代码最大的改变就是：写作变得更加有动力，交流变得更加积极。\n\n在写作的时候，一心想着把今天学到的东西用朴素的语言写下来，因为只有把东西清清出出地写下来，才证明自己已经懂了。\n\n在交流的时候也是抱着类似的想法，就想着把想说的话说清楚，让别人能听明白，如果能帮别人把现实问题也给解决了，那就更好了。\n\n对于提取练习的更多笔记，都记录在[【ORID总结】2017-01-03][1]。\n\n另外，**User Story**也是超棒的概念，当我知道了这个概念的定义时，真的感到很惊讶\n\n- 原来规划需求时，可以切换到用户的角度。\n- 原来所有的需求，都是从用户的角度来考虑的。\n- 原来角色才是决定一个系统复杂度的关键。\n\n对于User Story的更多笔记，都记录在[【ORID总结】2017-01-04][2]。\n\n[1]:\thttp://raimonfuns-blog.logdown.com/posts/1271320-summary-2017-01-03\n[2]:\thttp://raimonfuns-blog.logdown.com/posts/1274245","slug":"2017-01-08-week-best-concept-or-tool","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicbz0047fsonfs2gsmfh","content":"<p>第一周学到的最棒的概念：<strong>提取练习</strong>。</p>\n<p>学到这个概念给我代码最大的改变就是：写作变得更加有动力，交流变得更加积极。</p>\n<p>在写作的时候，一心想着把今天学到的东西用朴素的语言写下来，因为只有把东西清清出出地写下来，才证明自己已经懂了。</p>\n<p>在交流的时候也是抱着类似的想法，就想着把想说的话说清楚，让别人能听明白，如果能帮别人把现实问题也给解决了，那就更好了。</p>\n<p>对于提取练习的更多笔记，都记录在<a href=\"http://raimonfuns-blog.logdown.com/posts/1271320-summary-2017-01-03\" target=\"_blank\" rel=\"noopener\">【ORID总结】2017-01-03</a>。</p>\n<p>另外，<strong>User Story</strong>也是超棒的概念，当我知道了这个概念的定义时，真的感到很惊讶</p>\n<ul>\n<li>原来规划需求时，可以切换到用户的角度。</li>\n<li>原来所有的需求，都是从用户的角度来考虑的。</li>\n<li>原来角色才是决定一个系统复杂度的关键。</li>\n</ul>\n<p>对于User Story的更多笔记，都记录在<a href=\"http://raimonfuns-blog.logdown.com/posts/1274245\" target=\"_blank\" rel=\"noopener\">【ORID总结】2017-01-04</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一周学到的最棒的概念：<strong>提取练习</strong>。</p>\n<p>学到这个概念给我代码最大的改变就是：写作变得更加有动力，交流变得更加积极。</p>\n<p>在写作的时候，一心想着把今天学到的东西用朴素的语言写下来，因为只有把东西清清出出地写下来，才证明自己已经懂了。</p>\n<p>在交流的时候也是抱着类似的想法，就想着把想说的话说清楚，让别人能听明白，如果能帮别人把现实问题也给解决了，那就更好了。</p>\n<p>对于提取练习的更多笔记，都记录在<a href=\"http://raimonfuns-blog.logdown.com/posts/1271320-summary-2017-01-03\" target=\"_blank\" rel=\"noopener\">【ORID总结】2017-01-03</a>。</p>\n<p>另外，<strong>User Story</strong>也是超棒的概念，当我知道了这个概念的定义时，真的感到很惊讶</p>\n<ul>\n<li>原来规划需求时，可以切换到用户的角度。</li>\n<li>原来所有的需求，都是从用户的角度来考虑的。</li>\n<li>原来角色才是决定一个系统复杂度的关键。</li>\n</ul>\n<p>对于User Story的更多笔记，都记录在<a href=\"http://raimonfuns-blog.logdown.com/posts/1274245\" target=\"_blank\" rel=\"noopener\">【ORID总结】2017-01-04</a>。</p>\n"},{"title":"第一周遇到的最大的坑","_content":"\n本周遇到最大的坑是：“[不能执行正确的create和update（多级路由）][1]”，在遇到这个问题时，思考了很多，但还是没能自己解决，后来发现在论坛上，有同学也遇到了这个问题，并且解决了，按照他们给出的解法，我也成功地把这个问题解决了。后来才发现，这是教程里面没有提到过的，所以，利用现有知识是无法解决的，只能通过求助或者搜索来解决。幸运的是，经过这么一折腾，以后应该再也不会犯这个错误了。\n\n[1]:\thttp://raimonfuns-blog.logdown.com/posts/1285306\n","source":"_posts/2017-01-08-week-hole.md","raw":"---\ntitle: 第一周遇到的最大的坑\ncategories: 全栈营\n---\n\n本周遇到最大的坑是：“[不能执行正确的create和update（多级路由）][1]”，在遇到这个问题时，思考了很多，但还是没能自己解决，后来发现在论坛上，有同学也遇到了这个问题，并且解决了，按照他们给出的解法，我也成功地把这个问题解决了。后来才发现，这是教程里面没有提到过的，所以，利用现有知识是无法解决的，只能通过求助或者搜索来解决。幸运的是，经过这么一折腾，以后应该再也不会犯这个错误了。\n\n[1]:\thttp://raimonfuns-blog.logdown.com/posts/1285306\n","slug":"2017-01-08-week-hole","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicc00049fsonazans7iy","content":"<p>本周遇到最大的坑是：“<a href=\"http://raimonfuns-blog.logdown.com/posts/1285306\" target=\"_blank\" rel=\"noopener\">不能执行正确的create和update（多级路由）</a>”，在遇到这个问题时，思考了很多，但还是没能自己解决，后来发现在论坛上，有同学也遇到了这个问题，并且解决了，按照他们给出的解法，我也成功地把这个问题解决了。后来才发现，这是教程里面没有提到过的，所以，利用现有知识是无法解决的，只能通过求助或者搜索来解决。幸运的是，经过这么一折腾，以后应该再也不会犯这个错误了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本周遇到最大的坑是：“<a href=\"http://raimonfuns-blog.logdown.com/posts/1285306\" target=\"_blank\" rel=\"noopener\">不能执行正确的create和update（多级路由）</a>”，在遇到这个问题时，思考了很多，但还是没能自己解决，后来发现在论坛上，有同学也遇到了这个问题，并且解决了，按照他们给出的解法，我也成功地把这个问题解决了。后来才发现，这是教程里面没有提到过的，所以，利用现有知识是无法解决的，只能通过求助或者搜索来解决。幸运的是，经过这么一折腾，以后应该再也不会犯这个错误了。</p>\n"},{"title":"【ORID总结】1/9","_content":"\n## Objective\n- 今天没有练习。\n- 恐怖箱的故事。\n\n## Reflective\n- 情绪的低点：今天的情绪非常糟糕，对工作完全提不起兴趣。\n- 情绪的高点：恐怖箱的故事让我更有勇气去做出改变。\n\n## Decisional\n招聘网站更新了，明天下班抽空练习。\n","source":"_posts/2017-01-09-coding-diary.md","raw":"---\ntitle: 【ORID总结】1/9\ncategories: 全栈营\n---\n\n## Objective\n- 今天没有练习。\n- 恐怖箱的故事。\n\n## Reflective\n- 情绪的低点：今天的情绪非常糟糕，对工作完全提不起兴趣。\n- 情绪的高点：恐怖箱的故事让我更有勇气去做出改变。\n\n## Decisional\n招聘网站更新了，明天下班抽空练习。\n","slug":"2017-01-09-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicc1004cfson9bx8thk5","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>今天没有练习。</li>\n<li>恐怖箱的故事。</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><ul>\n<li>情绪的低点：今天的情绪非常糟糕，对工作完全提不起兴趣。</li>\n<li>情绪的高点：恐怖箱的故事让我更有勇气去做出改变。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>招聘网站更新了，明天下班抽空练习。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>今天没有练习。</li>\n<li>恐怖箱的故事。</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><ul>\n<li>情绪的低点：今天的情绪非常糟糕，对工作完全提不起兴趣。</li>\n<li>情绪的高点：恐怖箱的故事让我更有勇气去做出改变。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>招聘网站更新了，明天下班抽空练习。</p>\n"},{"title":"rails101 动作分解","_content":"\n### bootstrap配置\n\n- [帮 Rails 专案穿上衣服“Bootstrap”](https://fullstack.xinshengdaxue.com/posts/55)\n  - add bootstrap to project\n- [套用 Bootstrap 的 html 样式](https://fullstack.xinshengdaxue.com/posts/56)\n  - add bootstrap html\n- [制作漂亮的“提示讯息”](https://fullstack.xinshengdaxue.com/posts/57)\n  - add bootstrap flash function\n\n### 建立一个讨论组\n\n- [建立讨论群的架构](https://fullstack.xinshengdaxue.com/posts/59)\n  - create groups index\n- [将首页换成讨论群一览表](https://fullstack.xinshengdaxue.com/posts/60)\n  - replace root with groups#index\n\n### 手动实做讨论组的“新增”“修改”“删除”功能\n\n- [实作讨论群“新增”功能](https://fullstack.xinshengdaxue.com/posts/62)\n  - implement groups#new\n- [实作讨论群“浏览”功能](https://fullstack.xinshengdaxue.com/posts/63)\n  - implement groups#create\n- [实作讨论群“修改”功能](https://fullstack.xinshengdaxue.com/posts/64)\n  - implement groups#edit\n  - implement groups#update\n- [实作讨论群“删除”功能](https://fullstack.xinshengdaxue.com/posts/65)\n  - implement groups#destroy\n- [限制“标题为空”的文章，不能被送出](https://fullstack.xinshengdaxue.com/posts/66)\n  - add validation to title\n  - add validation to title apply to edit/update\n- [共用“表单”](https://fullstack.xinshengdaxue.com/posts/67)\n  - move form to partial\n- [将表单换为 Bootstrap 提供的版型](https://fullstack.xinshengdaxue.com/posts/68)\n  - style form with bootstrap\n  - replace form with simple_form bootstrap template\n\n### 加入使用者功能\n\n- [安装 devise gem](https://fullstack.xinshengdaxue.com/posts/71)\n  - install devise\n- [这个网站有实际“登入”、“登出”的功能](https://fullstack.xinshengdaxue.com/posts/72)\n  - user can login/logout/signup\n- [让“群组”与“使用者”产生关联](https://fullstack.xinshengdaxue.com/posts/73)\n  - add user_id to group\n  - show group's creator info\n- [只有群组的“创始者”可以“修改”“删除”群组资讯](https://fullstack.xinshengdaxue.com/posts/74)\n  - people can't see edit button unless he is group owner\n  - check owner permission when access edit/update/destroy\n  - use before_action to find_group_and_check_permission\n  - add permission check on show page\n\n### 在讨论组里面“发表文章”\n\n- [建立文章的架构](https://fullstack.xinshengdaxue.com/posts/76)\n  - add post and hook group/user relation\n  - add posts nested route\n  - add post button\n- [实际发表文章](https://fullstack.xinshengdaxue.com/posts/77)\n  - implement post create function\n- [文章应该按照发表时间倒序排列](https://fullstack.xinshengdaxue.com/posts/78)\n  - add order by created_at to group's post\n  - using scope to write order by created_at to group's post\n- [加入文章分页功能](https://fullstack.xinshengdaxue.com/posts/79)\n  - implement posts pagination with will_paginate\n\n### 使用者应该要“加入社团”才能发表文章\n\n- [建立“群成员”资料表](https://fullstack.xinshengdaxue.com/posts/81)\n  - implement group relation\n- [在群组里面判断“是否群组成员”实作](https://fullstack.xinshengdaxue.com/posts/82)\n  - implement is_member_of?(group)\n- [“加入群组”或“退出群组”](https://fullstack.xinshengdaxue.com/posts/83)\n  - join or quit group\n- [实际操作“加入群组”或“退出群组”](https://fullstack.xinshengdaxue.com/posts/84)\n  - join & quit group action\n- [User 在建立 group 后自动成为 group 的一员](https://fullstack.xinshengdaxue.com/posts/85)\n  - when created a group, join it automatically\n\n### 使用者可以在“自己的后台”看过曾经发表的文章、以及创立的社团\n\n- [可以看到自己参与的所有群组](https://fullstack.xinshengdaxue.com/posts/87)\n  - implement my groups\n- [可以看到自己发表的所有文章](https://fullstack.xinshengdaxue.com/posts/88)\n  - implement my posts\n\n### 修饰细节，使用 Helper 与 Partial\n\n- [系统内建 Helper “simple_format”的使用](https://fullstack.xinshengdaxue.com/posts/90)\n  - use simple_format helper to decorate\n- [使用自定义 Helper](https://fullstack.xinshengdaxue.com/posts/91)\n  - use self delimit helper\n- [partial 还可以这样用](https://fullstack.xinshengdaxue.com/posts/92)\n  - render partial with collection\n","source":"_posts/2017-01-09-rails-101-category.md","raw":"---\ntitle: rails101 动作分解\ncategories: 全栈营\n---\n\n### bootstrap配置\n\n- [帮 Rails 专案穿上衣服“Bootstrap”](https://fullstack.xinshengdaxue.com/posts/55)\n  - add bootstrap to project\n- [套用 Bootstrap 的 html 样式](https://fullstack.xinshengdaxue.com/posts/56)\n  - add bootstrap html\n- [制作漂亮的“提示讯息”](https://fullstack.xinshengdaxue.com/posts/57)\n  - add bootstrap flash function\n\n### 建立一个讨论组\n\n- [建立讨论群的架构](https://fullstack.xinshengdaxue.com/posts/59)\n  - create groups index\n- [将首页换成讨论群一览表](https://fullstack.xinshengdaxue.com/posts/60)\n  - replace root with groups#index\n\n### 手动实做讨论组的“新增”“修改”“删除”功能\n\n- [实作讨论群“新增”功能](https://fullstack.xinshengdaxue.com/posts/62)\n  - implement groups#new\n- [实作讨论群“浏览”功能](https://fullstack.xinshengdaxue.com/posts/63)\n  - implement groups#create\n- [实作讨论群“修改”功能](https://fullstack.xinshengdaxue.com/posts/64)\n  - implement groups#edit\n  - implement groups#update\n- [实作讨论群“删除”功能](https://fullstack.xinshengdaxue.com/posts/65)\n  - implement groups#destroy\n- [限制“标题为空”的文章，不能被送出](https://fullstack.xinshengdaxue.com/posts/66)\n  - add validation to title\n  - add validation to title apply to edit/update\n- [共用“表单”](https://fullstack.xinshengdaxue.com/posts/67)\n  - move form to partial\n- [将表单换为 Bootstrap 提供的版型](https://fullstack.xinshengdaxue.com/posts/68)\n  - style form with bootstrap\n  - replace form with simple_form bootstrap template\n\n### 加入使用者功能\n\n- [安装 devise gem](https://fullstack.xinshengdaxue.com/posts/71)\n  - install devise\n- [这个网站有实际“登入”、“登出”的功能](https://fullstack.xinshengdaxue.com/posts/72)\n  - user can login/logout/signup\n- [让“群组”与“使用者”产生关联](https://fullstack.xinshengdaxue.com/posts/73)\n  - add user_id to group\n  - show group's creator info\n- [只有群组的“创始者”可以“修改”“删除”群组资讯](https://fullstack.xinshengdaxue.com/posts/74)\n  - people can't see edit button unless he is group owner\n  - check owner permission when access edit/update/destroy\n  - use before_action to find_group_and_check_permission\n  - add permission check on show page\n\n### 在讨论组里面“发表文章”\n\n- [建立文章的架构](https://fullstack.xinshengdaxue.com/posts/76)\n  - add post and hook group/user relation\n  - add posts nested route\n  - add post button\n- [实际发表文章](https://fullstack.xinshengdaxue.com/posts/77)\n  - implement post create function\n- [文章应该按照发表时间倒序排列](https://fullstack.xinshengdaxue.com/posts/78)\n  - add order by created_at to group's post\n  - using scope to write order by created_at to group's post\n- [加入文章分页功能](https://fullstack.xinshengdaxue.com/posts/79)\n  - implement posts pagination with will_paginate\n\n### 使用者应该要“加入社团”才能发表文章\n\n- [建立“群成员”资料表](https://fullstack.xinshengdaxue.com/posts/81)\n  - implement group relation\n- [在群组里面判断“是否群组成员”实作](https://fullstack.xinshengdaxue.com/posts/82)\n  - implement is_member_of?(group)\n- [“加入群组”或“退出群组”](https://fullstack.xinshengdaxue.com/posts/83)\n  - join or quit group\n- [实际操作“加入群组”或“退出群组”](https://fullstack.xinshengdaxue.com/posts/84)\n  - join & quit group action\n- [User 在建立 group 后自动成为 group 的一员](https://fullstack.xinshengdaxue.com/posts/85)\n  - when created a group, join it automatically\n\n### 使用者可以在“自己的后台”看过曾经发表的文章、以及创立的社团\n\n- [可以看到自己参与的所有群组](https://fullstack.xinshengdaxue.com/posts/87)\n  - implement my groups\n- [可以看到自己发表的所有文章](https://fullstack.xinshengdaxue.com/posts/88)\n  - implement my posts\n\n### 修饰细节，使用 Helper 与 Partial\n\n- [系统内建 Helper “simple_format”的使用](https://fullstack.xinshengdaxue.com/posts/90)\n  - use simple_format helper to decorate\n- [使用自定义 Helper](https://fullstack.xinshengdaxue.com/posts/91)\n  - use self delimit helper\n- [partial 还可以这样用](https://fullstack.xinshengdaxue.com/posts/92)\n  - render partial with collection\n","slug":"2017-01-09-rails-101-category","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicc2004efsonnfcbz45f","content":"<h3 id=\"bootstrap配置\"><a href=\"#bootstrap配置\" class=\"headerlink\" title=\"bootstrap配置\"></a>bootstrap配置</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/55\" target=\"_blank\" rel=\"noopener\">帮 Rails 专案穿上衣服“Bootstrap”</a><ul>\n<li>add bootstrap to project</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/56\" target=\"_blank\" rel=\"noopener\">套用 Bootstrap 的 html 样式</a><ul>\n<li>add bootstrap html</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/57\" target=\"_blank\" rel=\"noopener\">制作漂亮的“提示讯息”</a><ul>\n<li>add bootstrap flash function</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"建立一个讨论组\"><a href=\"#建立一个讨论组\" class=\"headerlink\" title=\"建立一个讨论组\"></a>建立一个讨论组</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/59\" target=\"_blank\" rel=\"noopener\">建立讨论群的架构</a><ul>\n<li>create groups index</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/60\" target=\"_blank\" rel=\"noopener\">将首页换成讨论群一览表</a><ul>\n<li>replace root with groups#index</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"手动实做讨论组的“新增”“修改”“删除”功能\"><a href=\"#手动实做讨论组的“新增”“修改”“删除”功能\" class=\"headerlink\" title=\"手动实做讨论组的“新增”“修改”“删除”功能\"></a>手动实做讨论组的“新增”“修改”“删除”功能</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/62\" target=\"_blank\" rel=\"noopener\">实作讨论群“新增”功能</a><ul>\n<li>implement groups#new</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/63\" target=\"_blank\" rel=\"noopener\">实作讨论群“浏览”功能</a><ul>\n<li>implement groups#create</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/64\" target=\"_blank\" rel=\"noopener\">实作讨论群“修改”功能</a><ul>\n<li>implement groups#edit</li>\n<li>implement groups#update</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/65\" target=\"_blank\" rel=\"noopener\">实作讨论群“删除”功能</a><ul>\n<li>implement groups#destroy</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/66\" target=\"_blank\" rel=\"noopener\">限制“标题为空”的文章，不能被送出</a><ul>\n<li>add validation to title</li>\n<li>add validation to title apply to edit/update</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/67\" target=\"_blank\" rel=\"noopener\">共用“表单”</a><ul>\n<li>move form to partial</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/68\" target=\"_blank\" rel=\"noopener\">将表单换为 Bootstrap 提供的版型</a><ul>\n<li>style form with bootstrap</li>\n<li>replace form with simple_form bootstrap template</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"加入使用者功能\"><a href=\"#加入使用者功能\" class=\"headerlink\" title=\"加入使用者功能\"></a>加入使用者功能</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/71\" target=\"_blank\" rel=\"noopener\">安装 devise gem</a><ul>\n<li>install devise</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/72\" target=\"_blank\" rel=\"noopener\">这个网站有实际“登入”、“登出”的功能</a><ul>\n<li>user can login/logout/signup</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/73\" target=\"_blank\" rel=\"noopener\">让“群组”与“使用者”产生关联</a><ul>\n<li>add user_id to group</li>\n<li>show group’s creator info</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/74\" target=\"_blank\" rel=\"noopener\">只有群组的“创始者”可以“修改”“删除”群组资讯</a><ul>\n<li>people can’t see edit button unless he is group owner</li>\n<li>check owner permission when access edit/update/destroy</li>\n<li>use before_action to find_group_and_check_permission</li>\n<li>add permission check on show page</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"在讨论组里面“发表文章”\"><a href=\"#在讨论组里面“发表文章”\" class=\"headerlink\" title=\"在讨论组里面“发表文章”\"></a>在讨论组里面“发表文章”</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/76\" target=\"_blank\" rel=\"noopener\">建立文章的架构</a><ul>\n<li>add post and hook group/user relation</li>\n<li>add posts nested route</li>\n<li>add post button</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/77\" target=\"_blank\" rel=\"noopener\">实际发表文章</a><ul>\n<li>implement post create function</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/78\" target=\"_blank\" rel=\"noopener\">文章应该按照发表时间倒序排列</a><ul>\n<li>add order by created_at to group’s post</li>\n<li>using scope to write order by created_at to group’s post</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/79\" target=\"_blank\" rel=\"noopener\">加入文章分页功能</a><ul>\n<li>implement posts pagination with will_paginate</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用者应该要“加入社团”才能发表文章\"><a href=\"#使用者应该要“加入社团”才能发表文章\" class=\"headerlink\" title=\"使用者应该要“加入社团”才能发表文章\"></a>使用者应该要“加入社团”才能发表文章</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/81\" target=\"_blank\" rel=\"noopener\">建立“群成员”资料表</a><ul>\n<li>implement group relation</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/82\" target=\"_blank\" rel=\"noopener\">在群组里面判断“是否群组成员”实作</a><ul>\n<li>implement is_member_of?(group)</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/83\" target=\"_blank\" rel=\"noopener\">“加入群组”或“退出群组”</a><ul>\n<li>join or quit group</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/84\" target=\"_blank\" rel=\"noopener\">实际操作“加入群组”或“退出群组”</a><ul>\n<li>join &amp; quit group action</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/85\" target=\"_blank\" rel=\"noopener\">User 在建立 group 后自动成为 group 的一员</a><ul>\n<li>when created a group, join it automatically</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用者可以在“自己的后台”看过曾经发表的文章、以及创立的社团\"><a href=\"#使用者可以在“自己的后台”看过曾经发表的文章、以及创立的社团\" class=\"headerlink\" title=\"使用者可以在“自己的后台”看过曾经发表的文章、以及创立的社团\"></a>使用者可以在“自己的后台”看过曾经发表的文章、以及创立的社团</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/87\" target=\"_blank\" rel=\"noopener\">可以看到自己参与的所有群组</a><ul>\n<li>implement my groups</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/88\" target=\"_blank\" rel=\"noopener\">可以看到自己发表的所有文章</a><ul>\n<li>implement my posts</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"修饰细节，使用-Helper-与-Partial\"><a href=\"#修饰细节，使用-Helper-与-Partial\" class=\"headerlink\" title=\"修饰细节，使用 Helper 与 Partial\"></a>修饰细节，使用 Helper 与 Partial</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/90\" target=\"_blank\" rel=\"noopener\">系统内建 Helper “simple_format”的使用</a><ul>\n<li>use simple_format helper to decorate</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/91\" target=\"_blank\" rel=\"noopener\">使用自定义 Helper</a><ul>\n<li>use self delimit helper</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/92\" target=\"_blank\" rel=\"noopener\">partial 还可以这样用</a><ul>\n<li>render partial with collection</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"bootstrap配置\"><a href=\"#bootstrap配置\" class=\"headerlink\" title=\"bootstrap配置\"></a>bootstrap配置</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/55\" target=\"_blank\" rel=\"noopener\">帮 Rails 专案穿上衣服“Bootstrap”</a><ul>\n<li>add bootstrap to project</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/56\" target=\"_blank\" rel=\"noopener\">套用 Bootstrap 的 html 样式</a><ul>\n<li>add bootstrap html</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/57\" target=\"_blank\" rel=\"noopener\">制作漂亮的“提示讯息”</a><ul>\n<li>add bootstrap flash function</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"建立一个讨论组\"><a href=\"#建立一个讨论组\" class=\"headerlink\" title=\"建立一个讨论组\"></a>建立一个讨论组</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/59\" target=\"_blank\" rel=\"noopener\">建立讨论群的架构</a><ul>\n<li>create groups index</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/60\" target=\"_blank\" rel=\"noopener\">将首页换成讨论群一览表</a><ul>\n<li>replace root with groups#index</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"手动实做讨论组的“新增”“修改”“删除”功能\"><a href=\"#手动实做讨论组的“新增”“修改”“删除”功能\" class=\"headerlink\" title=\"手动实做讨论组的“新增”“修改”“删除”功能\"></a>手动实做讨论组的“新增”“修改”“删除”功能</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/62\" target=\"_blank\" rel=\"noopener\">实作讨论群“新增”功能</a><ul>\n<li>implement groups#new</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/63\" target=\"_blank\" rel=\"noopener\">实作讨论群“浏览”功能</a><ul>\n<li>implement groups#create</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/64\" target=\"_blank\" rel=\"noopener\">实作讨论群“修改”功能</a><ul>\n<li>implement groups#edit</li>\n<li>implement groups#update</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/65\" target=\"_blank\" rel=\"noopener\">实作讨论群“删除”功能</a><ul>\n<li>implement groups#destroy</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/66\" target=\"_blank\" rel=\"noopener\">限制“标题为空”的文章，不能被送出</a><ul>\n<li>add validation to title</li>\n<li>add validation to title apply to edit/update</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/67\" target=\"_blank\" rel=\"noopener\">共用“表单”</a><ul>\n<li>move form to partial</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/68\" target=\"_blank\" rel=\"noopener\">将表单换为 Bootstrap 提供的版型</a><ul>\n<li>style form with bootstrap</li>\n<li>replace form with simple_form bootstrap template</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"加入使用者功能\"><a href=\"#加入使用者功能\" class=\"headerlink\" title=\"加入使用者功能\"></a>加入使用者功能</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/71\" target=\"_blank\" rel=\"noopener\">安装 devise gem</a><ul>\n<li>install devise</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/72\" target=\"_blank\" rel=\"noopener\">这个网站有实际“登入”、“登出”的功能</a><ul>\n<li>user can login/logout/signup</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/73\" target=\"_blank\" rel=\"noopener\">让“群组”与“使用者”产生关联</a><ul>\n<li>add user_id to group</li>\n<li>show group’s creator info</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/74\" target=\"_blank\" rel=\"noopener\">只有群组的“创始者”可以“修改”“删除”群组资讯</a><ul>\n<li>people can’t see edit button unless he is group owner</li>\n<li>check owner permission when access edit/update/destroy</li>\n<li>use before_action to find_group_and_check_permission</li>\n<li>add permission check on show page</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"在讨论组里面“发表文章”\"><a href=\"#在讨论组里面“发表文章”\" class=\"headerlink\" title=\"在讨论组里面“发表文章”\"></a>在讨论组里面“发表文章”</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/76\" target=\"_blank\" rel=\"noopener\">建立文章的架构</a><ul>\n<li>add post and hook group/user relation</li>\n<li>add posts nested route</li>\n<li>add post button</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/77\" target=\"_blank\" rel=\"noopener\">实际发表文章</a><ul>\n<li>implement post create function</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/78\" target=\"_blank\" rel=\"noopener\">文章应该按照发表时间倒序排列</a><ul>\n<li>add order by created_at to group’s post</li>\n<li>using scope to write order by created_at to group’s post</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/79\" target=\"_blank\" rel=\"noopener\">加入文章分页功能</a><ul>\n<li>implement posts pagination with will_paginate</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用者应该要“加入社团”才能发表文章\"><a href=\"#使用者应该要“加入社团”才能发表文章\" class=\"headerlink\" title=\"使用者应该要“加入社团”才能发表文章\"></a>使用者应该要“加入社团”才能发表文章</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/81\" target=\"_blank\" rel=\"noopener\">建立“群成员”资料表</a><ul>\n<li>implement group relation</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/82\" target=\"_blank\" rel=\"noopener\">在群组里面判断“是否群组成员”实作</a><ul>\n<li>implement is_member_of?(group)</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/83\" target=\"_blank\" rel=\"noopener\">“加入群组”或“退出群组”</a><ul>\n<li>join or quit group</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/84\" target=\"_blank\" rel=\"noopener\">实际操作“加入群组”或“退出群组”</a><ul>\n<li>join &amp; quit group action</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/85\" target=\"_blank\" rel=\"noopener\">User 在建立 group 后自动成为 group 的一员</a><ul>\n<li>when created a group, join it automatically</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用者可以在“自己的后台”看过曾经发表的文章、以及创立的社团\"><a href=\"#使用者可以在“自己的后台”看过曾经发表的文章、以及创立的社团\" class=\"headerlink\" title=\"使用者可以在“自己的后台”看过曾经发表的文章、以及创立的社团\"></a>使用者可以在“自己的后台”看过曾经发表的文章、以及创立的社团</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/87\" target=\"_blank\" rel=\"noopener\">可以看到自己参与的所有群组</a><ul>\n<li>implement my groups</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/88\" target=\"_blank\" rel=\"noopener\">可以看到自己发表的所有文章</a><ul>\n<li>implement my posts</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"修饰细节，使用-Helper-与-Partial\"><a href=\"#修饰细节，使用-Helper-与-Partial\" class=\"headerlink\" title=\"修饰细节，使用 Helper 与 Partial\"></a>修饰细节，使用 Helper 与 Partial</h3><ul>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/90\" target=\"_blank\" rel=\"noopener\">系统内建 Helper “simple_format”的使用</a><ul>\n<li>use simple_format helper to decorate</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/91\" target=\"_blank\" rel=\"noopener\">使用自定义 Helper</a><ul>\n<li>use self delimit helper</li>\n</ul>\n</li>\n<li><a href=\"https://fullstack.xinshengdaxue.com/posts/92\" target=\"_blank\" rel=\"noopener\">partial 还可以这样用</a><ul>\n<li>render partial with collection</li>\n</ul>\n</li>\n</ul>\n"},{"title":"【ORID总结】1/10","_content":"\n## Objective\n完成招聘网站的观看系统和应征系统\n## Reflective\n今天精神特别集中，一口气把功能都做完了，情绪不错。\n\n## Interpretive\n### case和when\n今天学到一个新的语法，case和when，是用来控制流程的，类似于js中的switch。\n### 文件上传\n本来一开始打算根据提示，自己独立完成，但是到了上传pdf这个步骤就懵了，因为之前没做过，当我准备建立resume的model时，最让我感到困惑的一点是pdf这个属性的类型是什么？想不明白，后面就直接看答案，哦，原来这个数据类型的string。于是就跟着解答版，把后面的功能都实现了，学到了一个叫做carrierwave上传的gem，挺好用的。\n### 《招聘网站》与《rails 101》\nxdite老师昨天晚上说可以对比《招聘网站》与《rails 101》有哪些是相同的，有哪些不同。相同点有很多，比如\n- groups 对应 jobs\n- posts 对应 resumes\n\n最大的不同是《招聘网站》多了一个角色：admin，而admin#jobs的controller是这样建的：\n\n`rails g controller admin::jobs`\n\nadmin#resumes的controller是这样建的：\n\n`rails g controller admin::resumes`\n\n总的来说，和《rails 101》相比，多了一个角色，复杂度就高了一些。\n## Decisional\n- 整理每个功能，做一份cheatsheet，方便将来快速查询。\n- 功能都完了，开始给《招聘网站》上漆。\n","source":"_posts/2017-01-10-coding-diary.md","raw":"---\ntitle: 【ORID总结】1/10\ncategories: 全栈营\n---\n\n## Objective\n完成招聘网站的观看系统和应征系统\n## Reflective\n今天精神特别集中，一口气把功能都做完了，情绪不错。\n\n## Interpretive\n### case和when\n今天学到一个新的语法，case和when，是用来控制流程的，类似于js中的switch。\n### 文件上传\n本来一开始打算根据提示，自己独立完成，但是到了上传pdf这个步骤就懵了，因为之前没做过，当我准备建立resume的model时，最让我感到困惑的一点是pdf这个属性的类型是什么？想不明白，后面就直接看答案，哦，原来这个数据类型的string。于是就跟着解答版，把后面的功能都实现了，学到了一个叫做carrierwave上传的gem，挺好用的。\n### 《招聘网站》与《rails 101》\nxdite老师昨天晚上说可以对比《招聘网站》与《rails 101》有哪些是相同的，有哪些不同。相同点有很多，比如\n- groups 对应 jobs\n- posts 对应 resumes\n\n最大的不同是《招聘网站》多了一个角色：admin，而admin#jobs的controller是这样建的：\n\n`rails g controller admin::jobs`\n\nadmin#resumes的controller是这样建的：\n\n`rails g controller admin::resumes`\n\n总的来说，和《rails 101》相比，多了一个角色，复杂度就高了一些。\n## Decisional\n- 整理每个功能，做一份cheatsheet，方便将来快速查询。\n- 功能都完了，开始给《招聘网站》上漆。\n","slug":"2017-01-10-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicc5004gfson5y9oc3ln","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成招聘网站的观看系统和应征系统</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>今天精神特别集中，一口气把功能都做完了，情绪不错。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"case和when\"><a href=\"#case和when\" class=\"headerlink\" title=\"case和when\"></a>case和when</h3><p>今天学到一个新的语法，case和when，是用来控制流程的，类似于js中的switch。</p>\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><p>本来一开始打算根据提示，自己独立完成，但是到了上传pdf这个步骤就懵了，因为之前没做过，当我准备建立resume的model时，最让我感到困惑的一点是pdf这个属性的类型是什么？想不明白，后面就直接看答案，哦，原来这个数据类型的string。于是就跟着解答版，把后面的功能都实现了，学到了一个叫做carrierwave上传的gem，挺好用的。</p>\n<h3 id=\"《招聘网站》与《rails-101》\"><a href=\"#《招聘网站》与《rails-101》\" class=\"headerlink\" title=\"《招聘网站》与《rails 101》\"></a>《招聘网站》与《rails 101》</h3><p>xdite老师昨天晚上说可以对比《招聘网站》与《rails 101》有哪些是相同的，有哪些不同。相同点有很多，比如</p>\n<ul>\n<li>groups 对应 jobs</li>\n<li>posts 对应 resumes</li>\n</ul>\n<p>最大的不同是《招聘网站》多了一个角色：admin，而admin#jobs的controller是这样建的：</p>\n<p><code>rails g controller admin::jobs</code></p>\n<p>admin#resumes的controller是这样建的：</p>\n<p><code>rails g controller admin::resumes</code></p>\n<p>总的来说，和《rails 101》相比，多了一个角色，复杂度就高了一些。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>整理每个功能，做一份cheatsheet，方便将来快速查询。</li>\n<li>功能都完了，开始给《招聘网站》上漆。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成招聘网站的观看系统和应征系统</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>今天精神特别集中，一口气把功能都做完了，情绪不错。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"case和when\"><a href=\"#case和when\" class=\"headerlink\" title=\"case和when\"></a>case和when</h3><p>今天学到一个新的语法，case和when，是用来控制流程的，类似于js中的switch。</p>\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><p>本来一开始打算根据提示，自己独立完成，但是到了上传pdf这个步骤就懵了，因为之前没做过，当我准备建立resume的model时，最让我感到困惑的一点是pdf这个属性的类型是什么？想不明白，后面就直接看答案，哦，原来这个数据类型的string。于是就跟着解答版，把后面的功能都实现了，学到了一个叫做carrierwave上传的gem，挺好用的。</p>\n<h3 id=\"《招聘网站》与《rails-101》\"><a href=\"#《招聘网站》与《rails-101》\" class=\"headerlink\" title=\"《招聘网站》与《rails 101》\"></a>《招聘网站》与《rails 101》</h3><p>xdite老师昨天晚上说可以对比《招聘网站》与《rails 101》有哪些是相同的，有哪些不同。相同点有很多，比如</p>\n<ul>\n<li>groups 对应 jobs</li>\n<li>posts 对应 resumes</li>\n</ul>\n<p>最大的不同是《招聘网站》多了一个角色：admin，而admin#jobs的controller是这样建的：</p>\n<p><code>rails g controller admin::jobs</code></p>\n<p>admin#resumes的controller是这样建的：</p>\n<p><code>rails g controller admin::resumes</code></p>\n<p>总的来说，和《rails 101》相比，多了一个角色，复杂度就高了一些。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>整理每个功能，做一份cheatsheet，方便将来快速查询。</li>\n<li>功能都完了，开始给《招聘网站》上漆。</li>\n</ul>\n"},{"title":"【ORID总结】1/13","_content":"\n## Objective\n- 《招聘网站》魔改第一步：优化列表样式\n\n## Reflective\n脱离教程开始按照自己的想法开发功能，就相当于从“游乐场模式”切换成“野生模式”，一下子有点懵，也有点害怕犯错，因为担心自己把时间花在不是很重要的功能上面。\n\n## Interpretive\n### 功能 & 样式\n魔改比赛的方向有两个，添加新功能以及美化样式。这两者尽量单独开发会好一点，添加新功能时就不要想着美化样式，同理，美化样式不要想着添加功能，一次只干一件事，做完了提交，然后再做其他功能。\n\n### 要让产品受欢迎，需要思考的东西很多\n- 页面看起来漂亮\n- 功能很实用\n- 降低疑虑，增强信心\n\n## Decisional\n- 在样式上，参考bootstrap、其他UI库以及其他网站\n- 在功能上，参考《66K 高薪工作網》","source":"_posts/2017-01-13-coding-diary.md","raw":"---\ntitle: 【ORID总结】1/13\ncategories: 全栈营\n---\n\n## Objective\n- 《招聘网站》魔改第一步：优化列表样式\n\n## Reflective\n脱离教程开始按照自己的想法开发功能，就相当于从“游乐场模式”切换成“野生模式”，一下子有点懵，也有点害怕犯错，因为担心自己把时间花在不是很重要的功能上面。\n\n## Interpretive\n### 功能 & 样式\n魔改比赛的方向有两个，添加新功能以及美化样式。这两者尽量单独开发会好一点，添加新功能时就不要想着美化样式，同理，美化样式不要想着添加功能，一次只干一件事，做完了提交，然后再做其他功能。\n\n### 要让产品受欢迎，需要思考的东西很多\n- 页面看起来漂亮\n- 功能很实用\n- 降低疑虑，增强信心\n\n## Decisional\n- 在样式上，参考bootstrap、其他UI库以及其他网站\n- 在功能上，参考《66K 高薪工作網》","slug":"2017-01-13-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicc7004jfson8yj5dgti","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>《招聘网站》魔改第一步：优化列表样式</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>脱离教程开始按照自己的想法开发功能，就相当于从“游乐场模式”切换成“野生模式”，一下子有点懵，也有点害怕犯错，因为担心自己把时间花在不是很重要的功能上面。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"功能-amp-样式\"><a href=\"#功能-amp-样式\" class=\"headerlink\" title=\"功能 &amp; 样式\"></a>功能 &amp; 样式</h3><p>魔改比赛的方向有两个，添加新功能以及美化样式。这两者尽量单独开发会好一点，添加新功能时就不要想着美化样式，同理，美化样式不要想着添加功能，一次只干一件事，做完了提交，然后再做其他功能。</p>\n<h3 id=\"要让产品受欢迎，需要思考的东西很多\"><a href=\"#要让产品受欢迎，需要思考的东西很多\" class=\"headerlink\" title=\"要让产品受欢迎，需要思考的东西很多\"></a>要让产品受欢迎，需要思考的东西很多</h3><ul>\n<li>页面看起来漂亮</li>\n<li>功能很实用</li>\n<li>降低疑虑，增强信心</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>在样式上，参考bootstrap、其他UI库以及其他网站</li>\n<li>在功能上，参考《66K 高薪工作網》</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>《招聘网站》魔改第一步：优化列表样式</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>脱离教程开始按照自己的想法开发功能，就相当于从“游乐场模式”切换成“野生模式”，一下子有点懵，也有点害怕犯错，因为担心自己把时间花在不是很重要的功能上面。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"功能-amp-样式\"><a href=\"#功能-amp-样式\" class=\"headerlink\" title=\"功能 &amp; 样式\"></a>功能 &amp; 样式</h3><p>魔改比赛的方向有两个，添加新功能以及美化样式。这两者尽量单独开发会好一点，添加新功能时就不要想着美化样式，同理，美化样式不要想着添加功能，一次只干一件事，做完了提交，然后再做其他功能。</p>\n<h3 id=\"要让产品受欢迎，需要思考的东西很多\"><a href=\"#要让产品受欢迎，需要思考的东西很多\" class=\"headerlink\" title=\"要让产品受欢迎，需要思考的东西很多\"></a>要让产品受欢迎，需要思考的东西很多</h3><ul>\n<li>页面看起来漂亮</li>\n<li>功能很实用</li>\n<li>降低疑虑，增强信心</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>在样式上，参考bootstrap、其他UI库以及其他网站</li>\n<li>在功能上，参考《66K 高薪工作網》</li>\n</ul>\n"},{"title":"【ORID总结】1/16","_content":"\n## Objective\n招聘网站魔改作品完成，并发布到上线，参与魔改大赛。\n\n## Reflective\n**你要如何形容今天的情绪？**\n魔改作品迟迟没有完成之前，非常着急，完成之后就感觉轻松多了\n**高峰是什么? **\n把魔改作品发布上线，参加魔改大赛\n**低点是什么? **\n这次魔改大赛走了很多弯路\n\n## Interpretive\n**魔改大赛有感**\n竞争性。这次大赛有很多同学参加，所以不自觉地就会和别人比较，于是当遇到问题时，就会着急，因为害怕落后。竞争性有好有坏，好处是让自己不自觉地在压力中发挥更多的潜力。坏处是很容易让自己成为一个表现型的人，把焦点都放在别人的看法上面，所以，为了预防想法错误，需要用元认知能力加以控制。\n\n同侪压力。在一个人人都很努力向上的环境中，每个个体会不自觉地跟着努力。把自己放在充满同侪压力的环境之中，这样才能制造被动进步。\n\n完美主义。这一点在这次大赛中体现地特别明显，由于是样式比赛，也就是说所有的目标都是模糊的、不确定的，这是最容易受完美主义影响的。因为在写界面的时候，觉得这里要宽一点，那里的颜色要改一下，布局要换一个，等等…。真的感觉优化无止境，后来我定了一个deadline，在昨天晚上睡觉之前，一定要把作品发布，不管做得怎么样，先发上去再说，不要再纠结了。\n\n**最小可行性产品**\n当我看到有同学发布作品时，我其实也做得差不多了，但是我觉得要做一个完美一点的作品再发出去，这样会好一点。\n\n这个想法表面看起来没有什么问题，但很容易因为完美主义的影响，导致作品迟迟都不能发出来。\n\n早一点发布作品其实是有好处的，一个是竞争压力小，发布一个60分的作品时，由于比较对象少，对于作品的要求相对较低，所有投票中会认为这个作品有80分左右。另外一个是最小可行性产品的好处，当发布作品之后，可以根据用户的反馈，快读迭代更新，既能第一时间获取票数，也能得到反馈，这才是正确的做法，先把小东西放出去，然后获得反馈，持续更新，从而进入一个正向循环。\n\n## Decisional\n- 优化招聘网站\n- 开始购物商城练习","source":"_posts/2017-01-16-conding-diary.md","raw":"---\ntitle: 【ORID总结】1/16\ncategories: 全栈营\n---\n\n## Objective\n招聘网站魔改作品完成，并发布到上线，参与魔改大赛。\n\n## Reflective\n**你要如何形容今天的情绪？**\n魔改作品迟迟没有完成之前，非常着急，完成之后就感觉轻松多了\n**高峰是什么? **\n把魔改作品发布上线，参加魔改大赛\n**低点是什么? **\n这次魔改大赛走了很多弯路\n\n## Interpretive\n**魔改大赛有感**\n竞争性。这次大赛有很多同学参加，所以不自觉地就会和别人比较，于是当遇到问题时，就会着急，因为害怕落后。竞争性有好有坏，好处是让自己不自觉地在压力中发挥更多的潜力。坏处是很容易让自己成为一个表现型的人，把焦点都放在别人的看法上面，所以，为了预防想法错误，需要用元认知能力加以控制。\n\n同侪压力。在一个人人都很努力向上的环境中，每个个体会不自觉地跟着努力。把自己放在充满同侪压力的环境之中，这样才能制造被动进步。\n\n完美主义。这一点在这次大赛中体现地特别明显，由于是样式比赛，也就是说所有的目标都是模糊的、不确定的，这是最容易受完美主义影响的。因为在写界面的时候，觉得这里要宽一点，那里的颜色要改一下，布局要换一个，等等…。真的感觉优化无止境，后来我定了一个deadline，在昨天晚上睡觉之前，一定要把作品发布，不管做得怎么样，先发上去再说，不要再纠结了。\n\n**最小可行性产品**\n当我看到有同学发布作品时，我其实也做得差不多了，但是我觉得要做一个完美一点的作品再发出去，这样会好一点。\n\n这个想法表面看起来没有什么问题，但很容易因为完美主义的影响，导致作品迟迟都不能发出来。\n\n早一点发布作品其实是有好处的，一个是竞争压力小，发布一个60分的作品时，由于比较对象少，对于作品的要求相对较低，所有投票中会认为这个作品有80分左右。另外一个是最小可行性产品的好处，当发布作品之后，可以根据用户的反馈，快读迭代更新，既能第一时间获取票数，也能得到反馈，这才是正确的做法，先把小东西放出去，然后获得反馈，持续更新，从而进入一个正向循环。\n\n## Decisional\n- 优化招聘网站\n- 开始购物商城练习","slug":"2017-01-16-conding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicc9004mfson403npnik","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>招聘网站魔改作品完成，并发布到上线，参与魔改大赛。</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p><strong>你要如何形容今天的情绪？</strong><br>魔改作品迟迟没有完成之前，非常着急，完成之后就感觉轻松多了<br><strong>高峰是什么? </strong><br>把魔改作品发布上线，参加魔改大赛<br><strong>低点是什么? </strong><br>这次魔改大赛走了很多弯路</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p><strong>魔改大赛有感</strong><br>竞争性。这次大赛有很多同学参加，所以不自觉地就会和别人比较，于是当遇到问题时，就会着急，因为害怕落后。竞争性有好有坏，好处是让自己不自觉地在压力中发挥更多的潜力。坏处是很容易让自己成为一个表现型的人，把焦点都放在别人的看法上面，所以，为了预防想法错误，需要用元认知能力加以控制。</p>\n<p>同侪压力。在一个人人都很努力向上的环境中，每个个体会不自觉地跟着努力。把自己放在充满同侪压力的环境之中，这样才能制造被动进步。</p>\n<p>完美主义。这一点在这次大赛中体现地特别明显，由于是样式比赛，也就是说所有的目标都是模糊的、不确定的，这是最容易受完美主义影响的。因为在写界面的时候，觉得这里要宽一点，那里的颜色要改一下，布局要换一个，等等…。真的感觉优化无止境，后来我定了一个deadline，在昨天晚上睡觉之前，一定要把作品发布，不管做得怎么样，先发上去再说，不要再纠结了。</p>\n<p><strong>最小可行性产品</strong><br>当我看到有同学发布作品时，我其实也做得差不多了，但是我觉得要做一个完美一点的作品再发出去，这样会好一点。</p>\n<p>这个想法表面看起来没有什么问题，但很容易因为完美主义的影响，导致作品迟迟都不能发出来。</p>\n<p>早一点发布作品其实是有好处的，一个是竞争压力小，发布一个60分的作品时，由于比较对象少，对于作品的要求相对较低，所有投票中会认为这个作品有80分左右。另外一个是最小可行性产品的好处，当发布作品之后，可以根据用户的反馈，快读迭代更新，既能第一时间获取票数，也能得到反馈，这才是正确的做法，先把小东西放出去，然后获得反馈，持续更新，从而进入一个正向循环。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>优化招聘网站</li>\n<li>开始购物商城练习</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>招聘网站魔改作品完成，并发布到上线，参与魔改大赛。</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p><strong>你要如何形容今天的情绪？</strong><br>魔改作品迟迟没有完成之前，非常着急，完成之后就感觉轻松多了<br><strong>高峰是什么? </strong><br>把魔改作品发布上线，参加魔改大赛<br><strong>低点是什么? </strong><br>这次魔改大赛走了很多弯路</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p><strong>魔改大赛有感</strong><br>竞争性。这次大赛有很多同学参加，所以不自觉地就会和别人比较，于是当遇到问题时，就会着急，因为害怕落后。竞争性有好有坏，好处是让自己不自觉地在压力中发挥更多的潜力。坏处是很容易让自己成为一个表现型的人，把焦点都放在别人的看法上面，所以，为了预防想法错误，需要用元认知能力加以控制。</p>\n<p>同侪压力。在一个人人都很努力向上的环境中，每个个体会不自觉地跟着努力。把自己放在充满同侪压力的环境之中，这样才能制造被动进步。</p>\n<p>完美主义。这一点在这次大赛中体现地特别明显，由于是样式比赛，也就是说所有的目标都是模糊的、不确定的，这是最容易受完美主义影响的。因为在写界面的时候，觉得这里要宽一点，那里的颜色要改一下，布局要换一个，等等…。真的感觉优化无止境，后来我定了一个deadline，在昨天晚上睡觉之前，一定要把作品发布，不管做得怎么样，先发上去再说，不要再纠结了。</p>\n<p><strong>最小可行性产品</strong><br>当我看到有同学发布作品时，我其实也做得差不多了，但是我觉得要做一个完美一点的作品再发出去，这样会好一点。</p>\n<p>这个想法表面看起来没有什么问题，但很容易因为完美主义的影响，导致作品迟迟都不能发出来。</p>\n<p>早一点发布作品其实是有好处的，一个是竞争压力小，发布一个60分的作品时，由于比较对象少，对于作品的要求相对较低，所有投票中会认为这个作品有80分左右。另外一个是最小可行性产品的好处，当发布作品之后，可以根据用户的反馈，快读迭代更新，既能第一时间获取票数，也能得到反馈，这才是正确的做法，先把小东西放出去，然后获得反馈，持续更新，从而进入一个正向循环。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>优化招聘网站</li>\n<li>开始购物商城练习</li>\n</ul>\n"},{"title":"究竟是谁在看我？","_content":"\n举几个我生活中的例子：\n\n> - 在公共场合，我非常害怕出丑，因为这会影响我的形象。\n> - 在听一次讲座之后，演讲者说：“大家有什么问题吗，欢迎提问”，虽然我心中有疑问，但是我有时候却选择不懂装懂，这是因为我骨子里面其实是这么想的：“我在众人面前提问，不是把我的不够聪明的缺点告诉大家嘛，这多影响我的形象呀”。\n> - 进了一个微信群，里面有很多积极发言的人，而我永远都是潜水的那一个，我往往会给自己找一个说得过去的理由：“没时间掺和\\~”，但狠下劲来想一想，其实还是怕破坏形象呐。\n\n形象啊，形象啊，真把我给栓住了。\n\n有一个圆形监狱的例子:\n\n> 圆形监狱（又称环形监狱、全景监狱）是一种监狱的设计方式，设计者是英国哲学家杰里米·边沁，于1785年提出。四周的环形建筑分隔成一个个囚室，囚室的一端面向外界，用于採光，另一端面向中间一座用于监视的高塔，这样这座高塔中的监视人员可以时刻监视到任何一间囚室，而囚室中的犯人因为逆光效果，无法看到监视人员，会疑心自己时刻受到监视，惶惶不可终日。这样可以减少监视人员的数量。\n\n看完这个例子，我非常震惊，因为我发现一个事实：我认为的那个外界和实际的外界其实可能不是一回事。我认为外界很关注我，他们能看到我的一举一动，所以呢，我得时刻保持“优秀”，最好不要出丑，不要丢人，从而在别人心里建立优秀的形象。但事实是：外界并没有那么关注我吧！我所做的事情就是别人在每天面对的众多事情里面的其中一件，所以，在别人眼里，这件事可能没有你想象地那么重要。太关注别人的想法会成为束缚自己的枷锁。\n\n我就相当于那个困在圆形监狱的犯人，觉得自己时刻被监视者，一点安全感都没有，所以做起事来畏手畏脚。在更多的情况下，我倾向于选择一种保守的心态，以保护自己的形象不被破坏。\n\n在《成功：我们如何达成目标》一书中指出，按照人格，我们可以将人们分为两种：\n\n> - Be-good Type（表现型人格）：更关注当前的表现，常常因为害怕表现不好而直接放弃……\n> - Be-better Type（进取型人格）：更关注将来的结果，所以当前表现不佳并不影响他们继续努力……\n\n根据我上面的描述，那我就是一个表现型人格的人，不过，**其实没有完全是表现型人格的人，也没有完全是进取型人格的人**。每个人都同时拥有着这两种性格，只是占有的程度不同而已。所以，更为正确地说，目前的我，在大多数情况下，都是一个表现型人格，这是一个我今天才真正意识到的问题。其实，我很早之前知道有这两种人格的存在了，也知道应该尽量抛弃表现型人格，但是**知道和做到是两码事**，在知道一个道理之后，必须经过挣扎、践行之后才能做到的，并不是光在嘴上说说就可以的，针对这一点，我应该反思检讨。","source":"_posts/2017-01-16-who-watch-me.md","raw":"\n---\ntitle: 究竟是谁在看我？\ncategories: 随笔\n---\n\n举几个我生活中的例子：\n\n> - 在公共场合，我非常害怕出丑，因为这会影响我的形象。\n> - 在听一次讲座之后，演讲者说：“大家有什么问题吗，欢迎提问”，虽然我心中有疑问，但是我有时候却选择不懂装懂，这是因为我骨子里面其实是这么想的：“我在众人面前提问，不是把我的不够聪明的缺点告诉大家嘛，这多影响我的形象呀”。\n> - 进了一个微信群，里面有很多积极发言的人，而我永远都是潜水的那一个，我往往会给自己找一个说得过去的理由：“没时间掺和\\~”，但狠下劲来想一想，其实还是怕破坏形象呐。\n\n形象啊，形象啊，真把我给栓住了。\n\n有一个圆形监狱的例子:\n\n> 圆形监狱（又称环形监狱、全景监狱）是一种监狱的设计方式，设计者是英国哲学家杰里米·边沁，于1785年提出。四周的环形建筑分隔成一个个囚室，囚室的一端面向外界，用于採光，另一端面向中间一座用于监视的高塔，这样这座高塔中的监视人员可以时刻监视到任何一间囚室，而囚室中的犯人因为逆光效果，无法看到监视人员，会疑心自己时刻受到监视，惶惶不可终日。这样可以减少监视人员的数量。\n\n看完这个例子，我非常震惊，因为我发现一个事实：我认为的那个外界和实际的外界其实可能不是一回事。我认为外界很关注我，他们能看到我的一举一动，所以呢，我得时刻保持“优秀”，最好不要出丑，不要丢人，从而在别人心里建立优秀的形象。但事实是：外界并没有那么关注我吧！我所做的事情就是别人在每天面对的众多事情里面的其中一件，所以，在别人眼里，这件事可能没有你想象地那么重要。太关注别人的想法会成为束缚自己的枷锁。\n\n我就相当于那个困在圆形监狱的犯人，觉得自己时刻被监视者，一点安全感都没有，所以做起事来畏手畏脚。在更多的情况下，我倾向于选择一种保守的心态，以保护自己的形象不被破坏。\n\n在《成功：我们如何达成目标》一书中指出，按照人格，我们可以将人们分为两种：\n\n> - Be-good Type（表现型人格）：更关注当前的表现，常常因为害怕表现不好而直接放弃……\n> - Be-better Type（进取型人格）：更关注将来的结果，所以当前表现不佳并不影响他们继续努力……\n\n根据我上面的描述，那我就是一个表现型人格的人，不过，**其实没有完全是表现型人格的人，也没有完全是进取型人格的人**。每个人都同时拥有着这两种性格，只是占有的程度不同而已。所以，更为正确地说，目前的我，在大多数情况下，都是一个表现型人格，这是一个我今天才真正意识到的问题。其实，我很早之前知道有这两种人格的存在了，也知道应该尽量抛弃表现型人格，但是**知道和做到是两码事**，在知道一个道理之后，必须经过挣扎、践行之后才能做到的，并不是光在嘴上说说就可以的，针对这一点，我应该反思检讨。","slug":"2017-01-16-who-watch-me","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccb004ofsontkpnrihy","content":"<p>举几个我生活中的例子：</p>\n<blockquote>\n<ul>\n<li>在公共场合，我非常害怕出丑，因为这会影响我的形象。</li>\n<li>在听一次讲座之后，演讲者说：“大家有什么问题吗，欢迎提问”，虽然我心中有疑问，但是我有时候却选择不懂装懂，这是因为我骨子里面其实是这么想的：“我在众人面前提问，不是把我的不够聪明的缺点告诉大家嘛，这多影响我的形象呀”。</li>\n<li>进了一个微信群，里面有很多积极发言的人，而我永远都是潜水的那一个，我往往会给自己找一个说得过去的理由：“没时间掺和~”，但狠下劲来想一想，其实还是怕破坏形象呐。</li>\n</ul>\n</blockquote>\n<p>形象啊，形象啊，真把我给栓住了。</p>\n<p>有一个圆形监狱的例子:</p>\n<blockquote>\n<p>圆形监狱（又称环形监狱、全景监狱）是一种监狱的设计方式，设计者是英国哲学家杰里米·边沁，于1785年提出。四周的环形建筑分隔成一个个囚室，囚室的一端面向外界，用于採光，另一端面向中间一座用于监视的高塔，这样这座高塔中的监视人员可以时刻监视到任何一间囚室，而囚室中的犯人因为逆光效果，无法看到监视人员，会疑心自己时刻受到监视，惶惶不可终日。这样可以减少监视人员的数量。</p>\n</blockquote>\n<p>看完这个例子，我非常震惊，因为我发现一个事实：我认为的那个外界和实际的外界其实可能不是一回事。我认为外界很关注我，他们能看到我的一举一动，所以呢，我得时刻保持“优秀”，最好不要出丑，不要丢人，从而在别人心里建立优秀的形象。但事实是：外界并没有那么关注我吧！我所做的事情就是别人在每天面对的众多事情里面的其中一件，所以，在别人眼里，这件事可能没有你想象地那么重要。太关注别人的想法会成为束缚自己的枷锁。</p>\n<p>我就相当于那个困在圆形监狱的犯人，觉得自己时刻被监视者，一点安全感都没有，所以做起事来畏手畏脚。在更多的情况下，我倾向于选择一种保守的心态，以保护自己的形象不被破坏。</p>\n<p>在《成功：我们如何达成目标》一书中指出，按照人格，我们可以将人们分为两种：</p>\n<blockquote>\n<ul>\n<li>Be-good Type（表现型人格）：更关注当前的表现，常常因为害怕表现不好而直接放弃……</li>\n<li>Be-better Type（进取型人格）：更关注将来的结果，所以当前表现不佳并不影响他们继续努力……</li>\n</ul>\n</blockquote>\n<p>根据我上面的描述，那我就是一个表现型人格的人，不过，<strong>其实没有完全是表现型人格的人，也没有完全是进取型人格的人</strong>。每个人都同时拥有着这两种性格，只是占有的程度不同而已。所以，更为正确地说，目前的我，在大多数情况下，都是一个表现型人格，这是一个我今天才真正意识到的问题。其实，我很早之前知道有这两种人格的存在了，也知道应该尽量抛弃表现型人格，但是<strong>知道和做到是两码事</strong>，在知道一个道理之后，必须经过挣扎、践行之后才能做到的，并不是光在嘴上说说就可以的，针对这一点，我应该反思检讨。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>举几个我生活中的例子：</p>\n<blockquote>\n<ul>\n<li>在公共场合，我非常害怕出丑，因为这会影响我的形象。</li>\n<li>在听一次讲座之后，演讲者说：“大家有什么问题吗，欢迎提问”，虽然我心中有疑问，但是我有时候却选择不懂装懂，这是因为我骨子里面其实是这么想的：“我在众人面前提问，不是把我的不够聪明的缺点告诉大家嘛，这多影响我的形象呀”。</li>\n<li>进了一个微信群，里面有很多积极发言的人，而我永远都是潜水的那一个，我往往会给自己找一个说得过去的理由：“没时间掺和~”，但狠下劲来想一想，其实还是怕破坏形象呐。</li>\n</ul>\n</blockquote>\n<p>形象啊，形象啊，真把我给栓住了。</p>\n<p>有一个圆形监狱的例子:</p>\n<blockquote>\n<p>圆形监狱（又称环形监狱、全景监狱）是一种监狱的设计方式，设计者是英国哲学家杰里米·边沁，于1785年提出。四周的环形建筑分隔成一个个囚室，囚室的一端面向外界，用于採光，另一端面向中间一座用于监视的高塔，这样这座高塔中的监视人员可以时刻监视到任何一间囚室，而囚室中的犯人因为逆光效果，无法看到监视人员，会疑心自己时刻受到监视，惶惶不可终日。这样可以减少监视人员的数量。</p>\n</blockquote>\n<p>看完这个例子，我非常震惊，因为我发现一个事实：我认为的那个外界和实际的外界其实可能不是一回事。我认为外界很关注我，他们能看到我的一举一动，所以呢，我得时刻保持“优秀”，最好不要出丑，不要丢人，从而在别人心里建立优秀的形象。但事实是：外界并没有那么关注我吧！我所做的事情就是别人在每天面对的众多事情里面的其中一件，所以，在别人眼里，这件事可能没有你想象地那么重要。太关注别人的想法会成为束缚自己的枷锁。</p>\n<p>我就相当于那个困在圆形监狱的犯人，觉得自己时刻被监视者，一点安全感都没有，所以做起事来畏手畏脚。在更多的情况下，我倾向于选择一种保守的心态，以保护自己的形象不被破坏。</p>\n<p>在《成功：我们如何达成目标》一书中指出，按照人格，我们可以将人们分为两种：</p>\n<blockquote>\n<ul>\n<li>Be-good Type（表现型人格）：更关注当前的表现，常常因为害怕表现不好而直接放弃……</li>\n<li>Be-better Type（进取型人格）：更关注将来的结果，所以当前表现不佳并不影响他们继续努力……</li>\n</ul>\n</blockquote>\n<p>根据我上面的描述，那我就是一个表现型人格的人，不过，<strong>其实没有完全是表现型人格的人，也没有完全是进取型人格的人</strong>。每个人都同时拥有着这两种性格，只是占有的程度不同而已。所以，更为正确地说，目前的我，在大多数情况下，都是一个表现型人格，这是一个我今天才真正意识到的问题。其实，我很早之前知道有这两种人格的存在了，也知道应该尽量抛弃表现型人格，但是<strong>知道和做到是两码事</strong>，在知道一个道理之后，必须经过挣扎、践行之后才能做到的，并不是光在嘴上说说就可以的，针对这一点，我应该反思检讨。</p>\n"},{"title":"【错误】vue-resource发送参数格式错误","_content":"\n## 动作\n用`vue-resource`发送post请求，参数是一个多维对象\n\n## 预期结果\n![][image-1]\n\n## 结果\n最深层的对象的属性`prop`会被转化成`[prop]`\n\n![][image-2]\n\n## 解决方法\n在发送数据之前，把对象转化成字符串\n\n![][image-3]\n\n\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/s6vfn.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/t5t5w.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/ljfqr.png","source":"_posts/2017-01-17-vue-resource-object.md","raw":"---\ntitle: 【错误】vue-resource发送参数格式错误\ncategories: Javascript\n---\n\n## 动作\n用`vue-resource`发送post请求，参数是一个多维对象\n\n## 预期结果\n![][image-1]\n\n## 结果\n最深层的对象的属性`prop`会被转化成`[prop]`\n\n![][image-2]\n\n## 解决方法\n在发送数据之前，把对象转化成字符串\n\n![][image-3]\n\n\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/s6vfn.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/t5t5w.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/ljfqr.png","slug":"2017-01-17-vue-resource-object","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccc004qfsons69fc4n9","content":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>用<code>vue-resource</code>发送post请求，参数是一个多维对象</p>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/s6vfn.png\" alt=\"\"></p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>最深层的对象的属性<code>prop</code>会被转化成<code>[prop]</code></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/t5t5w.png\" alt=\"\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在发送数据之前，把对象转化成字符串</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ljfqr.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>用<code>vue-resource</code>发送post请求，参数是一个多维对象</p>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/s6vfn.png\" alt=\"\"></p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>最深层的对象的属性<code>prop</code>会被转化成<code>[prop]</code></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/t5t5w.png\" alt=\"\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在发送数据之前，把对象转化成字符串</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ljfqr.png\" alt=\"\"></p>\n"},{"title":"【ORID总结】1/18","_content":"\n## Objective\n**完成了哪些事情?**\n- 商店网站拆解任务\n- 商店网站前期准备（bootstrap、用户系统、simple\\_form\\_）\n\n## Reflective\n**高峰是什么?**\n整理了目前所学rails知识，当需要某个知识点时，能够快速地进行全局搜索，效率大大提高了，感觉很爽。\n\n## Interpretive\n**git技巧：做坏了怎么办?**\n\n今天补了一下YY老师的《rails db migration》讲解视频，学到了很有用一招。如果当目前分支的代码做烂了，改怎么办呢？\n\n`git checkout -b xxx_test`\n`git add .`\n`git commit -m \"changes I don't want\"`\n`git chechout -b xxx`\n\n之前竟然一直不会找个招数，所以在敲代码的时候特别害怕犯错，现在会了之后，就可以大胆地试错了。\n\n另外，对于代码，可以用git恢复，但对于数据库的恢复，git是无能为力的，所以要借助`rails db:rollback`或者`rails g migration xxx`来修复数据。\n\n—\n\n**schema.rb是用来干嘛的？**\n\n在讲解视频中，YY老师不说有`schema.rb`，我还真没注意到它。原来它的作用是给开发者看的，能让开发者清楚地查看当前数据库中所有的字段，包括它们的类型等等之类的信息。\n\n但是，如果修改`schema.rb`是没有任何作用的，因为它只是用来看的，不能用来操作数据库。\n\n## Decisional\n明天练习商店网站的part1、part2、part3部分。","source":"_posts/2017-01-18-coding-diary.md","raw":"\n---\ntitle: 【ORID总结】1/18\ncategories: 全栈营\n---\n\n## Objective\n**完成了哪些事情?**\n- 商店网站拆解任务\n- 商店网站前期准备（bootstrap、用户系统、simple\\_form\\_）\n\n## Reflective\n**高峰是什么?**\n整理了目前所学rails知识，当需要某个知识点时，能够快速地进行全局搜索，效率大大提高了，感觉很爽。\n\n## Interpretive\n**git技巧：做坏了怎么办?**\n\n今天补了一下YY老师的《rails db migration》讲解视频，学到了很有用一招。如果当目前分支的代码做烂了，改怎么办呢？\n\n`git checkout -b xxx_test`\n`git add .`\n`git commit -m \"changes I don't want\"`\n`git chechout -b xxx`\n\n之前竟然一直不会找个招数，所以在敲代码的时候特别害怕犯错，现在会了之后，就可以大胆地试错了。\n\n另外，对于代码，可以用git恢复，但对于数据库的恢复，git是无能为力的，所以要借助`rails db:rollback`或者`rails g migration xxx`来修复数据。\n\n—\n\n**schema.rb是用来干嘛的？**\n\n在讲解视频中，YY老师不说有`schema.rb`，我还真没注意到它。原来它的作用是给开发者看的，能让开发者清楚地查看当前数据库中所有的字段，包括它们的类型等等之类的信息。\n\n但是，如果修改`schema.rb`是没有任何作用的，因为它只是用来看的，不能用来操作数据库。\n\n## Decisional\n明天练习商店网站的part1、part2、part3部分。","slug":"2017-01-18-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicce004sfsonnmoy34nv","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p><strong>完成了哪些事情?</strong></p>\n<ul>\n<li>商店网站拆解任务</li>\n<li>商店网站前期准备（bootstrap、用户系统、simple_form_）</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p><strong>高峰是什么?</strong><br>整理了目前所学rails知识，当需要某个知识点时，能够快速地进行全局搜索，效率大大提高了，感觉很爽。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p><strong>git技巧：做坏了怎么办?</strong></p>\n<p>今天补了一下YY老师的《rails db migration》讲解视频，学到了很有用一招。如果当目前分支的代码做烂了，改怎么办呢？</p>\n<p><code>git checkout -b xxx_test</code><br><code>git add .</code><br><code>git commit -m &quot;changes I don&#39;t want&quot;</code><br><code>git chechout -b xxx</code></p>\n<p>之前竟然一直不会找个招数，所以在敲代码的时候特别害怕犯错，现在会了之后，就可以大胆地试错了。</p>\n<p>另外，对于代码，可以用git恢复，但对于数据库的恢复，git是无能为力的，所以要借助<code>rails db:rollback</code>或者<code>rails g migration xxx</code>来修复数据。</p>\n<p>—</p>\n<p><strong>schema.rb是用来干嘛的？</strong></p>\n<p>在讲解视频中，YY老师不说有<code>schema.rb</code>，我还真没注意到它。原来它的作用是给开发者看的，能让开发者清楚地查看当前数据库中所有的字段，包括它们的类型等等之类的信息。</p>\n<p>但是，如果修改<code>schema.rb</code>是没有任何作用的，因为它只是用来看的，不能用来操作数据库。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天练习商店网站的part1、part2、part3部分。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p><strong>完成了哪些事情?</strong></p>\n<ul>\n<li>商店网站拆解任务</li>\n<li>商店网站前期准备（bootstrap、用户系统、simple_form_）</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p><strong>高峰是什么?</strong><br>整理了目前所学rails知识，当需要某个知识点时，能够快速地进行全局搜索，效率大大提高了，感觉很爽。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p><strong>git技巧：做坏了怎么办?</strong></p>\n<p>今天补了一下YY老师的《rails db migration》讲解视频，学到了很有用一招。如果当目前分支的代码做烂了，改怎么办呢？</p>\n<p><code>git checkout -b xxx_test</code><br><code>git add .</code><br><code>git commit -m &quot;changes I don&#39;t want&quot;</code><br><code>git chechout -b xxx</code></p>\n<p>之前竟然一直不会找个招数，所以在敲代码的时候特别害怕犯错，现在会了之后，就可以大胆地试错了。</p>\n<p>另外，对于代码，可以用git恢复，但对于数据库的恢复，git是无能为力的，所以要借助<code>rails db:rollback</code>或者<code>rails g migration xxx</code>来修复数据。</p>\n<p>—</p>\n<p><strong>schema.rb是用来干嘛的？</strong></p>\n<p>在讲解视频中，YY老师不说有<code>schema.rb</code>，我还真没注意到它。原来它的作用是给开发者看的，能让开发者清楚地查看当前数据库中所有的字段，包括它们的类型等等之类的信息。</p>\n<p>但是，如果修改<code>schema.rb</code>是没有任何作用的，因为它只是用来看的，不能用来操作数据库。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天练习商店网站的part1、part2、part3部分。</p>\n"},{"title":"NewJob, 更专业的互联网招聘平台","_content":"\n最近全栈营举行了一个基于job-listing的魔改大赛，同学们都很用心的做出了很棒的作品，并且大部分都是编程新手，真的是太厉害了。\n\n我也参加了这次比赛，用了一个周末的时间，把job-listing的外观美化一番，最后将作品发布到`heroku`，作品的地址是：[ http://newjob.herokuapp.com/ ][1]。\n\n\n\n[1]:\thttp://newjob.herokuapp.com/","source":"_posts/2017-01-18-job-listing.md","raw":"\n---\ntitle: NewJob, 更专业的互联网招聘平台\ncategories: 作品\n---\n\n最近全栈营举行了一个基于job-listing的魔改大赛，同学们都很用心的做出了很棒的作品，并且大部分都是编程新手，真的是太厉害了。\n\n我也参加了这次比赛，用了一个周末的时间，把job-listing的外观美化一番，最后将作品发布到`heroku`，作品的地址是：[ http://newjob.herokuapp.com/ ][1]。\n\n\n\n[1]:\thttp://newjob.herokuapp.com/","slug":"2017-01-18-job-listing","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccg004ufsonqadh3gut","content":"<p>最近全栈营举行了一个基于job-listing的魔改大赛，同学们都很用心的做出了很棒的作品，并且大部分都是编程新手，真的是太厉害了。</p>\n<p>我也参加了这次比赛，用了一个周末的时间，把job-listing的外观美化一番，最后将作品发布到<code>heroku</code>，作品的地址是：<a href=\"http://newjob.herokuapp.com/\" target=\"_blank\" rel=\"noopener\"> http://newjob.herokuapp.com/ </a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近全栈营举行了一个基于job-listing的魔改大赛，同学们都很用心的做出了很棒的作品，并且大部分都是编程新手，真的是太厉害了。</p>\n<p>我也参加了这次比赛，用了一个周末的时间，把job-listing的外观美化一番，最后将作品发布到<code>heroku</code>，作品的地址是：<a href=\"http://newjob.herokuapp.com/\" target=\"_blank\" rel=\"noopener\"> http://newjob.herokuapp.com/ </a>。</p>\n"},{"title":"【教程】在mac上配置快捷命令，只需3个步骤","_content":"\n为了减少重复劳动，提高效率，可以给自己的mac配置快捷命令。\n\n## 效果\n\n用`rs`执行`rails server`启动rails 服务\n\n![][image-1]\n\n用`rdm`命令执行`rails db:migrate`\n\n![][image-2]\n\n最近在练习商城项目，经常需要进入`jdstore`目录，于是就 `jd`进入`jdstore`项目（注：`pwd`系统自带的命令，用来查看当前目录的路径）\n\n![][image-3]\n\n平时`git`命令敲了无数遍了吧，来几个快捷命令\n\n`ga` ： `git add`\n\n`gst` ： `git status`\n\n`gcm` ： `git commit -m`\n\n`gcb` ： `git checkout -b`\n\n![][image-4]\n\n## 配置快捷命令的3个步骤\n\n### step1：\n\n打开终端（任意目录都可以），打开.zshrc配置文件：\n\n```\nopen ~/.zshrc\n```\n\n### step2：\n\n在.zshrc配置文件的最后，加入常用的快捷命令，比如说常用的rails命令：\n\n```\nalias rs=\"rails s\"\nalias rdm=\"rails db:migrate\"\nalias rdr=\"rails db:reset\"\n```\n\n你平时经常进入的目录的快捷命令（注：可以用`pwd`查看当前目录的路径，然后`cd 路径`）\n\n```\nalias rails101 jd=\"cd /Users/raimonfuns/project.raimon.me/rails101\"\nalias jd=\"cd /Users/raimonfuns/project.raimon.me/jdstore\"\n```\n\ngit命令\n\n```\nalias ga=\"git add\"\nalias gst=\"git status\"\nalias gcm=\"git commit -m\"\nalias gcb=\"git checkout -b\"\n```\n\n大家可根据平时的习惯，自己定义更多的快捷命令。\n\n### step3：\n\n运行\n\n```\nsource ~/.bashrc\n```\n\n这个命令会让刚才的配置生效，然后新开一个终端页面，测试一下刚刚配置的指令。done！\n\nPS：这里有一个坑要注意！**必须重新打开一个新的终端页面，快捷命令才能真正生效的**。\n\n## 补充\n\n我们知道，运行`rails c`之后，在控制台里面操作命令，mac 10.12系统经常会出现错误，所以不得不执行`spring stop`，所以我配了这一句\n\n```\nalias rc=\"spring stop & rails c\"\n```\n\n这样一来，以后就不会遇到这个问题了（注：`&`的意思可以理解为然后，先执行`spring stop`，**然后**执行`rails c` ）\n\n![][image-5]\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/bu43f.gif\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/yvdrr.gif\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/a0kt5.gif\n[image-4]:\thttp://oggx6lf7f.bkt.clouddn.com/0031x.gif\n[image-5]:\thttp://oggx6lf7f.bkt.clouddn.com/q0o5r.gif","source":"_posts/2017-01-22-alias.md","raw":"\n---\ntitle: 【教程】在mac上配置快捷命令，只需3个步骤\ncategories: 全栈营\n---\n\n为了减少重复劳动，提高效率，可以给自己的mac配置快捷命令。\n\n## 效果\n\n用`rs`执行`rails server`启动rails 服务\n\n![][image-1]\n\n用`rdm`命令执行`rails db:migrate`\n\n![][image-2]\n\n最近在练习商城项目，经常需要进入`jdstore`目录，于是就 `jd`进入`jdstore`项目（注：`pwd`系统自带的命令，用来查看当前目录的路径）\n\n![][image-3]\n\n平时`git`命令敲了无数遍了吧，来几个快捷命令\n\n`ga` ： `git add`\n\n`gst` ： `git status`\n\n`gcm` ： `git commit -m`\n\n`gcb` ： `git checkout -b`\n\n![][image-4]\n\n## 配置快捷命令的3个步骤\n\n### step1：\n\n打开终端（任意目录都可以），打开.zshrc配置文件：\n\n```\nopen ~/.zshrc\n```\n\n### step2：\n\n在.zshrc配置文件的最后，加入常用的快捷命令，比如说常用的rails命令：\n\n```\nalias rs=\"rails s\"\nalias rdm=\"rails db:migrate\"\nalias rdr=\"rails db:reset\"\n```\n\n你平时经常进入的目录的快捷命令（注：可以用`pwd`查看当前目录的路径，然后`cd 路径`）\n\n```\nalias rails101 jd=\"cd /Users/raimonfuns/project.raimon.me/rails101\"\nalias jd=\"cd /Users/raimonfuns/project.raimon.me/jdstore\"\n```\n\ngit命令\n\n```\nalias ga=\"git add\"\nalias gst=\"git status\"\nalias gcm=\"git commit -m\"\nalias gcb=\"git checkout -b\"\n```\n\n大家可根据平时的习惯，自己定义更多的快捷命令。\n\n### step3：\n\n运行\n\n```\nsource ~/.bashrc\n```\n\n这个命令会让刚才的配置生效，然后新开一个终端页面，测试一下刚刚配置的指令。done！\n\nPS：这里有一个坑要注意！**必须重新打开一个新的终端页面，快捷命令才能真正生效的**。\n\n## 补充\n\n我们知道，运行`rails c`之后，在控制台里面操作命令，mac 10.12系统经常会出现错误，所以不得不执行`spring stop`，所以我配了这一句\n\n```\nalias rc=\"spring stop & rails c\"\n```\n\n这样一来，以后就不会遇到这个问题了（注：`&`的意思可以理解为然后，先执行`spring stop`，**然后**执行`rails c` ）\n\n![][image-5]\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/bu43f.gif\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/yvdrr.gif\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/a0kt5.gif\n[image-4]:\thttp://oggx6lf7f.bkt.clouddn.com/0031x.gif\n[image-5]:\thttp://oggx6lf7f.bkt.clouddn.com/q0o5r.gif","slug":"2017-01-22-alias","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicch004wfson9eoetvij","content":"<p>为了减少重复劳动，提高效率，可以给自己的mac配置快捷命令。</p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>用<code>rs</code>执行<code>rails server</code>启动rails 服务</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bu43f.gif\" alt=\"\"></p>\n<p>用<code>rdm</code>命令执行<code>rails db:migrate</code></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/yvdrr.gif\" alt=\"\"></p>\n<p>最近在练习商城项目，经常需要进入<code>jdstore</code>目录，于是就 <code>jd</code>进入<code>jdstore</code>项目（注：<code>pwd</code>系统自带的命令，用来查看当前目录的路径）</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/a0kt5.gif\" alt=\"\"></p>\n<p>平时<code>git</code>命令敲了无数遍了吧，来几个快捷命令</p>\n<p><code>ga</code> ： <code>git add</code></p>\n<p><code>gst</code> ： <code>git status</code></p>\n<p><code>gcm</code> ： <code>git commit -m</code></p>\n<p><code>gcb</code> ： <code>git checkout -b</code></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0031x.gif\" alt=\"\"></p>\n<h2 id=\"配置快捷命令的3个步骤\"><a href=\"#配置快捷命令的3个步骤\" class=\"headerlink\" title=\"配置快捷命令的3个步骤\"></a>配置快捷命令的3个步骤</h2><h3 id=\"step1：\"><a href=\"#step1：\" class=\"headerlink\" title=\"step1：\"></a>step1：</h3><p>打开终端（任意目录都可以），打开.zshrc配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open ~/.zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"step2：\"><a href=\"#step2：\" class=\"headerlink\" title=\"step2：\"></a>step2：</h3><p>在.zshrc配置文件的最后，加入常用的快捷命令，比如说常用的rails命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias rs=&quot;rails s&quot;</span><br><span class=\"line\">alias rdm=&quot;rails db:migrate&quot;</span><br><span class=\"line\">alias rdr=&quot;rails db:reset&quot;</span><br></pre></td></tr></table></figure>\n<p>你平时经常进入的目录的快捷命令（注：可以用<code>pwd</code>查看当前目录的路径，然后<code>cd 路径</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias rails101 jd=&quot;cd /Users/raimonfuns/project.raimon.me/rails101&quot;</span><br><span class=\"line\">alias jd=&quot;cd /Users/raimonfuns/project.raimon.me/jdstore&quot;</span><br></pre></td></tr></table></figure>\n<p>git命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias ga=&quot;git add&quot;</span><br><span class=\"line\">alias gst=&quot;git status&quot;</span><br><span class=\"line\">alias gcm=&quot;git commit -m&quot;</span><br><span class=\"line\">alias gcb=&quot;git checkout -b&quot;</span><br></pre></td></tr></table></figure>\n<p>大家可根据平时的习惯，自己定义更多的快捷命令。</p>\n<h3 id=\"step3：\"><a href=\"#step3：\" class=\"headerlink\" title=\"step3：\"></a>step3：</h3><p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>这个命令会让刚才的配置生效，然后新开一个终端页面，测试一下刚刚配置的指令。done！</p>\n<p>PS：这里有一个坑要注意！<strong>必须重新打开一个新的终端页面，快捷命令才能真正生效的</strong>。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>我们知道，运行<code>rails c</code>之后，在控制台里面操作命令，mac 10.12系统经常会出现错误，所以不得不执行<code>spring stop</code>，所以我配了这一句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias rc=&quot;spring stop &amp; rails c&quot;</span><br></pre></td></tr></table></figure>\n<p>这样一来，以后就不会遇到这个问题了（注：<code>&amp;</code>的意思可以理解为然后，先执行<code>spring stop</code>，<strong>然后</strong>执行<code>rails c</code> ）</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/q0o5r.gif\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>为了减少重复劳动，提高效率，可以给自己的mac配置快捷命令。</p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>用<code>rs</code>执行<code>rails server</code>启动rails 服务</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bu43f.gif\" alt=\"\"></p>\n<p>用<code>rdm</code>命令执行<code>rails db:migrate</code></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/yvdrr.gif\" alt=\"\"></p>\n<p>最近在练习商城项目，经常需要进入<code>jdstore</code>目录，于是就 <code>jd</code>进入<code>jdstore</code>项目（注：<code>pwd</code>系统自带的命令，用来查看当前目录的路径）</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/a0kt5.gif\" alt=\"\"></p>\n<p>平时<code>git</code>命令敲了无数遍了吧，来几个快捷命令</p>\n<p><code>ga</code> ： <code>git add</code></p>\n<p><code>gst</code> ： <code>git status</code></p>\n<p><code>gcm</code> ： <code>git commit -m</code></p>\n<p><code>gcb</code> ： <code>git checkout -b</code></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0031x.gif\" alt=\"\"></p>\n<h2 id=\"配置快捷命令的3个步骤\"><a href=\"#配置快捷命令的3个步骤\" class=\"headerlink\" title=\"配置快捷命令的3个步骤\"></a>配置快捷命令的3个步骤</h2><h3 id=\"step1：\"><a href=\"#step1：\" class=\"headerlink\" title=\"step1：\"></a>step1：</h3><p>打开终端（任意目录都可以），打开.zshrc配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open ~/.zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"step2：\"><a href=\"#step2：\" class=\"headerlink\" title=\"step2：\"></a>step2：</h3><p>在.zshrc配置文件的最后，加入常用的快捷命令，比如说常用的rails命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias rs=&quot;rails s&quot;</span><br><span class=\"line\">alias rdm=&quot;rails db:migrate&quot;</span><br><span class=\"line\">alias rdr=&quot;rails db:reset&quot;</span><br></pre></td></tr></table></figure>\n<p>你平时经常进入的目录的快捷命令（注：可以用<code>pwd</code>查看当前目录的路径，然后<code>cd 路径</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias rails101 jd=&quot;cd /Users/raimonfuns/project.raimon.me/rails101&quot;</span><br><span class=\"line\">alias jd=&quot;cd /Users/raimonfuns/project.raimon.me/jdstore&quot;</span><br></pre></td></tr></table></figure>\n<p>git命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias ga=&quot;git add&quot;</span><br><span class=\"line\">alias gst=&quot;git status&quot;</span><br><span class=\"line\">alias gcm=&quot;git commit -m&quot;</span><br><span class=\"line\">alias gcb=&quot;git checkout -b&quot;</span><br></pre></td></tr></table></figure>\n<p>大家可根据平时的习惯，自己定义更多的快捷命令。</p>\n<h3 id=\"step3：\"><a href=\"#step3：\" class=\"headerlink\" title=\"step3：\"></a>step3：</h3><p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>这个命令会让刚才的配置生效，然后新开一个终端页面，测试一下刚刚配置的指令。done！</p>\n<p>PS：这里有一个坑要注意！<strong>必须重新打开一个新的终端页面，快捷命令才能真正生效的</strong>。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>我们知道，运行<code>rails c</code>之后，在控制台里面操作命令，mac 10.12系统经常会出现错误，所以不得不执行<code>spring stop</code>，所以我配了这一句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias rc=&quot;spring stop &amp; rails c&quot;</span><br></pre></td></tr></table></figure>\n<p>这样一来，以后就不会遇到这个问题了（注：<code>&amp;</code>的意思可以理解为然后，先执行<code>spring stop</code>，<strong>然后</strong>执行<code>rails c</code> ）</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/q0o5r.gif\" alt=\"\"></p>\n"},{"title":"【ORID总结】1/22","_content":"\n## Objective\n**完成了哪些事情?**\n- 参加了珠三角微信群的分享，每人语音分享两分钟，内容是本周遇到的最棒的概念或工具、本周遇到的最大的坑，我分享的内容写在《[全栈第三周总结][1]》里面。\n- 修复了魔改作品的一个bug：搜索空内容会报错。《[【错误】搜索空内容会报错][2]》\n- 写了一篇教程《[【教程】在mac上配置快捷命令，只需3个步骤][3]》\n- 《[css作业通俗解释版本][4]》\n- 《[html作业的通俗解释版本][5]》\n\n## Reflective\n\n**高峰是什么?**在全栈营上面和小伙伴们分享，每人两分钟，这种形式真的好棒。\n\n## Interpretive\n\n**学到了什么?**\n\n- 做搜索的时候，要对空内容进行处理，不然会有bug。\n- 全栈班的同学都遇到了各种各样的问题，但都在努力寻求突破，并且尽量不让自己掉坑里，这给我带来很积极的影响。\n- 在今天的分享中，有些人都提到论坛里面的教程对他们很有帮助，也是他们最需要的，所以，我觉得在论坛里面写教程的同学真的很伟大，我以后也要多写教程，说不定就能帮上某个同学呢。其实，最好的提取练习以及帮助其他同学的方式就是写教程。\n\n## Decisional\n\n多做练习，多写教程\n\n[1]:\thttp://raimonfuns-blog.logdown.com/posts/1345832\n[2]:\thttp://raimonfuns-blog.logdown.com/posts/1345559\n[3]:\thttp://raimonfuns-blog.logdown.com/posts/1344935\n[4]:\thttp://raimonfuns-blog.logdown.com/posts/1344753\n[5]:\thttp://raimonfuns-blog.logdown.com/posts/1344518","source":"_posts/2017-01-22-coding-diary.md","raw":"\n---\ntitle: 【ORID总结】1/22\ncategories: 全栈营\n---\n\n## Objective\n**完成了哪些事情?**\n- 参加了珠三角微信群的分享，每人语音分享两分钟，内容是本周遇到的最棒的概念或工具、本周遇到的最大的坑，我分享的内容写在《[全栈第三周总结][1]》里面。\n- 修复了魔改作品的一个bug：搜索空内容会报错。《[【错误】搜索空内容会报错][2]》\n- 写了一篇教程《[【教程】在mac上配置快捷命令，只需3个步骤][3]》\n- 《[css作业通俗解释版本][4]》\n- 《[html作业的通俗解释版本][5]》\n\n## Reflective\n\n**高峰是什么?**在全栈营上面和小伙伴们分享，每人两分钟，这种形式真的好棒。\n\n## Interpretive\n\n**学到了什么?**\n\n- 做搜索的时候，要对空内容进行处理，不然会有bug。\n- 全栈班的同学都遇到了各种各样的问题，但都在努力寻求突破，并且尽量不让自己掉坑里，这给我带来很积极的影响。\n- 在今天的分享中，有些人都提到论坛里面的教程对他们很有帮助，也是他们最需要的，所以，我觉得在论坛里面写教程的同学真的很伟大，我以后也要多写教程，说不定就能帮上某个同学呢。其实，最好的提取练习以及帮助其他同学的方式就是写教程。\n\n## Decisional\n\n多做练习，多写教程\n\n[1]:\thttp://raimonfuns-blog.logdown.com/posts/1345832\n[2]:\thttp://raimonfuns-blog.logdown.com/posts/1345559\n[3]:\thttp://raimonfuns-blog.logdown.com/posts/1344935\n[4]:\thttp://raimonfuns-blog.logdown.com/posts/1344753\n[5]:\thttp://raimonfuns-blog.logdown.com/posts/1344518","slug":"2017-01-22-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicci004yfsongj6vr4lz","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p><strong>完成了哪些事情?</strong></p>\n<ul>\n<li>参加了珠三角微信群的分享，每人语音分享两分钟，内容是本周遇到的最棒的概念或工具、本周遇到的最大的坑，我分享的内容写在《<a href=\"http://raimonfuns-blog.logdown.com/posts/1345832\" target=\"_blank\" rel=\"noopener\">全栈第三周总结</a>》里面。</li>\n<li>修复了魔改作品的一个bug：搜索空内容会报错。《<a href=\"http://raimonfuns-blog.logdown.com/posts/1345559\" target=\"_blank\" rel=\"noopener\">【错误】搜索空内容会报错</a>》</li>\n<li>写了一篇教程《<a href=\"http://raimonfuns-blog.logdown.com/posts/1344935\" target=\"_blank\" rel=\"noopener\">【教程】在mac上配置快捷命令，只需3个步骤</a>》</li>\n<li>《<a href=\"http://raimonfuns-blog.logdown.com/posts/1344753\" target=\"_blank\" rel=\"noopener\">css作业通俗解释版本</a>》</li>\n<li>《<a href=\"http://raimonfuns-blog.logdown.com/posts/1344518\" target=\"_blank\" rel=\"noopener\">html作业的通俗解释版本</a>》</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p><strong>高峰是什么?</strong>在全栈营上面和小伙伴们分享，每人两分钟，这种形式真的好棒。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p><strong>学到了什么?</strong></p>\n<ul>\n<li>做搜索的时候，要对空内容进行处理，不然会有bug。</li>\n<li>全栈班的同学都遇到了各种各样的问题，但都在努力寻求突破，并且尽量不让自己掉坑里，这给我带来很积极的影响。</li>\n<li>在今天的分享中，有些人都提到论坛里面的教程对他们很有帮助，也是他们最需要的，所以，我觉得在论坛里面写教程的同学真的很伟大，我以后也要多写教程，说不定就能帮上某个同学呢。其实，最好的提取练习以及帮助其他同学的方式就是写教程。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>多做练习，多写教程</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p><strong>完成了哪些事情?</strong></p>\n<ul>\n<li>参加了珠三角微信群的分享，每人语音分享两分钟，内容是本周遇到的最棒的概念或工具、本周遇到的最大的坑，我分享的内容写在《<a href=\"http://raimonfuns-blog.logdown.com/posts/1345832\" target=\"_blank\" rel=\"noopener\">全栈第三周总结</a>》里面。</li>\n<li>修复了魔改作品的一个bug：搜索空内容会报错。《<a href=\"http://raimonfuns-blog.logdown.com/posts/1345559\" target=\"_blank\" rel=\"noopener\">【错误】搜索空内容会报错</a>》</li>\n<li>写了一篇教程《<a href=\"http://raimonfuns-blog.logdown.com/posts/1344935\" target=\"_blank\" rel=\"noopener\">【教程】在mac上配置快捷命令，只需3个步骤</a>》</li>\n<li>《<a href=\"http://raimonfuns-blog.logdown.com/posts/1344753\" target=\"_blank\" rel=\"noopener\">css作业通俗解释版本</a>》</li>\n<li>《<a href=\"http://raimonfuns-blog.logdown.com/posts/1344518\" target=\"_blank\" rel=\"noopener\">html作业的通俗解释版本</a>》</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p><strong>高峰是什么?</strong>在全栈营上面和小伙伴们分享，每人两分钟，这种形式真的好棒。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p><strong>学到了什么?</strong></p>\n<ul>\n<li>做搜索的时候，要对空内容进行处理，不然会有bug。</li>\n<li>全栈班的同学都遇到了各种各样的问题，但都在努力寻求突破，并且尽量不让自己掉坑里，这给我带来很积极的影响。</li>\n<li>在今天的分享中，有些人都提到论坛里面的教程对他们很有帮助，也是他们最需要的，所以，我觉得在论坛里面写教程的同学真的很伟大，我以后也要多写教程，说不定就能帮上某个同学呢。其实，最好的提取练习以及帮助其他同学的方式就是写教程。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>多做练习，多写教程</p>\n"},{"title":"css作业通俗解释版本","_content":"\n## 盒模型\n\n首先，把网站比喻成一个人，css就是这个人所穿的衣服，如果网站是一个店，css就是这个店的门面。\n\ncss最核心的概念就是这个：\n\n![][image-1]\n\n盒子模型，width、height、padding、margin、border。\n\n想象一下，有个鸡蛋装在一个纸盒子里面，那么，我们可以这么来对应：\n\n- 蛋黄 - content（也就是width和height构成的区域）\n- 蛋白 - padding\n- 蛋壳 - border\n- 鸡蛋与纸盒子的空隙 - margin\n\n有了这个对应关系，就能很好地理解css盒子模型了。来测试一下：\n\n> 问题：margin 与 padding 的差异？\n\npadding就是蛋白，这个值越大，鸡蛋就越大，也就是元素越大。\n\nmargin就是鸡蛋与外界的间隙，这个值越大，鸡蛋所处的空间就越宽敞。\n\n你看，这样子理解就容易多了吧。\n\n## margin和padding缩写规则\n\n**问题2：h1 {margin : 10px 0px 15px 5px;} 的margin-top、margin-right、margin-left、margin-bottom 各是多少？**\n\n记住口诀：从顶部开始，顺时针旋转，一一对应。\n\n![][image-2]\n\n所以答案就是：\n\n- margin-top：10px\n- margin-right：0px\n- margin-left：15px\n- margin-bottom ：15px\n\n## 为何要使用 em 而非 px 来定义字的大小\n\n为了解释清楚，先看例子：http://codepen.io/raimonfuns/pen/LxyjYW\n\n从这个例子中得出两条结论：\n\n- `px`是绝对单位，也就是说父元素的font-size不会影响到它\n- `em`是相对单位，相当于百分比%，比方说在例子中，`.container`的font-size值为14px，所以`.em`的font-size值就是`1 x 14px = 14px`，如果`.em`的单位是2，font-size就是28px。\n\n也就是说：假如`.em`的font-size的值都是继承body，那么只要body的font-size一改变，所有的`.em`都会变，这样一来不就很可以用来做制作可伸缩的样式表。\n\n另外，再补充一点，一遍而已，所有浏览器的默认font-size都是16px。\n\n最终结论：用em单位适应性更强，可以用来制定**Responsive** web **design**(响应式设计)。\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/whvg6.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/cc31o.png","source":"_posts/2017-01-22-css-base.md","raw":"\n---\ntitle: css作业通俗解释版本\ncategories: 全栈营\n---\n\n## 盒模型\n\n首先，把网站比喻成一个人，css就是这个人所穿的衣服，如果网站是一个店，css就是这个店的门面。\n\ncss最核心的概念就是这个：\n\n![][image-1]\n\n盒子模型，width、height、padding、margin、border。\n\n想象一下，有个鸡蛋装在一个纸盒子里面，那么，我们可以这么来对应：\n\n- 蛋黄 - content（也就是width和height构成的区域）\n- 蛋白 - padding\n- 蛋壳 - border\n- 鸡蛋与纸盒子的空隙 - margin\n\n有了这个对应关系，就能很好地理解css盒子模型了。来测试一下：\n\n> 问题：margin 与 padding 的差异？\n\npadding就是蛋白，这个值越大，鸡蛋就越大，也就是元素越大。\n\nmargin就是鸡蛋与外界的间隙，这个值越大，鸡蛋所处的空间就越宽敞。\n\n你看，这样子理解就容易多了吧。\n\n## margin和padding缩写规则\n\n**问题2：h1 {margin : 10px 0px 15px 5px;} 的margin-top、margin-right、margin-left、margin-bottom 各是多少？**\n\n记住口诀：从顶部开始，顺时针旋转，一一对应。\n\n![][image-2]\n\n所以答案就是：\n\n- margin-top：10px\n- margin-right：0px\n- margin-left：15px\n- margin-bottom ：15px\n\n## 为何要使用 em 而非 px 来定义字的大小\n\n为了解释清楚，先看例子：http://codepen.io/raimonfuns/pen/LxyjYW\n\n从这个例子中得出两条结论：\n\n- `px`是绝对单位，也就是说父元素的font-size不会影响到它\n- `em`是相对单位，相当于百分比%，比方说在例子中，`.container`的font-size值为14px，所以`.em`的font-size值就是`1 x 14px = 14px`，如果`.em`的单位是2，font-size就是28px。\n\n也就是说：假如`.em`的font-size的值都是继承body，那么只要body的font-size一改变，所有的`.em`都会变，这样一来不就很可以用来做制作可伸缩的样式表。\n\n另外，再补充一点，一遍而已，所有浏览器的默认font-size都是16px。\n\n最终结论：用em单位适应性更强，可以用来制定**Responsive** web **design**(响应式设计)。\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/whvg6.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/cc31o.png","slug":"2017-01-22-css-base","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccj0050fson0aycibop","content":"<h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h2><p>首先，把网站比喻成一个人，css就是这个人所穿的衣服，如果网站是一个店，css就是这个店的门面。</p>\n<p>css最核心的概念就是这个：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/whvg6.png\" alt=\"\"></p>\n<p>盒子模型，width、height、padding、margin、border。</p>\n<p>想象一下，有个鸡蛋装在一个纸盒子里面，那么，我们可以这么来对应：</p>\n<ul>\n<li>蛋黄 - content（也就是width和height构成的区域）</li>\n<li>蛋白 - padding</li>\n<li>蛋壳 - border</li>\n<li>鸡蛋与纸盒子的空隙 - margin</li>\n</ul>\n<p>有了这个对应关系，就能很好地理解css盒子模型了。来测试一下：</p>\n<blockquote>\n<p>问题：margin 与 padding 的差异？</p>\n</blockquote>\n<p>padding就是蛋白，这个值越大，鸡蛋就越大，也就是元素越大。</p>\n<p>margin就是鸡蛋与外界的间隙，这个值越大，鸡蛋所处的空间就越宽敞。</p>\n<p>你看，这样子理解就容易多了吧。</p>\n<h2 id=\"margin和padding缩写规则\"><a href=\"#margin和padding缩写规则\" class=\"headerlink\" title=\"margin和padding缩写规则\"></a>margin和padding缩写规则</h2><p><strong>问题2：h1 {margin : 10px 0px 15px 5px;} 的margin-top、margin-right、margin-left、margin-bottom 各是多少？</strong></p>\n<p>记住口诀：从顶部开始，顺时针旋转，一一对应。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/cc31o.png\" alt=\"\"></p>\n<p>所以答案就是：</p>\n<ul>\n<li>margin-top：10px</li>\n<li>margin-right：0px</li>\n<li>margin-left：15px</li>\n<li>margin-bottom ：15px</li>\n</ul>\n<h2 id=\"为何要使用-em-而非-px-来定义字的大小\"><a href=\"#为何要使用-em-而非-px-来定义字的大小\" class=\"headerlink\" title=\"为何要使用 em 而非 px 来定义字的大小\"></a>为何要使用 em 而非 px 来定义字的大小</h2><p>为了解释清楚，先看例子：<a href=\"http://codepen.io/raimonfuns/pen/LxyjYW\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/LxyjYW</a></p>\n<p>从这个例子中得出两条结论：</p>\n<ul>\n<li><code>px</code>是绝对单位，也就是说父元素的font-size不会影响到它</li>\n<li><code>em</code>是相对单位，相当于百分比%，比方说在例子中，<code>.container</code>的font-size值为14px，所以<code>.em</code>的font-size值就是<code>1 x 14px = 14px</code>，如果<code>.em</code>的单位是2，font-size就是28px。</li>\n</ul>\n<p>也就是说：假如<code>.em</code>的font-size的值都是继承body，那么只要body的font-size一改变，所有的<code>.em</code>都会变，这样一来不就很可以用来做制作可伸缩的样式表。</p>\n<p>另外，再补充一点，一遍而已，所有浏览器的默认font-size都是16px。</p>\n<p>最终结论：用em单位适应性更强，可以用来制定<strong>Responsive</strong> web <strong>design</strong>(响应式设计)。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h2><p>首先，把网站比喻成一个人，css就是这个人所穿的衣服，如果网站是一个店，css就是这个店的门面。</p>\n<p>css最核心的概念就是这个：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/whvg6.png\" alt=\"\"></p>\n<p>盒子模型，width、height、padding、margin、border。</p>\n<p>想象一下，有个鸡蛋装在一个纸盒子里面，那么，我们可以这么来对应：</p>\n<ul>\n<li>蛋黄 - content（也就是width和height构成的区域）</li>\n<li>蛋白 - padding</li>\n<li>蛋壳 - border</li>\n<li>鸡蛋与纸盒子的空隙 - margin</li>\n</ul>\n<p>有了这个对应关系，就能很好地理解css盒子模型了。来测试一下：</p>\n<blockquote>\n<p>问题：margin 与 padding 的差异？</p>\n</blockquote>\n<p>padding就是蛋白，这个值越大，鸡蛋就越大，也就是元素越大。</p>\n<p>margin就是鸡蛋与外界的间隙，这个值越大，鸡蛋所处的空间就越宽敞。</p>\n<p>你看，这样子理解就容易多了吧。</p>\n<h2 id=\"margin和padding缩写规则\"><a href=\"#margin和padding缩写规则\" class=\"headerlink\" title=\"margin和padding缩写规则\"></a>margin和padding缩写规则</h2><p><strong>问题2：h1 {margin : 10px 0px 15px 5px;} 的margin-top、margin-right、margin-left、margin-bottom 各是多少？</strong></p>\n<p>记住口诀：从顶部开始，顺时针旋转，一一对应。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/cc31o.png\" alt=\"\"></p>\n<p>所以答案就是：</p>\n<ul>\n<li>margin-top：10px</li>\n<li>margin-right：0px</li>\n<li>margin-left：15px</li>\n<li>margin-bottom ：15px</li>\n</ul>\n<h2 id=\"为何要使用-em-而非-px-来定义字的大小\"><a href=\"#为何要使用-em-而非-px-来定义字的大小\" class=\"headerlink\" title=\"为何要使用 em 而非 px 来定义字的大小\"></a>为何要使用 em 而非 px 来定义字的大小</h2><p>为了解释清楚，先看例子：<a href=\"http://codepen.io/raimonfuns/pen/LxyjYW\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/LxyjYW</a></p>\n<p>从这个例子中得出两条结论：</p>\n<ul>\n<li><code>px</code>是绝对单位，也就是说父元素的font-size不会影响到它</li>\n<li><code>em</code>是相对单位，相当于百分比%，比方说在例子中，<code>.container</code>的font-size值为14px，所以<code>.em</code>的font-size值就是<code>1 x 14px = 14px</code>，如果<code>.em</code>的单位是2，font-size就是28px。</li>\n</ul>\n<p>也就是说：假如<code>.em</code>的font-size的值都是继承body，那么只要body的font-size一改变，所有的<code>.em</code>都会变，这样一来不就很可以用来做制作可伸缩的样式表。</p>\n<p>另外，再补充一点，一遍而已，所有浏览器的默认font-size都是16px。</p>\n<p>最终结论：用em单位适应性更强，可以用来制定<strong>Responsive</strong> web <strong>design</strong>(响应式设计)。</p>\n"},{"title":"html基础知识的通俗解释版本","_content":"\n## div / span 的不同\n\ndiv：块级元素独占一行  \n\nspan：内联元素能与其他内联元素共处一行\n\n通俗解释版本：http://codepen.io/raimonfuns/pen/oBWwaY\n\n##  class 与 id 的不同\n\nclass：一个类名可以用在多个元素上面 为元素的类定义css，相同的类设置相同的样式，不同的类设置不同的样式，能起到复用的效果\nid：一个id只能用在一个元素上面，id是这个元素唯一标识\n\n通俗解释版本：http://codepen.io/raimonfuns/pen/dNWRav\n\n## p 与 br 的不同\n\np：paragraph的缩写 用来表示段落\nbr：换行符号\n\n通俗解释版本：http://codepen.io/raimonfuns/pen/xgdreV\n\n## 如何使用 table 排版\n\n表格行用tr，单元格用td或者th，最常见的table表单是这个样子的\n\n```\n<table>\n  <thead>\n    <tr>\n      <th>商品名称</th>\n      <th>库存</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>椅子</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <td>篮球</td>\n      <td>50</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n![][image-1]\n\n一般表格都会加个边框，这样看起来更舒服\n\n```\n<table border=\"1\">\n  <thead>\n    <tr>\n      <th>商品名称</th>\n      <th>库存</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>椅子</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <td>篮球</td>\n      <td>50</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n![][image-2]\n\ndemo地址：http://codepen.io/raimonfuns/pen/oBWwMz\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/07hlu.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/3rt59.png","source":"_posts/2017-01-22-html-base.md","raw":"\n---\ntitle: html基础知识的通俗解释版本\ncategories: 全栈营\n---\n\n## div / span 的不同\n\ndiv：块级元素独占一行  \n\nspan：内联元素能与其他内联元素共处一行\n\n通俗解释版本：http://codepen.io/raimonfuns/pen/oBWwaY\n\n##  class 与 id 的不同\n\nclass：一个类名可以用在多个元素上面 为元素的类定义css，相同的类设置相同的样式，不同的类设置不同的样式，能起到复用的效果\nid：一个id只能用在一个元素上面，id是这个元素唯一标识\n\n通俗解释版本：http://codepen.io/raimonfuns/pen/dNWRav\n\n## p 与 br 的不同\n\np：paragraph的缩写 用来表示段落\nbr：换行符号\n\n通俗解释版本：http://codepen.io/raimonfuns/pen/xgdreV\n\n## 如何使用 table 排版\n\n表格行用tr，单元格用td或者th，最常见的table表单是这个样子的\n\n```\n<table>\n  <thead>\n    <tr>\n      <th>商品名称</th>\n      <th>库存</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>椅子</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <td>篮球</td>\n      <td>50</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n![][image-1]\n\n一般表格都会加个边框，这样看起来更舒服\n\n```\n<table border=\"1\">\n  <thead>\n    <tr>\n      <th>商品名称</th>\n      <th>库存</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>椅子</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <td>篮球</td>\n      <td>50</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n![][image-2]\n\ndemo地址：http://codepen.io/raimonfuns/pen/oBWwMz\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/07hlu.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/3rt59.png","slug":"2017-01-22-html-base","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicck0052fson6nkop1ke","content":"<h2 id=\"div-span-的不同\"><a href=\"#div-span-的不同\" class=\"headerlink\" title=\"div / span 的不同\"></a>div / span 的不同</h2><p>div：块级元素独占一行  </p>\n<p>span：内联元素能与其他内联元素共处一行</p>\n<p>通俗解释版本：<a href=\"http://codepen.io/raimonfuns/pen/oBWwaY\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/oBWwaY</a></p>\n<h2 id=\"class-与-id-的不同\"><a href=\"#class-与-id-的不同\" class=\"headerlink\" title=\"class 与 id 的不同\"></a>class 与 id 的不同</h2><p>class：一个类名可以用在多个元素上面 为元素的类定义css，相同的类设置相同的样式，不同的类设置不同的样式，能起到复用的效果<br>id：一个id只能用在一个元素上面，id是这个元素唯一标识</p>\n<p>通俗解释版本：<a href=\"http://codepen.io/raimonfuns/pen/dNWRav\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/dNWRav</a></p>\n<h2 id=\"p-与-br-的不同\"><a href=\"#p-与-br-的不同\" class=\"headerlink\" title=\"p 与 br 的不同\"></a>p 与 br 的不同</h2><p>p：paragraph的缩写 用来表示段落<br>br：换行符号</p>\n<p>通俗解释版本：<a href=\"http://codepen.io/raimonfuns/pen/xgdreV\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/xgdreV</a></p>\n<h2 id=\"如何使用-table-排版\"><a href=\"#如何使用-table-排版\" class=\"headerlink\" title=\"如何使用 table 排版\"></a>如何使用 table 排版</h2><p>表格行用tr，单元格用td或者th，最常见的table表单是这个样子的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">  &lt;thead&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;th&gt;商品名称&lt;/th&gt;</span><br><span class=\"line\">      &lt;th&gt;库存&lt;/th&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">  &lt;/thead&gt;</span><br><span class=\"line\">  &lt;tbody&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;椅子&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;10&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;篮球&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;50&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">  &lt;/tbody&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/07hlu.png\" alt=\"\"></p>\n<p>一般表格都会加个边框，这样看起来更舒服</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table border=&quot;1&quot;&gt;</span><br><span class=\"line\">  &lt;thead&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;th&gt;商品名称&lt;/th&gt;</span><br><span class=\"line\">      &lt;th&gt;库存&lt;/th&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">  &lt;/thead&gt;</span><br><span class=\"line\">  &lt;tbody&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;椅子&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;10&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;篮球&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;50&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">  &lt;/tbody&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/3rt59.png\" alt=\"\"></p>\n<p>demo地址：<a href=\"http://codepen.io/raimonfuns/pen/oBWwMz\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/oBWwMz</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"div-span-的不同\"><a href=\"#div-span-的不同\" class=\"headerlink\" title=\"div / span 的不同\"></a>div / span 的不同</h2><p>div：块级元素独占一行  </p>\n<p>span：内联元素能与其他内联元素共处一行</p>\n<p>通俗解释版本：<a href=\"http://codepen.io/raimonfuns/pen/oBWwaY\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/oBWwaY</a></p>\n<h2 id=\"class-与-id-的不同\"><a href=\"#class-与-id-的不同\" class=\"headerlink\" title=\"class 与 id 的不同\"></a>class 与 id 的不同</h2><p>class：一个类名可以用在多个元素上面 为元素的类定义css，相同的类设置相同的样式，不同的类设置不同的样式，能起到复用的效果<br>id：一个id只能用在一个元素上面，id是这个元素唯一标识</p>\n<p>通俗解释版本：<a href=\"http://codepen.io/raimonfuns/pen/dNWRav\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/dNWRav</a></p>\n<h2 id=\"p-与-br-的不同\"><a href=\"#p-与-br-的不同\" class=\"headerlink\" title=\"p 与 br 的不同\"></a>p 与 br 的不同</h2><p>p：paragraph的缩写 用来表示段落<br>br：换行符号</p>\n<p>通俗解释版本：<a href=\"http://codepen.io/raimonfuns/pen/xgdreV\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/xgdreV</a></p>\n<h2 id=\"如何使用-table-排版\"><a href=\"#如何使用-table-排版\" class=\"headerlink\" title=\"如何使用 table 排版\"></a>如何使用 table 排版</h2><p>表格行用tr，单元格用td或者th，最常见的table表单是这个样子的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">  &lt;thead&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;th&gt;商品名称&lt;/th&gt;</span><br><span class=\"line\">      &lt;th&gt;库存&lt;/th&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">  &lt;/thead&gt;</span><br><span class=\"line\">  &lt;tbody&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;椅子&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;10&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;篮球&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;50&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">  &lt;/tbody&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/07hlu.png\" alt=\"\"></p>\n<p>一般表格都会加个边框，这样看起来更舒服</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table border=&quot;1&quot;&gt;</span><br><span class=\"line\">  &lt;thead&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;th&gt;商品名称&lt;/th&gt;</span><br><span class=\"line\">      &lt;th&gt;库存&lt;/th&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">  &lt;/thead&gt;</span><br><span class=\"line\">  &lt;tbody&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;椅子&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;10&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;篮球&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;50&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">  &lt;/tbody&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/3rt59.png\" alt=\"\"></p>\n<p>demo地址：<a href=\"http://codepen.io/raimonfuns/pen/oBWwMz\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/oBWwMz</a></p>\n"},{"title":"持续更新，终于完成了魔改作品第二版","_content":"\n今天对魔改作品的首页、注册/登录页进行改版优化。原先旧版本的首页、注册/登录页是这个样子的：\n\n\n\n![][image-1]\n\n![][image-2]\n\n今天进行了改版，改完之后是这个样子的：\n\n![][image-3]\n\n\n\n![][image-4]\n\n改进之后的版本漂亮了很多，交互体验也很了许多。\n\n主要更新的功能有7个：\n\n### 功能一： 回到顶部、拉票功能。\n\n回顶部按钮：\n\n![][image-5]\n\n点击这个按钮之后，页面会滚回顶部。\n\n拉票小按钮：\n\n![][image-6]\n\n![][image-7]\n\n鼠标移到这个按钮上，会出现我这个魔改作品的链接，哈哈。同学们也可以在页面上发一个拉票小按钮。\n\n### 功能二：头部会随着滚动变色\n\n一开始打开页面，头部是透明的，这样就能banner图融为一体，随着滚动条往下滚动，头部会加上背景颜色，这样就不会和下面的白色重叠。\n\n### 功能三：鼠标移上去，会有放大镜的效果\n\n这个功能在页面的《正在火热招聘的职业》模块\n\n实现的css代码：\n\n```css\n.hjc-img-wrap {\n  width: 220px;\n  height: 150px;\n  img {\n    width: 100%;\n    height: auto;\n  }\n  &:hover {\n    transform: scale(1.2);\n    transition: all .8s;\n  }\n}\n```\n\n指的是在800ms内，图片的宽度和高度都放大1.2倍。\n\n### 功能四：鼠标移上去，会有向上漂浮的效果\n\n这个功能在页面的《听听他们怎么说》、《体验高效找工作的感觉》模块。\n\n实现的css代码：\n\n```css\n.person {\n  top: 0;\n  position: relative;\n  -webkit-transition: all .4s;\n  transition: all .4s;\n  &:hover {\n    position: relative;\n    top: -5px;\n  }\n}\n```\n\n### 功能五：把footer改得更正式一点\n\n把联系我们，关于我们、服务条款这些按钮都加上，让网站显示更加正式一点。\n\n### 功能六：终于补齐了图片素材\n\n花了好多的时间，在这些网站找素材，终于找齐了\n\n- http://www.freepik.com/\n- https://picjumbo.com/\n- https://images.google.com.hk\n- http://fontawesome.io/icons/\n\n这些网站是从YY老师的魔改大赛直播，以及nfreeness助教的[【魔改加餐】提升网页颜值的3个小妙招][1]里面收集的，超级实用，有很多漂亮的图片。\n\n\n\n### 功能七：感觉有点高大上的登录/注册页\n\n登录和注册页面，仔细看背景图，有惊喜哦（你会发现它在缓缓地放大）。\n\n实现的css代码是：\n\n```css\n@keyframes change {\n  0% {\n    -webkit-transform: scale(1);\n    transform: scale(1)\n  }\n\n  100% {\n    -webkit-transform: scale(1.2);\n    transform: scale(1.2)\n  }\n}\n\n.change {\n  animation-name: change 600ms;\n  animation-duration: 60s;\n  animation-fill-mode: forwards\n}\n```\n\n这段代码的意思是让图片在60s的时间内，放大到1.2倍。因为60s的很长，所以图片看起来就是再缓缓地放大。\n\n\n\n### 总结\n\n今天改进了首页、登录/注册页的样式，使用了很多css的动画功能，来提高网站的交互体验。后面将继续优化其他页面的样式。\n\n最后，如果喜欢的我的作品，请为我投上一票哦^\\_^。有建议反馈那就更好了，因为参加这次大赛的目的就是想要通过获得更多的反馈来让自己成长。\n\n我的作品地址：https://fullstack.xinshengdaxue.com/works/21\n\n[1]:\thttp://forum.qzy.camp/t/topic/420\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/rktse.jpg\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/lrlde.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/ah1nt.jpg\n[image-4]:\thttp://oggx6lf7f.bkt.clouddn.com/ib8ro.png\n[image-5]:\thttp://oggx6lf7f.bkt.clouddn.com/mwimc.png\n[image-6]:\thttp://oggx6lf7f.bkt.clouddn.com/do2o1.png\n[image-7]:\thttp://oggx6lf7f.bkt.clouddn.com/1rrop.png","source":"_posts/2017-01-22-job-listing-version-2.md","raw":"\n---\ntitle: 持续更新，终于完成了魔改作品第二版\ncategories: 全栈营\n---\n\n今天对魔改作品的首页、注册/登录页进行改版优化。原先旧版本的首页、注册/登录页是这个样子的：\n\n\n\n![][image-1]\n\n![][image-2]\n\n今天进行了改版，改完之后是这个样子的：\n\n![][image-3]\n\n\n\n![][image-4]\n\n改进之后的版本漂亮了很多，交互体验也很了许多。\n\n主要更新的功能有7个：\n\n### 功能一： 回到顶部、拉票功能。\n\n回顶部按钮：\n\n![][image-5]\n\n点击这个按钮之后，页面会滚回顶部。\n\n拉票小按钮：\n\n![][image-6]\n\n![][image-7]\n\n鼠标移到这个按钮上，会出现我这个魔改作品的链接，哈哈。同学们也可以在页面上发一个拉票小按钮。\n\n### 功能二：头部会随着滚动变色\n\n一开始打开页面，头部是透明的，这样就能banner图融为一体，随着滚动条往下滚动，头部会加上背景颜色，这样就不会和下面的白色重叠。\n\n### 功能三：鼠标移上去，会有放大镜的效果\n\n这个功能在页面的《正在火热招聘的职业》模块\n\n实现的css代码：\n\n```css\n.hjc-img-wrap {\n  width: 220px;\n  height: 150px;\n  img {\n    width: 100%;\n    height: auto;\n  }\n  &:hover {\n    transform: scale(1.2);\n    transition: all .8s;\n  }\n}\n```\n\n指的是在800ms内，图片的宽度和高度都放大1.2倍。\n\n### 功能四：鼠标移上去，会有向上漂浮的效果\n\n这个功能在页面的《听听他们怎么说》、《体验高效找工作的感觉》模块。\n\n实现的css代码：\n\n```css\n.person {\n  top: 0;\n  position: relative;\n  -webkit-transition: all .4s;\n  transition: all .4s;\n  &:hover {\n    position: relative;\n    top: -5px;\n  }\n}\n```\n\n### 功能五：把footer改得更正式一点\n\n把联系我们，关于我们、服务条款这些按钮都加上，让网站显示更加正式一点。\n\n### 功能六：终于补齐了图片素材\n\n花了好多的时间，在这些网站找素材，终于找齐了\n\n- http://www.freepik.com/\n- https://picjumbo.com/\n- https://images.google.com.hk\n- http://fontawesome.io/icons/\n\n这些网站是从YY老师的魔改大赛直播，以及nfreeness助教的[【魔改加餐】提升网页颜值的3个小妙招][1]里面收集的，超级实用，有很多漂亮的图片。\n\n\n\n### 功能七：感觉有点高大上的登录/注册页\n\n登录和注册页面，仔细看背景图，有惊喜哦（你会发现它在缓缓地放大）。\n\n实现的css代码是：\n\n```css\n@keyframes change {\n  0% {\n    -webkit-transform: scale(1);\n    transform: scale(1)\n  }\n\n  100% {\n    -webkit-transform: scale(1.2);\n    transform: scale(1.2)\n  }\n}\n\n.change {\n  animation-name: change 600ms;\n  animation-duration: 60s;\n  animation-fill-mode: forwards\n}\n```\n\n这段代码的意思是让图片在60s的时间内，放大到1.2倍。因为60s的很长，所以图片看起来就是再缓缓地放大。\n\n\n\n### 总结\n\n今天改进了首页、登录/注册页的样式，使用了很多css的动画功能，来提高网站的交互体验。后面将继续优化其他页面的样式。\n\n最后，如果喜欢的我的作品，请为我投上一票哦^\\_^。有建议反馈那就更好了，因为参加这次大赛的目的就是想要通过获得更多的反馈来让自己成长。\n\n我的作品地址：https://fullstack.xinshengdaxue.com/works/21\n\n[1]:\thttp://forum.qzy.camp/t/topic/420\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/rktse.jpg\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/lrlde.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/ah1nt.jpg\n[image-4]:\thttp://oggx6lf7f.bkt.clouddn.com/ib8ro.png\n[image-5]:\thttp://oggx6lf7f.bkt.clouddn.com/mwimc.png\n[image-6]:\thttp://oggx6lf7f.bkt.clouddn.com/do2o1.png\n[image-7]:\thttp://oggx6lf7f.bkt.clouddn.com/1rrop.png","slug":"2017-01-22-job-listing-version-2","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccl0054fsonil6vprqt","content":"<p>今天对魔改作品的首页、注册/登录页进行改版优化。原先旧版本的首页、注册/登录页是这个样子的：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/rktse.jpg\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lrlde.png\" alt=\"\"></p>\n<p>今天进行了改版，改完之后是这个样子的：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ah1nt.jpg\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ib8ro.png\" alt=\"\"></p>\n<p>改进之后的版本漂亮了很多，交互体验也很了许多。</p>\n<p>主要更新的功能有7个：</p>\n<h3 id=\"功能一：-回到顶部、拉票功能。\"><a href=\"#功能一：-回到顶部、拉票功能。\" class=\"headerlink\" title=\"功能一： 回到顶部、拉票功能。\"></a>功能一： 回到顶部、拉票功能。</h3><p>回顶部按钮：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/mwimc.png\" alt=\"\"></p>\n<p>点击这个按钮之后，页面会滚回顶部。</p>\n<p>拉票小按钮：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/do2o1.png\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/1rrop.png\" alt=\"\"></p>\n<p>鼠标移到这个按钮上，会出现我这个魔改作品的链接，哈哈。同学们也可以在页面上发一个拉票小按钮。</p>\n<h3 id=\"功能二：头部会随着滚动变色\"><a href=\"#功能二：头部会随着滚动变色\" class=\"headerlink\" title=\"功能二：头部会随着滚动变色\"></a>功能二：头部会随着滚动变色</h3><p>一开始打开页面，头部是透明的，这样就能banner图融为一体，随着滚动条往下滚动，头部会加上背景颜色，这样就不会和下面的白色重叠。</p>\n<h3 id=\"功能三：鼠标移上去，会有放大镜的效果\"><a href=\"#功能三：鼠标移上去，会有放大镜的效果\" class=\"headerlink\" title=\"功能三：鼠标移上去，会有放大镜的效果\"></a>功能三：鼠标移上去，会有放大镜的效果</h3><p>这个功能在页面的《正在火热招聘的职业》模块</p>\n<p>实现的css代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.hjc-img-wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">220px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  img &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</span><br><span class=\"line\">    <span class=\"selector-tag\">height</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.2);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">8s</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>指的是在800ms内，图片的宽度和高度都放大1.2倍。</p>\n<h3 id=\"功能四：鼠标移上去，会有向上漂浮的效果\"><a href=\"#功能四：鼠标移上去，会有向上漂浮的效果\" class=\"headerlink\" title=\"功能四：鼠标移上去，会有向上漂浮的效果\"></a>功能四：鼠标移上去，会有向上漂浮的效果</h3><p>这个功能在页面的《听听他们怎么说》、《体验高效找工作的感觉》模块。</p>\n<p>实现的css代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.person</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: all .<span class=\"number\">4s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all .<span class=\"number\">4s</span>;</span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">relative</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">top</span>: <span class=\"selector-tag\">-5px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"功能五：把footer改得更正式一点\"><a href=\"#功能五：把footer改得更正式一点\" class=\"headerlink\" title=\"功能五：把footer改得更正式一点\"></a>功能五：把footer改得更正式一点</h3><p>把联系我们，关于我们、服务条款这些按钮都加上，让网站显示更加正式一点。</p>\n<h3 id=\"功能六：终于补齐了图片素材\"><a href=\"#功能六：终于补齐了图片素材\" class=\"headerlink\" title=\"功能六：终于补齐了图片素材\"></a>功能六：终于补齐了图片素材</h3><p>花了好多的时间，在这些网站找素材，终于找齐了</p>\n<ul>\n<li><a href=\"http://www.freepik.com/\" target=\"_blank\" rel=\"noopener\">http://www.freepik.com/</a></li>\n<li><a href=\"https://picjumbo.com/\" target=\"_blank\" rel=\"noopener\">https://picjumbo.com/</a></li>\n<li><a href=\"https://images.google.com.hk\" target=\"_blank\" rel=\"noopener\">https://images.google.com.hk</a></li>\n<li><a href=\"http://fontawesome.io/icons/\" target=\"_blank\" rel=\"noopener\">http://fontawesome.io/icons/</a></li>\n</ul>\n<p>这些网站是从YY老师的魔改大赛直播，以及nfreeness助教的<a href=\"http://forum.qzy.camp/t/topic/420\" target=\"_blank\" rel=\"noopener\">【魔改加餐】提升网页颜值的3个小妙招</a>里面收集的，超级实用，有很多漂亮的图片。</p>\n<h3 id=\"功能七：感觉有点高大上的登录-注册页\"><a href=\"#功能七：感觉有点高大上的登录-注册页\" class=\"headerlink\" title=\"功能七：感觉有点高大上的登录/注册页\"></a>功能七：感觉有点高大上的登录/注册页</h3><p>登录和注册页面，仔细看背景图，有惊喜哦（你会发现它在缓缓地放大）。</p>\n<p>实现的css代码是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> change &#123;</span><br><span class=\"line\">  0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(1);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(1.2);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.change</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">animation-name</span>: change <span class=\"number\">600ms</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation-duration</span>: <span class=\"number\">60s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation-fill-mode</span>: forwards</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的意思是让图片在60s的时间内，放大到1.2倍。因为60s的很长，所以图片看起来就是再缓缓地放大。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>今天改进了首页、登录/注册页的样式，使用了很多css的动画功能，来提高网站的交互体验。后面将继续优化其他页面的样式。</p>\n<p>最后，如果喜欢的我的作品，请为我投上一票哦^_^。有建议反馈那就更好了，因为参加这次大赛的目的就是想要通过获得更多的反馈来让自己成长。</p>\n<p>我的作品地址：<a href=\"https://fullstack.xinshengdaxue.com/works/21\" target=\"_blank\" rel=\"noopener\">https://fullstack.xinshengdaxue.com/works/21</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天对魔改作品的首页、注册/登录页进行改版优化。原先旧版本的首页、注册/登录页是这个样子的：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/rktse.jpg\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lrlde.png\" alt=\"\"></p>\n<p>今天进行了改版，改完之后是这个样子的：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ah1nt.jpg\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ib8ro.png\" alt=\"\"></p>\n<p>改进之后的版本漂亮了很多，交互体验也很了许多。</p>\n<p>主要更新的功能有7个：</p>\n<h3 id=\"功能一：-回到顶部、拉票功能。\"><a href=\"#功能一：-回到顶部、拉票功能。\" class=\"headerlink\" title=\"功能一： 回到顶部、拉票功能。\"></a>功能一： 回到顶部、拉票功能。</h3><p>回顶部按钮：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/mwimc.png\" alt=\"\"></p>\n<p>点击这个按钮之后，页面会滚回顶部。</p>\n<p>拉票小按钮：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/do2o1.png\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/1rrop.png\" alt=\"\"></p>\n<p>鼠标移到这个按钮上，会出现我这个魔改作品的链接，哈哈。同学们也可以在页面上发一个拉票小按钮。</p>\n<h3 id=\"功能二：头部会随着滚动变色\"><a href=\"#功能二：头部会随着滚动变色\" class=\"headerlink\" title=\"功能二：头部会随着滚动变色\"></a>功能二：头部会随着滚动变色</h3><p>一开始打开页面，头部是透明的，这样就能banner图融为一体，随着滚动条往下滚动，头部会加上背景颜色，这样就不会和下面的白色重叠。</p>\n<h3 id=\"功能三：鼠标移上去，会有放大镜的效果\"><a href=\"#功能三：鼠标移上去，会有放大镜的效果\" class=\"headerlink\" title=\"功能三：鼠标移上去，会有放大镜的效果\"></a>功能三：鼠标移上去，会有放大镜的效果</h3><p>这个功能在页面的《正在火热招聘的职业》模块</p>\n<p>实现的css代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.hjc-img-wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">220px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  img &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</span><br><span class=\"line\">    <span class=\"selector-tag\">height</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.2);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">8s</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>指的是在800ms内，图片的宽度和高度都放大1.2倍。</p>\n<h3 id=\"功能四：鼠标移上去，会有向上漂浮的效果\"><a href=\"#功能四：鼠标移上去，会有向上漂浮的效果\" class=\"headerlink\" title=\"功能四：鼠标移上去，会有向上漂浮的效果\"></a>功能四：鼠标移上去，会有向上漂浮的效果</h3><p>这个功能在页面的《听听他们怎么说》、《体验高效找工作的感觉》模块。</p>\n<p>实现的css代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.person</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: all .<span class=\"number\">4s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all .<span class=\"number\">4s</span>;</span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">relative</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">top</span>: <span class=\"selector-tag\">-5px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"功能五：把footer改得更正式一点\"><a href=\"#功能五：把footer改得更正式一点\" class=\"headerlink\" title=\"功能五：把footer改得更正式一点\"></a>功能五：把footer改得更正式一点</h3><p>把联系我们，关于我们、服务条款这些按钮都加上，让网站显示更加正式一点。</p>\n<h3 id=\"功能六：终于补齐了图片素材\"><a href=\"#功能六：终于补齐了图片素材\" class=\"headerlink\" title=\"功能六：终于补齐了图片素材\"></a>功能六：终于补齐了图片素材</h3><p>花了好多的时间，在这些网站找素材，终于找齐了</p>\n<ul>\n<li><a href=\"http://www.freepik.com/\" target=\"_blank\" rel=\"noopener\">http://www.freepik.com/</a></li>\n<li><a href=\"https://picjumbo.com/\" target=\"_blank\" rel=\"noopener\">https://picjumbo.com/</a></li>\n<li><a href=\"https://images.google.com.hk\" target=\"_blank\" rel=\"noopener\">https://images.google.com.hk</a></li>\n<li><a href=\"http://fontawesome.io/icons/\" target=\"_blank\" rel=\"noopener\">http://fontawesome.io/icons/</a></li>\n</ul>\n<p>这些网站是从YY老师的魔改大赛直播，以及nfreeness助教的<a href=\"http://forum.qzy.camp/t/topic/420\" target=\"_blank\" rel=\"noopener\">【魔改加餐】提升网页颜值的3个小妙招</a>里面收集的，超级实用，有很多漂亮的图片。</p>\n<h3 id=\"功能七：感觉有点高大上的登录-注册页\"><a href=\"#功能七：感觉有点高大上的登录-注册页\" class=\"headerlink\" title=\"功能七：感觉有点高大上的登录/注册页\"></a>功能七：感觉有点高大上的登录/注册页</h3><p>登录和注册页面，仔细看背景图，有惊喜哦（你会发现它在缓缓地放大）。</p>\n<p>实现的css代码是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> change &#123;</span><br><span class=\"line\">  0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(1);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(1.2);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.change</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">animation-name</span>: change <span class=\"number\">600ms</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation-duration</span>: <span class=\"number\">60s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation-fill-mode</span>: forwards</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的意思是让图片在60s的时间内，放大到1.2倍。因为60s的很长，所以图片看起来就是再缓缓地放大。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>今天改进了首页、登录/注册页的样式，使用了很多css的动画功能，来提高网站的交互体验。后面将继续优化其他页面的样式。</p>\n<p>最后，如果喜欢的我的作品，请为我投上一票哦^_^。有建议反馈那就更好了，因为参加这次大赛的目的就是想要通过获得更多的反馈来让自己成长。</p>\n<p>我的作品地址：<a href=\"https://fullstack.xinshengdaxue.com/works/21\" target=\"_blank\" rel=\"noopener\">https://fullstack.xinshengdaxue.com/works/21</a></p>\n"},{"title":"【错误】搜索空内容会报错","_content":"\n## 报错信息\n\n## ![][image-1]\n\n## 分析\n\n结果显示@jobs为空，所以报错。查看了一下controller\n\n![][image-2]\n\n也就是，只在有传参数的情况下才会设置@jobs的值，否则就是空，所以导致报错。\n\n\n\n## 解决办法\n\n![][image-3]\n\n如果没有传参数，那就设置@jobs的值为正常的按时间排序的结果。\n\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/rn2n2.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/0mag2.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/mjhc9.png","source":"_posts/2017-01-22-search-bug.md","raw":"\n---\ntitle: 【错误】搜索空内容会报错\ncategories: 全栈营\n---\n\n## 报错信息\n\n## ![][image-1]\n\n## 分析\n\n结果显示@jobs为空，所以报错。查看了一下controller\n\n![][image-2]\n\n也就是，只在有传参数的情况下才会设置@jobs的值，否则就是空，所以导致报错。\n\n\n\n## 解决办法\n\n![][image-3]\n\n如果没有传参数，那就设置@jobs的值为正常的按时间排序的结果。\n\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/rn2n2.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/0mag2.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/mjhc9.png","slug":"2017-01-22-search-bug","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccm0056fson6iyjqbn2","content":"<h2 id=\"报错信息\"><a href=\"#报错信息\" class=\"headerlink\" title=\"报错信息\"></a>报错信息</h2><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"http://oggx6lf7f.bkt.clouddn.com/rn2n2.png\" alt=\"\"></h2><h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>结果显示@jobs为空，所以报错。查看了一下controller</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0mag2.png\" alt=\"\"></p>\n<p>也就是，只在有传参数的情况下才会设置@jobs的值，否则就是空，所以导致报错。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/mjhc9.png\" alt=\"\"></p>\n<p>如果没有传参数，那就设置@jobs的值为正常的按时间排序的结果。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"报错信息\"><a href=\"#报错信息\" class=\"headerlink\" title=\"报错信息\"></a>报错信息</h2><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"http://oggx6lf7f.bkt.clouddn.com/rn2n2.png\" alt=\"\"></h2><h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>结果显示@jobs为空，所以报错。查看了一下controller</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0mag2.png\" alt=\"\"></p>\n<p>也就是，只在有传参数的情况下才会设置@jobs的值，否则就是空，所以导致报错。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/mjhc9.png\" alt=\"\"></p>\n<p>如果没有传参数，那就设置@jobs的值为正常的按时间排序的结果。</p>\n"},{"title":"【教程】如何清空heroku上面的数据","_content":"\n当第一次把job-listing提交到heroku之后，运行`heroku run rake db:seed`，产生了10个publish工作和10个hidden工作。\n\n为了让网站的内容显得更加真实，今天把在`seed.rb`里面，把所有职位的描述都改成真实的招聘要求，然后重新提交到heroku上面，运行`heroku run rake db:seed`，结果发现之前的20个工作还在，反而多了20个工作，总共40个！\n\n这是因为在`seed.rb`里面，只执行增加，而没有执行删除。于是，我就打算把数据清空，先在本地执行`rake db:reset`，结果和我预期的一样，只剩下新的20个工作。接着我在heroku上面运行`rake db:reset`，结果报错了\n\n![][image-1]\n\n貌似清空数据库这个操作比较危险，用这种方式不能正常地执行。\n\n后来，想到[rails101教材，5-4 让“群组”与“使用者”产生关联][1]这一节，里面有个步骤：`删除所有“无主”的群组`，用的命令是`Group.delete_all`，所以，我打算在heroku上面尝试一下这种方法。\n\n![][image-2]\n\n发现这个方法真的行得通，可以看到数据已经删除了。于是我在运行`heroku run rake db:seed`，done！\n\n![][image-3]\n\n注意：现在是学习阶段，可以不断地尝试，试错。但是以后在正式环境中，清空数据库是一个非常危险的操作，所以，要谨慎操作。\n\n---\n\nps：我正在持续更新我的魔改作品：[NewJob][2]，喜欢的话，多多支持。\n\n[1]:\thttps://fullstack.xinshengdaxue.com/posts/73\n[2]:\thttps://fullstack.xinshengdaxue.com/works/21\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/v3grj.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/u5rv0.png\n[image-3]:\thttps://vipweb.bs2cdn.yy.com/vipinter_eb9b195a72e64a5cacdf437f32464c09.png","source":"_posts/2017-01-23-clear-heroku-data.md","raw":"---\ntitle: 【教程】如何清空heroku上面的数据\ncategories: 全栈营\n---\n\n当第一次把job-listing提交到heroku之后，运行`heroku run rake db:seed`，产生了10个publish工作和10个hidden工作。\n\n为了让网站的内容显得更加真实，今天把在`seed.rb`里面，把所有职位的描述都改成真实的招聘要求，然后重新提交到heroku上面，运行`heroku run rake db:seed`，结果发现之前的20个工作还在，反而多了20个工作，总共40个！\n\n这是因为在`seed.rb`里面，只执行增加，而没有执行删除。于是，我就打算把数据清空，先在本地执行`rake db:reset`，结果和我预期的一样，只剩下新的20个工作。接着我在heroku上面运行`rake db:reset`，结果报错了\n\n![][image-1]\n\n貌似清空数据库这个操作比较危险，用这种方式不能正常地执行。\n\n后来，想到[rails101教材，5-4 让“群组”与“使用者”产生关联][1]这一节，里面有个步骤：`删除所有“无主”的群组`，用的命令是`Group.delete_all`，所以，我打算在heroku上面尝试一下这种方法。\n\n![][image-2]\n\n发现这个方法真的行得通，可以看到数据已经删除了。于是我在运行`heroku run rake db:seed`，done！\n\n![][image-3]\n\n注意：现在是学习阶段，可以不断地尝试，试错。但是以后在正式环境中，清空数据库是一个非常危险的操作，所以，要谨慎操作。\n\n---\n\nps：我正在持续更新我的魔改作品：[NewJob][2]，喜欢的话，多多支持。\n\n[1]:\thttps://fullstack.xinshengdaxue.com/posts/73\n[2]:\thttps://fullstack.xinshengdaxue.com/works/21\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/v3grj.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/u5rv0.png\n[image-3]:\thttps://vipweb.bs2cdn.yy.com/vipinter_eb9b195a72e64a5cacdf437f32464c09.png","slug":"2017-01-23-clear-heroku-data","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccn0058fson54a2zyu9","content":"<p>当第一次把job-listing提交到heroku之后，运行<code>heroku run rake db:seed</code>，产生了10个publish工作和10个hidden工作。</p>\n<p>为了让网站的内容显得更加真实，今天把在<code>seed.rb</code>里面，把所有职位的描述都改成真实的招聘要求，然后重新提交到heroku上面，运行<code>heroku run rake db:seed</code>，结果发现之前的20个工作还在，反而多了20个工作，总共40个！</p>\n<p>这是因为在<code>seed.rb</code>里面，只执行增加，而没有执行删除。于是，我就打算把数据清空，先在本地执行<code>rake db:reset</code>，结果和我预期的一样，只剩下新的20个工作。接着我在heroku上面运行<code>rake db:reset</code>，结果报错了</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/v3grj.png\" alt=\"\"></p>\n<p>貌似清空数据库这个操作比较危险，用这种方式不能正常地执行。</p>\n<p>后来，想到<a href=\"https://fullstack.xinshengdaxue.com/posts/73\" target=\"_blank\" rel=\"noopener\">rails101教材，5-4 让“群组”与“使用者”产生关联</a>这一节，里面有个步骤：<code>删除所有“无主”的群组</code>，用的命令是<code>Group.delete_all</code>，所以，我打算在heroku上面尝试一下这种方法。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/u5rv0.png\" alt=\"\"></p>\n<p>发现这个方法真的行得通，可以看到数据已经删除了。于是我在运行<code>heroku run rake db:seed</code>，done！</p>\n<p><img src=\"https://vipweb.bs2cdn.yy.com/vipinter_eb9b195a72e64a5cacdf437f32464c09.png\" alt=\"\"></p>\n<p>注意：现在是学习阶段，可以不断地尝试，试错。但是以后在正式环境中，清空数据库是一个非常危险的操作，所以，要谨慎操作。</p>\n<hr>\n<p>ps：我正在持续更新我的魔改作品：<a href=\"https://fullstack.xinshengdaxue.com/works/21\" target=\"_blank\" rel=\"noopener\">NewJob</a>，喜欢的话，多多支持。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当第一次把job-listing提交到heroku之后，运行<code>heroku run rake db:seed</code>，产生了10个publish工作和10个hidden工作。</p>\n<p>为了让网站的内容显得更加真实，今天把在<code>seed.rb</code>里面，把所有职位的描述都改成真实的招聘要求，然后重新提交到heroku上面，运行<code>heroku run rake db:seed</code>，结果发现之前的20个工作还在，反而多了20个工作，总共40个！</p>\n<p>这是因为在<code>seed.rb</code>里面，只执行增加，而没有执行删除。于是，我就打算把数据清空，先在本地执行<code>rake db:reset</code>，结果和我预期的一样，只剩下新的20个工作。接着我在heroku上面运行<code>rake db:reset</code>，结果报错了</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/v3grj.png\" alt=\"\"></p>\n<p>貌似清空数据库这个操作比较危险，用这种方式不能正常地执行。</p>\n<p>后来，想到<a href=\"https://fullstack.xinshengdaxue.com/posts/73\" target=\"_blank\" rel=\"noopener\">rails101教材，5-4 让“群组”与“使用者”产生关联</a>这一节，里面有个步骤：<code>删除所有“无主”的群组</code>，用的命令是<code>Group.delete_all</code>，所以，我打算在heroku上面尝试一下这种方法。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/u5rv0.png\" alt=\"\"></p>\n<p>发现这个方法真的行得通，可以看到数据已经删除了。于是我在运行<code>heroku run rake db:seed</code>，done！</p>\n<p><img src=\"https://vipweb.bs2cdn.yy.com/vipinter_eb9b195a72e64a5cacdf437f32464c09.png\" alt=\"\"></p>\n<p>注意：现在是学习阶段，可以不断地尝试，试错。但是以后在正式环境中，清空数据库是一个非常危险的操作，所以，要谨慎操作。</p>\n<hr>\n<p>ps：我正在持续更新我的魔改作品：<a href=\"https://fullstack.xinshengdaxue.com/works/21\" target=\"_blank\" rel=\"noopener\">NewJob</a>，喜欢的话，多多支持。</p>\n"},{"title":"【ORID总结】1/23","_content":"\n# Objective\n\n**完成了哪些事情?**\n- 写了篇文章《[【小技巧】如何清空heroku上面的数据][1]》。\n- 《魔改作品》加了“查看已投递的功能”。\n\n# Reflective\n\n**你要如何形容今天的情绪？**高兴。\n\n**高峰是什么?**\n\n- 在论坛里面发了一篇文章《【小技巧】如何清空heroku上面的数据》，结果有一个同学回复了一个我不知道的方法，而且是正确的解法，这是我发帖之前没有想到的，真是惊喜呀。\n- 晚上找了两位全栈营的同学帮我挑作品的毛病，他们给我了很多的思路和改进意见，收获大大的。\n\n**低点是什么?**我感觉有点体力不支，可能是这几天太拼了，要多休息。\n\n# Interpretive\n\n**交流产生惊喜**。发一篇文章在论坛里面，会有一些小伙伴来留言，他们可能会给我一些之前不知道的东西，这就是惊喜，这种惊喜如果不主动分享是没办法获得的。\n\n\n\n**人真的有太多局限性了**。本来我以为我观察到的是整个世界，但今天从两位全栈营同学给反馈中，我发现真的就有很多明显的盲区，我是没有意识到的。\n\n![][image-1]\n\n# Decisional\n\n- 多让小伙伴们给我反馈，让我知道更多自己不知道的东西。\n\n[1]:\thttp://raimonfuns-blog.logdown.com/posts/1348325-tips-for-how-to-clear-data-that-the-heroku\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/8i2b0.png","source":"_posts/2017-01-23-coding-diary.md","raw":"\n---\ntitle: 【ORID总结】1/23\ncategories: 全栈营\n---\n\n# Objective\n\n**完成了哪些事情?**\n- 写了篇文章《[【小技巧】如何清空heroku上面的数据][1]》。\n- 《魔改作品》加了“查看已投递的功能”。\n\n# Reflective\n\n**你要如何形容今天的情绪？**高兴。\n\n**高峰是什么?**\n\n- 在论坛里面发了一篇文章《【小技巧】如何清空heroku上面的数据》，结果有一个同学回复了一个我不知道的方法，而且是正确的解法，这是我发帖之前没有想到的，真是惊喜呀。\n- 晚上找了两位全栈营的同学帮我挑作品的毛病，他们给我了很多的思路和改进意见，收获大大的。\n\n**低点是什么?**我感觉有点体力不支，可能是这几天太拼了，要多休息。\n\n# Interpretive\n\n**交流产生惊喜**。发一篇文章在论坛里面，会有一些小伙伴来留言，他们可能会给我一些之前不知道的东西，这就是惊喜，这种惊喜如果不主动分享是没办法获得的。\n\n\n\n**人真的有太多局限性了**。本来我以为我观察到的是整个世界，但今天从两位全栈营同学给反馈中，我发现真的就有很多明显的盲区，我是没有意识到的。\n\n![][image-1]\n\n# Decisional\n\n- 多让小伙伴们给我反馈，让我知道更多自己不知道的东西。\n\n[1]:\thttp://raimonfuns-blog.logdown.com/posts/1348325-tips-for-how-to-clear-data-that-the-heroku\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/8i2b0.png","slug":"2017-01-23-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicco005afson30ocpueh","content":"<h1 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h1><p><strong>完成了哪些事情?</strong></p>\n<ul>\n<li>写了篇文章《<a href=\"http://raimonfuns-blog.logdown.com/posts/1348325-tips-for-how-to-clear-data-that-the-heroku\" target=\"_blank\" rel=\"noopener\">【小技巧】如何清空heroku上面的数据</a>》。</li>\n<li>《魔改作品》加了“查看已投递的功能”。</li>\n</ul>\n<h1 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h1><p><strong>你要如何形容今天的情绪？</strong>高兴。</p>\n<p><strong>高峰是什么?</strong></p>\n<ul>\n<li>在论坛里面发了一篇文章《【小技巧】如何清空heroku上面的数据》，结果有一个同学回复了一个我不知道的方法，而且是正确的解法，这是我发帖之前没有想到的，真是惊喜呀。</li>\n<li>晚上找了两位全栈营的同学帮我挑作品的毛病，他们给我了很多的思路和改进意见，收获大大的。</li>\n</ul>\n<p><strong>低点是什么?</strong>我感觉有点体力不支，可能是这几天太拼了，要多休息。</p>\n<h1 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h1><p><strong>交流产生惊喜</strong>。发一篇文章在论坛里面，会有一些小伙伴来留言，他们可能会给我一些之前不知道的东西，这就是惊喜，这种惊喜如果不主动分享是没办法获得的。</p>\n<p><strong>人真的有太多局限性了</strong>。本来我以为我观察到的是整个世界，但今天从两位全栈营同学给反馈中，我发现真的就有很多明显的盲区，我是没有意识到的。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/8i2b0.png\" alt=\"\"></p>\n<h1 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h1><ul>\n<li>多让小伙伴们给我反馈，让我知道更多自己不知道的东西。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h1><p><strong>完成了哪些事情?</strong></p>\n<ul>\n<li>写了篇文章《<a href=\"http://raimonfuns-blog.logdown.com/posts/1348325-tips-for-how-to-clear-data-that-the-heroku\" target=\"_blank\" rel=\"noopener\">【小技巧】如何清空heroku上面的数据</a>》。</li>\n<li>《魔改作品》加了“查看已投递的功能”。</li>\n</ul>\n<h1 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h1><p><strong>你要如何形容今天的情绪？</strong>高兴。</p>\n<p><strong>高峰是什么?</strong></p>\n<ul>\n<li>在论坛里面发了一篇文章《【小技巧】如何清空heroku上面的数据》，结果有一个同学回复了一个我不知道的方法，而且是正确的解法，这是我发帖之前没有想到的，真是惊喜呀。</li>\n<li>晚上找了两位全栈营的同学帮我挑作品的毛病，他们给我了很多的思路和改进意见，收获大大的。</li>\n</ul>\n<p><strong>低点是什么?</strong>我感觉有点体力不支，可能是这几天太拼了，要多休息。</p>\n<h1 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h1><p><strong>交流产生惊喜</strong>。发一篇文章在论坛里面，会有一些小伙伴来留言，他们可能会给我一些之前不知道的东西，这就是惊喜，这种惊喜如果不主动分享是没办法获得的。</p>\n<p><strong>人真的有太多局限性了</strong>。本来我以为我观察到的是整个世界，但今天从两位全栈营同学给反馈中，我发现真的就有很多明显的盲区，我是没有意识到的。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/8i2b0.png\" alt=\"\"></p>\n<h1 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h1><ul>\n<li>多让小伙伴们给我反馈，让我知道更多自己不知道的东西。</li>\n</ul>\n"},{"title":"【一步一步做出小小食杂铺】前端分享系列1 — 用jQuery实现常见的交互效果","_content":"\n这篇文章的目录：\n\n- 前言\n- 轮播图\n- 回到顶部\n- 图片切换\n- 菜单栏的切换\n\n## 前言\n\n这是我做「小小食杂铺」时，用jquery实现的效果，希望对大家有帮助。\n\n## 轮播图\n\nhtml:\n\n```html\n<div id=\"myCarousel\" class=\"carousel slide\">\n  <ol class=\"carousel-indicators\">\n    <li data-target=\"#myCarousel\" data-slide-to=\"0\" class=\"active\"></li>\n    <li data-target=\"#myCarousel\" data-slide-to=\"1\"></li>\n    <li data-target=\"#myCarousel\" data-slide-to=\"2\"></li>\n </ol>\n <div class=\"carousel-inner\">\n    <div class=\"item active\">\n     <a href=\"javacript:;\">\n      <img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrl5afeqhj30xc0afgpx.jpg\">\n      <div class=\"carousel-caption\"></div>\n     </a>\n    </div>\n    <div class=\"item\">\n     <a href=\"javacript:;\">\n      <img src=\"https://vipweb.bs2cdn.yy.com/vipinter_de4f123bb220482e93649571a1491572.jpg\">\n      <div class=\"carousel-caption\"></div>\n     </a>\n    </div>\n    <div class=\"item\">\n     <a href=\"javacript:;\">\n      <img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrlcb0knhj30xc0afwib.jpg\">\n      <div class=\"carousel-caption\"></div>\n     </a>\n    </div>\n  </div>\n</div>\n```\n\n在application.scss加上\n\n```css\n.carousel {\n  width: 1200px;\n  margin: 0 auto;\n}\n.carousel .item {\n  height: 375px;\n}\n```\n\n在application.js顶部加入\n\n```js\n//= require bootstrap\n```\n\n然后在底部加上\n\n```js\n$(document).ready(function () {\n  $('#myCarousel').carousel({\n    interval: 2000 //目前是2秒播放一张，可以根据需要调整这个值\n  })  \n})\n```\n\ndone!\n\n效果：\n\n![](/uploads/qzy/original/2X/3/3cae2ad6854e5c26a7e7d24a4e2b302e40870ffe.gif)\n\n实例代码：[轮播图](http://codepen.io/raimonfuns/pen/GWKoOM)\n\n## 回到顶部\n\n在_footer.html.erb加入\n\n```html\n<div id=\"gotop\"></div>\n```\n\n在application.scss加入\n\n```css\n#gotop {\n  width: 50px;\n  height: 50px;\n  position: fixed;\n  right: 20px;\n  bottom: 20px;\n  background: #F25F5C;\n  cursor: pointer;\n}\n```\n\n在application.js加入\n\n```javascript\n$(document).on('click', '#gotop', function () {\n  $('body').animate({'scrollTop': 0}, 500)\n})\n```\n\n![](/uploads/qzy/original/2X/1/16f5d21e7fc7c9267c43fb24829301ca849e2ca5.gif)\n\n实例代码：[回到顶部](http://codepen.io/raimonfuns/pen/NpKpqX)\n\n但其实，当页面在顶部时，是不需要显示「gotop按钮」的，所以，我们可以优化一下，当页面滚动下来之后，才显示「gotop按钮」。\n\n修改application.scss\n\n```css\n#gotop {\n  width: 50px;\n  height: 50px;\n  position: fixed;\n  right: 20px;\n  bottom: 20px;\n  background: #F25F5C;\n  cursor: pointer;\n  display: none; /*默认先隐藏掉*/\n}\n```\n\n修改application.js\n\n```javascript\n$(document).on('click', '#gotop', function () {\n  $('body').animate({'scrollTop': 0}, 500)\n})\n\n$(window).scroll(function () {\n  if ($(this).scrollTop() > 500) { \n    $('#gotop').fadeIn() // 当页面向下滚动的距离大于500px时，慢慢地显示「回到顶部按钮」\n  } else {\n    $('#gotop').fadeOut() // 否则慢慢地隐藏「回到顶部按钮」\n  }\n})\n```\n\n![](/uploads/qzy/original/2X/6/6d16c0ded2abd18469435de5025b3448e83ef1c8.gif)\n\n实例代码：[回到顶部优化版](http://codepen.io/raimonfuns/pen/wJwedG)\n\n## 图片切换\n\nhtml\n\n```html\n<div class=\"productDetail\">\n  <div class=\"productDetail-left\">\n    <div class=\"productDetail-left-bigImage\">\n      <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\" />\n    </div>\n    <div class=\"productDetail-left-imageList\">\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/893/medium_TB21el5X9GI.eBjSspcXXcVjFXa___725677994.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/894/medium_TB2IATBX71M.eBjSZFOXXc0rFXa___725677994.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/895/medium_TB2DjSOdNBmpuFjSZFDXXXD8pXa___725677994.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item productDetail-left-imageList-lastItem\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/891/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90__1_.jpg\" />\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n在application.scss加上\n\n```css\n/*商品信息*/\n.productDetail {\n\twidth: 1200px;\n\tmargin: 20px auto;\n\theight: 518px;\n}\n\n.productDetail img {\n  width: 100%;\n  height: 100%;\n}\n\n.productDetail-left {\n\tfloat: left; /*你去左边*/\n\twidth: 420px;\n\theight: 518px;\n}\n\n.productDetail-right {\n\tfloat: right; /*你去右边*/\n\twidth: 744px;\n\theight: 518px;\n}\n\n.productDetail-left-bigImage {\n\twidth: 420px;\n\theight: 420px;\n}\n\n.productDetail-left-imageList {\n\tmargin-top: 15px;\n}\n\n.productDetail-left-imageList-item {\n\tfloat: left; /*虽然我们是block元素，但是我们还是想在同一行呀，那就用float吧*/\n\twidth: 72px;\n\theight: 72px;\n\tmargin-right: 15px;\n}\n\n.productDetail-left-imageList-lastItem {\n\tmargin-right: 0;\n}\n```\n\n在application.js加上\n\n```javascript\n// 图片切换\n$(document).on('mouseover', '.productDetail-left-imageList-item', function () {\n  var src = $(this).find('img').attr('src') //从被鼠标选中的图片的src里面拿到图片链接\n  $('.productDetail-left-bigImage').find('img').attr('src', src) //把图片链接设置到大图的src里面\n})\n```\n\n效果：\n\n![](/uploads/qzy/original/2X/0/01a5c28c1ce2160e5a09258882d4201110511de8.gif)\n\n实例代码：[切换图片](http://codepen.io/raimonfuns/pen/aJoJgZ)\n\n## 菜单栏的切换\n\nhtml\n\n```html\n<div class=\"productDecription\">\n  <div class=\"productDecription-menuList bg-color1\">\n    <div class=\"productDecription-menuList-item bg-color2\">选项卡1</div>\n    <div class=\"productDecription-menuList-item bg-color3\">选项卡2</div>\n  </div>\n  <div class=\"productDecription-content\">\n    <div class=\"productDecription-content-item bg-color4\" style=\"display: block;\">内容1</div>\n    <div class=\"productDecription-content-item bg-color5\">内容2</div>\n  </div>\n</div>\n```\n\n在application.scss加上\n\n```css\n/*5种背景颜色*/\n.bg-color1 {\n  background: #50514F; \n}\n\n.bg-color2 {\n  background: #F25F5C; \n}\n\n.bg-color3 {\n  background: #FFE066; \n}\n\n.bg-color4 {\n  background: #247BA0; \n}\n\n.bg-color5 {\n  background: #70C1B3; \n}\n\n/*商品详情*/\n.productDecription {\n\twidth: 1200px;\n  text-align: center;\n\tmargin: 20px auto;\n\tborder: 1px solid #50514F;\n  line-height: 30px;\n}\n\n.productDecription-menuList {\n\theight: 35px;\n}\n\n.productDecription-menuList-item {\n\tfloat: left;\n\twidth: 175px;\n\theight: 35px;\n}\n\n.productDecription-content {\n\twidth: 750px;\n  height: 500px;\n\tmargin: 50px auto;\n}\n\n.productDecription-content-item {\n  display: none;\n  width: 750px;\n  height: 500px;\n}\n```\n\n在application.js加上\n\n```javascript\n$(document).on('click', '.productDecription-menuList-item', function () {\n  var index = $(this).index() //拿到这个「选项卡」的index，第一个是0，第二个是1，以此类推\n  $('.productDecription-content-item').hide() //所有的内容都隐藏\n  $('.productDecription-content-item').eq(index).show() //只显示对于index的内容\n})\n```\n\n效果：\n\n![](/uploads/qzy/original/2X/3/3112ca3c0db46efd5e07de1c5952ebe9ef19af96.gif)\n\n实例代码：[选项卡切换](http://codepen.io/raimonfuns/pen/XMrRXd)\n\n## 系列文章：\n\n- [【一步一步做出小小食杂铺】前端分享系列1 — navbar导航栏](http://forum.qzy.camp/t/1-navbar/690)\n- [「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车](http://forum.qzy.camp/t/2-logo-search/696)\n- [【一步一步做出小小食杂铺】前端分享系列3 — 页面布局的高频小套路](http://forum.qzy.camp/t/topic/733)\n\n未完待续，敬请期待。如果你有什么建议，欢迎留言！\n\n------\n\nps：如果教程对大家有帮助的话，希望能为「[小小食杂铺](https://fullstack.xinshengdaxue.com/works/201)」投上一票哈。","source":"_posts/2017-01-23-share1.md","raw":"---\ntitle: 【一步一步做出小小食杂铺】前端分享系列1 — 用jQuery实现常见的交互效果\ncategories: 全栈营\n---\n\n这篇文章的目录：\n\n- 前言\n- 轮播图\n- 回到顶部\n- 图片切换\n- 菜单栏的切换\n\n## 前言\n\n这是我做「小小食杂铺」时，用jquery实现的效果，希望对大家有帮助。\n\n## 轮播图\n\nhtml:\n\n```html\n<div id=\"myCarousel\" class=\"carousel slide\">\n  <ol class=\"carousel-indicators\">\n    <li data-target=\"#myCarousel\" data-slide-to=\"0\" class=\"active\"></li>\n    <li data-target=\"#myCarousel\" data-slide-to=\"1\"></li>\n    <li data-target=\"#myCarousel\" data-slide-to=\"2\"></li>\n </ol>\n <div class=\"carousel-inner\">\n    <div class=\"item active\">\n     <a href=\"javacript:;\">\n      <img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrl5afeqhj30xc0afgpx.jpg\">\n      <div class=\"carousel-caption\"></div>\n     </a>\n    </div>\n    <div class=\"item\">\n     <a href=\"javacript:;\">\n      <img src=\"https://vipweb.bs2cdn.yy.com/vipinter_de4f123bb220482e93649571a1491572.jpg\">\n      <div class=\"carousel-caption\"></div>\n     </a>\n    </div>\n    <div class=\"item\">\n     <a href=\"javacript:;\">\n      <img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrlcb0knhj30xc0afwib.jpg\">\n      <div class=\"carousel-caption\"></div>\n     </a>\n    </div>\n  </div>\n</div>\n```\n\n在application.scss加上\n\n```css\n.carousel {\n  width: 1200px;\n  margin: 0 auto;\n}\n.carousel .item {\n  height: 375px;\n}\n```\n\n在application.js顶部加入\n\n```js\n//= require bootstrap\n```\n\n然后在底部加上\n\n```js\n$(document).ready(function () {\n  $('#myCarousel').carousel({\n    interval: 2000 //目前是2秒播放一张，可以根据需要调整这个值\n  })  \n})\n```\n\ndone!\n\n效果：\n\n![](/uploads/qzy/original/2X/3/3cae2ad6854e5c26a7e7d24a4e2b302e40870ffe.gif)\n\n实例代码：[轮播图](http://codepen.io/raimonfuns/pen/GWKoOM)\n\n## 回到顶部\n\n在_footer.html.erb加入\n\n```html\n<div id=\"gotop\"></div>\n```\n\n在application.scss加入\n\n```css\n#gotop {\n  width: 50px;\n  height: 50px;\n  position: fixed;\n  right: 20px;\n  bottom: 20px;\n  background: #F25F5C;\n  cursor: pointer;\n}\n```\n\n在application.js加入\n\n```javascript\n$(document).on('click', '#gotop', function () {\n  $('body').animate({'scrollTop': 0}, 500)\n})\n```\n\n![](/uploads/qzy/original/2X/1/16f5d21e7fc7c9267c43fb24829301ca849e2ca5.gif)\n\n实例代码：[回到顶部](http://codepen.io/raimonfuns/pen/NpKpqX)\n\n但其实，当页面在顶部时，是不需要显示「gotop按钮」的，所以，我们可以优化一下，当页面滚动下来之后，才显示「gotop按钮」。\n\n修改application.scss\n\n```css\n#gotop {\n  width: 50px;\n  height: 50px;\n  position: fixed;\n  right: 20px;\n  bottom: 20px;\n  background: #F25F5C;\n  cursor: pointer;\n  display: none; /*默认先隐藏掉*/\n}\n```\n\n修改application.js\n\n```javascript\n$(document).on('click', '#gotop', function () {\n  $('body').animate({'scrollTop': 0}, 500)\n})\n\n$(window).scroll(function () {\n  if ($(this).scrollTop() > 500) { \n    $('#gotop').fadeIn() // 当页面向下滚动的距离大于500px时，慢慢地显示「回到顶部按钮」\n  } else {\n    $('#gotop').fadeOut() // 否则慢慢地隐藏「回到顶部按钮」\n  }\n})\n```\n\n![](/uploads/qzy/original/2X/6/6d16c0ded2abd18469435de5025b3448e83ef1c8.gif)\n\n实例代码：[回到顶部优化版](http://codepen.io/raimonfuns/pen/wJwedG)\n\n## 图片切换\n\nhtml\n\n```html\n<div class=\"productDetail\">\n  <div class=\"productDetail-left\">\n    <div class=\"productDetail-left-bigImage\">\n      <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\" />\n    </div>\n    <div class=\"productDetail-left-imageList\">\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/893/medium_TB21el5X9GI.eBjSspcXXcVjFXa___725677994.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/894/medium_TB2IATBX71M.eBjSZFOXXc0rFXa___725677994.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/895/medium_TB2DjSOdNBmpuFjSZFDXXXD8pXa___725677994.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item productDetail-left-imageList-lastItem\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/891/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90__1_.jpg\" />\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n在application.scss加上\n\n```css\n/*商品信息*/\n.productDetail {\n\twidth: 1200px;\n\tmargin: 20px auto;\n\theight: 518px;\n}\n\n.productDetail img {\n  width: 100%;\n  height: 100%;\n}\n\n.productDetail-left {\n\tfloat: left; /*你去左边*/\n\twidth: 420px;\n\theight: 518px;\n}\n\n.productDetail-right {\n\tfloat: right; /*你去右边*/\n\twidth: 744px;\n\theight: 518px;\n}\n\n.productDetail-left-bigImage {\n\twidth: 420px;\n\theight: 420px;\n}\n\n.productDetail-left-imageList {\n\tmargin-top: 15px;\n}\n\n.productDetail-left-imageList-item {\n\tfloat: left; /*虽然我们是block元素，但是我们还是想在同一行呀，那就用float吧*/\n\twidth: 72px;\n\theight: 72px;\n\tmargin-right: 15px;\n}\n\n.productDetail-left-imageList-lastItem {\n\tmargin-right: 0;\n}\n```\n\n在application.js加上\n\n```javascript\n// 图片切换\n$(document).on('mouseover', '.productDetail-left-imageList-item', function () {\n  var src = $(this).find('img').attr('src') //从被鼠标选中的图片的src里面拿到图片链接\n  $('.productDetail-left-bigImage').find('img').attr('src', src) //把图片链接设置到大图的src里面\n})\n```\n\n效果：\n\n![](/uploads/qzy/original/2X/0/01a5c28c1ce2160e5a09258882d4201110511de8.gif)\n\n实例代码：[切换图片](http://codepen.io/raimonfuns/pen/aJoJgZ)\n\n## 菜单栏的切换\n\nhtml\n\n```html\n<div class=\"productDecription\">\n  <div class=\"productDecription-menuList bg-color1\">\n    <div class=\"productDecription-menuList-item bg-color2\">选项卡1</div>\n    <div class=\"productDecription-menuList-item bg-color3\">选项卡2</div>\n  </div>\n  <div class=\"productDecription-content\">\n    <div class=\"productDecription-content-item bg-color4\" style=\"display: block;\">内容1</div>\n    <div class=\"productDecription-content-item bg-color5\">内容2</div>\n  </div>\n</div>\n```\n\n在application.scss加上\n\n```css\n/*5种背景颜色*/\n.bg-color1 {\n  background: #50514F; \n}\n\n.bg-color2 {\n  background: #F25F5C; \n}\n\n.bg-color3 {\n  background: #FFE066; \n}\n\n.bg-color4 {\n  background: #247BA0; \n}\n\n.bg-color5 {\n  background: #70C1B3; \n}\n\n/*商品详情*/\n.productDecription {\n\twidth: 1200px;\n  text-align: center;\n\tmargin: 20px auto;\n\tborder: 1px solid #50514F;\n  line-height: 30px;\n}\n\n.productDecription-menuList {\n\theight: 35px;\n}\n\n.productDecription-menuList-item {\n\tfloat: left;\n\twidth: 175px;\n\theight: 35px;\n}\n\n.productDecription-content {\n\twidth: 750px;\n  height: 500px;\n\tmargin: 50px auto;\n}\n\n.productDecription-content-item {\n  display: none;\n  width: 750px;\n  height: 500px;\n}\n```\n\n在application.js加上\n\n```javascript\n$(document).on('click', '.productDecription-menuList-item', function () {\n  var index = $(this).index() //拿到这个「选项卡」的index，第一个是0，第二个是1，以此类推\n  $('.productDecription-content-item').hide() //所有的内容都隐藏\n  $('.productDecription-content-item').eq(index).show() //只显示对于index的内容\n})\n```\n\n效果：\n\n![](/uploads/qzy/original/2X/3/3112ca3c0db46efd5e07de1c5952ebe9ef19af96.gif)\n\n实例代码：[选项卡切换](http://codepen.io/raimonfuns/pen/XMrRXd)\n\n## 系列文章：\n\n- [【一步一步做出小小食杂铺】前端分享系列1 — navbar导航栏](http://forum.qzy.camp/t/1-navbar/690)\n- [「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车](http://forum.qzy.camp/t/2-logo-search/696)\n- [【一步一步做出小小食杂铺】前端分享系列3 — 页面布局的高频小套路](http://forum.qzy.camp/t/topic/733)\n\n未完待续，敬请期待。如果你有什么建议，欢迎留言！\n\n------\n\nps：如果教程对大家有帮助的话，希望能为「[小小食杂铺](https://fullstack.xinshengdaxue.com/works/201)」投上一票哈。","slug":"2017-01-23-share1","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccp005cfsonux0hm1mu","content":"<p>这篇文章的目录：</p>\n<ul>\n<li>前言</li>\n<li>轮播图</li>\n<li>回到顶部</li>\n<li>图片切换</li>\n<li>菜单栏的切换</li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这是我做「小小食杂铺」时，用jquery实现的效果，希望对大家有帮助。</p>\n<h2 id=\"轮播图\"><a href=\"#轮播图\" class=\"headerlink\" title=\"轮播图\"></a>轮播图</h2><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCarousel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel slide\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-indicators\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#myCarousel\"</span> <span class=\"attr\">data-slide-to</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#myCarousel\"</span> <span class=\"attr\">data-slide-to</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#myCarousel\"</span> <span class=\"attr\">data-slide-to</span>=<span class=\"string\">\"2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-inner\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item active\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javacript:;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrl5afeqhj30xc0afgpx.jpg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-caption\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javacript:;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://vipweb.bs2cdn.yy.com/vipinter_de4f123bb220482e93649571a1491572.jpg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-caption\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javacript:;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrlcb0knhj30xc0afwib.jpg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-caption\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.carousel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.carousel</span> <span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">375px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js顶部加入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//= require bootstrap</span></span><br></pre></td></tr></table></figure>\n<p>然后在底部加上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#myCarousel'</span>).carousel(&#123;</span><br><span class=\"line\">    interval: <span class=\"number\">2000</span> <span class=\"comment\">//目前是2秒播放一张，可以根据需要调整这个值</span></span><br><span class=\"line\">  &#125;)  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>done!</p>\n<p>效果：</p>\n<p><img src=\"/uploads/qzy/original/2X/3/3cae2ad6854e5c26a7e7d24a4e2b302e40870ffe.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/GWKoOM\" target=\"_blank\" rel=\"noopener\">轮播图</a></p>\n<h2 id=\"回到顶部\"><a href=\"#回到顶部\" class=\"headerlink\" title=\"回到顶部\"></a>回到顶部</h2><p>在_footer.html.erb加入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gotop\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加入</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#gotop</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js加入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#gotop'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'body'</span>).animate(&#123;<span class=\"string\">'scrollTop'</span>: <span class=\"number\">0</span>&#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/uploads/qzy/original/2X/1/16f5d21e7fc7c9267c43fb24829301ca849e2ca5.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/NpKpqX\" target=\"_blank\" rel=\"noopener\">回到顶部</a></p>\n<p>但其实，当页面在顶部时，是不需要显示「gotop按钮」的，所以，我们可以优化一下，当页面滚动下来之后，才显示「gotop按钮」。</p>\n<p>修改application.scss</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#gotop</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none; <span class=\"comment\">/*默认先隐藏掉*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改application.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#gotop'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'body'</span>).animate(&#123;<span class=\"string\">'scrollTop'</span>: <span class=\"number\">0</span>&#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($(<span class=\"keyword\">this</span>).scrollTop() &gt; <span class=\"number\">500</span>) &#123; </span><br><span class=\"line\">    $(<span class=\"string\">'#gotop'</span>).fadeIn() <span class=\"comment\">// 当页面向下滚动的距离大于500px时，慢慢地显示「回到顶部按钮」</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#gotop'</span>).fadeOut() <span class=\"comment\">// 否则慢慢地隐藏「回到顶部按钮」</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/uploads/qzy/original/2X/6/6d16c0ded2abd18469435de5025b3448e83ef1c8.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/wJwedG\" target=\"_blank\" rel=\"noopener\">回到顶部优化版</a></p>\n<h2 id=\"图片切换\"><a href=\"#图片切换\" class=\"headerlink\" title=\"图片切换\"></a>图片切换</h2><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-bigImage\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/893/medium_TB21el5X9GI.eBjSspcXXcVjFXa___725677994.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/894/medium_TB2IATBX71M.eBjSZFOXXc0rFXa___725677994.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/895/medium_TB2DjSOdNBmpuFjSZFDXXXD8pXa___725677994.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item productDetail-left-imageList-lastItem\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/891/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90__1_.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*商品信息*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left; <span class=\"comment\">/*你去左边*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-right</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: right; <span class=\"comment\">/*你去右边*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">744px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-bigImage</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList-item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left; <span class=\"comment\">/*虽然我们是block元素，但是我们还是想在同一行呀，那就用float吧*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList-lastItem</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js加上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 图片切换</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mouseover'</span>, <span class=\"string\">'.productDetail-left-imageList-item'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> src = $(<span class=\"keyword\">this</span>).find(<span class=\"string\">'img'</span>).attr(<span class=\"string\">'src'</span>) <span class=\"comment\">//从被鼠标选中的图片的src里面拿到图片链接</span></span><br><span class=\"line\">  $(<span class=\"string\">'.productDetail-left-bigImage'</span>).find(<span class=\"string\">'img'</span>).attr(<span class=\"string\">'src'</span>, src) <span class=\"comment\">//把图片链接设置到大图的src里面</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/uploads/qzy/original/2X/0/01a5c28c1ce2160e5a09258882d4201110511de8.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/aJoJgZ\" target=\"_blank\" rel=\"noopener\">切换图片</a></p>\n<h2 id=\"菜单栏的切换\"><a href=\"#菜单栏的切换\" class=\"headerlink\" title=\"菜单栏的切换\"></a>菜单栏的切换</h2><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList bg-color1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList-item bg-color2\"</span>&gt;</span>选项卡1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList-item bg-color3\"</span>&gt;</span>选项卡2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content-item bg-color4\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: block;\"</span>&gt;</span>内容1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content-item bg-color5\"</span>&gt;</span>内容2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*5种背景颜色*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#50514F</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#FFE066</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#247BA0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color5</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#70C1B3</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*商品详情*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#50514F</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-menuList</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-menuList-item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">175px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-content</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-content-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js加上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'.productDecription-menuList-item'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = $(<span class=\"keyword\">this</span>).index() <span class=\"comment\">//拿到这个「选项卡」的index，第一个是0，第二个是1，以此类推</span></span><br><span class=\"line\">  $(<span class=\"string\">'.productDecription-content-item'</span>).hide() <span class=\"comment\">//所有的内容都隐藏</span></span><br><span class=\"line\">  $(<span class=\"string\">'.productDecription-content-item'</span>).eq(index).show() <span class=\"comment\">//只显示对于index的内容</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/uploads/qzy/original/2X/3/3112ca3c0db46efd5e07de1c5952ebe9ef19af96.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/XMrRXd\" target=\"_blank\" rel=\"noopener\">选项卡切换</a></p>\n<h2 id=\"系列文章：\"><a href=\"#系列文章：\" class=\"headerlink\" title=\"系列文章：\"></a>系列文章：</h2><ul>\n<li><a href=\"http://forum.qzy.camp/t/1-navbar/690\" target=\"_blank\" rel=\"noopener\">【一步一步做出小小食杂铺】前端分享系列1 — navbar导航栏</a></li>\n<li><a href=\"http://forum.qzy.camp/t/2-logo-search/696\" target=\"_blank\" rel=\"noopener\">「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车</a></li>\n<li><a href=\"http://forum.qzy.camp/t/topic/733\" target=\"_blank\" rel=\"noopener\">【一步一步做出小小食杂铺】前端分享系列3 — 页面布局的高频小套路</a></li>\n</ul>\n<p>未完待续，敬请期待。如果你有什么建议，欢迎留言！</p>\n<hr>\n<p>ps：如果教程对大家有帮助的话，希望能为「<a href=\"https://fullstack.xinshengdaxue.com/works/201\" target=\"_blank\" rel=\"noopener\">小小食杂铺</a>」投上一票哈。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇文章的目录：</p>\n<ul>\n<li>前言</li>\n<li>轮播图</li>\n<li>回到顶部</li>\n<li>图片切换</li>\n<li>菜单栏的切换</li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这是我做「小小食杂铺」时，用jquery实现的效果，希望对大家有帮助。</p>\n<h2 id=\"轮播图\"><a href=\"#轮播图\" class=\"headerlink\" title=\"轮播图\"></a>轮播图</h2><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCarousel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel slide\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-indicators\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#myCarousel\"</span> <span class=\"attr\">data-slide-to</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#myCarousel\"</span> <span class=\"attr\">data-slide-to</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#myCarousel\"</span> <span class=\"attr\">data-slide-to</span>=<span class=\"string\">\"2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-inner\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item active\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javacript:;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrl5afeqhj30xc0afgpx.jpg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-caption\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javacript:;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://vipweb.bs2cdn.yy.com/vipinter_de4f123bb220482e93649571a1491572.jpg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-caption\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javacript:;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrlcb0knhj30xc0afwib.jpg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-caption\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.carousel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.carousel</span> <span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">375px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js顶部加入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//= require bootstrap</span></span><br></pre></td></tr></table></figure>\n<p>然后在底部加上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#myCarousel'</span>).carousel(&#123;</span><br><span class=\"line\">    interval: <span class=\"number\">2000</span> <span class=\"comment\">//目前是2秒播放一张，可以根据需要调整这个值</span></span><br><span class=\"line\">  &#125;)  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>done!</p>\n<p>效果：</p>\n<p><img src=\"/uploads/qzy/original/2X/3/3cae2ad6854e5c26a7e7d24a4e2b302e40870ffe.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/GWKoOM\" target=\"_blank\" rel=\"noopener\">轮播图</a></p>\n<h2 id=\"回到顶部\"><a href=\"#回到顶部\" class=\"headerlink\" title=\"回到顶部\"></a>回到顶部</h2><p>在_footer.html.erb加入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gotop\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加入</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#gotop</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js加入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#gotop'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'body'</span>).animate(&#123;<span class=\"string\">'scrollTop'</span>: <span class=\"number\">0</span>&#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/uploads/qzy/original/2X/1/16f5d21e7fc7c9267c43fb24829301ca849e2ca5.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/NpKpqX\" target=\"_blank\" rel=\"noopener\">回到顶部</a></p>\n<p>但其实，当页面在顶部时，是不需要显示「gotop按钮」的，所以，我们可以优化一下，当页面滚动下来之后，才显示「gotop按钮」。</p>\n<p>修改application.scss</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#gotop</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none; <span class=\"comment\">/*默认先隐藏掉*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改application.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#gotop'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'body'</span>).animate(&#123;<span class=\"string\">'scrollTop'</span>: <span class=\"number\">0</span>&#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($(<span class=\"keyword\">this</span>).scrollTop() &gt; <span class=\"number\">500</span>) &#123; </span><br><span class=\"line\">    $(<span class=\"string\">'#gotop'</span>).fadeIn() <span class=\"comment\">// 当页面向下滚动的距离大于500px时，慢慢地显示「回到顶部按钮」</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#gotop'</span>).fadeOut() <span class=\"comment\">// 否则慢慢地隐藏「回到顶部按钮」</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/uploads/qzy/original/2X/6/6d16c0ded2abd18469435de5025b3448e83ef1c8.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/wJwedG\" target=\"_blank\" rel=\"noopener\">回到顶部优化版</a></p>\n<h2 id=\"图片切换\"><a href=\"#图片切换\" class=\"headerlink\" title=\"图片切换\"></a>图片切换</h2><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-bigImage\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/893/medium_TB21el5X9GI.eBjSspcXXcVjFXa___725677994.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/894/medium_TB2IATBX71M.eBjSZFOXXc0rFXa___725677994.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/895/medium_TB2DjSOdNBmpuFjSZFDXXXD8pXa___725677994.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item productDetail-left-imageList-lastItem\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/891/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90__1_.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*商品信息*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left; <span class=\"comment\">/*你去左边*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-right</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: right; <span class=\"comment\">/*你去右边*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">744px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-bigImage</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList-item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left; <span class=\"comment\">/*虽然我们是block元素，但是我们还是想在同一行呀，那就用float吧*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList-lastItem</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js加上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 图片切换</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mouseover'</span>, <span class=\"string\">'.productDetail-left-imageList-item'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> src = $(<span class=\"keyword\">this</span>).find(<span class=\"string\">'img'</span>).attr(<span class=\"string\">'src'</span>) <span class=\"comment\">//从被鼠标选中的图片的src里面拿到图片链接</span></span><br><span class=\"line\">  $(<span class=\"string\">'.productDetail-left-bigImage'</span>).find(<span class=\"string\">'img'</span>).attr(<span class=\"string\">'src'</span>, src) <span class=\"comment\">//把图片链接设置到大图的src里面</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/uploads/qzy/original/2X/0/01a5c28c1ce2160e5a09258882d4201110511de8.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/aJoJgZ\" target=\"_blank\" rel=\"noopener\">切换图片</a></p>\n<h2 id=\"菜单栏的切换\"><a href=\"#菜单栏的切换\" class=\"headerlink\" title=\"菜单栏的切换\"></a>菜单栏的切换</h2><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList bg-color1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList-item bg-color2\"</span>&gt;</span>选项卡1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList-item bg-color3\"</span>&gt;</span>选项卡2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content-item bg-color4\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: block;\"</span>&gt;</span>内容1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content-item bg-color5\"</span>&gt;</span>内容2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*5种背景颜色*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#50514F</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#FFE066</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#247BA0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color5</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#70C1B3</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*商品详情*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#50514F</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-menuList</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-menuList-item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">175px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-content</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-content-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js加上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'.productDecription-menuList-item'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = $(<span class=\"keyword\">this</span>).index() <span class=\"comment\">//拿到这个「选项卡」的index，第一个是0，第二个是1，以此类推</span></span><br><span class=\"line\">  $(<span class=\"string\">'.productDecription-content-item'</span>).hide() <span class=\"comment\">//所有的内容都隐藏</span></span><br><span class=\"line\">  $(<span class=\"string\">'.productDecription-content-item'</span>).eq(index).show() <span class=\"comment\">//只显示对于index的内容</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/uploads/qzy/original/2X/3/3112ca3c0db46efd5e07de1c5952ebe9ef19af96.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/XMrRXd\" target=\"_blank\" rel=\"noopener\">选项卡切换</a></p>\n<h2 id=\"系列文章：\"><a href=\"#系列文章：\" class=\"headerlink\" title=\"系列文章：\"></a>系列文章：</h2><ul>\n<li><a href=\"http://forum.qzy.camp/t/1-navbar/690\" target=\"_blank\" rel=\"noopener\">【一步一步做出小小食杂铺】前端分享系列1 — navbar导航栏</a></li>\n<li><a href=\"http://forum.qzy.camp/t/2-logo-search/696\" target=\"_blank\" rel=\"noopener\">「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车</a></li>\n<li><a href=\"http://forum.qzy.camp/t/topic/733\" target=\"_blank\" rel=\"noopener\">【一步一步做出小小食杂铺】前端分享系列3 — 页面布局的高频小套路</a></li>\n</ul>\n<p>未完待续，敬请期待。如果你有什么建议，欢迎留言！</p>\n<hr>\n<p>ps：如果教程对大家有帮助的话，希望能为「<a href=\"https://fullstack.xinshengdaxue.com/works/201\" target=\"_blank\" rel=\"noopener\">小小食杂铺</a>」投上一票哈。</p>\n"},{"title":"【错误】切换页面，jquery的绑定事件会失效","_content":"\n## 动作\n\n![][image-1]\n\n在application.js，用jquery的ready绑定方法，第一次打开首页是正常的，如果跳到其他的页面，然后回到首页就会失效。\n\n![][image-2]\n\n## 分析\n\n结果调试发现，在页面跳转时，application.js是不会再次执行，除非刷新页面，所以相当于事件没有绑上去。\n\n## 解决方法\n\n改成监听事件的模式，监听document上面的事件，done\n\n![][image-3]\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/557od.gif\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/51dq2.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/90kjt.png","source":"_posts/2017-01-24-application-js-bug.md","raw":"\n---\ntitle: 【错误】切换页面，jquery的绑定事件会失效\ncategories: 全栈营\n---\n\n## 动作\n\n![][image-1]\n\n在application.js，用jquery的ready绑定方法，第一次打开首页是正常的，如果跳到其他的页面，然后回到首页就会失效。\n\n![][image-2]\n\n## 分析\n\n结果调试发现，在页面跳转时，application.js是不会再次执行，除非刷新页面，所以相当于事件没有绑上去。\n\n## 解决方法\n\n改成监听事件的模式，监听document上面的事件，done\n\n![][image-3]\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/557od.gif\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/51dq2.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/90kjt.png","slug":"2017-01-24-application-js-bug","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccq005efson583ik1ds","content":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/557od.gif\" alt=\"\"></p>\n<p>在application.js，用jquery的ready绑定方法，第一次打开首页是正常的，如果跳到其他的页面，然后回到首页就会失效。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/51dq2.png\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>结果调试发现，在页面跳转时，application.js是不会再次执行，除非刷新页面，所以相当于事件没有绑上去。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>改成监听事件的模式，监听document上面的事件，done</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/90kjt.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/557od.gif\" alt=\"\"></p>\n<p>在application.js，用jquery的ready绑定方法，第一次打开首页是正常的，如果跳到其他的页面，然后回到首页就会失效。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/51dq2.png\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>结果调试发现，在页面跳转时，application.js是不会再次执行，除非刷新页面，所以相当于事件没有绑上去。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>改成监听事件的模式，监听document上面的事件，done</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/90kjt.png\" alt=\"\"></p>\n"},{"title":"【ORID总结】1/24","_content":"\n# Objective\n\n**完成了哪些事情?**\n\n魔改作品更新：\n\n![][image-1]\n\n另外，还写了篇文章《[【错误】切换页面时，jquery的绑定事件会失效][1]》。\n\n# Reflective\n\n**高峰是什么?**完成了魔改作品的更新。\n\n**低点是什么?**魔改作品一直在改进，样式和功能都还算可以，但却不怎么受欢迎，我其实不太清楚问题出在哪。一想到这个就烦，XD。\n\n# Interpretive\n\n- 在切换页面的时候，application.js只会执行一次，真是坑！\n- 这个网站的图片真心不错，今天在上面逛了好久。https://picjumbo.com/\n- 没有支持率，会失望，这是正常的，但作为有元认知能力的人，有另外一个声音一直在鼓励着我：“关注你的成长”，“把目光放长远一点”，“埋怨是没有用的，多反思一下为什么会这样，然后从中学习”。\n- 感觉人生第一次那么投入做一件事。今天下班回家，觉得挺累的，在路上就想着要不找一部电影来看，放松一下，等回到家之后，另外一个想法冒出来了：“要不把魔改作品的几个小功能搞搞？反正花不了多长时间”。于是，我就坐下来，敲啊敲，一下子就到了10点！what？电影都没看呢？算了，还是不看了。于是把代码提交上去，到小区里面跑两圈，写篇ORID，就到睡觉的时间了。\n\n# Decisional\n\n- 在魔改比赛结束之前，不要停止更新，尽量保持平常心。\n\n[1]:\thttp://raimonfuns-blog.logdown.com/posts/1350429\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/5wiap.png","source":"_posts/2017-01-24-coding-diary.md","raw":"\n---\ntitle: 【ORID总结】1/24\ncategories: 全栈营\n---\n\n# Objective\n\n**完成了哪些事情?**\n\n魔改作品更新：\n\n![][image-1]\n\n另外，还写了篇文章《[【错误】切换页面时，jquery的绑定事件会失效][1]》。\n\n# Reflective\n\n**高峰是什么?**完成了魔改作品的更新。\n\n**低点是什么?**魔改作品一直在改进，样式和功能都还算可以，但却不怎么受欢迎，我其实不太清楚问题出在哪。一想到这个就烦，XD。\n\n# Interpretive\n\n- 在切换页面的时候，application.js只会执行一次，真是坑！\n- 这个网站的图片真心不错，今天在上面逛了好久。https://picjumbo.com/\n- 没有支持率，会失望，这是正常的，但作为有元认知能力的人，有另外一个声音一直在鼓励着我：“关注你的成长”，“把目光放长远一点”，“埋怨是没有用的，多反思一下为什么会这样，然后从中学习”。\n- 感觉人生第一次那么投入做一件事。今天下班回家，觉得挺累的，在路上就想着要不找一部电影来看，放松一下，等回到家之后，另外一个想法冒出来了：“要不把魔改作品的几个小功能搞搞？反正花不了多长时间”。于是，我就坐下来，敲啊敲，一下子就到了10点！what？电影都没看呢？算了，还是不看了。于是把代码提交上去，到小区里面跑两圈，写篇ORID，就到睡觉的时间了。\n\n# Decisional\n\n- 在魔改比赛结束之前，不要停止更新，尽量保持平常心。\n\n[1]:\thttp://raimonfuns-blog.logdown.com/posts/1350429\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/5wiap.png","slug":"2017-01-24-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccq005gfson7beczvbm","content":"<h1 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h1><p><strong>完成了哪些事情?</strong></p>\n<p>魔改作品更新：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/5wiap.png\" alt=\"\"></p>\n<p>另外，还写了篇文章《<a href=\"http://raimonfuns-blog.logdown.com/posts/1350429\" target=\"_blank\" rel=\"noopener\">【错误】切换页面时，jquery的绑定事件会失效</a>》。</p>\n<h1 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h1><p><strong>高峰是什么?</strong>完成了魔改作品的更新。</p>\n<p><strong>低点是什么?</strong>魔改作品一直在改进，样式和功能都还算可以，但却不怎么受欢迎，我其实不太清楚问题出在哪。一想到这个就烦，XD。</p>\n<h1 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h1><ul>\n<li>在切换页面的时候，application.js只会执行一次，真是坑！</li>\n<li>这个网站的图片真心不错，今天在上面逛了好久。<a href=\"https://picjumbo.com/\" target=\"_blank\" rel=\"noopener\">https://picjumbo.com/</a></li>\n<li>没有支持率，会失望，这是正常的，但作为有元认知能力的人，有另外一个声音一直在鼓励着我：“关注你的成长”，“把目光放长远一点”，“埋怨是没有用的，多反思一下为什么会这样，然后从中学习”。</li>\n<li>感觉人生第一次那么投入做一件事。今天下班回家，觉得挺累的，在路上就想着要不找一部电影来看，放松一下，等回到家之后，另外一个想法冒出来了：“要不把魔改作品的几个小功能搞搞？反正花不了多长时间”。于是，我就坐下来，敲啊敲，一下子就到了10点！what？电影都没看呢？算了，还是不看了。于是把代码提交上去，到小区里面跑两圈，写篇ORID，就到睡觉的时间了。</li>\n</ul>\n<h1 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h1><ul>\n<li>在魔改比赛结束之前，不要停止更新，尽量保持平常心。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h1><p><strong>完成了哪些事情?</strong></p>\n<p>魔改作品更新：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/5wiap.png\" alt=\"\"></p>\n<p>另外，还写了篇文章《<a href=\"http://raimonfuns-blog.logdown.com/posts/1350429\" target=\"_blank\" rel=\"noopener\">【错误】切换页面时，jquery的绑定事件会失效</a>》。</p>\n<h1 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h1><p><strong>高峰是什么?</strong>完成了魔改作品的更新。</p>\n<p><strong>低点是什么?</strong>魔改作品一直在改进，样式和功能都还算可以，但却不怎么受欢迎，我其实不太清楚问题出在哪。一想到这个就烦，XD。</p>\n<h1 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h1><ul>\n<li>在切换页面的时候，application.js只会执行一次，真是坑！</li>\n<li>这个网站的图片真心不错，今天在上面逛了好久。<a href=\"https://picjumbo.com/\" target=\"_blank\" rel=\"noopener\">https://picjumbo.com/</a></li>\n<li>没有支持率，会失望，这是正常的，但作为有元认知能力的人，有另外一个声音一直在鼓励着我：“关注你的成长”，“把目光放长远一点”，“埋怨是没有用的，多反思一下为什么会这样，然后从中学习”。</li>\n<li>感觉人生第一次那么投入做一件事。今天下班回家，觉得挺累的，在路上就想着要不找一部电影来看，放松一下，等回到家之后，另外一个想法冒出来了：“要不把魔改作品的几个小功能搞搞？反正花不了多长时间”。于是，我就坐下来，敲啊敲，一下子就到了10点！what？电影都没看呢？算了，还是不看了。于是把代码提交上去，到小区里面跑两圈，写篇ORID，就到睡觉的时间了。</li>\n</ul>\n<h1 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h1><ul>\n<li>在魔改比赛结束之前，不要停止更新，尽量保持平常心。</li>\n</ul>\n"},{"title":"【ORID总结】1/25","_content":"\n# Objective\n\n**今天做了什么事情？**\n\n魔改作品发布第三个版本\n\n![][image-1]\n\n# Reflective\n\n**高峰是什么?**把作品分享到群里面，很多小伙伴给予反馈，也给予了很多鼓励和支持，xdite老师也认可我的作品，非常开心，继续加油。\n\n# Interpretive\n\n- 魔改项目添加了一个超级管理员。之前的用户管理员的身份使用is\\_admin，后来开发企业账号的时候，才意识到is\\_admin这个字段是要给企业账号用的，所以我加了一个is\\_super\\_admin，超级管理员账号，在这个账号拥有最高的权限，可以对所有企业账号所发布的职位进行操作。不知不觉，这个项目里面已经拥有了3个角色了，个人用户、企业账号、超级管理员。\n- 意外的连接。因为魔改大赛的原因，最近的在群里面的曝光度比较高，所以群里面很多同学都加了我微信，和我交流，我也认识了一些既是新生大学 + 全栈营的同学，感觉和外界有了越来越多连接。最大的惊喜是他们给了我超级多的反馈，非常有价值，我很感谢他们。\n\n# Decisional\n\n- 把魔改大赛中，学到的有用的东西分享到全栈营论坛里面，说不定能帮助到一些同学。\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/0cm1v.png","source":"_posts/2017-01-25-coding-diary.md","raw":"\n---\ntitle: 【ORID总结】1/25\ncategories: 全栈营\n---\n\n# Objective\n\n**今天做了什么事情？**\n\n魔改作品发布第三个版本\n\n![][image-1]\n\n# Reflective\n\n**高峰是什么?**把作品分享到群里面，很多小伙伴给予反馈，也给予了很多鼓励和支持，xdite老师也认可我的作品，非常开心，继续加油。\n\n# Interpretive\n\n- 魔改项目添加了一个超级管理员。之前的用户管理员的身份使用is\\_admin，后来开发企业账号的时候，才意识到is\\_admin这个字段是要给企业账号用的，所以我加了一个is\\_super\\_admin，超级管理员账号，在这个账号拥有最高的权限，可以对所有企业账号所发布的职位进行操作。不知不觉，这个项目里面已经拥有了3个角色了，个人用户、企业账号、超级管理员。\n- 意外的连接。因为魔改大赛的原因，最近的在群里面的曝光度比较高，所以群里面很多同学都加了我微信，和我交流，我也认识了一些既是新生大学 + 全栈营的同学，感觉和外界有了越来越多连接。最大的惊喜是他们给了我超级多的反馈，非常有价值，我很感谢他们。\n\n# Decisional\n\n- 把魔改大赛中，学到的有用的东西分享到全栈营论坛里面，说不定能帮助到一些同学。\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/0cm1v.png","slug":"2017-01-25-coding-diary","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccr005ifsonf6t7uidv","content":"<h1 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h1><p><strong>今天做了什么事情？</strong></p>\n<p>魔改作品发布第三个版本</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0cm1v.png\" alt=\"\"></p>\n<h1 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h1><p><strong>高峰是什么?</strong>把作品分享到群里面，很多小伙伴给予反馈，也给予了很多鼓励和支持，xdite老师也认可我的作品，非常开心，继续加油。</p>\n<h1 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h1><ul>\n<li>魔改项目添加了一个超级管理员。之前的用户管理员的身份使用is_admin，后来开发企业账号的时候，才意识到is_admin这个字段是要给企业账号用的，所以我加了一个is_super_admin，超级管理员账号，在这个账号拥有最高的权限，可以对所有企业账号所发布的职位进行操作。不知不觉，这个项目里面已经拥有了3个角色了，个人用户、企业账号、超级管理员。</li>\n<li>意外的连接。因为魔改大赛的原因，最近的在群里面的曝光度比较高，所以群里面很多同学都加了我微信，和我交流，我也认识了一些既是新生大学 + 全栈营的同学，感觉和外界有了越来越多连接。最大的惊喜是他们给了我超级多的反馈，非常有价值，我很感谢他们。</li>\n</ul>\n<h1 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h1><ul>\n<li>把魔改大赛中，学到的有用的东西分享到全栈营论坛里面，说不定能帮助到一些同学。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h1><p><strong>今天做了什么事情？</strong></p>\n<p>魔改作品发布第三个版本</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0cm1v.png\" alt=\"\"></p>\n<h1 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h1><p><strong>高峰是什么?</strong>把作品分享到群里面，很多小伙伴给予反馈，也给予了很多鼓励和支持，xdite老师也认可我的作品，非常开心，继续加油。</p>\n<h1 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h1><ul>\n<li>魔改项目添加了一个超级管理员。之前的用户管理员的身份使用is_admin，后来开发企业账号的时候，才意识到is_admin这个字段是要给企业账号用的，所以我加了一个is_super_admin，超级管理员账号，在这个账号拥有最高的权限，可以对所有企业账号所发布的职位进行操作。不知不觉，这个项目里面已经拥有了3个角色了，个人用户、企业账号、超级管理员。</li>\n<li>意外的连接。因为魔改大赛的原因，最近的在群里面的曝光度比较高，所以群里面很多同学都加了我微信，和我交流，我也认识了一些既是新生大学 + 全栈营的同学，感觉和外界有了越来越多连接。最大的惊喜是他们给了我超级多的反馈，非常有价值，我很感谢他们。</li>\n</ul>\n<h1 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h1><ul>\n<li>把魔改大赛中，学到的有用的东西分享到全栈营论坛里面，说不定能帮助到一些同学。</li>\n</ul>\n"},{"title":"【教程】自定义表单报错信息 + 限制薪水下限不能低于薪水上限","_content":"\n## 如何自定义表单报错信息\n\n在教材的job-listing中，很多输入框的报错信息都是默认的`can't be blank`，如下图\n\n![][image-1]\n\n我们可以修改一下，增加自定义的报错信息，如下图\n\n![][image-2]\n\n方法：\n\n打开`models/job.rb`，原先可能是长这个样子的：\n\n```\nvalidates :title, presence: true\nvalidates :wage_lower_bound, presence: true\nvalidates :wage_upper_bound, presence: true\nvalidates :wage_lower_bound, numericality: { greater_than: 0 }\n```\n\n把它改成这样：\n\n```\nvalidates :title, presence: { message: \"请填写标题\" }\nvalidates :wage_upper_bound, presence: { message: \"请填写最低薪水\" }\nvalidates :wage_lower_bound, presence: { message: \"请填写最高薪水\" }\nvalidates :wage_lower_bound, numericality: { greater_than: 0, message: \"最小薪水必须大于零\" }\n```\n\ndone!\n\n## 如何限制薪水下限不能低于薪水上限\n\n方法：\n\n打开`models/job.rb`，加上一句：\n\n```\nvalidates :wage_lower_bound, numericality: { less_than: :wage_upper_bound, message: \"薪水下限不能低于薪水上限\" }\n```\n\n![][image-3]\n\ndone!\n\n\n\n参考链接：http://guides.rubyonrails.org/active\\_record\\_validations.html#numericality\n\n---\n\nps：我正在持续更新我的魔改作品：[NewJob][1]，喜欢的话，多多支持。\n\n[1]:\thttps://fullstack.xinshengdaxue.com/works/21\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/lppii.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/nxkml.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/wr46i.png","source":"_posts/2017-01-26-custom-form-error-tip.md","raw":"---\ntitle: 【教程】自定义表单报错信息 + 限制薪水下限不能低于薪水上限\ncategories: 全栈营\n---\n\n## 如何自定义表单报错信息\n\n在教材的job-listing中，很多输入框的报错信息都是默认的`can't be blank`，如下图\n\n![][image-1]\n\n我们可以修改一下，增加自定义的报错信息，如下图\n\n![][image-2]\n\n方法：\n\n打开`models/job.rb`，原先可能是长这个样子的：\n\n```\nvalidates :title, presence: true\nvalidates :wage_lower_bound, presence: true\nvalidates :wage_upper_bound, presence: true\nvalidates :wage_lower_bound, numericality: { greater_than: 0 }\n```\n\n把它改成这样：\n\n```\nvalidates :title, presence: { message: \"请填写标题\" }\nvalidates :wage_upper_bound, presence: { message: \"请填写最低薪水\" }\nvalidates :wage_lower_bound, presence: { message: \"请填写最高薪水\" }\nvalidates :wage_lower_bound, numericality: { greater_than: 0, message: \"最小薪水必须大于零\" }\n```\n\ndone!\n\n## 如何限制薪水下限不能低于薪水上限\n\n方法：\n\n打开`models/job.rb`，加上一句：\n\n```\nvalidates :wage_lower_bound, numericality: { less_than: :wage_upper_bound, message: \"薪水下限不能低于薪水上限\" }\n```\n\n![][image-3]\n\ndone!\n\n\n\n参考链接：http://guides.rubyonrails.org/active\\_record\\_validations.html#numericality\n\n---\n\nps：我正在持续更新我的魔改作品：[NewJob][1]，喜欢的话，多多支持。\n\n[1]:\thttps://fullstack.xinshengdaxue.com/works/21\n\n[image-1]:\thttp://oggx6lf7f.bkt.clouddn.com/lppii.png\n[image-2]:\thttp://oggx6lf7f.bkt.clouddn.com/nxkml.png\n[image-3]:\thttp://oggx6lf7f.bkt.clouddn.com/wr46i.png","slug":"2017-01-26-custom-form-error-tip","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccs005kfsonubpdpo9j","content":"<h2 id=\"如何自定义表单报错信息\"><a href=\"#如何自定义表单报错信息\" class=\"headerlink\" title=\"如何自定义表单报错信息\"></a>如何自定义表单报错信息</h2><p>在教材的job-listing中，很多输入框的报错信息都是默认的<code>can&#39;t be blank</code>，如下图</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lppii.png\" alt=\"\"></p>\n<p>我们可以修改一下，增加自定义的报错信息，如下图</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/nxkml.png\" alt=\"\"></p>\n<p>方法：</p>\n<p>打开<code>models/job.rb</code>，原先可能是长这个样子的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validates :title, presence: true</span><br><span class=\"line\">validates :wage_lower_bound, presence: true</span><br><span class=\"line\">validates :wage_upper_bound, presence: true</span><br><span class=\"line\">validates :wage_lower_bound, numericality: &#123; greater_than: 0 &#125;</span><br></pre></td></tr></table></figure>\n<p>把它改成这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validates :title, presence: &#123; message: &quot;请填写标题&quot; &#125;</span><br><span class=\"line\">validates :wage_upper_bound, presence: &#123; message: &quot;请填写最低薪水&quot; &#125;</span><br><span class=\"line\">validates :wage_lower_bound, presence: &#123; message: &quot;请填写最高薪水&quot; &#125;</span><br><span class=\"line\">validates :wage_lower_bound, numericality: &#123; greater_than: 0, message: &quot;最小薪水必须大于零&quot; &#125;</span><br></pre></td></tr></table></figure>\n<p>done!</p>\n<h2 id=\"如何限制薪水下限不能低于薪水上限\"><a href=\"#如何限制薪水下限不能低于薪水上限\" class=\"headerlink\" title=\"如何限制薪水下限不能低于薪水上限\"></a>如何限制薪水下限不能低于薪水上限</h2><p>方法：</p>\n<p>打开<code>models/job.rb</code>，加上一句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validates :wage_lower_bound, numericality: &#123; less_than: :wage_upper_bound, message: &quot;薪水下限不能低于薪水上限&quot; &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/wr46i.png\" alt=\"\"></p>\n<p>done!</p>\n<p>参考链接：<a href=\"http://guides.rubyonrails.org/active\\_record\\_validations.html#numericality\" target=\"_blank\" rel=\"noopener\">http://guides.rubyonrails.org/active\\_record\\_validations.html#numericality</a></p>\n<hr>\n<p>ps：我正在持续更新我的魔改作品：<a href=\"https://fullstack.xinshengdaxue.com/works/21\" target=\"_blank\" rel=\"noopener\">NewJob</a>，喜欢的话，多多支持。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"如何自定义表单报错信息\"><a href=\"#如何自定义表单报错信息\" class=\"headerlink\" title=\"如何自定义表单报错信息\"></a>如何自定义表单报错信息</h2><p>在教材的job-listing中，很多输入框的报错信息都是默认的<code>can&#39;t be blank</code>，如下图</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lppii.png\" alt=\"\"></p>\n<p>我们可以修改一下，增加自定义的报错信息，如下图</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/nxkml.png\" alt=\"\"></p>\n<p>方法：</p>\n<p>打开<code>models/job.rb</code>，原先可能是长这个样子的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validates :title, presence: true</span><br><span class=\"line\">validates :wage_lower_bound, presence: true</span><br><span class=\"line\">validates :wage_upper_bound, presence: true</span><br><span class=\"line\">validates :wage_lower_bound, numericality: &#123; greater_than: 0 &#125;</span><br></pre></td></tr></table></figure>\n<p>把它改成这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validates :title, presence: &#123; message: &quot;请填写标题&quot; &#125;</span><br><span class=\"line\">validates :wage_upper_bound, presence: &#123; message: &quot;请填写最低薪水&quot; &#125;</span><br><span class=\"line\">validates :wage_lower_bound, presence: &#123; message: &quot;请填写最高薪水&quot; &#125;</span><br><span class=\"line\">validates :wage_lower_bound, numericality: &#123; greater_than: 0, message: &quot;最小薪水必须大于零&quot; &#125;</span><br></pre></td></tr></table></figure>\n<p>done!</p>\n<h2 id=\"如何限制薪水下限不能低于薪水上限\"><a href=\"#如何限制薪水下限不能低于薪水上限\" class=\"headerlink\" title=\"如何限制薪水下限不能低于薪水上限\"></a>如何限制薪水下限不能低于薪水上限</h2><p>方法：</p>\n<p>打开<code>models/job.rb</code>，加上一句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validates :wage_lower_bound, numericality: &#123; less_than: :wage_upper_bound, message: &quot;薪水下限不能低于薪水上限&quot; &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/wr46i.png\" alt=\"\"></p>\n<p>done!</p>\n<p>参考链接：<a href=\"http://guides.rubyonrails.org/active\\_record\\_validations.html#numericality\" target=\"_blank\" rel=\"noopener\">http://guides.rubyonrails.org/active\\_record\\_validations.html#numericality</a></p>\n<hr>\n<p>ps：我正在持续更新我的魔改作品：<a href=\"https://fullstack.xinshengdaxue.com/works/21\" target=\"_blank\" rel=\"noopener\">NewJob</a>，喜欢的话，多多支持。</p>\n"},{"title":"李笑来第一期全栈班演讲笔记","_content":"\n今天看了笑来老师在第一期全栈班上的演讲，从中学到了一些新的东西，也复习了一些在得到专栏里面学到的知识。\n\n## 人生三大坑\n**凑热闹**。大多数人都喜欢凑热闹，比如说现实生活中，在大街上经常会有人围观，但其实哪些事情跟他们一毛钱关系的没有，而且基本是全是坏事。比如说在网络上，一条某某明星出轨了之类的热点新闻，就可以引发无数人的关注，但其实，这些事情说白了就是：“关你屁事！”。\n\n**随大流**。大家都在做，所以你也跟着做。比如大家都在看热门新闻，你害怕不看新闻的话就跟他们没有共同话题，所以你也跟着看新闻。大家都在法定节假日休息，所以你也怎么做，但其实法定节假日这个东西，是国家用来规定企业的，而不是规定个人。你其实是可以选择去学习的，而不是跟着大众一起休息，不是吗？要是仔细算一下一年中节假日的总时长，然后在乘以10年，你就会惊讶的发现，原来只要把节假日利用起来，就可以比别人多出那么多的时间。只要方向正确，那么肯定可以比其他人更优秀，这不是很合理，很公平吗？\n\n**为别人操碎了心**。网上的喷子们看到一个不符合自己价值观的东西，就会去抨击，自己的事情不好好处理，净想着操别人的心，真是浪费时间。\n\n## coding只占20%\n一个全栈工程师，要想做出一个好的产品，最重要的并不是敲代码的能力，而是拥有好的想法，那么，好的想法需要什么技能？独立思考能力。所以，全栈工程师是一个综合性很强的职业，是通过观察发现社会问题，然后用代码解决生活问题。没错，工程师的最终目的其实只有一个：就是来解决问题的。\n\n## 注意力 \\> 时间 \\> 金钱\n人生最宝贵的东西是什么？你可能不会说是金钱，因为钱可以再生嘛。你更可能会说是时间。但其实并不是，最宝贵的东西其实是注意力。为什么这么说呢？\n\n每个人都只有24个小时，很多人都把注意力花在上面三个大坑里面，对于这些人而已，给再多的时间都是浪费，不是吗？\n\n把注意力放在一些和自己没半毛钱关系的花边新闻上，表面上看起来你是在消费新闻，但其实是你的注意力被媒体廉价地收割了。你的注意力只是变成了一个“阅读量”，最吃亏的其实是你自己。但大多数人好像都没有察觉这一点，似乎还沉浸其中，真是可怕！\n\n## 什么是全栈工程师？\n全栈工程师不是十八般武艺，样样精通，而是掌握了一些最少的必要的知识，然后用这些技能来实现自己的想法，至于精通，那是十几年以后的事情了。\n\n掌握必要的编程知识，并且能用来解决问题，这就是一名全栈工程师。在用的过程中，不断地补充其他的知识，根据知识的复利效应，早晚有一天，你就能学地很好的。不单单学编程是如此，学习其他的东西也都是这样的。\n\n## 一切的学习都是社交活动\n首先，假如你进入一个社群，里面的大多数人都很努力，那么你也会不自觉地跟着努力，因为心理学里面有一个“镜像神经元”，如果有人在我们面前表现得很好，而我们就希望和他做的一样。\n\n其次，把别人教会，帮别人改错，是最高效的学习方法。向别人讲述知识，表面上看起来你有点吃亏，因为你把时间花在了别人身上，但其实这对于你自己而言，帮助是巨大的。这确实是有点反常识，但这里面其实有个叫做“提取练习”的概念。意思是你主动地从大脑里面搜索知识，搜索的次数越频繁，你就记得越牢固。知道了这个科学原理，我们就很容易明白为什么说“教，是最好的学”。\n\n比如，在编程时，别人犯了一个错误，解决不了，然后来找你帮忙，你帮他解决了，那么，你就多了一份经验，因为你以后就不用自己去踩这个坑了。这就跟吸星大法一样，把别人的经验都吸收过来，这比一个人闭门造车不知道要高效到哪里去了，不是吗？\n\n## 金句\n- 用业余时间研究编程语言的历史，能帮助你了解很多东西。\n- 人生三大坑：莫名其妙的凑热闹，火急火燎的随大流，操碎别人的心。\n- 在中国，英语能力是程序员的天花板。\n- 一切的学习都是社交活动。\n- 编程语言用3个东西解决所有问题：顺序，分支，循环。\n- 真正的有效沟通是：我能让你理解你之前并不理解的东西，让你了解你之前并不了解的真相。\n- 该自卑时就要自卑，这样心理才健康。\n\n## 行动\n听了一大堆道理，最关键的一步是要整理出一系列“最小行动”，然后开始践行，不然就会真的成为那种“听了很多道理，却依然过不好这一生”的人。\n\n- 时刻警惕自己，切勿掉进人生三大坑。\n- 先学习最少必要知识，管它三七二十一，先用上再说。\n- 把注意力放在自身的成长上。\n- 技术文档只读英文的。\n- 交流，交流，再交流！\n- 用业余时间研究一下编程历史。","source":"_posts/2017-01-26-xiaolai-fullstack-share.md","raw":"---\ntitle: 李笑来第一期全栈班演讲笔记\ncategories: 随笔\n---\n\n今天看了笑来老师在第一期全栈班上的演讲，从中学到了一些新的东西，也复习了一些在得到专栏里面学到的知识。\n\n## 人生三大坑\n**凑热闹**。大多数人都喜欢凑热闹，比如说现实生活中，在大街上经常会有人围观，但其实哪些事情跟他们一毛钱关系的没有，而且基本是全是坏事。比如说在网络上，一条某某明星出轨了之类的热点新闻，就可以引发无数人的关注，但其实，这些事情说白了就是：“关你屁事！”。\n\n**随大流**。大家都在做，所以你也跟着做。比如大家都在看热门新闻，你害怕不看新闻的话就跟他们没有共同话题，所以你也跟着看新闻。大家都在法定节假日休息，所以你也怎么做，但其实法定节假日这个东西，是国家用来规定企业的，而不是规定个人。你其实是可以选择去学习的，而不是跟着大众一起休息，不是吗？要是仔细算一下一年中节假日的总时长，然后在乘以10年，你就会惊讶的发现，原来只要把节假日利用起来，就可以比别人多出那么多的时间。只要方向正确，那么肯定可以比其他人更优秀，这不是很合理，很公平吗？\n\n**为别人操碎了心**。网上的喷子们看到一个不符合自己价值观的东西，就会去抨击，自己的事情不好好处理，净想着操别人的心，真是浪费时间。\n\n## coding只占20%\n一个全栈工程师，要想做出一个好的产品，最重要的并不是敲代码的能力，而是拥有好的想法，那么，好的想法需要什么技能？独立思考能力。所以，全栈工程师是一个综合性很强的职业，是通过观察发现社会问题，然后用代码解决生活问题。没错，工程师的最终目的其实只有一个：就是来解决问题的。\n\n## 注意力 \\> 时间 \\> 金钱\n人生最宝贵的东西是什么？你可能不会说是金钱，因为钱可以再生嘛。你更可能会说是时间。但其实并不是，最宝贵的东西其实是注意力。为什么这么说呢？\n\n每个人都只有24个小时，很多人都把注意力花在上面三个大坑里面，对于这些人而已，给再多的时间都是浪费，不是吗？\n\n把注意力放在一些和自己没半毛钱关系的花边新闻上，表面上看起来你是在消费新闻，但其实是你的注意力被媒体廉价地收割了。你的注意力只是变成了一个“阅读量”，最吃亏的其实是你自己。但大多数人好像都没有察觉这一点，似乎还沉浸其中，真是可怕！\n\n## 什么是全栈工程师？\n全栈工程师不是十八般武艺，样样精通，而是掌握了一些最少的必要的知识，然后用这些技能来实现自己的想法，至于精通，那是十几年以后的事情了。\n\n掌握必要的编程知识，并且能用来解决问题，这就是一名全栈工程师。在用的过程中，不断地补充其他的知识，根据知识的复利效应，早晚有一天，你就能学地很好的。不单单学编程是如此，学习其他的东西也都是这样的。\n\n## 一切的学习都是社交活动\n首先，假如你进入一个社群，里面的大多数人都很努力，那么你也会不自觉地跟着努力，因为心理学里面有一个“镜像神经元”，如果有人在我们面前表现得很好，而我们就希望和他做的一样。\n\n其次，把别人教会，帮别人改错，是最高效的学习方法。向别人讲述知识，表面上看起来你有点吃亏，因为你把时间花在了别人身上，但其实这对于你自己而言，帮助是巨大的。这确实是有点反常识，但这里面其实有个叫做“提取练习”的概念。意思是你主动地从大脑里面搜索知识，搜索的次数越频繁，你就记得越牢固。知道了这个科学原理，我们就很容易明白为什么说“教，是最好的学”。\n\n比如，在编程时，别人犯了一个错误，解决不了，然后来找你帮忙，你帮他解决了，那么，你就多了一份经验，因为你以后就不用自己去踩这个坑了。这就跟吸星大法一样，把别人的经验都吸收过来，这比一个人闭门造车不知道要高效到哪里去了，不是吗？\n\n## 金句\n- 用业余时间研究编程语言的历史，能帮助你了解很多东西。\n- 人生三大坑：莫名其妙的凑热闹，火急火燎的随大流，操碎别人的心。\n- 在中国，英语能力是程序员的天花板。\n- 一切的学习都是社交活动。\n- 编程语言用3个东西解决所有问题：顺序，分支，循环。\n- 真正的有效沟通是：我能让你理解你之前并不理解的东西，让你了解你之前并不了解的真相。\n- 该自卑时就要自卑，这样心理才健康。\n\n## 行动\n听了一大堆道理，最关键的一步是要整理出一系列“最小行动”，然后开始践行，不然就会真的成为那种“听了很多道理，却依然过不好这一生”的人。\n\n- 时刻警惕自己，切勿掉进人生三大坑。\n- 先学习最少必要知识，管它三七二十一，先用上再说。\n- 把注意力放在自身的成长上。\n- 技术文档只读英文的。\n- 交流，交流，再交流！\n- 用业余时间研究一下编程历史。","slug":"2017-01-26-xiaolai-fullstack-share","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicct005mfsonnb9z9uj6","content":"<p>今天看了笑来老师在第一期全栈班上的演讲，从中学到了一些新的东西，也复习了一些在得到专栏里面学到的知识。</p>\n<h2 id=\"人生三大坑\"><a href=\"#人生三大坑\" class=\"headerlink\" title=\"人生三大坑\"></a>人生三大坑</h2><p><strong>凑热闹</strong>。大多数人都喜欢凑热闹，比如说现实生活中，在大街上经常会有人围观，但其实哪些事情跟他们一毛钱关系的没有，而且基本是全是坏事。比如说在网络上，一条某某明星出轨了之类的热点新闻，就可以引发无数人的关注，但其实，这些事情说白了就是：“关你屁事！”。</p>\n<p><strong>随大流</strong>。大家都在做，所以你也跟着做。比如大家都在看热门新闻，你害怕不看新闻的话就跟他们没有共同话题，所以你也跟着看新闻。大家都在法定节假日休息，所以你也怎么做，但其实法定节假日这个东西，是国家用来规定企业的，而不是规定个人。你其实是可以选择去学习的，而不是跟着大众一起休息，不是吗？要是仔细算一下一年中节假日的总时长，然后在乘以10年，你就会惊讶的发现，原来只要把节假日利用起来，就可以比别人多出那么多的时间。只要方向正确，那么肯定可以比其他人更优秀，这不是很合理，很公平吗？</p>\n<p><strong>为别人操碎了心</strong>。网上的喷子们看到一个不符合自己价值观的东西，就会去抨击，自己的事情不好好处理，净想着操别人的心，真是浪费时间。</p>\n<h2 id=\"coding只占20\"><a href=\"#coding只占20\" class=\"headerlink\" title=\"coding只占20%\"></a>coding只占20%</h2><p>一个全栈工程师，要想做出一个好的产品，最重要的并不是敲代码的能力，而是拥有好的想法，那么，好的想法需要什么技能？独立思考能力。所以，全栈工程师是一个综合性很强的职业，是通过观察发现社会问题，然后用代码解决生活问题。没错，工程师的最终目的其实只有一个：就是来解决问题的。</p>\n<h2 id=\"注意力-时间-金钱\"><a href=\"#注意力-时间-金钱\" class=\"headerlink\" title=\"注意力 > 时间 > 金钱\"></a>注意力 > 时间 > 金钱</h2><p>人生最宝贵的东西是什么？你可能不会说是金钱，因为钱可以再生嘛。你更可能会说是时间。但其实并不是，最宝贵的东西其实是注意力。为什么这么说呢？</p>\n<p>每个人都只有24个小时，很多人都把注意力花在上面三个大坑里面，对于这些人而已，给再多的时间都是浪费，不是吗？</p>\n<p>把注意力放在一些和自己没半毛钱关系的花边新闻上，表面上看起来你是在消费新闻，但其实是你的注意力被媒体廉价地收割了。你的注意力只是变成了一个“阅读量”，最吃亏的其实是你自己。但大多数人好像都没有察觉这一点，似乎还沉浸其中，真是可怕！</p>\n<h2 id=\"什么是全栈工程师？\"><a href=\"#什么是全栈工程师？\" class=\"headerlink\" title=\"什么是全栈工程师？\"></a>什么是全栈工程师？</h2><p>全栈工程师不是十八般武艺，样样精通，而是掌握了一些最少的必要的知识，然后用这些技能来实现自己的想法，至于精通，那是十几年以后的事情了。</p>\n<p>掌握必要的编程知识，并且能用来解决问题，这就是一名全栈工程师。在用的过程中，不断地补充其他的知识，根据知识的复利效应，早晚有一天，你就能学地很好的。不单单学编程是如此，学习其他的东西也都是这样的。</p>\n<h2 id=\"一切的学习都是社交活动\"><a href=\"#一切的学习都是社交活动\" class=\"headerlink\" title=\"一切的学习都是社交活动\"></a>一切的学习都是社交活动</h2><p>首先，假如你进入一个社群，里面的大多数人都很努力，那么你也会不自觉地跟着努力，因为心理学里面有一个“镜像神经元”，如果有人在我们面前表现得很好，而我们就希望和他做的一样。</p>\n<p>其次，把别人教会，帮别人改错，是最高效的学习方法。向别人讲述知识，表面上看起来你有点吃亏，因为你把时间花在了别人身上，但其实这对于你自己而言，帮助是巨大的。这确实是有点反常识，但这里面其实有个叫做“提取练习”的概念。意思是你主动地从大脑里面搜索知识，搜索的次数越频繁，你就记得越牢固。知道了这个科学原理，我们就很容易明白为什么说“教，是最好的学”。</p>\n<p>比如，在编程时，别人犯了一个错误，解决不了，然后来找你帮忙，你帮他解决了，那么，你就多了一份经验，因为你以后就不用自己去踩这个坑了。这就跟吸星大法一样，把别人的经验都吸收过来，这比一个人闭门造车不知道要高效到哪里去了，不是吗？</p>\n<h2 id=\"金句\"><a href=\"#金句\" class=\"headerlink\" title=\"金句\"></a>金句</h2><ul>\n<li>用业余时间研究编程语言的历史，能帮助你了解很多东西。</li>\n<li>人生三大坑：莫名其妙的凑热闹，火急火燎的随大流，操碎别人的心。</li>\n<li>在中国，英语能力是程序员的天花板。</li>\n<li>一切的学习都是社交活动。</li>\n<li>编程语言用3个东西解决所有问题：顺序，分支，循环。</li>\n<li>真正的有效沟通是：我能让你理解你之前并不理解的东西，让你了解你之前并不了解的真相。</li>\n<li>该自卑时就要自卑，这样心理才健康。</li>\n</ul>\n<h2 id=\"行动\"><a href=\"#行动\" class=\"headerlink\" title=\"行动\"></a>行动</h2><p>听了一大堆道理，最关键的一步是要整理出一系列“最小行动”，然后开始践行，不然就会真的成为那种“听了很多道理，却依然过不好这一生”的人。</p>\n<ul>\n<li>时刻警惕自己，切勿掉进人生三大坑。</li>\n<li>先学习最少必要知识，管它三七二十一，先用上再说。</li>\n<li>把注意力放在自身的成长上。</li>\n<li>技术文档只读英文的。</li>\n<li>交流，交流，再交流！</li>\n<li>用业余时间研究一下编程历史。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>今天看了笑来老师在第一期全栈班上的演讲，从中学到了一些新的东西，也复习了一些在得到专栏里面学到的知识。</p>\n<h2 id=\"人生三大坑\"><a href=\"#人生三大坑\" class=\"headerlink\" title=\"人生三大坑\"></a>人生三大坑</h2><p><strong>凑热闹</strong>。大多数人都喜欢凑热闹，比如说现实生活中，在大街上经常会有人围观，但其实哪些事情跟他们一毛钱关系的没有，而且基本是全是坏事。比如说在网络上，一条某某明星出轨了之类的热点新闻，就可以引发无数人的关注，但其实，这些事情说白了就是：“关你屁事！”。</p>\n<p><strong>随大流</strong>。大家都在做，所以你也跟着做。比如大家都在看热门新闻，你害怕不看新闻的话就跟他们没有共同话题，所以你也跟着看新闻。大家都在法定节假日休息，所以你也怎么做，但其实法定节假日这个东西，是国家用来规定企业的，而不是规定个人。你其实是可以选择去学习的，而不是跟着大众一起休息，不是吗？要是仔细算一下一年中节假日的总时长，然后在乘以10年，你就会惊讶的发现，原来只要把节假日利用起来，就可以比别人多出那么多的时间。只要方向正确，那么肯定可以比其他人更优秀，这不是很合理，很公平吗？</p>\n<p><strong>为别人操碎了心</strong>。网上的喷子们看到一个不符合自己价值观的东西，就会去抨击，自己的事情不好好处理，净想着操别人的心，真是浪费时间。</p>\n<h2 id=\"coding只占20\"><a href=\"#coding只占20\" class=\"headerlink\" title=\"coding只占20%\"></a>coding只占20%</h2><p>一个全栈工程师，要想做出一个好的产品，最重要的并不是敲代码的能力，而是拥有好的想法，那么，好的想法需要什么技能？独立思考能力。所以，全栈工程师是一个综合性很强的职业，是通过观察发现社会问题，然后用代码解决生活问题。没错，工程师的最终目的其实只有一个：就是来解决问题的。</p>\n<h2 id=\"注意力-时间-金钱\"><a href=\"#注意力-时间-金钱\" class=\"headerlink\" title=\"注意力 > 时间 > 金钱\"></a>注意力 > 时间 > 金钱</h2><p>人生最宝贵的东西是什么？你可能不会说是金钱，因为钱可以再生嘛。你更可能会说是时间。但其实并不是，最宝贵的东西其实是注意力。为什么这么说呢？</p>\n<p>每个人都只有24个小时，很多人都把注意力花在上面三个大坑里面，对于这些人而已，给再多的时间都是浪费，不是吗？</p>\n<p>把注意力放在一些和自己没半毛钱关系的花边新闻上，表面上看起来你是在消费新闻，但其实是你的注意力被媒体廉价地收割了。你的注意力只是变成了一个“阅读量”，最吃亏的其实是你自己。但大多数人好像都没有察觉这一点，似乎还沉浸其中，真是可怕！</p>\n<h2 id=\"什么是全栈工程师？\"><a href=\"#什么是全栈工程师？\" class=\"headerlink\" title=\"什么是全栈工程师？\"></a>什么是全栈工程师？</h2><p>全栈工程师不是十八般武艺，样样精通，而是掌握了一些最少的必要的知识，然后用这些技能来实现自己的想法，至于精通，那是十几年以后的事情了。</p>\n<p>掌握必要的编程知识，并且能用来解决问题，这就是一名全栈工程师。在用的过程中，不断地补充其他的知识，根据知识的复利效应，早晚有一天，你就能学地很好的。不单单学编程是如此，学习其他的东西也都是这样的。</p>\n<h2 id=\"一切的学习都是社交活动\"><a href=\"#一切的学习都是社交活动\" class=\"headerlink\" title=\"一切的学习都是社交活动\"></a>一切的学习都是社交活动</h2><p>首先，假如你进入一个社群，里面的大多数人都很努力，那么你也会不自觉地跟着努力，因为心理学里面有一个“镜像神经元”，如果有人在我们面前表现得很好，而我们就希望和他做的一样。</p>\n<p>其次，把别人教会，帮别人改错，是最高效的学习方法。向别人讲述知识，表面上看起来你有点吃亏，因为你把时间花在了别人身上，但其实这对于你自己而言，帮助是巨大的。这确实是有点反常识，但这里面其实有个叫做“提取练习”的概念。意思是你主动地从大脑里面搜索知识，搜索的次数越频繁，你就记得越牢固。知道了这个科学原理，我们就很容易明白为什么说“教，是最好的学”。</p>\n<p>比如，在编程时，别人犯了一个错误，解决不了，然后来找你帮忙，你帮他解决了，那么，你就多了一份经验，因为你以后就不用自己去踩这个坑了。这就跟吸星大法一样，把别人的经验都吸收过来，这比一个人闭门造车不知道要高效到哪里去了，不是吗？</p>\n<h2 id=\"金句\"><a href=\"#金句\" class=\"headerlink\" title=\"金句\"></a>金句</h2><ul>\n<li>用业余时间研究编程语言的历史，能帮助你了解很多东西。</li>\n<li>人生三大坑：莫名其妙的凑热闹，火急火燎的随大流，操碎别人的心。</li>\n<li>在中国，英语能力是程序员的天花板。</li>\n<li>一切的学习都是社交活动。</li>\n<li>编程语言用3个东西解决所有问题：顺序，分支，循环。</li>\n<li>真正的有效沟通是：我能让你理解你之前并不理解的东西，让你了解你之前并不了解的真相。</li>\n<li>该自卑时就要自卑，这样心理才健康。</li>\n</ul>\n<h2 id=\"行动\"><a href=\"#行动\" class=\"headerlink\" title=\"行动\"></a>行动</h2><p>听了一大堆道理，最关键的一步是要整理出一系列“最小行动”，然后开始践行，不然就会真的成为那种“听了很多道理，却依然过不好这一生”的人。</p>\n<ul>\n<li>时刻警惕自己，切勿掉进人生三大坑。</li>\n<li>先学习最少必要知识，管它三七二十一，先用上再说。</li>\n<li>把注意力放在自身的成长上。</li>\n<li>技术文档只读英文的。</li>\n<li>交流，交流，再交流！</li>\n<li>用业余时间研究一下编程历史。</li>\n</ul>\n"},{"title":"布局解决方案之「居中布局」","_content":"\n居中布局在网页中很常见，出现频率极高 ，所以有必要总结一下所有居中布局的方法。主要分为3种情况：\n\n- 水平居中\n- 垂直居中\n- 水平居中 + 垂直居中\n\n下面的方法同样适用于**父子元素的高度、宽度都不确定**的情况。\n\n## 水平居中\n\n### inline-block\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ygpVKd\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】display:inline-block\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ygpVKd/\">【水平居中】display:inline-block</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：兼容性好\n- 缺点：child的文本也会居中\n\n### table\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"VPymxz\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】display:table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/VPymxz/\">【水平居中】display:table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：只设置child，不关心parent\n\n### absolute+transform\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"VPymBz\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】absolute+transform\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/VPymBz/\">【水平居中】absolute+transform</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：不会对其他子元素产生影响\n- 缺点：低版本浏览器不支持，高版本浏览器要加前缀\n\n### flex + justify-content\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyYVeo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】flex + justify-content\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyYVeo/\">【水平居中】flex + justify-content</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：只需设置parent\n- 缺点：低版本浏览器不支持\n\n## 垂直居中\n\n### table-cell + vertical-align\n\n<p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"apEBMB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"垂直居中: table-cell + vertical-align\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/apEBMB/\">垂直居中: table-cell + vertical-align</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：兼容性好\n\n### absolute + transform\n\n<p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"xgpReq\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"垂直居中: absolute + transform\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgpReq/\">垂直居中: absolute + transform</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：不会对其他子元素产生影响\n- 缺点：低版本浏览器不支持，高版本浏览器要加前缀\n\n###  flex + align-items\n\n<p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"egyBaJ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"垂直居中: flex + align-items\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/egyBaJ/\">垂直居中: flex + align-items</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：只需设置parent\n- 缺点：低版本浏览器不支持\n\n## 水平居中 + 垂直居中\n\n### inline-block + text-align + table-cell + vertical-align\n\n<p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"GryNbB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"水平垂直居中: inline-block + text-align + table-cell + vertical-align\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryNbB/\">水平垂直居中: inline-block + text-align + table-cell + vertical-align</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n### absolute + transform\n\n<p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"xgpgKd\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"水平垂直居中: absolute + transform\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgpgKd/\">水平垂直居中: absolute + transform</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n### 补充：inline-block和table兼容Ie6、7的方法\n\n- display:inline-block -> display:inline; zoom: 1\n- display:table -> 把结构换成table\n","source":"_posts/2017-01-30-align-center-middle.md","raw":"---\ntitle: 布局解决方案之「居中布局」\ncategories: CSS\n---\n\n居中布局在网页中很常见，出现频率极高 ，所以有必要总结一下所有居中布局的方法。主要分为3种情况：\n\n- 水平居中\n- 垂直居中\n- 水平居中 + 垂直居中\n\n下面的方法同样适用于**父子元素的高度、宽度都不确定**的情况。\n\n## 水平居中\n\n### inline-block\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ygpVKd\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】display:inline-block\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ygpVKd/\">【水平居中】display:inline-block</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：兼容性好\n- 缺点：child的文本也会居中\n\n### table\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"VPymxz\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】display:table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/VPymxz/\">【水平居中】display:table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：只设置child，不关心parent\n\n### absolute+transform\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"VPymBz\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】absolute+transform\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/VPymBz/\">【水平居中】absolute+transform</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：不会对其他子元素产生影响\n- 缺点：低版本浏览器不支持，高版本浏览器要加前缀\n\n### flex + justify-content\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyYVeo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】flex + justify-content\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyYVeo/\">【水平居中】flex + justify-content</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：只需设置parent\n- 缺点：低版本浏览器不支持\n\n## 垂直居中\n\n### table-cell + vertical-align\n\n<p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"apEBMB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"垂直居中: table-cell + vertical-align\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/apEBMB/\">垂直居中: table-cell + vertical-align</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：兼容性好\n\n### absolute + transform\n\n<p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"xgpReq\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"垂直居中: absolute + transform\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgpReq/\">垂直居中: absolute + transform</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：不会对其他子元素产生影响\n- 缺点：低版本浏览器不支持，高版本浏览器要加前缀\n\n###  flex + align-items\n\n<p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"egyBaJ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"垂直居中: flex + align-items\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/egyBaJ/\">垂直居中: flex + align-items</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：只需设置parent\n- 缺点：低版本浏览器不支持\n\n## 水平居中 + 垂直居中\n\n### inline-block + text-align + table-cell + vertical-align\n\n<p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"GryNbB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"水平垂直居中: inline-block + text-align + table-cell + vertical-align\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryNbB/\">水平垂直居中: inline-block + text-align + table-cell + vertical-align</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n### absolute + transform\n\n<p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"xgpgKd\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"水平垂直居中: absolute + transform\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgpgKd/\">水平垂直居中: absolute + transform</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n### 补充：inline-block和table兼容Ie6、7的方法\n\n- display:inline-block -> display:inline; zoom: 1\n- display:table -> 把结构换成table\n","slug":"2017-01-30-align-center-middle","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccu005ofson5ji3qfp1","content":"<p>居中布局在网页中很常见，出现频率极高 ，所以有必要总结一下所有居中布局的方法。主要分为3种情况：</p>\n<ul>\n<li>水平居中</li>\n<li>垂直居中</li>\n<li>水平居中 + 垂直居中</li>\n</ul>\n<p>下面的方法同样适用于<strong>父子元素的高度、宽度都不确定</strong>的情况。</p>\n<h2 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h2><h3 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ygpVKd\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】display:inline-block\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ygpVKd/\" target=\"_blank\" rel=\"noopener\">【水平居中】display:inline-block</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：兼容性好</li>\n<li>缺点：child的文本也会居中</li>\n</ul>\n<h3 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"VPymxz\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】display:table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/VPymxz/\" target=\"_blank\" rel=\"noopener\">【水平居中】display:table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：只设置child，不关心parent</li>\n</ul>\n<h3 id=\"absolute-transform\"><a href=\"#absolute-transform\" class=\"headerlink\" title=\"absolute+transform\"></a>absolute+transform</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"VPymBz\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】absolute+transform\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/VPymBz/\" target=\"_blank\" rel=\"noopener\">【水平居中】absolute+transform</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：不会对其他子元素产生影响</li>\n<li>缺点：低版本浏览器不支持，高版本浏览器要加前缀</li>\n</ul>\n<h3 id=\"flex-justify-content\"><a href=\"#flex-justify-content\" class=\"headerlink\" title=\"flex + justify-content\"></a>flex + justify-content</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyYVeo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】flex + justify-content\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyYVeo/\" target=\"_blank\" rel=\"noopener\">【水平居中】flex + justify-content</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：只需设置parent</li>\n<li>缺点：低版本浏览器不支持</li>\n</ul>\n<h2 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h2><h3 id=\"table-cell-vertical-align\"><a href=\"#table-cell-vertical-align\" class=\"headerlink\" title=\"table-cell + vertical-align\"></a>table-cell + vertical-align</h3><p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"apEBMB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"垂直居中: table-cell + vertical-align\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/apEBMB/\" target=\"_blank\" rel=\"noopener\">垂直居中: table-cell + vertical-align</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：兼容性好</li>\n</ul>\n<h3 id=\"absolute-transform-1\"><a href=\"#absolute-transform-1\" class=\"headerlink\" title=\"absolute + transform\"></a>absolute + transform</h3><p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"xgpReq\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"垂直居中: absolute + transform\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgpReq/\" target=\"_blank\" rel=\"noopener\">垂直居中: absolute + transform</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：不会对其他子元素产生影响</li>\n<li>缺点：低版本浏览器不支持，高版本浏览器要加前缀</li>\n</ul>\n<h3 id=\"flex-align-items\"><a href=\"#flex-align-items\" class=\"headerlink\" title=\"flex + align-items\"></a>flex + align-items</h3><p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"egyBaJ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"垂直居中: flex + align-items\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/egyBaJ/\" target=\"_blank\" rel=\"noopener\">垂直居中: flex + align-items</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：只需设置parent</li>\n<li>缺点：低版本浏览器不支持</li>\n</ul>\n<h2 id=\"水平居中-垂直居中\"><a href=\"#水平居中-垂直居中\" class=\"headerlink\" title=\"水平居中 + 垂直居中\"></a>水平居中 + 垂直居中</h2><h3 id=\"inline-block-text-align-table-cell-vertical-align\"><a href=\"#inline-block-text-align-table-cell-vertical-align\" class=\"headerlink\" title=\"inline-block + text-align + table-cell + vertical-align\"></a>inline-block + text-align + table-cell + vertical-align</h3><p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"GryNbB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"水平垂直居中: inline-block + text-align + table-cell + vertical-align\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryNbB/\" target=\"_blank\" rel=\"noopener\">水平垂直居中: inline-block + text-align + table-cell + vertical-align</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h3 id=\"absolute-transform-2\"><a href=\"#absolute-transform-2\" class=\"headerlink\" title=\"absolute + transform\"></a>absolute + transform</h3><p></p><p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"xgpgKd\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"水平垂直居中: absolute + transform\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgpgKd/\" target=\"_blank\" rel=\"noopener\">水平垂直居中: absolute + transform</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h3 id=\"补充：inline-block和table兼容Ie6、7的方法\"><a href=\"#补充：inline-block和table兼容Ie6、7的方法\" class=\"headerlink\" title=\"补充：inline-block和table兼容Ie6、7的方法\"></a>补充：inline-block和table兼容Ie6、7的方法</h3><ul>\n<li>display:inline-block -&gt; display:inline; zoom: 1</li>\n<li>display:table -&gt; 把结构换成table</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>居中布局在网页中很常见，出现频率极高 ，所以有必要总结一下所有居中布局的方法。主要分为3种情况：</p>\n<ul>\n<li>水平居中</li>\n<li>垂直居中</li>\n<li>水平居中 + 垂直居中</li>\n</ul>\n<p>下面的方法同样适用于<strong>父子元素的高度、宽度都不确定</strong>的情况。</p>\n<h2 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h2><h3 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ygpVKd\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】display:inline-block\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ygpVKd/\" target=\"_blank\" rel=\"noopener\">【水平居中】display:inline-block</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：兼容性好</li>\n<li>缺点：child的文本也会居中</li>\n</ul>\n<h3 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"VPymxz\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】display:table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/VPymxz/\" target=\"_blank\" rel=\"noopener\">【水平居中】display:table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：只设置child，不关心parent</li>\n</ul>\n<h3 id=\"absolute-transform\"><a href=\"#absolute-transform\" class=\"headerlink\" title=\"absolute+transform\"></a>absolute+transform</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"VPymBz\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】absolute+transform\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/VPymBz/\" target=\"_blank\" rel=\"noopener\">【水平居中】absolute+transform</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：不会对其他子元素产生影响</li>\n<li>缺点：低版本浏览器不支持，高版本浏览器要加前缀</li>\n</ul>\n<h3 id=\"flex-justify-content\"><a href=\"#flex-justify-content\" class=\"headerlink\" title=\"flex + justify-content\"></a>flex + justify-content</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyYVeo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【水平居中】flex + justify-content\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyYVeo/\" target=\"_blank\" rel=\"noopener\">【水平居中】flex + justify-content</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：只需设置parent</li>\n<li>缺点：低版本浏览器不支持</li>\n</ul>\n<h2 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h2><h3 id=\"table-cell-vertical-align\"><a href=\"#table-cell-vertical-align\" class=\"headerlink\" title=\"table-cell + vertical-align\"></a>table-cell + vertical-align</h3><p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"apEBMB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"垂直居中: table-cell + vertical-align\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/apEBMB/\" target=\"_blank\" rel=\"noopener\">垂直居中: table-cell + vertical-align</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：兼容性好</li>\n</ul>\n<h3 id=\"absolute-transform-1\"><a href=\"#absolute-transform-1\" class=\"headerlink\" title=\"absolute + transform\"></a>absolute + transform</h3><p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"xgpReq\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"垂直居中: absolute + transform\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgpReq/\" target=\"_blank\" rel=\"noopener\">垂直居中: absolute + transform</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：不会对其他子元素产生影响</li>\n<li>缺点：低版本浏览器不支持，高版本浏览器要加前缀</li>\n</ul>\n<h3 id=\"flex-align-items\"><a href=\"#flex-align-items\" class=\"headerlink\" title=\"flex + align-items\"></a>flex + align-items</h3><p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"egyBaJ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"垂直居中: flex + align-items\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/egyBaJ/\" target=\"_blank\" rel=\"noopener\">垂直居中: flex + align-items</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：只需设置parent</li>\n<li>缺点：低版本浏览器不支持</li>\n</ul>\n<h2 id=\"水平居中-垂直居中\"><a href=\"#水平居中-垂直居中\" class=\"headerlink\" title=\"水平居中 + 垂直居中\"></a>水平居中 + 垂直居中</h2><h3 id=\"inline-block-text-align-table-cell-vertical-align\"><a href=\"#inline-block-text-align-table-cell-vertical-align\" class=\"headerlink\" title=\"inline-block + text-align + table-cell + vertical-align\"></a>inline-block + text-align + table-cell + vertical-align</h3><p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"GryNbB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"水平垂直居中: inline-block + text-align + table-cell + vertical-align\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryNbB/\" target=\"_blank\" rel=\"noopener\">水平垂直居中: inline-block + text-align + table-cell + vertical-align</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h3 id=\"absolute-transform-2\"><a href=\"#absolute-transform-2\" class=\"headerlink\" title=\"absolute + transform\"></a>absolute + transform</h3><p></p><p data-height=\"365\" data-theme-id=\"0\" data-slug-hash=\"xgpgKd\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"水平垂直居中: absolute + transform\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgpgKd/\" target=\"_blank\" rel=\"noopener\">水平垂直居中: absolute + transform</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h3 id=\"补充：inline-block和table兼容Ie6、7的方法\"><a href=\"#补充：inline-block和table兼容Ie6、7的方法\" class=\"headerlink\" title=\"补充：inline-block和table兼容Ie6、7的方法\"></a>补充：inline-block和table兼容Ie6、7的方法</h3><ul>\n<li>display:inline-block -&gt; display:inline; zoom: 1</li>\n<li>display:table -&gt; 把结构换成table</li>\n</ul>\n"},{"title":"布局解决方案之「全屏布局」","_content":"\n## 场景一：定宽定高(单位px)\n\n![](http://oggx6lf7f.bkt.clouddn.com/m7vzd.png)\n\n### position\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GryvyZ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：position\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryvyZ/\">全屏布局：position</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GryvBj\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryvBj/\">全屏布局：flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## 场景二：定宽定高（\u0010单位%）\n\n![](http://oggx6lf7f.bkt.clouddn.com/tplio.png)\n\n### position\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GryvzN\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：position（%）\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryvzN/\">全屏布局：position（%）</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"Gryver\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：flex（%）\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/Gryver/\">全屏布局：flex（%）</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## 场景三：自适应\n\n![](http://oggx6lf7f.bkt.clouddn.com/zql6f.png)\n\n### position\n\n无法实现，必须定宽定高。\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"dNJzBG\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：flex（自适应）\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/dNJzBG/\">全屏布局：flex（自适应）</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## position和flex方案优缺点比较\n\n![](http://oggx6lf7f.bkt.clouddn.com/3gt4y.png)\n\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n","source":"_posts/2017-01-30-fullscreen-layout.md","raw":"---\ntitle: 布局解决方案之「全屏布局」\ncategories: CSS\n---\n\n## 场景一：定宽定高(单位px)\n\n![](http://oggx6lf7f.bkt.clouddn.com/m7vzd.png)\n\n### position\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GryvyZ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：position\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryvyZ/\">全屏布局：position</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GryvBj\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryvBj/\">全屏布局：flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## 场景二：定宽定高（\u0010单位%）\n\n![](http://oggx6lf7f.bkt.clouddn.com/tplio.png)\n\n### position\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GryvzN\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：position（%）\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryvzN/\">全屏布局：position（%）</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"Gryver\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：flex（%）\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/Gryver/\">全屏布局：flex（%）</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## 场景三：自适应\n\n![](http://oggx6lf7f.bkt.clouddn.com/zql6f.png)\n\n### position\n\n无法实现，必须定宽定高。\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"dNJzBG\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：flex（自适应）\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/dNJzBG/\">全屏布局：flex（自适应）</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## position和flex方案优缺点比较\n\n![](http://oggx6lf7f.bkt.clouddn.com/3gt4y.png)\n\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n","slug":"2017-01-30-fullscreen-layout","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccv005qfsoncea0viz2","content":"<h2 id=\"场景一：定宽定高-单位px\"><a href=\"#场景一：定宽定高-单位px\" class=\"headerlink\" title=\"场景一：定宽定高(单位px)\"></a>场景一：定宽定高(单位px)</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/m7vzd.png\" alt=\"\"></p>\n<h3 id=\"position\"><a href=\"#position\" class=\"headerlink\" title=\"position\"></a>position</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GryvyZ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：position\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryvyZ/\" target=\"_blank\" rel=\"noopener\">全屏布局：position</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GryvBj\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryvBj/\" target=\"_blank\" rel=\"noopener\">全屏布局：flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"场景二：定宽定高（单位-）\"><a href=\"#场景二：定宽定高（单位-）\" class=\"headerlink\" title=\"场景二：定宽定高（\u0010单位%）\"></a>场景二：定宽定高（\u0010单位%）</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/tplio.png\" alt=\"\"></p>\n<h3 id=\"position-1\"><a href=\"#position-1\" class=\"headerlink\" title=\"position\"></a>position</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GryvzN\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：position（%）\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryvzN/\" target=\"_blank\" rel=\"noopener\">全屏布局：position（%）</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h3 id=\"flex-1\"><a href=\"#flex-1\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"Gryver\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：flex（%）\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/Gryver/\" target=\"_blank\" rel=\"noopener\">全屏布局：flex（%）</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"场景三：自适应\"><a href=\"#场景三：自适应\" class=\"headerlink\" title=\"场景三：自适应\"></a>场景三：自适应</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/zql6f.png\" alt=\"\"></p>\n<h3 id=\"position-2\"><a href=\"#position-2\" class=\"headerlink\" title=\"position\"></a>position</h3><p>无法实现，必须定宽定高。</p>\n<h3 id=\"flex-2\"><a href=\"#flex-2\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"dNJzBG\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：flex（自适应）\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/dNJzBG/\" target=\"_blank\" rel=\"noopener\">全屏布局：flex（自适应）</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"position和flex方案优缺点比较\"><a href=\"#position和flex方案优缺点比较\" class=\"headerlink\" title=\"position和flex方案优缺点比较\"></a>position和flex方案优缺点比较</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/3gt4y.png\" alt=\"\"></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"场景一：定宽定高-单位px\"><a href=\"#场景一：定宽定高-单位px\" class=\"headerlink\" title=\"场景一：定宽定高(单位px)\"></a>场景一：定宽定高(单位px)</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/m7vzd.png\" alt=\"\"></p>\n<h3 id=\"position\"><a href=\"#position\" class=\"headerlink\" title=\"position\"></a>position</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GryvyZ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：position\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryvyZ/\" target=\"_blank\" rel=\"noopener\">全屏布局：position</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GryvBj\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryvBj/\" target=\"_blank\" rel=\"noopener\">全屏布局：flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"场景二：定宽定高（单位-）\"><a href=\"#场景二：定宽定高（单位-）\" class=\"headerlink\" title=\"场景二：定宽定高（\u0010单位%）\"></a>场景二：定宽定高（\u0010单位%）</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/tplio.png\" alt=\"\"></p>\n<h3 id=\"position-1\"><a href=\"#position-1\" class=\"headerlink\" title=\"position\"></a>position</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GryvzN\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：position（%）\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/GryvzN/\" target=\"_blank\" rel=\"noopener\">全屏布局：position（%）</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h3 id=\"flex-1\"><a href=\"#flex-1\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"Gryver\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：flex（%）\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/Gryver/\" target=\"_blank\" rel=\"noopener\">全屏布局：flex（%）</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"场景三：自适应\"><a href=\"#场景三：自适应\" class=\"headerlink\" title=\"场景三：自适应\"></a>场景三：自适应</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/zql6f.png\" alt=\"\"></p>\n<h3 id=\"position-2\"><a href=\"#position-2\" class=\"headerlink\" title=\"position\"></a>position</h3><p>无法实现，必须定宽定高。</p>\n<h3 id=\"flex-2\"><a href=\"#flex-2\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"dNJzBG\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"全屏布局：flex（自适应）\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/dNJzBG/\" target=\"_blank\" rel=\"noopener\">全屏布局：flex（自适应）</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"position和flex方案优缺点比较\"><a href=\"#position和flex方案优缺点比较\" class=\"headerlink\" title=\"position和flex方案优缺点比较\"></a>position和flex方案优缺点比较</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/3gt4y.png\" alt=\"\"></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n"},{"title":"布局解决方案之「多列布局」","_content":"\n常见的页面布局有：两列布局，多列布局，等分布局，等高布局，然后再加上一些自适应布局。\n\n## 定宽 + 自适应\n\n![](http://oggx6lf7f.bkt.clouddn.com/bpt48.png)\n\n### float + margin\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LxexrB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:float + margin\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/LxexrB/\">两列布局:float + margin</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：简单，很容易理解\n- 缺点：IE6有一些bug\n\n### float + margin + (fix)\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MJrJLo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:float + margin + (fix)\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/MJrJLo/\">两列布局:float + margin + (fix)</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：简单，很容易理解，不存在兼容性问题\n- 缺点：1. 你试着选中left的文案就会发现，left的文案无法被选中，因为left被right遮住，解决方法是用`position: relative`提高left的层级。\n\n### float + overflow\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyYyoy\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:float + overflow\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyYyoy/\">两列布局:float + overflow</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：写法简单\n\n### table\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgpgqw\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgpgqw/\">两列布局:table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 缺点：不能设置margin，只能设置padding，代码比较多。\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LxeWPM\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/LxeWPM/\">两列布局:flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：功能强大！代码少\n- 缺点：内部标签太多的话会有性能问题，所以只能用来做小范围的布局。\n\n\n\n## 定宽 + 定宽 + 自适应\n\n![](http://oggx6lf7f.bkt.clouddn.com/ywv4h.png)\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ggompp\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"多列布局\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ggompp/\">多列布局</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## 不定宽 + 自适应\n\n![](http://oggx6lf7f.bkt.clouddn.com/9k6nz.png)\n\n### float + overflow\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"WRdprR\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【不定宽 + 自适应】float + overflow\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/WRdprR/\">【不定宽 + 自适应】float + overflow</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n### table\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"WRdpGp\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【不定宽 + 自适应】table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/WRdpGp/\">【不定宽 + 自适应】table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"apEJBQ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【不定宽 + 自适应】flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/apEJBQ/\">【不定宽 + 自适应】flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## 不定宽 + 不定宽 + 自适应\n\n![](http://oggx6lf7f.bkt.clouddn.com/1cii7.png)\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rjpyyr\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【多列布局 + 自适应】\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/rjpyyr/\">【多列布局 + 自适应】</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## 等分布局\n\n![](http://oggx6lf7f.bkt.clouddn.com/4qwxe.png)\n\n![](http://oggx6lf7f.bkt.clouddn.com/pf76c.png)\n\n### float\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ygpMbv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等分布局: float\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ygpMbv/\">等分布局: float</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：高级浏览器全兼容\n- 缺点：列数和百分比高度百分比耦合性太高，也就是说一旦列数改变，宽度百分比就得有相应的改变。\n\n#### table\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qRpmbO\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等分布局: table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/qRpmbO/\">等分布局: table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：结构和样式彻底解耦，因为table加了`table-layout: fixed`会自动平分所有单元格\n- 缺点：加了一层标签\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PWEmWE\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等分布局: flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/PWEmWE/\">等分布局: flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：代码简洁。结构和样式彻底解耦，因为table加了`table-layout: fixed`会自动平分所有单元格。\n- 缺点：兼容性问题\n\n## 等高布局\n\n![](http://oggx6lf7f.bkt.clouddn.com/rbeh5.png)\n\n### table\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"YNYVVV\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等高布局:table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/YNYVVV/\">等高布局:table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MJrmvd\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等高布局:flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/MJrmvd/\">等高布局:flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n## 总结\n\n以上是网站最常用，最高频的布局方式，把这些学会，并且记住，多练习，以后再遇到类似的布局时，就能信手拈来，快速地把页面写出来！\n","source":"_posts/2017-01-30-multi-column-layout.md","raw":"---\ntitle: 布局解决方案之「多列布局」\ncategories: CSS\n---\n\n常见的页面布局有：两列布局，多列布局，等分布局，等高布局，然后再加上一些自适应布局。\n\n## 定宽 + 自适应\n\n![](http://oggx6lf7f.bkt.clouddn.com/bpt48.png)\n\n### float + margin\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LxexrB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:float + margin\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/LxexrB/\">两列布局:float + margin</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：简单，很容易理解\n- 缺点：IE6有一些bug\n\n### float + margin + (fix)\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MJrJLo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:float + margin + (fix)\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/MJrJLo/\">两列布局:float + margin + (fix)</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：简单，很容易理解，不存在兼容性问题\n- 缺点：1. 你试着选中left的文案就会发现，left的文案无法被选中，因为left被right遮住，解决方法是用`position: relative`提高left的层级。\n\n### float + overflow\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyYyoy\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:float + overflow\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyYyoy/\">两列布局:float + overflow</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：写法简单\n\n### table\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgpgqw\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgpgqw/\">两列布局:table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 缺点：不能设置margin，只能设置padding，代码比较多。\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LxeWPM\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/LxeWPM/\">两列布局:flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：功能强大！代码少\n- 缺点：内部标签太多的话会有性能问题，所以只能用来做小范围的布局。\n\n\n\n## 定宽 + 定宽 + 自适应\n\n![](http://oggx6lf7f.bkt.clouddn.com/ywv4h.png)\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ggompp\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"多列布局\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ggompp/\">多列布局</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## 不定宽 + 自适应\n\n![](http://oggx6lf7f.bkt.clouddn.com/9k6nz.png)\n\n### float + overflow\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"WRdprR\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【不定宽 + 自适应】float + overflow\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/WRdprR/\">【不定宽 + 自适应】float + overflow</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n### table\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"WRdpGp\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【不定宽 + 自适应】table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/WRdpGp/\">【不定宽 + 自适应】table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"apEJBQ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【不定宽 + 自适应】flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/apEJBQ/\">【不定宽 + 自适应】flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## 不定宽 + 不定宽 + 自适应\n\n![](http://oggx6lf7f.bkt.clouddn.com/1cii7.png)\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rjpyyr\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【多列布局 + 自适应】\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/rjpyyr/\">【多列布局 + 自适应】</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## 等分布局\n\n![](http://oggx6lf7f.bkt.clouddn.com/4qwxe.png)\n\n![](http://oggx6lf7f.bkt.clouddn.com/pf76c.png)\n\n### float\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ygpMbv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等分布局: float\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ygpMbv/\">等分布局: float</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：高级浏览器全兼容\n- 缺点：列数和百分比高度百分比耦合性太高，也就是说一旦列数改变，宽度百分比就得有相应的改变。\n\n#### table\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qRpmbO\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等分布局: table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/qRpmbO/\">等分布局: table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：结构和样式彻底解耦，因为table加了`table-layout: fixed`会自动平分所有单元格\n- 缺点：加了一层标签\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PWEmWE\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等分布局: flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/PWEmWE/\">等分布局: flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n- 优点：代码简洁。结构和样式彻底解耦，因为table加了`table-layout: fixed`会自动平分所有单元格。\n- 缺点：兼容性问题\n\n## 等高布局\n\n![](http://oggx6lf7f.bkt.clouddn.com/rbeh5.png)\n\n### table\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"YNYVVV\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等高布局:table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/YNYVVV/\">等高布局:table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n### flex\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MJrmvd\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等高布局:flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/MJrmvd/\">等高布局:flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n## 总结\n\n以上是网站最常用，最高频的布局方式，把这些学会，并且记住，多练习，以后再遇到类似的布局时，就能信手拈来，快速地把页面写出来！\n","slug":"2017-01-30-multi-column-layout","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccw005tfson5vrqrzvv","content":"<p>常见的页面布局有：两列布局，多列布局，等分布局，等高布局，然后再加上一些自适应布局。</p>\n<h2 id=\"定宽-自适应\"><a href=\"#定宽-自适应\" class=\"headerlink\" title=\"定宽 + 自适应\"></a>定宽 + 自适应</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bpt48.png\" alt=\"\"></p>\n<h3 id=\"float-margin\"><a href=\"#float-margin\" class=\"headerlink\" title=\"float + margin\"></a>float + margin</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LxexrB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:float + margin\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/LxexrB/\" target=\"_blank\" rel=\"noopener\">两列布局:float + margin</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：简单，很容易理解</li>\n<li>缺点：IE6有一些bug</li>\n</ul>\n<h3 id=\"float-margin-fix\"><a href=\"#float-margin-fix\" class=\"headerlink\" title=\"float + margin + (fix)\"></a>float + margin + (fix)</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MJrJLo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:float + margin + (fix)\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/MJrJLo/\" target=\"_blank\" rel=\"noopener\">两列布局:float + margin + (fix)</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：简单，很容易理解，不存在兼容性问题</li>\n<li>缺点：1. 你试着选中left的文案就会发现，left的文案无法被选中，因为left被right遮住，解决方法是用<code>position: relative</code>提高left的层级。</li>\n</ul>\n<h3 id=\"float-overflow\"><a href=\"#float-overflow\" class=\"headerlink\" title=\"float + overflow\"></a>float + overflow</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyYyoy\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:float + overflow\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyYyoy/\" target=\"_blank\" rel=\"noopener\">两列布局:float + overflow</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：写法简单</li>\n</ul>\n<h3 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgpgqw\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgpgqw/\" target=\"_blank\" rel=\"noopener\">两列布局:table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>缺点：不能设置margin，只能设置padding，代码比较多。</li>\n</ul>\n<h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LxeWPM\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/LxeWPM/\" target=\"_blank\" rel=\"noopener\">两列布局:flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：功能强大！代码少</li>\n<li>缺点：内部标签太多的话会有性能问题，所以只能用来做小范围的布局。</li>\n</ul>\n<h2 id=\"定宽-定宽-自适应\"><a href=\"#定宽-定宽-自适应\" class=\"headerlink\" title=\"定宽 + 定宽 + 自适应\"></a>定宽 + 定宽 + 自适应</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ywv4h.png\" alt=\"\"></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ggompp\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"多列布局\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ggompp/\" target=\"_blank\" rel=\"noopener\">多列布局</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"不定宽-自适应\"><a href=\"#不定宽-自适应\" class=\"headerlink\" title=\"不定宽 + 自适应\"></a>不定宽 + 自适应</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/9k6nz.png\" alt=\"\"></p>\n<h3 id=\"float-overflow-1\"><a href=\"#float-overflow-1\" class=\"headerlink\" title=\"float + overflow\"></a>float + overflow</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"WRdprR\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【不定宽 + 自适应】float + overflow\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/WRdprR/\" target=\"_blank\" rel=\"noopener\">【不定宽 + 自适应】float + overflow</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h3 id=\"table-1\"><a href=\"#table-1\" class=\"headerlink\" title=\"table\"></a>table</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"WRdpGp\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【不定宽 + 自适应】table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/WRdpGp/\" target=\"_blank\" rel=\"noopener\">【不定宽 + 自适应】table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h3 id=\"flex-1\"><a href=\"#flex-1\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"apEJBQ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【不定宽 + 自适应】flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/apEJBQ/\" target=\"_blank\" rel=\"noopener\">【不定宽 + 自适应】flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"不定宽-不定宽-自适应\"><a href=\"#不定宽-不定宽-自适应\" class=\"headerlink\" title=\"不定宽 + 不定宽 + 自适应\"></a>不定宽 + 不定宽 + 自适应</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/1cii7.png\" alt=\"\"></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rjpyyr\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【多列布局 + 自适应】\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/rjpyyr/\" target=\"_blank\" rel=\"noopener\">【多列布局 + 自适应】</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"等分布局\"><a href=\"#等分布局\" class=\"headerlink\" title=\"等分布局\"></a>等分布局</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/4qwxe.png\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/pf76c.png\" alt=\"\"></p>\n<h3 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ygpMbv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等分布局: float\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ygpMbv/\" target=\"_blank\" rel=\"noopener\">等分布局: float</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：高级浏览器全兼容</li>\n<li>缺点：列数和百分比高度百分比耦合性太高，也就是说一旦列数改变，宽度百分比就得有相应的改变。</li>\n</ul>\n<h4 id=\"table-2\"><a href=\"#table-2\" class=\"headerlink\" title=\"table\"></a>table</h4><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qRpmbO\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等分布局: table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/qRpmbO/\" target=\"_blank\" rel=\"noopener\">等分布局: table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：结构和样式彻底解耦，因为table加了<code>table-layout: fixed</code>会自动平分所有单元格</li>\n<li>缺点：加了一层标签</li>\n</ul>\n<h3 id=\"flex-2\"><a href=\"#flex-2\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PWEmWE\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等分布局: flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/PWEmWE/\" target=\"_blank\" rel=\"noopener\">等分布局: flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：代码简洁。结构和样式彻底解耦，因为table加了<code>table-layout: fixed</code>会自动平分所有单元格。</li>\n<li>缺点：兼容性问题</li>\n</ul>\n<h2 id=\"等高布局\"><a href=\"#等高布局\" class=\"headerlink\" title=\"等高布局\"></a>等高布局</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/rbeh5.png\" alt=\"\"></p>\n<h3 id=\"table-3\"><a href=\"#table-3\" class=\"headerlink\" title=\"table\"></a>table</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"YNYVVV\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等高布局:table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/YNYVVV/\" target=\"_blank\" rel=\"noopener\">等高布局:table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h3 id=\"flex-3\"><a href=\"#flex-3\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MJrmvd\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等高布局:flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/MJrmvd/\" target=\"_blank\" rel=\"noopener\">等高布局:flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上是网站最常用，最高频的布局方式，把这些学会，并且记住，多练习，以后再遇到类似的布局时，就能信手拈来，快速地把页面写出来！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>常见的页面布局有：两列布局，多列布局，等分布局，等高布局，然后再加上一些自适应布局。</p>\n<h2 id=\"定宽-自适应\"><a href=\"#定宽-自适应\" class=\"headerlink\" title=\"定宽 + 自适应\"></a>定宽 + 自适应</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bpt48.png\" alt=\"\"></p>\n<h3 id=\"float-margin\"><a href=\"#float-margin\" class=\"headerlink\" title=\"float + margin\"></a>float + margin</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LxexrB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:float + margin\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/LxexrB/\" target=\"_blank\" rel=\"noopener\">两列布局:float + margin</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：简单，很容易理解</li>\n<li>缺点：IE6有一些bug</li>\n</ul>\n<h3 id=\"float-margin-fix\"><a href=\"#float-margin-fix\" class=\"headerlink\" title=\"float + margin + (fix)\"></a>float + margin + (fix)</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MJrJLo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:float + margin + (fix)\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/MJrJLo/\" target=\"_blank\" rel=\"noopener\">两列布局:float + margin + (fix)</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：简单，很容易理解，不存在兼容性问题</li>\n<li>缺点：1. 你试着选中left的文案就会发现，left的文案无法被选中，因为left被right遮住，解决方法是用<code>position: relative</code>提高left的层级。</li>\n</ul>\n<h3 id=\"float-overflow\"><a href=\"#float-overflow\" class=\"headerlink\" title=\"float + overflow\"></a>float + overflow</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyYyoy\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:float + overflow\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyYyoy/\" target=\"_blank\" rel=\"noopener\">两列布局:float + overflow</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：写法简单</li>\n</ul>\n<h3 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgpgqw\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgpgqw/\" target=\"_blank\" rel=\"noopener\">两列布局:table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>缺点：不能设置margin，只能设置padding，代码比较多。</li>\n</ul>\n<h3 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LxeWPM\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"两列布局:flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/LxeWPM/\" target=\"_blank\" rel=\"noopener\">两列布局:flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：功能强大！代码少</li>\n<li>缺点：内部标签太多的话会有性能问题，所以只能用来做小范围的布局。</li>\n</ul>\n<h2 id=\"定宽-定宽-自适应\"><a href=\"#定宽-定宽-自适应\" class=\"headerlink\" title=\"定宽 + 定宽 + 自适应\"></a>定宽 + 定宽 + 自适应</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ywv4h.png\" alt=\"\"></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ggompp\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"多列布局\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ggompp/\" target=\"_blank\" rel=\"noopener\">多列布局</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"不定宽-自适应\"><a href=\"#不定宽-自适应\" class=\"headerlink\" title=\"不定宽 + 自适应\"></a>不定宽 + 自适应</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/9k6nz.png\" alt=\"\"></p>\n<h3 id=\"float-overflow-1\"><a href=\"#float-overflow-1\" class=\"headerlink\" title=\"float + overflow\"></a>float + overflow</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"WRdprR\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【不定宽 + 自适应】float + overflow\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/WRdprR/\" target=\"_blank\" rel=\"noopener\">【不定宽 + 自适应】float + overflow</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h3 id=\"table-1\"><a href=\"#table-1\" class=\"headerlink\" title=\"table\"></a>table</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"WRdpGp\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【不定宽 + 自适应】table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/WRdpGp/\" target=\"_blank\" rel=\"noopener\">【不定宽 + 自适应】table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h3 id=\"flex-1\"><a href=\"#flex-1\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"apEJBQ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【不定宽 + 自适应】flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/apEJBQ/\" target=\"_blank\" rel=\"noopener\">【不定宽 + 自适应】flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"不定宽-不定宽-自适应\"><a href=\"#不定宽-不定宽-自适应\" class=\"headerlink\" title=\"不定宽 + 不定宽 + 自适应\"></a>不定宽 + 不定宽 + 自适应</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/1cii7.png\" alt=\"\"></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rjpyyr\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"【多列布局 + 自适应】\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/rjpyyr/\" target=\"_blank\" rel=\"noopener\">【多列布局 + 自适应】</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"等分布局\"><a href=\"#等分布局\" class=\"headerlink\" title=\"等分布局\"></a>等分布局</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/4qwxe.png\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/pf76c.png\" alt=\"\"></p>\n<h3 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ygpMbv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等分布局: float\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ygpMbv/\" target=\"_blank\" rel=\"noopener\">等分布局: float</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：高级浏览器全兼容</li>\n<li>缺点：列数和百分比高度百分比耦合性太高，也就是说一旦列数改变，宽度百分比就得有相应的改变。</li>\n</ul>\n<h4 id=\"table-2\"><a href=\"#table-2\" class=\"headerlink\" title=\"table\"></a>table</h4><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qRpmbO\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等分布局: table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/qRpmbO/\" target=\"_blank\" rel=\"noopener\">等分布局: table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：结构和样式彻底解耦，因为table加了<code>table-layout: fixed</code>会自动平分所有单元格</li>\n<li>缺点：加了一层标签</li>\n</ul>\n<h3 id=\"flex-2\"><a href=\"#flex-2\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PWEmWE\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等分布局: flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/PWEmWE/\" target=\"_blank\" rel=\"noopener\">等分布局: flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<ul>\n<li>优点：代码简洁。结构和样式彻底解耦，因为table加了<code>table-layout: fixed</code>会自动平分所有单元格。</li>\n<li>缺点：兼容性问题</li>\n</ul>\n<h2 id=\"等高布局\"><a href=\"#等高布局\" class=\"headerlink\" title=\"等高布局\"></a>等高布局</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/rbeh5.png\" alt=\"\"></p>\n<h3 id=\"table-3\"><a href=\"#table-3\" class=\"headerlink\" title=\"table\"></a>table</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"YNYVVV\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等高布局:table\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/YNYVVV/\" target=\"_blank\" rel=\"noopener\">等高布局:table</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h3 id=\"flex-3\"><a href=\"#flex-3\" class=\"headerlink\" title=\"flex\"></a>flex</h3><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MJrmvd\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"等高布局:flex\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/MJrmvd/\" target=\"_blank\" rel=\"noopener\">等高布局:flex</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上是网站最常用，最高频的布局方式，把这些学会，并且记住，多练习，以后再遇到类似的布局时，就能信手拈来，快速地把页面写出来！</p>\n"},{"title":"弹性布局：flex","_content":"\n`flex`是个非常强大的css属性，能用简单的语法实现自适应的弹性布局。\n\n## flex-derection：「方向」\n\n> flex-direction: <u>row</u> | row-reverse | column | column-reverse\n\n`row：从左到右「→」`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyZJLg\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: row\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyZJLg/\">flex-derection: row</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`row-reverse：从右到左「←」`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"zNRbRo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: row-reverse\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/zNRbRo/\">flex-derection: row-reverse</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`column： 从上到下「↓」`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"NdyJyV\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: column\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/NdyJyV/\">flex-derection: column</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`column-reverse：从下到上「↑」`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MJQxVK\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: column-reverse\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/MJQxVK/\">flex-derection: column-reverse</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## flex-wrap：「换行」\n\n> flex-wrap: <u>norwap</u> | wrap | wrap-reverse\n\n`norwrap：不换行`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyZJxO\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-wrap: norwrap\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyZJxO/\">flex-wrap: norwrap</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`wrap：换行`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"apqMGW\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-wrap: wrap\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/apqMGW/\">flex-wrap: wrap</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`wrap-reverse：换行+倒序`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgdPrr\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-wrap: wrap-reverse\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgdPrr/\">flex-wrap: wrap-reverse</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## flex-flow：「方向和换行的缩写」\n\n> flex-flow: <'flex-direction'> || <'flex-wrap'>\n\nflex-flow是两个属性的缩写形式，可以同时设置`flex-direction`和`flex-wrap`这两个属性\n\n默认值是`initial`，表示`flex-direction: row`和`flex-wrap: norwrap`。\n\n## order：「顺序」\n\n> - order: <integer>\n> - initial: 0\n\n`order`是一个相对值，同一行的元素，order的值越小，它的位置就越靠前。\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xgYBQX\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[flex]order\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgYBQX/\">[flex]order</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## flex-basis：「初始宽高」\n\n> - flex-basis: <u>main_size</u> | <width>\n> - 设置flex item的初始宽/高\n\n这个属性与后面的flex-grow和flex-shrink有关联，是它们的一个基础。\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"dNdLYg\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-basis\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/dNdLYg/\">flex-basis</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## flex-grow：「分配多余的空间」\n\n> - flex-grow: <number>\n> - initial: 0\n\n**`flex-grow`是flex弹性布局中最重要的属性！！！**\n\n把「多余的空间」按比例分配给设置了`flex-grow`的元素。\n\n计算公式：flex-basis + flow-grow/sum(flow-grow)*remain（看一下例子就比较容易理解这个公式了）\n\n`情景一：一个元素占据剩余空间`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"QdQoej\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-grow-1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/QdQoej/\">flex-grow-1</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n情景二：多个元素占据剩余空间\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"JEpVdL\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-grow-2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/JEpVdL/\">flex-grow-2</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## flex-shrink：「分配超出的空间」\n\n> - flex-shrink: <number>\n> - initial: 1\n\n计算公式：flex-basis + flow-shrink/sum(flow-shrink)*remain\n\n`flex-shrink为1，所有做出同样的「牺牲」，一起变小`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"bgLJed\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-shrink\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/bgLJed/\">flex-shrink</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\nflex-shrink不为1，大家「牺牲」的程度不一样\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qRxwjJ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-shrink-1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/qRxwjJ/\">flex-shrink-1</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## flex\n\n> - flex: <'flex-grow'> || <'flex-shrink'> || <'flex-basis'>\n> - initial: 0 1 main-size\n\n`默认情况：不拉伸`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"OWQGxV\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/OWQGxV/\">flex-1</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`大家都按相同的比例，占满「多余的空间」`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"mRXgBN\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/mRXgBN/\">flex-2</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`不同的拉伸比例`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LxQveM\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-3\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/LxQveM/\">flex-3</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## justify-content\n\n> - justify-content: <u>flex-start</u> | flex-end | center | space-between | space-around\n> - 设置main-axis方向上对齐方式\n\n作用类似于`text-center`\n\n`flex-start`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"VPQNQN\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/VPQNQN/\">flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`flex-end`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"pRaBKr\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/pRaBKr/\">flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`center`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ZLrZRv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ZLrZRv/\">flex-center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`flex-between`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"XpZQYq\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-between\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/XpZQYq/\">flex-between</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`flex-around`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"YNeMvo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-around\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/YNeMvo/\">flex-around</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## align-items\n\n> - align-items: f<u>lex-start</u> | flex-end | center | baseline | <u>stretch</u>\n> - 设置cross-axis方向上对齐方式\n\n作用类似与`vertical-align`\n\n`flex-start`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"WRMWgp\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/WRMWgp/\">[align-items]flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`flex-end`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgdMQB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgdMQB/\">[align-items]flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`center`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PWQgxZ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/PWQgxZ/\">[align-items]center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`baseline`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"JEpVex\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]baseline\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/JEpVex/\">[align-items]baseline</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`stretch`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"QdQPJv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]stretch\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/QdQPJv/\">[align-items]stretch</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## align-self\n\n> - align-self: <u>auto</u> | flex-start | flex-end | center | baseline | stretch\n> - 设置单个flex item在cross-axis方向上对齐方式\n\n`flex-start`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"oBEKaO\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/oBEKaO/\">[align-selfs]flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`flex-end`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"QdQPog\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/QdQPog/\">[align-selfs]flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`center`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"KaQYYy\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/KaQYYy/\">[align-selfs]center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`baseline`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"zNRXXm\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]baseline\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/zNRXXm/\">[align-selfs]baseline</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`stretch`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xgYeeM\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]stretch\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgYeeM/\">[align-selfs]stretch</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## align-content\n\n> - align-content: flex-start | flex-end | center | space | between | space-around | stretch\n> - 设置cross-axis方向上行对齐方式\n\n`flex-start`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ZLrZdR\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ZLrZdR/\">[align-content]flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`flex-end`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ygvWLK\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ygvWLK/\">[align-content]flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`center`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xgYNxe\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgYNxe/\">[align-content]center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`between`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"NdyVPv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]between\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/NdyVPv/\">[align-content]between</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`space-around`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qRxGEz\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]space-around\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/qRxGEz/\">[align-content]space-around</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`stretch`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgdwON\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]stretch\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgdwON/\">[align-content]stretch</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>","source":"_posts/2017-02-01-flex.md","raw":"---\ntitle: 弹性布局：flex\ncategories: CSS\n---\n\n`flex`是个非常强大的css属性，能用简单的语法实现自适应的弹性布局。\n\n## flex-derection：「方向」\n\n> flex-direction: <u>row</u> | row-reverse | column | column-reverse\n\n`row：从左到右「→」`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyZJLg\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: row\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyZJLg/\">flex-derection: row</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`row-reverse：从右到左「←」`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"zNRbRo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: row-reverse\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/zNRbRo/\">flex-derection: row-reverse</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`column： 从上到下「↓」`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"NdyJyV\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: column\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/NdyJyV/\">flex-derection: column</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`column-reverse：从下到上「↑」`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MJQxVK\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: column-reverse\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/MJQxVK/\">flex-derection: column-reverse</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## flex-wrap：「换行」\n\n> flex-wrap: <u>norwap</u> | wrap | wrap-reverse\n\n`norwrap：不换行`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyZJxO\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-wrap: norwrap\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyZJxO/\">flex-wrap: norwrap</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`wrap：换行`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"apqMGW\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-wrap: wrap\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/apqMGW/\">flex-wrap: wrap</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`wrap-reverse：换行+倒序`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgdPrr\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-wrap: wrap-reverse\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgdPrr/\">flex-wrap: wrap-reverse</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## flex-flow：「方向和换行的缩写」\n\n> flex-flow: <'flex-direction'> || <'flex-wrap'>\n\nflex-flow是两个属性的缩写形式，可以同时设置`flex-direction`和`flex-wrap`这两个属性\n\n默认值是`initial`，表示`flex-direction: row`和`flex-wrap: norwrap`。\n\n## order：「顺序」\n\n> - order: <integer>\n> - initial: 0\n\n`order`是一个相对值，同一行的元素，order的值越小，它的位置就越靠前。\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xgYBQX\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[flex]order\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgYBQX/\">[flex]order</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## flex-basis：「初始宽高」\n\n> - flex-basis: <u>main_size</u> | <width>\n> - 设置flex item的初始宽/高\n\n这个属性与后面的flex-grow和flex-shrink有关联，是它们的一个基础。\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"dNdLYg\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-basis\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/dNdLYg/\">flex-basis</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## flex-grow：「分配多余的空间」\n\n> - flex-grow: <number>\n> - initial: 0\n\n**`flex-grow`是flex弹性布局中最重要的属性！！！**\n\n把「多余的空间」按比例分配给设置了`flex-grow`的元素。\n\n计算公式：flex-basis + flow-grow/sum(flow-grow)*remain（看一下例子就比较容易理解这个公式了）\n\n`情景一：一个元素占据剩余空间`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"QdQoej\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-grow-1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/QdQoej/\">flex-grow-1</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n情景二：多个元素占据剩余空间\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"JEpVdL\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-grow-2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/JEpVdL/\">flex-grow-2</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## flex-shrink：「分配超出的空间」\n\n> - flex-shrink: <number>\n> - initial: 1\n\n计算公式：flex-basis + flow-shrink/sum(flow-shrink)*remain\n\n`flex-shrink为1，所有做出同样的「牺牲」，一起变小`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"bgLJed\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-shrink\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/bgLJed/\">flex-shrink</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\nflex-shrink不为1，大家「牺牲」的程度不一样\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qRxwjJ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-shrink-1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/qRxwjJ/\">flex-shrink-1</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## flex\n\n> - flex: <'flex-grow'> || <'flex-shrink'> || <'flex-basis'>\n> - initial: 0 1 main-size\n\n`默认情况：不拉伸`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"OWQGxV\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/OWQGxV/\">flex-1</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`大家都按相同的比例，占满「多余的空间」`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"mRXgBN\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/mRXgBN/\">flex-2</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`不同的拉伸比例`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LxQveM\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-3\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/LxQveM/\">flex-3</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## justify-content\n\n> - justify-content: <u>flex-start</u> | flex-end | center | space-between | space-around\n> - 设置main-axis方向上对齐方式\n\n作用类似于`text-center`\n\n`flex-start`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"VPQNQN\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/VPQNQN/\">flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`flex-end`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"pRaBKr\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/pRaBKr/\">flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`center`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ZLrZRv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ZLrZRv/\">flex-center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`flex-between`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"XpZQYq\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-between\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/XpZQYq/\">flex-between</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`flex-around`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"YNeMvo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-around\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/YNeMvo/\">flex-around</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## align-items\n\n> - align-items: f<u>lex-start</u> | flex-end | center | baseline | <u>stretch</u>\n> - 设置cross-axis方向上对齐方式\n\n作用类似与`vertical-align`\n\n`flex-start`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"WRMWgp\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/WRMWgp/\">[align-items]flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`flex-end`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgdMQB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgdMQB/\">[align-items]flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`center`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PWQgxZ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/PWQgxZ/\">[align-items]center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`baseline`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"JEpVex\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]baseline\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/JEpVex/\">[align-items]baseline</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`stretch`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"QdQPJv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]stretch\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/QdQPJv/\">[align-items]stretch</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## align-self\n\n> - align-self: <u>auto</u> | flex-start | flex-end | center | baseline | stretch\n> - 设置单个flex item在cross-axis方向上对齐方式\n\n`flex-start`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"oBEKaO\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/oBEKaO/\">[align-selfs]flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`flex-end`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"QdQPog\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/QdQPog/\">[align-selfs]flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`center`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"KaQYYy\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/KaQYYy/\">[align-selfs]center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`baseline`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"zNRXXm\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]baseline\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/zNRXXm/\">[align-selfs]baseline</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`stretch`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xgYeeM\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]stretch\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgYeeM/\">[align-selfs]stretch</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n## align-content\n\n> - align-content: flex-start | flex-end | center | space | between | space-around | stretch\n> - 设置cross-axis方向上行对齐方式\n\n`flex-start`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ZLrZdR\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ZLrZdR/\">[align-content]flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`flex-end`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ygvWLK\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ygvWLK/\">[align-content]flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`center`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xgYNxe\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgYNxe/\">[align-content]center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`between`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"NdyVPv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]between\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/NdyVPv/\">[align-content]between</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`space-around`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qRxGEz\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]space-around\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/qRxGEz/\">[align-content]space-around</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n`stretch`\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgdwON\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]stretch\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgdwON/\">[align-content]stretch</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\">@raimonfuns</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>","slug":"2017-02-01-flex","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccx005vfson1xewnrvo","content":"<p><code>flex</code>是个非常强大的css属性，能用简单的语法实现自适应的弹性布局。</p>\n<h2 id=\"flex-derection：「方向」\"><a href=\"#flex-derection：「方向」\" class=\"headerlink\" title=\"flex-derection：「方向」\"></a>flex-derection：「方向」</h2><blockquote>\n<p>flex-direction: <u>row</u> | row-reverse | column | column-reverse</p>\n</blockquote>\n<p><code>row：从左到右「→」</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyZJLg\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: row\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyZJLg/\" target=\"_blank\" rel=\"noopener\">flex-derection: row</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>row-reverse：从右到左「←」</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"zNRbRo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: row-reverse\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/zNRbRo/\" target=\"_blank\" rel=\"noopener\">flex-derection: row-reverse</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>column： 从上到下「↓」</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"NdyJyV\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: column\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/NdyJyV/\" target=\"_blank\" rel=\"noopener\">flex-derection: column</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>column-reverse：从下到上「↑」</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MJQxVK\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: column-reverse\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/MJQxVK/\" target=\"_blank\" rel=\"noopener\">flex-derection: column-reverse</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"flex-wrap：「换行」\"><a href=\"#flex-wrap：「换行」\" class=\"headerlink\" title=\"flex-wrap：「换行」\"></a>flex-wrap：「换行」</h2><blockquote>\n<p>flex-wrap: <u>norwap</u> | wrap | wrap-reverse</p>\n</blockquote>\n<p><code>norwrap：不换行</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyZJxO\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-wrap: norwrap\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyZJxO/\" target=\"_blank\" rel=\"noopener\">flex-wrap: norwrap</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>wrap：换行</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"apqMGW\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-wrap: wrap\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/apqMGW/\" target=\"_blank\" rel=\"noopener\">flex-wrap: wrap</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>wrap-reverse：换行+倒序</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgdPrr\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-wrap: wrap-reverse\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgdPrr/\" target=\"_blank\" rel=\"noopener\">flex-wrap: wrap-reverse</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"flex-flow：「方向和换行的缩写」\"><a href=\"#flex-flow：「方向和换行的缩写」\" class=\"headerlink\" title=\"flex-flow：「方向和换行的缩写」\"></a>flex-flow：「方向和换行的缩写」</h2><blockquote>\n<p>flex-flow: &lt;’flex-direction’&gt; || &lt;’flex-wrap’&gt;</p>\n</blockquote>\n<p>flex-flow是两个属性的缩写形式，可以同时设置<code>flex-direction</code>和<code>flex-wrap</code>这两个属性</p>\n<p>默认值是<code>initial</code>，表示<code>flex-direction: row</code>和<code>flex-wrap: norwrap</code>。</p>\n<h2 id=\"order：「顺序」\"><a href=\"#order：「顺序」\" class=\"headerlink\" title=\"order：「顺序」\"></a>order：「顺序」</h2><blockquote>\n<ul>\n<li>order: <integer></integer></li>\n<li>initial: 0</li>\n</ul>\n</blockquote>\n<p><code>order</code>是一个相对值，同一行的元素，order的值越小，它的位置就越靠前。</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xgYBQX\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[flex]order\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgYBQX/\" target=\"_blank\" rel=\"noopener\">[flex]order</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"flex-basis：「初始宽高」\"><a href=\"#flex-basis：「初始宽高」\" class=\"headerlink\" title=\"flex-basis：「初始宽高」\"></a>flex-basis：「初始宽高」</h2><blockquote>\n<ul>\n<li>flex-basis: <u>main_size</u> | <width></width></li>\n<li>设置flex item的初始宽/高</li>\n</ul>\n</blockquote>\n<p>这个属性与后面的flex-grow和flex-shrink有关联，是它们的一个基础。</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"dNdLYg\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-basis\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/dNdLYg/\" target=\"_blank\" rel=\"noopener\">flex-basis</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"flex-grow：「分配多余的空间」\"><a href=\"#flex-grow：「分配多余的空间」\" class=\"headerlink\" title=\"flex-grow：「分配多余的空间」\"></a>flex-grow：「分配多余的空间」</h2><blockquote>\n<ul>\n<li>flex-grow: <number></number></li>\n<li>initial: 0</li>\n</ul>\n</blockquote>\n<p><strong><code>flex-grow</code>是flex弹性布局中最重要的属性！！！</strong></p>\n<p>把「多余的空间」按比例分配给设置了<code>flex-grow</code>的元素。</p>\n<p>计算公式：flex-basis + flow-grow/sum(flow-grow)*remain（看一下例子就比较容易理解这个公式了）</p>\n<p><code>情景一：一个元素占据剩余空间</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"QdQoej\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-grow-1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/QdQoej/\" target=\"_blank\" rel=\"noopener\">flex-grow-1</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p>情景二：多个元素占据剩余空间</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"JEpVdL\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-grow-2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/JEpVdL/\" target=\"_blank\" rel=\"noopener\">flex-grow-2</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"flex-shrink：「分配超出的空间」\"><a href=\"#flex-shrink：「分配超出的空间」\" class=\"headerlink\" title=\"flex-shrink：「分配超出的空间」\"></a>flex-shrink：「分配超出的空间」</h2><blockquote>\n<ul>\n<li>flex-shrink: <number></number></li>\n<li>initial: 1</li>\n</ul>\n</blockquote>\n<p>计算公式：flex-basis + flow-shrink/sum(flow-shrink)*remain</p>\n<p><code>flex-shrink为1，所有做出同样的「牺牲」，一起变小</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"bgLJed\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-shrink\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/bgLJed/\" target=\"_blank\" rel=\"noopener\">flex-shrink</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p>flex-shrink不为1，大家「牺牲」的程度不一样</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qRxwjJ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-shrink-1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/qRxwjJ/\" target=\"_blank\" rel=\"noopener\">flex-shrink-1</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><blockquote>\n<ul>\n<li>flex: &lt;’flex-grow’&gt; || &lt;’flex-shrink’&gt; || &lt;’flex-basis’&gt;</li>\n<li>initial: 0 1 main-size</li>\n</ul>\n</blockquote>\n<p><code>默认情况：不拉伸</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"OWQGxV\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/OWQGxV/\" target=\"_blank\" rel=\"noopener\">flex-1</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>大家都按相同的比例，占满「多余的空间」</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"mRXgBN\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/mRXgBN/\" target=\"_blank\" rel=\"noopener\">flex-2</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>不同的拉伸比例</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LxQveM\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-3\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/LxQveM/\" target=\"_blank\" rel=\"noopener\">flex-3</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h2><blockquote>\n<ul>\n<li>justify-content: <u>flex-start</u> | flex-end | center | space-between | space-around</li>\n<li>设置main-axis方向上对齐方式</li>\n</ul>\n</blockquote>\n<p>作用类似于<code>text-center</code></p>\n<p><code>flex-start</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"VPQNQN\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/VPQNQN/\" target=\"_blank\" rel=\"noopener\">flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>flex-end</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"pRaBKr\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/pRaBKr/\" target=\"_blank\" rel=\"noopener\">flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>center</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ZLrZRv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ZLrZRv/\" target=\"_blank\" rel=\"noopener\">flex-center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>flex-between</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"XpZQYq\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-between\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/XpZQYq/\" target=\"_blank\" rel=\"noopener\">flex-between</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>flex-around</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"YNeMvo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-around\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/YNeMvo/\" target=\"_blank\" rel=\"noopener\">flex-around</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h2><blockquote>\n<ul>\n<li>align-items: f<u>lex-start</u> | flex-end | center | baseline | <u>stretch</u></li>\n<li>设置cross-axis方向上对齐方式</li>\n</ul>\n</blockquote>\n<p>作用类似与<code>vertical-align</code></p>\n<p><code>flex-start</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"WRMWgp\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/WRMWgp/\" target=\"_blank\" rel=\"noopener\">[align-items]flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>flex-end</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgdMQB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgdMQB/\" target=\"_blank\" rel=\"noopener\">[align-items]flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>center</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PWQgxZ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/PWQgxZ/\" target=\"_blank\" rel=\"noopener\">[align-items]center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>baseline</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"JEpVex\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]baseline\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/JEpVex/\" target=\"_blank\" rel=\"noopener\">[align-items]baseline</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>stretch</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"QdQPJv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]stretch\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/QdQPJv/\" target=\"_blank\" rel=\"noopener\">[align-items]stretch</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h2><blockquote>\n<ul>\n<li>align-self: <u>auto</u> | flex-start | flex-end | center | baseline | stretch</li>\n<li>设置单个flex item在cross-axis方向上对齐方式</li>\n</ul>\n</blockquote>\n<p><code>flex-start</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"oBEKaO\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/oBEKaO/\" target=\"_blank\" rel=\"noopener\">[align-selfs]flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>flex-end</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"QdQPog\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/QdQPog/\" target=\"_blank\" rel=\"noopener\">[align-selfs]flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>center</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"KaQYYy\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/KaQYYy/\" target=\"_blank\" rel=\"noopener\">[align-selfs]center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>baseline</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"zNRXXm\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]baseline\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/zNRXXm/\" target=\"_blank\" rel=\"noopener\">[align-selfs]baseline</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>stretch</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xgYeeM\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]stretch\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgYeeM/\" target=\"_blank\" rel=\"noopener\">[align-selfs]stretch</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h2><blockquote>\n<ul>\n<li>align-content: flex-start | flex-end | center | space | between | space-around | stretch</li>\n<li>设置cross-axis方向上行对齐方式</li>\n</ul>\n</blockquote>\n<p><code>flex-start</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ZLrZdR\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ZLrZdR/\" target=\"_blank\" rel=\"noopener\">[align-content]flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>flex-end</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ygvWLK\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ygvWLK/\" target=\"_blank\" rel=\"noopener\">[align-content]flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>center</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xgYNxe\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgYNxe/\" target=\"_blank\" rel=\"noopener\">[align-content]center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>between</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"NdyVPv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]between\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/NdyVPv/\" target=\"_blank\" rel=\"noopener\">[align-content]between</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>space-around</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qRxGEz\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]space-around\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/qRxGEz/\" target=\"_blank\" rel=\"noopener\">[align-content]space-around</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>stretch</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgdwON\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]stretch\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgdwON/\" target=\"_blank\" rel=\"noopener\">[align-content]stretch</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>","site":{"data":{}},"excerpt":"","more":"<p><code>flex</code>是个非常强大的css属性，能用简单的语法实现自适应的弹性布局。</p>\n<h2 id=\"flex-derection：「方向」\"><a href=\"#flex-derection：「方向」\" class=\"headerlink\" title=\"flex-derection：「方向」\"></a>flex-derection：「方向」</h2><blockquote>\n<p>flex-direction: <u>row</u> | row-reverse | column | column-reverse</p>\n</blockquote>\n<p><code>row：从左到右「→」</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyZJLg\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: row\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyZJLg/\" target=\"_blank\" rel=\"noopener\">flex-derection: row</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>row-reverse：从右到左「←」</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"zNRbRo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: row-reverse\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/zNRbRo/\" target=\"_blank\" rel=\"noopener\">flex-derection: row-reverse</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>column： 从上到下「↓」</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"NdyJyV\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: column\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/NdyJyV/\" target=\"_blank\" rel=\"noopener\">flex-derection: column</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>column-reverse：从下到上「↑」</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MJQxVK\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-derection: column-reverse\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/MJQxVK/\" target=\"_blank\" rel=\"noopener\">flex-derection: column-reverse</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"flex-wrap：「换行」\"><a href=\"#flex-wrap：「换行」\" class=\"headerlink\" title=\"flex-wrap：「换行」\"></a>flex-wrap：「换行」</h2><blockquote>\n<p>flex-wrap: <u>norwap</u> | wrap | wrap-reverse</p>\n</blockquote>\n<p><code>norwrap：不换行</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jyZJxO\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-wrap: norwrap\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/jyZJxO/\" target=\"_blank\" rel=\"noopener\">flex-wrap: norwrap</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>wrap：换行</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"apqMGW\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-wrap: wrap\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/apqMGW/\" target=\"_blank\" rel=\"noopener\">flex-wrap: wrap</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>wrap-reverse：换行+倒序</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgdPrr\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-wrap: wrap-reverse\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgdPrr/\" target=\"_blank\" rel=\"noopener\">flex-wrap: wrap-reverse</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"flex-flow：「方向和换行的缩写」\"><a href=\"#flex-flow：「方向和换行的缩写」\" class=\"headerlink\" title=\"flex-flow：「方向和换行的缩写」\"></a>flex-flow：「方向和换行的缩写」</h2><blockquote>\n<p>flex-flow: &lt;’flex-direction’&gt; || &lt;’flex-wrap’&gt;</p>\n</blockquote>\n<p>flex-flow是两个属性的缩写形式，可以同时设置<code>flex-direction</code>和<code>flex-wrap</code>这两个属性</p>\n<p>默认值是<code>initial</code>，表示<code>flex-direction: row</code>和<code>flex-wrap: norwrap</code>。</p>\n<h2 id=\"order：「顺序」\"><a href=\"#order：「顺序」\" class=\"headerlink\" title=\"order：「顺序」\"></a>order：「顺序」</h2><blockquote>\n<ul>\n<li>order: <integer></integer></li>\n<li>initial: 0</li>\n</ul>\n</blockquote>\n<p><code>order</code>是一个相对值，同一行的元素，order的值越小，它的位置就越靠前。</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xgYBQX\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[flex]order\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgYBQX/\" target=\"_blank\" rel=\"noopener\">[flex]order</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"flex-basis：「初始宽高」\"><a href=\"#flex-basis：「初始宽高」\" class=\"headerlink\" title=\"flex-basis：「初始宽高」\"></a>flex-basis：「初始宽高」</h2><blockquote>\n<ul>\n<li>flex-basis: <u>main_size</u> | <width></width></li>\n<li>设置flex item的初始宽/高</li>\n</ul>\n</blockquote>\n<p>这个属性与后面的flex-grow和flex-shrink有关联，是它们的一个基础。</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"dNdLYg\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-basis\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/dNdLYg/\" target=\"_blank\" rel=\"noopener\">flex-basis</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"flex-grow：「分配多余的空间」\"><a href=\"#flex-grow：「分配多余的空间」\" class=\"headerlink\" title=\"flex-grow：「分配多余的空间」\"></a>flex-grow：「分配多余的空间」</h2><blockquote>\n<ul>\n<li>flex-grow: <number></number></li>\n<li>initial: 0</li>\n</ul>\n</blockquote>\n<p><strong><code>flex-grow</code>是flex弹性布局中最重要的属性！！！</strong></p>\n<p>把「多余的空间」按比例分配给设置了<code>flex-grow</code>的元素。</p>\n<p>计算公式：flex-basis + flow-grow/sum(flow-grow)*remain（看一下例子就比较容易理解这个公式了）</p>\n<p><code>情景一：一个元素占据剩余空间</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"QdQoej\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-grow-1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/QdQoej/\" target=\"_blank\" rel=\"noopener\">flex-grow-1</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p>情景二：多个元素占据剩余空间</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"JEpVdL\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-grow-2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/JEpVdL/\" target=\"_blank\" rel=\"noopener\">flex-grow-2</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"flex-shrink：「分配超出的空间」\"><a href=\"#flex-shrink：「分配超出的空间」\" class=\"headerlink\" title=\"flex-shrink：「分配超出的空间」\"></a>flex-shrink：「分配超出的空间」</h2><blockquote>\n<ul>\n<li>flex-shrink: <number></number></li>\n<li>initial: 1</li>\n</ul>\n</blockquote>\n<p>计算公式：flex-basis + flow-shrink/sum(flow-shrink)*remain</p>\n<p><code>flex-shrink为1，所有做出同样的「牺牲」，一起变小</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"bgLJed\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-shrink\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/bgLJed/\" target=\"_blank\" rel=\"noopener\">flex-shrink</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p>flex-shrink不为1，大家「牺牲」的程度不一样</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qRxwjJ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-shrink-1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/qRxwjJ/\" target=\"_blank\" rel=\"noopener\">flex-shrink-1</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><blockquote>\n<ul>\n<li>flex: &lt;’flex-grow’&gt; || &lt;’flex-shrink’&gt; || &lt;’flex-basis’&gt;</li>\n<li>initial: 0 1 main-size</li>\n</ul>\n</blockquote>\n<p><code>默认情况：不拉伸</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"OWQGxV\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/OWQGxV/\" target=\"_blank\" rel=\"noopener\">flex-1</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>大家都按相同的比例，占满「多余的空间」</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"mRXgBN\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/mRXgBN/\" target=\"_blank\" rel=\"noopener\">flex-2</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>不同的拉伸比例</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LxQveM\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-3\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/LxQveM/\" target=\"_blank\" rel=\"noopener\">flex-3</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h2><blockquote>\n<ul>\n<li>justify-content: <u>flex-start</u> | flex-end | center | space-between | space-around</li>\n<li>设置main-axis方向上对齐方式</li>\n</ul>\n</blockquote>\n<p>作用类似于<code>text-center</code></p>\n<p><code>flex-start</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"VPQNQN\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/VPQNQN/\" target=\"_blank\" rel=\"noopener\">flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>flex-end</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"pRaBKr\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/pRaBKr/\" target=\"_blank\" rel=\"noopener\">flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>center</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ZLrZRv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ZLrZRv/\" target=\"_blank\" rel=\"noopener\">flex-center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>flex-between</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"XpZQYq\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-between\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/XpZQYq/\" target=\"_blank\" rel=\"noopener\">flex-between</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>flex-around</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"YNeMvo\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"flex-around\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/YNeMvo/\" target=\"_blank\" rel=\"noopener\">flex-around</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h2><blockquote>\n<ul>\n<li>align-items: f<u>lex-start</u> | flex-end | center | baseline | <u>stretch</u></li>\n<li>设置cross-axis方向上对齐方式</li>\n</ul>\n</blockquote>\n<p>作用类似与<code>vertical-align</code></p>\n<p><code>flex-start</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"WRMWgp\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/WRMWgp/\" target=\"_blank\" rel=\"noopener\">[align-items]flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>flex-end</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgdMQB\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgdMQB/\" target=\"_blank\" rel=\"noopener\">[align-items]flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>center</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PWQgxZ\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/PWQgxZ/\" target=\"_blank\" rel=\"noopener\">[align-items]center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>baseline</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"JEpVex\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]baseline\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/JEpVex/\" target=\"_blank\" rel=\"noopener\">[align-items]baseline</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>stretch</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"QdQPJv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-items]stretch\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/QdQPJv/\" target=\"_blank\" rel=\"noopener\">[align-items]stretch</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h2><blockquote>\n<ul>\n<li>align-self: <u>auto</u> | flex-start | flex-end | center | baseline | stretch</li>\n<li>设置单个flex item在cross-axis方向上对齐方式</li>\n</ul>\n</blockquote>\n<p><code>flex-start</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"oBEKaO\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/oBEKaO/\" target=\"_blank\" rel=\"noopener\">[align-selfs]flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>flex-end</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"QdQPog\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/QdQPog/\" target=\"_blank\" rel=\"noopener\">[align-selfs]flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>center</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"KaQYYy\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/KaQYYy/\" target=\"_blank\" rel=\"noopener\">[align-selfs]center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>baseline</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"zNRXXm\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]baseline\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/zNRXXm/\" target=\"_blank\" rel=\"noopener\">[align-selfs]baseline</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>stretch</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xgYeeM\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-selfs]stretch\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgYeeM/\" target=\"_blank\" rel=\"noopener\">[align-selfs]stretch</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<h2 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h2><blockquote>\n<ul>\n<li>align-content: flex-start | flex-end | center | space | between | space-around | stretch</li>\n<li>设置cross-axis方向上行对齐方式</li>\n</ul>\n</blockquote>\n<p><code>flex-start</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ZLrZdR\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]flex-start\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ZLrZdR/\" target=\"_blank\" rel=\"noopener\">[align-content]flex-start</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>flex-end</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"ygvWLK\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]flex-end\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/ygvWLK/\" target=\"_blank\" rel=\"noopener\">[align-content]flex-end</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>center</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xgYNxe\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]center\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/xgYNxe/\" target=\"_blank\" rel=\"noopener\">[align-content]center</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>between</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"NdyVPv\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]between\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/NdyVPv/\" target=\"_blank\" rel=\"noopener\">[align-content]between</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>space-around</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qRxGEz\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]space-around\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/qRxGEz/\" target=\"_blank\" rel=\"noopener\">[align-content]space-around</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<p><code>stretch</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vgdwON\" data-default-tab=\"css,result\" data-user=\"raimonfuns\" data-embed-version=\"2\" data-pen-title=\"[align-content]stretch\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/vgdwON/\" target=\"_blank\" rel=\"noopener\">[align-content]stretch</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"noopener\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>"},{"title":"【ORID总结】2/1","_content":"\n把这几天做的事情总结一下。\n\n## Objective\n\n- 对css布局进行了一次系统地学习和复盘，总共写了4篇文章：《弹性布局：flex》、《布局解决方案之「全屏布局」》、《布局解决方案之「多列布局」》、《布局解决方案之「居中布局」》\n- 重新回顾《learning how to learn》，整理出第一周的笔记：[《learning how to learn》学习笔记](https://raimonfuns.gitbooks.io/-learning-how-to-learn/content/)\n- 看了一遍阳志平老师写的《工作论》\n- 重新看了一遍《\u0010未生》\n- 重新读了一遍《最重要的事情只有一件》\n\n## Reflective\n\n总的来说，春节期间完成了很多事情，学了非常多新概念，很充实。\n\n## Interpretive\n\n- [中文词语检查器](https://github.com/zhuoqun/words_inspector)。可以用来查出多余的中文词语，让自己写的文字更加简单易懂。\n- 系统学习。我打算把《learning how to learn》学习笔记整理成一本书，这是从阳志平老师的《工作论》里面学习到的，「学习一门知识最有效的方式就是写一本书」，这其实就是一种提取练习，而且是系统性的提取练习。目前已经些5篇文章，继续加油。\n\n## Decisional\n\n- 阅读xdite老师的gitbook书籍《學習這回事》\n- 练习Ruby on Rails","source":"_posts/2017-02-02-orid.md","raw":"---\ntitle: 【ORID总结】2/1\ncategories: 全栈营\n---\n\n把这几天做的事情总结一下。\n\n## Objective\n\n- 对css布局进行了一次系统地学习和复盘，总共写了4篇文章：《弹性布局：flex》、《布局解决方案之「全屏布局」》、《布局解决方案之「多列布局」》、《布局解决方案之「居中布局」》\n- 重新回顾《learning how to learn》，整理出第一周的笔记：[《learning how to learn》学习笔记](https://raimonfuns.gitbooks.io/-learning-how-to-learn/content/)\n- 看了一遍阳志平老师写的《工作论》\n- 重新看了一遍《\u0010未生》\n- 重新读了一遍《最重要的事情只有一件》\n\n## Reflective\n\n总的来说，春节期间完成了很多事情，学了非常多新概念，很充实。\n\n## Interpretive\n\n- [中文词语检查器](https://github.com/zhuoqun/words_inspector)。可以用来查出多余的中文词语，让自己写的文字更加简单易懂。\n- 系统学习。我打算把《learning how to learn》学习笔记整理成一本书，这是从阳志平老师的《工作论》里面学习到的，「学习一门知识最有效的方式就是写一本书」，这其实就是一种提取练习，而且是系统性的提取练习。目前已经些5篇文章，继续加油。\n\n## Decisional\n\n- 阅读xdite老师的gitbook书籍《學習這回事》\n- 练习Ruby on Rails","slug":"2017-02-02-orid","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccy005xfsonwax3aelf","content":"<p>把这几天做的事情总结一下。</p>\n<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>对css布局进行了一次系统地学习和复盘，总共写了4篇文章：《弹性布局：flex》、《布局解决方案之「全屏布局」》、《布局解决方案之「多列布局」》、《布局解决方案之「居中布局」》</li>\n<li>重新回顾《learning how to learn》，整理出第一周的笔记：<a href=\"https://raimonfuns.gitbooks.io/-learning-how-to-learn/content/\" target=\"_blank\" rel=\"noopener\">《learning how to learn》学习笔记</a></li>\n<li>看了一遍阳志平老师写的《工作论》</li>\n<li>重新看了一遍《\u0010未生》</li>\n<li>重新读了一遍《最重要的事情只有一件》</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>总的来说，春节期间完成了很多事情，学了非常多新概念，很充实。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><ul>\n<li><a href=\"https://github.com/zhuoqun/words_inspector\" target=\"_blank\" rel=\"noopener\">中文词语检查器</a>。可以用来查出多余的中文词语，让自己写的文字更加简单易懂。</li>\n<li>系统学习。我打算把《learning how to learn》学习笔记整理成一本书，这是从阳志平老师的《工作论》里面学习到的，「学习一门知识最有效的方式就是写一本书」，这其实就是一种提取练习，而且是系统性的提取练习。目前已经些5篇文章，继续加油。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>阅读xdite老师的gitbook书籍《學習這回事》</li>\n<li>练习Ruby on Rails</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>把这几天做的事情总结一下。</p>\n<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>对css布局进行了一次系统地学习和复盘，总共写了4篇文章：《弹性布局：flex》、《布局解决方案之「全屏布局」》、《布局解决方案之「多列布局」》、《布局解决方案之「居中布局」》</li>\n<li>重新回顾《learning how to learn》，整理出第一周的笔记：<a href=\"https://raimonfuns.gitbooks.io/-learning-how-to-learn/content/\" target=\"_blank\" rel=\"noopener\">《learning how to learn》学习笔记</a></li>\n<li>看了一遍阳志平老师写的《工作论》</li>\n<li>重新看了一遍《\u0010未生》</li>\n<li>重新读了一遍《最重要的事情只有一件》</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>总的来说，春节期间完成了很多事情，学了非常多新概念，很充实。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><ul>\n<li><a href=\"https://github.com/zhuoqun/words_inspector\" target=\"_blank\" rel=\"noopener\">中文词语检查器</a>。可以用来查出多余的中文词语，让自己写的文字更加简单易懂。</li>\n<li>系统学习。我打算把《learning how to learn》学习笔记整理成一本书，这是从阳志平老师的《工作论》里面学习到的，「学习一门知识最有效的方式就是写一本书」，这其实就是一种提取练习，而且是系统性的提取练习。目前已经些5篇文章，继续加油。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>阅读xdite老师的gitbook书籍《學習這回事》</li>\n<li>练习Ruby on Rails</li>\n</ul>\n"},{"title":"【ORID总结】2/2","_content":"\n## Objective\n\n- 花1小时48分钟，完成rails101第6遍。\n- 看完教程《[Ruby on Rails **Tuto**rial - YouTube](https://www.youtube.com/watch?v=GY7Ps8fqGdc)》，教的比较浅，没学到什么干货，就当练习英语听力了。\n- 看完xdite老师的书《學習這回事》\n- 践行「最重要的那件事」，把大部分的时间都用在编程上。\n\n## Reflective\n\n1. 最近听了很多英语的教程，看了很多英文文档和书籍，慢慢地已经可以脱离字幕，听英文技术讲座，这种感觉超棒。\n2. 这第6遍的rails101中，竟然还能学到新东西，真是惊讶。\n3. 和燕琳试了一下「谷歌环聊」，完全可以解决远程meetup的问题啊，超赞的！\n4. 今天的低点是编程的练习密度没有之前大了，因为教材停更了，所以就只能回去练习「rails101」、「招聘网站」，动力没那么足。\n\n## Interpretive\n\n`用最快的速度，完成第六遍「rails101」`\n\n> 如何系统化精进自己？「每天只要比昨天进步」、重複练习、比上次速度快一倍熟练一倍，练到最后，自己才会发现一件事。这个世界不是在比谁天份，而是比谁熟练。速度是熟练、创意也是熟练、神乎其技也是熟练。 — xdite\n\n> 「职业选手」应该要对于自己的职业技能出手程度有信心而且输出稳定。— xdite\n\n`一个动作，commit一次`\n\n今天在做「rails101」时，突然意识自己经常都是写了很多很多代码，然后才提交，都想不出用什么「message」来描述，因为做了太多事情。而「rails101」是每做一个小功能，就提交一次，这是我应该学习的地方。以后要多多注意。\n\n`做新功能时，不要想着优化，优化时，不要想着增加功能`\n\n这也是从「rails101」得到的感悟。先用最快的速度把功能做出来，然后如果觉得代码不合理，再进行优化，像这样子一步一步来，就不会乱。\n\n`如何找出「最重要的那件事」`\n\n1: 「我能做的最重要的事情是什么？」\n\n2:「做了这件事就会…」（目标是什么？）\n\n3: 「…...让其他事变得更容易或者不必要了」\n\n> 你必须做，可能做、将会做的时都要靠边站，你真正做的事才最重要。 — 谢尔·希尔弗斯坦\n\n`「学习这回事」17条金句`\n\n1. 你越了解自己，就越能找到自己趣味相投的公司，或者甚至是把原先不那麽理想的环境直接调整成自己喜欢的地方。\n2. 公司是营利事业，公司是为股东负责，不是为员工负责。主管是为公司负责，不是为你负责。\n3. 抓对方向才能发挥自己的最大价值。工作起来才会愉快，成果才会丰硕，每天上班才会爽，成长速度才会跟疯子一样。\n4. 「土播鼠节症候群」，间单的来说，就是一个人就是会不断重复自己犯过的错。每次都会在类似的事上一直犯同样的错，循环自杀。\n5. 「因为我付了钱，不练就是把钱丢到水裡。」\n6. 这些练不起来的学科，无一例外的共通点就是：他们的知识取得成本相对都很低廉，既然廉价，自然就没有得到我那麽高的重视。\n7. 要变强就是要每天练习，就是这样而已.\n8. 成功真正的定义是什麽？是「做自己喜欢且擅长的事，从而达到丰富的成果」。\n9. 读书只是「暂时的」加智力，实作才能留下这些能力。\n10. 学外语、学技能「飞速」的技巧。发现不外乎是：泡脑子（整天浸在该环境裡）、不能 out of context （学一堆脱离情境的单一技巧）、有成就感的主题。\n11. 必须先从有渴望去解抉问题，去读书学习开始。\n12. 不要自愿关在一份你根本不喜欢做的工作，下班再找机会作喜欢的事。\n13. 千万不要白天去作完全不喜欢而且没热情的工作（即使薪水看起来还不错），晚上再用闲暇时间找机会作自己有热情的事。\n14. 这些东西一定要学：「Source Control」、「Do a \"real\" project」、「学习协作」、「分享(程式码以及文章）」、「Learn English」\n15. 让我发现捕获好同事的好原则：「负责任」与「主动帮助别人」\n16. 如何系统化精进自己？「每天只要比昨天进步」、重複练习、比上次速度快一倍熟练一倍，练到最后，自己才会发现一件事。这个世界不是在比谁天份，而是比谁熟练。速度是熟练、创意也是熟练、神乎其技也是熟练。\n17. 「职业选手」应该要对于自己的职业技能出手程度有信心而且输出稳定。\n\n## Decisional\n\n- 把需求细化到足够小的动作，然后每完成一个小动作，就提交一次。\n- coding是目前最重要的事，其他的事情都靠边站。\n- 让自己沉浸在编程的世界里，重复练习，每天都要比昨天的自己好。","source":"_posts/2017-02-03-orid-1.md","raw":"---\ntitle: 【ORID总结】2/2\ncategories: 全栈营\n---\n\n## Objective\n\n- 花1小时48分钟，完成rails101第6遍。\n- 看完教程《[Ruby on Rails **Tuto**rial - YouTube](https://www.youtube.com/watch?v=GY7Ps8fqGdc)》，教的比较浅，没学到什么干货，就当练习英语听力了。\n- 看完xdite老师的书《學習這回事》\n- 践行「最重要的那件事」，把大部分的时间都用在编程上。\n\n## Reflective\n\n1. 最近听了很多英语的教程，看了很多英文文档和书籍，慢慢地已经可以脱离字幕，听英文技术讲座，这种感觉超棒。\n2. 这第6遍的rails101中，竟然还能学到新东西，真是惊讶。\n3. 和燕琳试了一下「谷歌环聊」，完全可以解决远程meetup的问题啊，超赞的！\n4. 今天的低点是编程的练习密度没有之前大了，因为教材停更了，所以就只能回去练习「rails101」、「招聘网站」，动力没那么足。\n\n## Interpretive\n\n`用最快的速度，完成第六遍「rails101」`\n\n> 如何系统化精进自己？「每天只要比昨天进步」、重複练习、比上次速度快一倍熟练一倍，练到最后，自己才会发现一件事。这个世界不是在比谁天份，而是比谁熟练。速度是熟练、创意也是熟练、神乎其技也是熟练。 — xdite\n\n> 「职业选手」应该要对于自己的职业技能出手程度有信心而且输出稳定。— xdite\n\n`一个动作，commit一次`\n\n今天在做「rails101」时，突然意识自己经常都是写了很多很多代码，然后才提交，都想不出用什么「message」来描述，因为做了太多事情。而「rails101」是每做一个小功能，就提交一次，这是我应该学习的地方。以后要多多注意。\n\n`做新功能时，不要想着优化，优化时，不要想着增加功能`\n\n这也是从「rails101」得到的感悟。先用最快的速度把功能做出来，然后如果觉得代码不合理，再进行优化，像这样子一步一步来，就不会乱。\n\n`如何找出「最重要的那件事」`\n\n1: 「我能做的最重要的事情是什么？」\n\n2:「做了这件事就会…」（目标是什么？）\n\n3: 「…...让其他事变得更容易或者不必要了」\n\n> 你必须做，可能做、将会做的时都要靠边站，你真正做的事才最重要。 — 谢尔·希尔弗斯坦\n\n`「学习这回事」17条金句`\n\n1. 你越了解自己，就越能找到自己趣味相投的公司，或者甚至是把原先不那麽理想的环境直接调整成自己喜欢的地方。\n2. 公司是营利事业，公司是为股东负责，不是为员工负责。主管是为公司负责，不是为你负责。\n3. 抓对方向才能发挥自己的最大价值。工作起来才会愉快，成果才会丰硕，每天上班才会爽，成长速度才会跟疯子一样。\n4. 「土播鼠节症候群」，间单的来说，就是一个人就是会不断重复自己犯过的错。每次都会在类似的事上一直犯同样的错，循环自杀。\n5. 「因为我付了钱，不练就是把钱丢到水裡。」\n6. 这些练不起来的学科，无一例外的共通点就是：他们的知识取得成本相对都很低廉，既然廉价，自然就没有得到我那麽高的重视。\n7. 要变强就是要每天练习，就是这样而已.\n8. 成功真正的定义是什麽？是「做自己喜欢且擅长的事，从而达到丰富的成果」。\n9. 读书只是「暂时的」加智力，实作才能留下这些能力。\n10. 学外语、学技能「飞速」的技巧。发现不外乎是：泡脑子（整天浸在该环境裡）、不能 out of context （学一堆脱离情境的单一技巧）、有成就感的主题。\n11. 必须先从有渴望去解抉问题，去读书学习开始。\n12. 不要自愿关在一份你根本不喜欢做的工作，下班再找机会作喜欢的事。\n13. 千万不要白天去作完全不喜欢而且没热情的工作（即使薪水看起来还不错），晚上再用闲暇时间找机会作自己有热情的事。\n14. 这些东西一定要学：「Source Control」、「Do a \"real\" project」、「学习协作」、「分享(程式码以及文章）」、「Learn English」\n15. 让我发现捕获好同事的好原则：「负责任」与「主动帮助别人」\n16. 如何系统化精进自己？「每天只要比昨天进步」、重複练习、比上次速度快一倍熟练一倍，练到最后，自己才会发现一件事。这个世界不是在比谁天份，而是比谁熟练。速度是熟练、创意也是熟练、神乎其技也是熟练。\n17. 「职业选手」应该要对于自己的职业技能出手程度有信心而且输出稳定。\n\n## Decisional\n\n- 把需求细化到足够小的动作，然后每完成一个小动作，就提交一次。\n- coding是目前最重要的事，其他的事情都靠边站。\n- 让自己沉浸在编程的世界里，重复练习，每天都要比昨天的自己好。","slug":"2017-02-03-orid-1","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0diccz0060fson4j1e4p2h","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>花1小时48分钟，完成rails101第6遍。</li>\n<li>看完教程《<a href=\"https://www.youtube.com/watch?v=GY7Ps8fqGdc\" target=\"_blank\" rel=\"noopener\">Ruby on Rails <strong>Tuto</strong>rial - YouTube</a>》，教的比较浅，没学到什么干货，就当练习英语听力了。</li>\n<li>看完xdite老师的书《學習這回事》</li>\n<li>践行「最重要的那件事」，把大部分的时间都用在编程上。</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><ol>\n<li>最近听了很多英语的教程，看了很多英文文档和书籍，慢慢地已经可以脱离字幕，听英文技术讲座，这种感觉超棒。</li>\n<li>这第6遍的rails101中，竟然还能学到新东西，真是惊讶。</li>\n<li>和燕琳试了一下「谷歌环聊」，完全可以解决远程meetup的问题啊，超赞的！</li>\n<li>今天的低点是编程的练习密度没有之前大了，因为教材停更了，所以就只能回去练习「rails101」、「招聘网站」，动力没那么足。</li>\n</ol>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p><code>用最快的速度，完成第六遍「rails101」</code></p>\n<blockquote>\n<p>如何系统化精进自己？「每天只要比昨天进步」、重複练习、比上次速度快一倍熟练一倍，练到最后，自己才会发现一件事。这个世界不是在比谁天份，而是比谁熟练。速度是熟练、创意也是熟练、神乎其技也是熟练。 — xdite</p>\n</blockquote>\n<blockquote>\n<p>「职业选手」应该要对于自己的职业技能出手程度有信心而且输出稳定。— xdite</p>\n</blockquote>\n<p><code>一个动作，commit一次</code></p>\n<p>今天在做「rails101」时，突然意识自己经常都是写了很多很多代码，然后才提交，都想不出用什么「message」来描述，因为做了太多事情。而「rails101」是每做一个小功能，就提交一次，这是我应该学习的地方。以后要多多注意。</p>\n<p><code>做新功能时，不要想着优化，优化时，不要想着增加功能</code></p>\n<p>这也是从「rails101」得到的感悟。先用最快的速度把功能做出来，然后如果觉得代码不合理，再进行优化，像这样子一步一步来，就不会乱。</p>\n<p><code>如何找出「最重要的那件事」</code></p>\n<p>1: 「我能做的最重要的事情是什么？」</p>\n<p>2:「做了这件事就会…」（目标是什么？）</p>\n<p>3: 「……让其他事变得更容易或者不必要了」</p>\n<blockquote>\n<p>你必须做，可能做、将会做的时都要靠边站，你真正做的事才最重要。 — 谢尔·希尔弗斯坦</p>\n</blockquote>\n<p><code>「学习这回事」17条金句</code></p>\n<ol>\n<li>你越了解自己，就越能找到自己趣味相投的公司，或者甚至是把原先不那麽理想的环境直接调整成自己喜欢的地方。</li>\n<li>公司是营利事业，公司是为股东负责，不是为员工负责。主管是为公司负责，不是为你负责。</li>\n<li>抓对方向才能发挥自己的最大价值。工作起来才会愉快，成果才会丰硕，每天上班才会爽，成长速度才会跟疯子一样。</li>\n<li>「土播鼠节症候群」，间单的来说，就是一个人就是会不断重复自己犯过的错。每次都会在类似的事上一直犯同样的错，循环自杀。</li>\n<li>「因为我付了钱，不练就是把钱丢到水裡。」</li>\n<li>这些练不起来的学科，无一例外的共通点就是：他们的知识取得成本相对都很低廉，既然廉价，自然就没有得到我那麽高的重视。</li>\n<li>要变强就是要每天练习，就是这样而已.</li>\n<li>成功真正的定义是什麽？是「做自己喜欢且擅长的事，从而达到丰富的成果」。</li>\n<li>读书只是「暂时的」加智力，实作才能留下这些能力。</li>\n<li>学外语、学技能「飞速」的技巧。发现不外乎是：泡脑子（整天浸在该环境裡）、不能 out of context （学一堆脱离情境的单一技巧）、有成就感的主题。</li>\n<li>必须先从有渴望去解抉问题，去读书学习开始。</li>\n<li>不要自愿关在一份你根本不喜欢做的工作，下班再找机会作喜欢的事。</li>\n<li>千万不要白天去作完全不喜欢而且没热情的工作（即使薪水看起来还不错），晚上再用闲暇时间找机会作自己有热情的事。</li>\n<li>这些东西一定要学：「Source Control」、「Do a “real” project」、「学习协作」、「分享(程式码以及文章）」、「Learn English」</li>\n<li>让我发现捕获好同事的好原则：「负责任」与「主动帮助别人」</li>\n<li>如何系统化精进自己？「每天只要比昨天进步」、重複练习、比上次速度快一倍熟练一倍，练到最后，自己才会发现一件事。这个世界不是在比谁天份，而是比谁熟练。速度是熟练、创意也是熟练、神乎其技也是熟练。</li>\n<li>「职业选手」应该要对于自己的职业技能出手程度有信心而且输出稳定。</li>\n</ol>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>把需求细化到足够小的动作，然后每完成一个小动作，就提交一次。</li>\n<li>coding是目前最重要的事，其他的事情都靠边站。</li>\n<li>让自己沉浸在编程的世界里，重复练习，每天都要比昨天的自己好。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>花1小时48分钟，完成rails101第6遍。</li>\n<li>看完教程《<a href=\"https://www.youtube.com/watch?v=GY7Ps8fqGdc\" target=\"_blank\" rel=\"noopener\">Ruby on Rails <strong>Tuto</strong>rial - YouTube</a>》，教的比较浅，没学到什么干货，就当练习英语听力了。</li>\n<li>看完xdite老师的书《學習這回事》</li>\n<li>践行「最重要的那件事」，把大部分的时间都用在编程上。</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><ol>\n<li>最近听了很多英语的教程，看了很多英文文档和书籍，慢慢地已经可以脱离字幕，听英文技术讲座，这种感觉超棒。</li>\n<li>这第6遍的rails101中，竟然还能学到新东西，真是惊讶。</li>\n<li>和燕琳试了一下「谷歌环聊」，完全可以解决远程meetup的问题啊，超赞的！</li>\n<li>今天的低点是编程的练习密度没有之前大了，因为教材停更了，所以就只能回去练习「rails101」、「招聘网站」，动力没那么足。</li>\n</ol>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><p><code>用最快的速度，完成第六遍「rails101」</code></p>\n<blockquote>\n<p>如何系统化精进自己？「每天只要比昨天进步」、重複练习、比上次速度快一倍熟练一倍，练到最后，自己才会发现一件事。这个世界不是在比谁天份，而是比谁熟练。速度是熟练、创意也是熟练、神乎其技也是熟练。 — xdite</p>\n</blockquote>\n<blockquote>\n<p>「职业选手」应该要对于自己的职业技能出手程度有信心而且输出稳定。— xdite</p>\n</blockquote>\n<p><code>一个动作，commit一次</code></p>\n<p>今天在做「rails101」时，突然意识自己经常都是写了很多很多代码，然后才提交，都想不出用什么「message」来描述，因为做了太多事情。而「rails101」是每做一个小功能，就提交一次，这是我应该学习的地方。以后要多多注意。</p>\n<p><code>做新功能时，不要想着优化，优化时，不要想着增加功能</code></p>\n<p>这也是从「rails101」得到的感悟。先用最快的速度把功能做出来，然后如果觉得代码不合理，再进行优化，像这样子一步一步来，就不会乱。</p>\n<p><code>如何找出「最重要的那件事」</code></p>\n<p>1: 「我能做的最重要的事情是什么？」</p>\n<p>2:「做了这件事就会…」（目标是什么？）</p>\n<p>3: 「……让其他事变得更容易或者不必要了」</p>\n<blockquote>\n<p>你必须做，可能做、将会做的时都要靠边站，你真正做的事才最重要。 — 谢尔·希尔弗斯坦</p>\n</blockquote>\n<p><code>「学习这回事」17条金句</code></p>\n<ol>\n<li>你越了解自己，就越能找到自己趣味相投的公司，或者甚至是把原先不那麽理想的环境直接调整成自己喜欢的地方。</li>\n<li>公司是营利事业，公司是为股东负责，不是为员工负责。主管是为公司负责，不是为你负责。</li>\n<li>抓对方向才能发挥自己的最大价值。工作起来才会愉快，成果才会丰硕，每天上班才会爽，成长速度才会跟疯子一样。</li>\n<li>「土播鼠节症候群」，间单的来说，就是一个人就是会不断重复自己犯过的错。每次都会在类似的事上一直犯同样的错，循环自杀。</li>\n<li>「因为我付了钱，不练就是把钱丢到水裡。」</li>\n<li>这些练不起来的学科，无一例外的共通点就是：他们的知识取得成本相对都很低廉，既然廉价，自然就没有得到我那麽高的重视。</li>\n<li>要变强就是要每天练习，就是这样而已.</li>\n<li>成功真正的定义是什麽？是「做自己喜欢且擅长的事，从而达到丰富的成果」。</li>\n<li>读书只是「暂时的」加智力，实作才能留下这些能力。</li>\n<li>学外语、学技能「飞速」的技巧。发现不外乎是：泡脑子（整天浸在该环境裡）、不能 out of context （学一堆脱离情境的单一技巧）、有成就感的主题。</li>\n<li>必须先从有渴望去解抉问题，去读书学习开始。</li>\n<li>不要自愿关在一份你根本不喜欢做的工作，下班再找机会作喜欢的事。</li>\n<li>千万不要白天去作完全不喜欢而且没热情的工作（即使薪水看起来还不错），晚上再用闲暇时间找机会作自己有热情的事。</li>\n<li>这些东西一定要学：「Source Control」、「Do a “real” project」、「学习协作」、「分享(程式码以及文章）」、「Learn English」</li>\n<li>让我发现捕获好同事的好原则：「负责任」与「主动帮助别人」</li>\n<li>如何系统化精进自己？「每天只要比昨天进步」、重複练习、比上次速度快一倍熟练一倍，练到最后，自己才会发现一件事。这个世界不是在比谁天份，而是比谁熟练。速度是熟练、创意也是熟练、神乎其技也是熟练。</li>\n<li>「职业选手」应该要对于自己的职业技能出手程度有信心而且输出稳定。</li>\n</ol>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>把需求细化到足够小的动作，然后每完成一个小动作，就提交一次。</li>\n<li>coding是目前最重要的事，其他的事情都靠边站。</li>\n<li>让自己沉浸在编程的世界里，重复练习，每天都要比昨天的自己好。</li>\n</ul>\n"},{"title":"【ORID总结】2/3","_content":"\n## Objective\n\n**完成了哪些事情?**\n\n第一件事，做了一个「简易版的个人微博」，可以作为「外部记忆库」，这是从阳志平老师的《超一流作家的写作利器：用卡片提升创意的密度》一文中得到的灵感。\n\n> 它仅仅是一个记忆外部化工具。在那里，我可以肆无忌惮地随时随地进行记忆外部化。重新回归初心：想到什么、记下什么。它既不「社交」；也不是「媒体」，仅供自己一个人使用的「外部记忆库」，用来积累脑中不断闪过的灵感。\n\n第二件事，复习《learning how to learn》，系统地整理出一套笔记。\n\n第三件事，晚上复习了笑来老师的跨年讲座《我们的2017》，收获很大。\n\n## Reflective\n\n**高峰是什么?**和一个全栈营的战友聊天，很愉快，今后我们可以相互鼓励，一起进步。\n\n## Interpretive\n\n- 韧性。怎样成为一个有韧性的人？平静地接受他人的错误和不足。你对别人越宽容，你自己做事越有韧性。\n- 创造惊喜的7个方法：「你必须相信你自己会有好运的」、「尽量不做可能倒霉的事情」、「保持开放」、「持续学习」、「创造更多的连接」、「保留适当的随机」、「多管齐下，齐头并进」\n- 学习时必须给自己一点休息时间。学习就是建楼，要等「砂浆」干了，才可以继续往上建。\n- 「职业选手」就是要对于自己的职业技能出手程度有信心而且输出稳定 — 《你的拿手绝技是什么？》\n- 每天练习才是变强的关键。\n\n## Decisional\n\n- 每天都要践行「创造惊喜的7个方法」\n- 成为一名合格的「战友」\n- 一定要保持开放","source":"_posts/2017-02-03-orid.md","raw":"---\ntitle: 【ORID总结】2/3\ncategories: 全栈营\n---\n\n## Objective\n\n**完成了哪些事情?**\n\n第一件事，做了一个「简易版的个人微博」，可以作为「外部记忆库」，这是从阳志平老师的《超一流作家的写作利器：用卡片提升创意的密度》一文中得到的灵感。\n\n> 它仅仅是一个记忆外部化工具。在那里，我可以肆无忌惮地随时随地进行记忆外部化。重新回归初心：想到什么、记下什么。它既不「社交」；也不是「媒体」，仅供自己一个人使用的「外部记忆库」，用来积累脑中不断闪过的灵感。\n\n第二件事，复习《learning how to learn》，系统地整理出一套笔记。\n\n第三件事，晚上复习了笑来老师的跨年讲座《我们的2017》，收获很大。\n\n## Reflective\n\n**高峰是什么?**和一个全栈营的战友聊天，很愉快，今后我们可以相互鼓励，一起进步。\n\n## Interpretive\n\n- 韧性。怎样成为一个有韧性的人？平静地接受他人的错误和不足。你对别人越宽容，你自己做事越有韧性。\n- 创造惊喜的7个方法：「你必须相信你自己会有好运的」、「尽量不做可能倒霉的事情」、「保持开放」、「持续学习」、「创造更多的连接」、「保留适当的随机」、「多管齐下，齐头并进」\n- 学习时必须给自己一点休息时间。学习就是建楼，要等「砂浆」干了，才可以继续往上建。\n- 「职业选手」就是要对于自己的职业技能出手程度有信心而且输出稳定 — 《你的拿手绝技是什么？》\n- 每天练习才是变强的关键。\n\n## Decisional\n\n- 每天都要践行「创造惊喜的7个方法」\n- 成为一名合格的「战友」\n- 一定要保持开放","slug":"2017-02-03-orid","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicd00062fsonacy6jpcq","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p><strong>完成了哪些事情?</strong></p>\n<p>第一件事，做了一个「简易版的个人微博」，可以作为「外部记忆库」，这是从阳志平老师的《超一流作家的写作利器：用卡片提升创意的密度》一文中得到的灵感。</p>\n<blockquote>\n<p>它仅仅是一个记忆外部化工具。在那里，我可以肆无忌惮地随时随地进行记忆外部化。重新回归初心：想到什么、记下什么。它既不「社交」；也不是「媒体」，仅供自己一个人使用的「外部记忆库」，用来积累脑中不断闪过的灵感。</p>\n</blockquote>\n<p>第二件事，复习《learning how to learn》，系统地整理出一套笔记。</p>\n<p>第三件事，晚上复习了笑来老师的跨年讲座《我们的2017》，收获很大。</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p><strong>高峰是什么?</strong>和一个全栈营的战友聊天，很愉快，今后我们可以相互鼓励，一起进步。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><ul>\n<li>韧性。怎样成为一个有韧性的人？平静地接受他人的错误和不足。你对别人越宽容，你自己做事越有韧性。</li>\n<li>创造惊喜的7个方法：「你必须相信你自己会有好运的」、「尽量不做可能倒霉的事情」、「保持开放」、「持续学习」、「创造更多的连接」、「保留适当的随机」、「多管齐下，齐头并进」</li>\n<li>学习时必须给自己一点休息时间。学习就是建楼，要等「砂浆」干了，才可以继续往上建。</li>\n<li>「职业选手」就是要对于自己的职业技能出手程度有信心而且输出稳定 — 《你的拿手绝技是什么？》</li>\n<li>每天练习才是变强的关键。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>每天都要践行「创造惊喜的7个方法」</li>\n<li>成为一名合格的「战友」</li>\n<li>一定要保持开放</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p><strong>完成了哪些事情?</strong></p>\n<p>第一件事，做了一个「简易版的个人微博」，可以作为「外部记忆库」，这是从阳志平老师的《超一流作家的写作利器：用卡片提升创意的密度》一文中得到的灵感。</p>\n<blockquote>\n<p>它仅仅是一个记忆外部化工具。在那里，我可以肆无忌惮地随时随地进行记忆外部化。重新回归初心：想到什么、记下什么。它既不「社交」；也不是「媒体」，仅供自己一个人使用的「外部记忆库」，用来积累脑中不断闪过的灵感。</p>\n</blockquote>\n<p>第二件事，复习《learning how to learn》，系统地整理出一套笔记。</p>\n<p>第三件事，晚上复习了笑来老师的跨年讲座《我们的2017》，收获很大。</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p><strong>高峰是什么?</strong>和一个全栈营的战友聊天，很愉快，今后我们可以相互鼓励，一起进步。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><ul>\n<li>韧性。怎样成为一个有韧性的人？平静地接受他人的错误和不足。你对别人越宽容，你自己做事越有韧性。</li>\n<li>创造惊喜的7个方法：「你必须相信你自己会有好运的」、「尽量不做可能倒霉的事情」、「保持开放」、「持续学习」、「创造更多的连接」、「保留适当的随机」、「多管齐下，齐头并进」</li>\n<li>学习时必须给自己一点休息时间。学习就是建楼，要等「砂浆」干了，才可以继续往上建。</li>\n<li>「职业选手」就是要对于自己的职业技能出手程度有信心而且输出稳定 — 《你的拿手绝技是什么？》</li>\n<li>每天练习才是变强的关键。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>每天都要践行「创造惊喜的7个方法」</li>\n<li>成为一名合格的「战友」</li>\n<li>一定要保持开放</li>\n</ul>\n"},{"title":"【错误】for-in 和 for-of","_content":"\n## 动作\n\n```javascript\nlet str = 'abcde'\nfor (let char in str) {\n  console.log(char)\n}\n```\n\n## 预期结果\n\na b c d e\n\n## 实际结果\n\n1 2 3 4 5\n\n## 分析\n\n用`for-of`试一下\n\n```javascript\nlet str = 'abcde'\nfor (let char of str) {\n  console.log(char) // a b c d e\n}\n```\n\n这才是我想要的结果。\n\n说明：`for-in`是遍历index，`for-of`是遍历value\n\n## 解决方法\n\n使用`for-of`","source":"_posts/2017-02-05-for-in-for-of.md","raw":"---\ntitle: 【错误】for-in 和 for-of\ncategories: Javascript\n---\n\n## 动作\n\n```javascript\nlet str = 'abcde'\nfor (let char in str) {\n  console.log(char)\n}\n```\n\n## 预期结果\n\na b c d e\n\n## 实际结果\n\n1 2 3 4 5\n\n## 分析\n\n用`for-of`试一下\n\n```javascript\nlet str = 'abcde'\nfor (let char of str) {\n  console.log(char) // a b c d e\n}\n```\n\n这才是我想要的结果。\n\n说明：`for-in`是遍历index，`for-of`是遍历value\n\n## 解决方法\n\n使用`for-of`","slug":"2017-02-05-for-in-for-of","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicd10065fson4xdbd2m8","content":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'abcde'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">in</span> str) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(char)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p>a b c d e</p>\n<h2 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h2><p>1 2 3 4 5</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>用<code>for-of</code>试一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'abcde'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> str) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(char) <span class=\"comment\">// a b c d e</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这才是我想要的结果。</p>\n<p>说明：<code>for-in</code>是遍历index，<code>for-of</code>是遍历value</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>使用<code>for-of</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'abcde'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">in</span> str) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(char)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p>a b c d e</p>\n<h2 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h2><p>1 2 3 4 5</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>用<code>for-of</code>试一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'abcde'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> str) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(char) <span class=\"comment\">// a b c d e</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这才是我想要的结果。</p>\n<p>说明：<code>for-in</code>是遍历index，<code>for-of</code>是遍历value</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>使用<code>for-of</code></p>\n"},{"title":"用nodejs写脚本自动玩Hangman游戏","_content":"\n这是一道[测试题](https://github.com/strikingly/strikingly-interview-test-instructions)，利用现成的`RESTful API`，用`js`编写脚本，实现自动玩游戏的功能，而且还要能获得高分。\n\ngithub地址：[hangman](https://github.com/raimonfuns/hangman)\n\n花了10个小时左右完成，这基本上就是一道算法题，而且是很耗脑力的算法，有点难度，完成之后还是很有成就感的，特别是看着这个游戏自动运行，有点黑客破解游戏的感觉，哈哈。\n\n![](http://oggx6lf7f.bkt.clouddn.com/cid96.png)\n\n![](http://oggx6lf7f.bkt.clouddn.com/ymn2s.png)\n\n","source":"_posts/2017-02-05-hangman.md","raw":"---\ntitle: 用nodejs写脚本自动玩Hangman游戏\ncategories: 作品\n---\n\n这是一道[测试题](https://github.com/strikingly/strikingly-interview-test-instructions)，利用现成的`RESTful API`，用`js`编写脚本，实现自动玩游戏的功能，而且还要能获得高分。\n\ngithub地址：[hangman](https://github.com/raimonfuns/hangman)\n\n花了10个小时左右完成，这基本上就是一道算法题，而且是很耗脑力的算法，有点难度，完成之后还是很有成就感的，特别是看着这个游戏自动运行，有点黑客破解游戏的感觉，哈哈。\n\n![](http://oggx6lf7f.bkt.clouddn.com/cid96.png)\n\n![](http://oggx6lf7f.bkt.clouddn.com/ymn2s.png)\n\n","slug":"2017-02-05-hangman","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicd20067fsonjxegxr30","content":"<p>这是一道<a href=\"https://github.com/strikingly/strikingly-interview-test-instructions\" target=\"_blank\" rel=\"noopener\">测试题</a>，利用现成的<code>RESTful API</code>，用<code>js</code>编写脚本，实现自动玩游戏的功能，而且还要能获得高分。</p>\n<p>github地址：<a href=\"https://github.com/raimonfuns/hangman\" target=\"_blank\" rel=\"noopener\">hangman</a></p>\n<p>花了10个小时左右完成，这基本上就是一道算法题，而且是很耗脑力的算法，有点难度，完成之后还是很有成就感的，特别是看着这个游戏自动运行，有点黑客破解游戏的感觉，哈哈。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/cid96.png\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ymn2s.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一道<a href=\"https://github.com/strikingly/strikingly-interview-test-instructions\" target=\"_blank\" rel=\"noopener\">测试题</a>，利用现成的<code>RESTful API</code>，用<code>js</code>编写脚本，实现自动玩游戏的功能，而且还要能获得高分。</p>\n<p>github地址：<a href=\"https://github.com/raimonfuns/hangman\" target=\"_blank\" rel=\"noopener\">hangman</a></p>\n<p>花了10个小时左右完成，这基本上就是一道算法题，而且是很耗脑力的算法，有点难度，完成之后还是很有成就感的，特别是看着这个游戏自动运行，有点黑客破解游戏的感觉，哈哈。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/cid96.png\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ymn2s.png\" alt=\"\"></p>\n"},{"title":"【错误】new require构造函数","_content":"\n## 动作\n\n```javascript\nlet player = new require('./player')() // player是一个构造函数\n```\n\n## 预期结果\n\n`new`一个`Player`实例\n\n## 实际结果\n\n实例的`this`为`undefined`\n\n## 分析\n\n我尝试换了一种写法\n\n```javascript\nconst Player = require('./player')\nlet player = new Player()\n```\n\n这种是可以的。\n\n我认为是`new`和`require`不能连在一起用，于是尝试用`()`把`require`包起来\n\n## 解决方法\n\n```javascript\nlet player = new (require('./player'))()\n```\n\nIt works!","source":"_posts/2017-02-05-new-require.md","raw":"---\ntitle: 【错误】new require构造函数\ncategories: Javascript\n---\n\n## 动作\n\n```javascript\nlet player = new require('./player')() // player是一个构造函数\n```\n\n## 预期结果\n\n`new`一个`Player`实例\n\n## 实际结果\n\n实例的`this`为`undefined`\n\n## 分析\n\n我尝试换了一种写法\n\n```javascript\nconst Player = require('./player')\nlet player = new Player()\n```\n\n这种是可以的。\n\n我认为是`new`和`require`不能连在一起用，于是尝试用`()`把`require`包起来\n\n## 解决方法\n\n```javascript\nlet player = new (require('./player'))()\n```\n\nIt works!","slug":"2017-02-05-new-require","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicd30069fson1mw4h1bp","content":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> player = <span class=\"keyword\">new</span> <span class=\"built_in\">require</span>(<span class=\"string\">'./player'</span>)() <span class=\"comment\">// player是一个构造函数</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p><code>new</code>一个<code>Player</code>实例</p>\n<h2 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h2><p>实例的<code>this</code>为<code>undefined</code></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我尝试换了一种写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Player = <span class=\"built_in\">require</span>(<span class=\"string\">'./player'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> player = <span class=\"keyword\">new</span> Player()</span><br></pre></td></tr></table></figure>\n<p>这种是可以的。</p>\n<p>我认为是<code>new</code>和<code>require</code>不能连在一起用，于是尝试用<code>()</code>把<code>require</code>包起来</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> player = <span class=\"keyword\">new</span> (<span class=\"built_in\">require</span>(<span class=\"string\">'./player'</span>))()</span><br></pre></td></tr></table></figure>\n<p>It works!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> player = <span class=\"keyword\">new</span> <span class=\"built_in\">require</span>(<span class=\"string\">'./player'</span>)() <span class=\"comment\">// player是一个构造函数</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p><code>new</code>一个<code>Player</code>实例</p>\n<h2 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h2><p>实例的<code>this</code>为<code>undefined</code></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我尝试换了一种写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Player = <span class=\"built_in\">require</span>(<span class=\"string\">'./player'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> player = <span class=\"keyword\">new</span> Player()</span><br></pre></td></tr></table></figure>\n<p>这种是可以的。</p>\n<p>我认为是<code>new</code>和<code>require</code>不能连在一起用，于是尝试用<code>()</code>把<code>require</code>包起来</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> player = <span class=\"keyword\">new</span> (<span class=\"built_in\">require</span>(<span class=\"string\">'./player'</span>))()</span><br></pre></td></tr></table></figure>\n<p>It works!</p>\n"},{"title":"【ORID总结】2/5","_content":"\n## Objective\n\n- 完成「Hangman游戏」自动化脚本\n- 《【错误】promise的链式操作》\n- 《【错误】new require构造函数》\n- 《【错误】for-in 和 for-of》\n- 《用nodejs写脚本自动玩Hangman游戏》\n\n## Reflective\n\n把「Hangman游戏」自动化脚本写完之后，看着游戏自动运行，超有成就感！\n\n## Interpretive\n\n- 把算法步骤写下来，释放大脑记忆压力。「Hangman游戏」的自动化脚本完全考验算法能力，因为科学研究发现，「[大脑的工作记忆只有4个槽](https://raimonfuns.gitbooks.io/-learning-how-to-learn/content/memory.html)」，很难同时记住大量的运算步骤，所以，要借助纸和笔把运算步骤写下来，大脑就轻松了。\n- 把复杂的功能分解成小的功能。如果要开发复杂的功能，一定要先切分功能，越细化越好，这样做起来就会比较顺利，千万不能急，不然就会很乱。\n\n## Decisional\n\n继续保持这种flow「沉浸」的状态。","source":"_posts/2017-02-05-orid.md","raw":"---\ntitle: 【ORID总结】2/5\ncategories: 全栈营\n---\n\n## Objective\n\n- 完成「Hangman游戏」自动化脚本\n- 《【错误】promise的链式操作》\n- 《【错误】new require构造函数》\n- 《【错误】for-in 和 for-of》\n- 《用nodejs写脚本自动玩Hangman游戏》\n\n## Reflective\n\n把「Hangman游戏」自动化脚本写完之后，看着游戏自动运行，超有成就感！\n\n## Interpretive\n\n- 把算法步骤写下来，释放大脑记忆压力。「Hangman游戏」的自动化脚本完全考验算法能力，因为科学研究发现，「[大脑的工作记忆只有4个槽](https://raimonfuns.gitbooks.io/-learning-how-to-learn/content/memory.html)」，很难同时记住大量的运算步骤，所以，要借助纸和笔把运算步骤写下来，大脑就轻松了。\n- 把复杂的功能分解成小的功能。如果要开发复杂的功能，一定要先切分功能，越细化越好，这样做起来就会比较顺利，千万不能急，不然就会很乱。\n\n## Decisional\n\n继续保持这种flow「沉浸」的状态。","slug":"2017-02-05-orid","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicd4006bfsonp4dzp9pb","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>完成「Hangman游戏」自动化脚本</li>\n<li>《【错误】promise的链式操作》</li>\n<li>《【错误】new require构造函数》</li>\n<li>《【错误】for-in 和 for-of》</li>\n<li>《用nodejs写脚本自动玩Hangman游戏》</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>把「Hangman游戏」自动化脚本写完之后，看着游戏自动运行，超有成就感！</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><ul>\n<li>把算法步骤写下来，释放大脑记忆压力。「Hangman游戏」的自动化脚本完全考验算法能力，因为科学研究发现，「<a href=\"https://raimonfuns.gitbooks.io/-learning-how-to-learn/content/memory.html\" target=\"_blank\" rel=\"noopener\">大脑的工作记忆只有4个槽</a>」，很难同时记住大量的运算步骤，所以，要借助纸和笔把运算步骤写下来，大脑就轻松了。</li>\n<li>把复杂的功能分解成小的功能。如果要开发复杂的功能，一定要先切分功能，越细化越好，这样做起来就会比较顺利，千万不能急，不然就会很乱。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>继续保持这种flow「沉浸」的状态。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>完成「Hangman游戏」自动化脚本</li>\n<li>《【错误】promise的链式操作》</li>\n<li>《【错误】new require构造函数》</li>\n<li>《【错误】for-in 和 for-of》</li>\n<li>《用nodejs写脚本自动玩Hangman游戏》</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>把「Hangman游戏」自动化脚本写完之后，看着游戏自动运行，超有成就感！</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><ul>\n<li>把算法步骤写下来，释放大脑记忆压力。「Hangman游戏」的自动化脚本完全考验算法能力，因为科学研究发现，「<a href=\"https://raimonfuns.gitbooks.io/-learning-how-to-learn/content/memory.html\" target=\"_blank\" rel=\"noopener\">大脑的工作记忆只有4个槽</a>」，很难同时记住大量的运算步骤，所以，要借助纸和笔把运算步骤写下来，大脑就轻松了。</li>\n<li>把复杂的功能分解成小的功能。如果要开发复杂的功能，一定要先切分功能，越细化越好，这样做起来就会比较顺利，千万不能急，不然就会很乱。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>继续保持这种flow「沉浸」的状态。</p>\n"},{"title":"【错误】promise的链式操作","_content":"\n## 动作\n\n```javascript\nlet rp = require('request-promise')\n\nrp.('http://www.google.com')\n  .done(function (htmlString) {\n    return htmlString\n  })\n  .done(function (htmlString) {\n    console.log(htmlString) \n  })\n```\n\n## 预期结果\n\n打印`http://www.google.com`的html字符串\n\n## 实际结果\n\nundefined\n\n## 分析\n\n看了`request-promise`个官方示例，用的是`then`，而不是`done`，我把`done`改成`then`，就可以进行链式操作了。\n\n后来，我用原生的`promise`再试一下，也是可以的\n\n```javascript\nlet promise = new Promise((resolve, reject) => {      \n  resolve('hello')    \n})        \n\npromise.then((data) => {      \n  console.log(data)      \n  return 'world'    \n}).then((data) => {      \n  console.log(data)    \n})    \n\n// hello\n// world\n```\n\n## 解决方法\n\n链式操作用`then`，不用`done`","source":"_posts/2017-02-05-promise.md","raw":"---\ntitle: 【错误】promise的链式操作\ncategories: Javascript\n---\n\n## 动作\n\n```javascript\nlet rp = require('request-promise')\n\nrp.('http://www.google.com')\n  .done(function (htmlString) {\n    return htmlString\n  })\n  .done(function (htmlString) {\n    console.log(htmlString) \n  })\n```\n\n## 预期结果\n\n打印`http://www.google.com`的html字符串\n\n## 实际结果\n\nundefined\n\n## 分析\n\n看了`request-promise`个官方示例，用的是`then`，而不是`done`，我把`done`改成`then`，就可以进行链式操作了。\n\n后来，我用原生的`promise`再试一下，也是可以的\n\n```javascript\nlet promise = new Promise((resolve, reject) => {      \n  resolve('hello')    \n})        \n\npromise.then((data) => {      \n  console.log(data)      \n  return 'world'    \n}).then((data) => {      \n  console.log(data)    \n})    \n\n// hello\n// world\n```\n\n## 解决方法\n\n链式操作用`then`，不用`done`","slug":"2017-02-05-promise","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicd5006dfson5ljvteq5","content":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> rp = <span class=\"built_in\">require</span>(<span class=\"string\">'request-promise'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">rp.(<span class=\"string\">'http://www.google.com'</span>)</span><br><span class=\"line\">  .done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">htmlString</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> htmlString</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">htmlString</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(htmlString) </span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p>打印<code>http://www.google.com</code>的html字符串</p>\n<h2 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h2><p>undefined</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>看了<code>request-promise</code>个官方示例，用的是<code>then</code>，而不是<code>done</code>，我把<code>done</code>改成<code>then</code>，就可以进行链式操作了。</p>\n<p>后来，我用原生的<code>promise</code>再试一下，也是可以的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;      </span><br><span class=\"line\">  resolve(<span class=\"string\">'hello'</span>)    </span><br><span class=\"line\">&#125;)        </span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;      </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)      </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'world'</span>    </span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;      </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)    </span><br><span class=\"line\">&#125;)    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>链式操作用<code>then</code>，不用<code>done</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> rp = <span class=\"built_in\">require</span>(<span class=\"string\">'request-promise'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">rp.(<span class=\"string\">'http://www.google.com'</span>)</span><br><span class=\"line\">  .done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">htmlString</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> htmlString</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">htmlString</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(htmlString) </span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p>打印<code>http://www.google.com</code>的html字符串</p>\n<h2 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h2><p>undefined</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>看了<code>request-promise</code>个官方示例，用的是<code>then</code>，而不是<code>done</code>，我把<code>done</code>改成<code>then</code>，就可以进行链式操作了。</p>\n<p>后来，我用原生的<code>promise</code>再试一下，也是可以的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;      </span><br><span class=\"line\">  resolve(<span class=\"string\">'hello'</span>)    </span><br><span class=\"line\">&#125;)        </span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;      </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)      </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'world'</span>    </span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;      </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)    </span><br><span class=\"line\">&#125;)    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>链式操作用<code>then</code>，不用<code>done</code></p>\n"},{"title":"最简单的「发布/订阅模型」","_content":"\n定义:\n\n> 发布/订阅（**Publish/subscribe** 或pub/sub）是一种[消息](https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF)[范式](https://zh.wikipedia.org/wiki/%E8%8C%83%E5%BC%8F)，消息的发送者（发布者）不是计划发送其消息给特定的接收者（订阅者）。而是发布的消息分为不同的类别，而不需要知道什么样的订阅者订阅。订阅者对一个或多个类别表达兴趣，于是只接收感兴趣的消息，而不需要知道什么样的发布者发布的消息。 — wikipedia\n\n举个例子，比如微信朋友圈，你只能看到已添加好友的动态，对于那些不是你好友的用户的动态，你是看不到的，因为你没有「订阅」他们的消息。同样的道理，你的微博主页也只会收到你关注的账号的消息，因为你「关注」了他们。\n\n用JavaScript实现最简单的「发布/订阅模型」\n\n```javascript\nvar pubSub  = {\n  callbacks: {},\n\n  on: function (msg, callback) {\n    this.callbacks[msg] = this.callbacks[msg] || []\n    this.callbacks[msg].push(callback) \n  },\n\n  publish: function (msg) {\n    var cbs =  this.callbacks[msg] || []\n    for (var i = 0, length = cbs.length; i < length; i++) {\n      cbs[i].apply(this, arguments)\n    }\n  }\n}\n\npubSub.on('前端周刊', function (name, hot_title) {\n  console.log('A同学你好，「前端周刊」更新啦！本周的头条文章是' + hot_title)\n})\n\npubSub.on('前端周刊', function (name, hot_title) {\n  console.log('B同学你好，「前端周刊」更新啦！本周的头条文章是' + hot_title)\n})\n\npubSub.on('后端周刊', function (name, hot_title) {\n  console.log('C同学你好，「后端周刊」更新啦！本周的头条文章是' + hot_title)\n})\n\n\n\npubSub.publish('前端周刊', '《谈谈JavaScript中的双向数据绑定》')\npubSub.publish('后端周刊', '《如何使用Ruby on Rails快速开发网站》')\n\n// 结果\n// A同学你好，「前端周刊」更新啦！本周的头条文章是《谈谈JavaScript中的双向数据绑定》\n// B同学你好，「前端周刊」更新啦！本周的头条文章是《谈谈JavaScript中的双向数据绑定》\n// C同学你好，「后端周刊」更新啦！本周的头条文章是《如何使用Ruby on Rails快速开发网站》\n```\n\n参考资料：[Easy Two-Way Data Binding in JavaScript](http://www.lucaongaro.eu/blog/2012/12/02/easy-two-way-data-binding-in-javascript/)\n","source":"_posts/2017-02-08-sub-pub.md","raw":"---\ntitle: 最简单的「发布/订阅模型」\ncategories: Javascript\n---\n\n定义:\n\n> 发布/订阅（**Publish/subscribe** 或pub/sub）是一种[消息](https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF)[范式](https://zh.wikipedia.org/wiki/%E8%8C%83%E5%BC%8F)，消息的发送者（发布者）不是计划发送其消息给特定的接收者（订阅者）。而是发布的消息分为不同的类别，而不需要知道什么样的订阅者订阅。订阅者对一个或多个类别表达兴趣，于是只接收感兴趣的消息，而不需要知道什么样的发布者发布的消息。 — wikipedia\n\n举个例子，比如微信朋友圈，你只能看到已添加好友的动态，对于那些不是你好友的用户的动态，你是看不到的，因为你没有「订阅」他们的消息。同样的道理，你的微博主页也只会收到你关注的账号的消息，因为你「关注」了他们。\n\n用JavaScript实现最简单的「发布/订阅模型」\n\n```javascript\nvar pubSub  = {\n  callbacks: {},\n\n  on: function (msg, callback) {\n    this.callbacks[msg] = this.callbacks[msg] || []\n    this.callbacks[msg].push(callback) \n  },\n\n  publish: function (msg) {\n    var cbs =  this.callbacks[msg] || []\n    for (var i = 0, length = cbs.length; i < length; i++) {\n      cbs[i].apply(this, arguments)\n    }\n  }\n}\n\npubSub.on('前端周刊', function (name, hot_title) {\n  console.log('A同学你好，「前端周刊」更新啦！本周的头条文章是' + hot_title)\n})\n\npubSub.on('前端周刊', function (name, hot_title) {\n  console.log('B同学你好，「前端周刊」更新啦！本周的头条文章是' + hot_title)\n})\n\npubSub.on('后端周刊', function (name, hot_title) {\n  console.log('C同学你好，「后端周刊」更新啦！本周的头条文章是' + hot_title)\n})\n\n\n\npubSub.publish('前端周刊', '《谈谈JavaScript中的双向数据绑定》')\npubSub.publish('后端周刊', '《如何使用Ruby on Rails快速开发网站》')\n\n// 结果\n// A同学你好，「前端周刊」更新啦！本周的头条文章是《谈谈JavaScript中的双向数据绑定》\n// B同学你好，「前端周刊」更新啦！本周的头条文章是《谈谈JavaScript中的双向数据绑定》\n// C同学你好，「后端周刊」更新啦！本周的头条文章是《如何使用Ruby on Rails快速开发网站》\n```\n\n参考资料：[Easy Two-Way Data Binding in JavaScript](http://www.lucaongaro.eu/blog/2012/12/02/easy-two-way-data-binding-in-javascript/)\n","slug":"2017-02-08-sub-pub","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicd6006ffson35w5ua6z","content":"<p>定义:</p>\n<blockquote>\n<p>发布/订阅（<strong>Publish/subscribe</strong> 或pub/sub）是一种<a href=\"https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF\" target=\"_blank\" rel=\"noopener\">消息</a><a href=\"https://zh.wikipedia.org/wiki/%E8%8C%83%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">范式</a>，消息的发送者（发布者）不是计划发送其消息给特定的接收者（订阅者）。而是发布的消息分为不同的类别，而不需要知道什么样的订阅者订阅。订阅者对一个或多个类别表达兴趣，于是只接收感兴趣的消息，而不需要知道什么样的发布者发布的消息。 — wikipedia</p>\n</blockquote>\n<p>举个例子，比如微信朋友圈，你只能看到已添加好友的动态，对于那些不是你好友的用户的动态，你是看不到的，因为你没有「订阅」他们的消息。同样的道理，你的微博主页也只会收到你关注的账号的消息，因为你「关注」了他们。</p>\n<p>用JavaScript实现最简单的「发布/订阅模型」</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pubSub  = &#123;</span><br><span class=\"line\">  callbacks: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  on: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacks[msg] = <span class=\"keyword\">this</span>.callbacks[msg] || []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacks[msg].push(callback) </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  publish: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cbs =  <span class=\"keyword\">this</span>.callbacks[msg] || []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = cbs.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">      cbs[i].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pubSub.on(<span class=\"string\">'前端周刊'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, hot_title</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'A同学你好，「前端周刊」更新啦！本周的头条文章是'</span> + hot_title)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">pubSub.on(<span class=\"string\">'前端周刊'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, hot_title</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'B同学你好，「前端周刊」更新啦！本周的头条文章是'</span> + hot_title)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">pubSub.on(<span class=\"string\">'后端周刊'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, hot_title</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'C同学你好，「后端周刊」更新啦！本周的头条文章是'</span> + hot_title)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pubSub.publish(<span class=\"string\">'前端周刊'</span>, <span class=\"string\">'《谈谈JavaScript中的双向数据绑定》'</span>)</span><br><span class=\"line\">pubSub.publish(<span class=\"string\">'后端周刊'</span>, <span class=\"string\">'《如何使用Ruby on Rails快速开发网站》'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果</span></span><br><span class=\"line\"><span class=\"comment\">// A同学你好，「前端周刊」更新啦！本周的头条文章是《谈谈JavaScript中的双向数据绑定》</span></span><br><span class=\"line\"><span class=\"comment\">// B同学你好，「前端周刊」更新啦！本周的头条文章是《谈谈JavaScript中的双向数据绑定》</span></span><br><span class=\"line\"><span class=\"comment\">// C同学你好，「后端周刊」更新啦！本周的头条文章是《如何使用Ruby on Rails快速开发网站》</span></span><br></pre></td></tr></table></figure>\n<p>参考资料：<a href=\"http://www.lucaongaro.eu/blog/2012/12/02/easy-two-way-data-binding-in-javascript/\" target=\"_blank\" rel=\"noopener\">Easy Two-Way Data Binding in JavaScript</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>定义:</p>\n<blockquote>\n<p>发布/订阅（<strong>Publish/subscribe</strong> 或pub/sub）是一种<a href=\"https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF\" target=\"_blank\" rel=\"noopener\">消息</a><a href=\"https://zh.wikipedia.org/wiki/%E8%8C%83%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">范式</a>，消息的发送者（发布者）不是计划发送其消息给特定的接收者（订阅者）。而是发布的消息分为不同的类别，而不需要知道什么样的订阅者订阅。订阅者对一个或多个类别表达兴趣，于是只接收感兴趣的消息，而不需要知道什么样的发布者发布的消息。 — wikipedia</p>\n</blockquote>\n<p>举个例子，比如微信朋友圈，你只能看到已添加好友的动态，对于那些不是你好友的用户的动态，你是看不到的，因为你没有「订阅」他们的消息。同样的道理，你的微博主页也只会收到你关注的账号的消息，因为你「关注」了他们。</p>\n<p>用JavaScript实现最简单的「发布/订阅模型」</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pubSub  = &#123;</span><br><span class=\"line\">  callbacks: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  on: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacks[msg] = <span class=\"keyword\">this</span>.callbacks[msg] || []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacks[msg].push(callback) </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  publish: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cbs =  <span class=\"keyword\">this</span>.callbacks[msg] || []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = cbs.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">      cbs[i].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pubSub.on(<span class=\"string\">'前端周刊'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, hot_title</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'A同学你好，「前端周刊」更新啦！本周的头条文章是'</span> + hot_title)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">pubSub.on(<span class=\"string\">'前端周刊'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, hot_title</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'B同学你好，「前端周刊」更新啦！本周的头条文章是'</span> + hot_title)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">pubSub.on(<span class=\"string\">'后端周刊'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, hot_title</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'C同学你好，「后端周刊」更新啦！本周的头条文章是'</span> + hot_title)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pubSub.publish(<span class=\"string\">'前端周刊'</span>, <span class=\"string\">'《谈谈JavaScript中的双向数据绑定》'</span>)</span><br><span class=\"line\">pubSub.publish(<span class=\"string\">'后端周刊'</span>, <span class=\"string\">'《如何使用Ruby on Rails快速开发网站》'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果</span></span><br><span class=\"line\"><span class=\"comment\">// A同学你好，「前端周刊」更新啦！本周的头条文章是《谈谈JavaScript中的双向数据绑定》</span></span><br><span class=\"line\"><span class=\"comment\">// B同学你好，「前端周刊」更新啦！本周的头条文章是《谈谈JavaScript中的双向数据绑定》</span></span><br><span class=\"line\"><span class=\"comment\">// C同学你好，「后端周刊」更新啦！本周的头条文章是《如何使用Ruby on Rails快速开发网站》</span></span><br></pre></td></tr></table></figure>\n<p>参考资料：<a href=\"http://www.lucaongaro.eu/blog/2012/12/02/easy-two-way-data-binding-in-javascript/\" target=\"_blank\" rel=\"noopener\">Easy Two-Way Data Binding in JavaScript</a></p>\n"},{"title":"【ORID总结】2/11","_content":"## Objective\n\n完成了哪些事情?\n\n- 复习《购物网站》整套教程\n- 参加RoR全栈之路线上meetup\n- 复习第二遍《web前端开发之道 — 编写高质量代码》，并且整理出部分笔记\n- 学完《learning how to learn》第二周的课程\n\n## Reflective\n\n高峰是什么? 参加线上meetup，自己分享了一些小工具，也从其他小伙伴得知另外一些工具，不错不错。\n低点是什么? 注意力分散了，浪费了不少时间，XD！\n\n## Interpretive\n\n### **dash是个超级好的工具**\n\n它可以把所有的文档下载到本地，然后进行快速查询，这样一来就可以节省我很多时间，真是个让我「长寿」的软件。为了表示感谢，我果断付费买了这个软件，感谢作者！\n\n### **new和build**\n\n可以使用`orders.build`来代替`Order.new`\n\n```ruby\ndef create\n\t@order = Order.new\n\t@order.user = current_user\nend\n```\n\n等价于\n\n```ruby\ndef create\n\t@order = current_user.orders.build\nend\n```\n\n### **find**\n\n```ruby\ndef show\n\t@order = Order.find(params[:id])\n\tif @order.user != current_user\n\t\tredirect_to root_path\n\tend\nend\n```\n\n等价于\n\n```ruby\ndef show\n\t@order = current_user.orders.find(params[:id])\nend\n```\n\n### **save!** \n\n用`save!`可以把错误暴露出来，有助于debug。\n\n### **一个重要的领悟是什么?**\n\n**提取练习就是对抗「自欺欺人」最有效的方式**。当我在看教程的时候，我觉得很容易，跟着做很爽，不知不觉就会产生一种「我都懂了」幻觉。当我尝试不看解说时，我很难回想起这些知识点。这说明还没有形成肌肉记忆，因为当我学的很爽很轻松时，我其实没有在进行刻意练习，而是待在舒适区里面享受。所以，我应该给自己增加一点难度，增加一些小测试，比如说做完一小节，就尝试着脱离教材，把这一节重要内容盲打一遍，进行一次提取练习。如果想不起来了，就去翻教材，这样也许会吃力，但效率会高一点。\n\n## Decisional\n\n- 快速对《购物网站》进行一次提取练习。\n- 先写界面样式，然后在考虑添加功能。\n\n","source":"_posts/2017-02-11-orid.md","raw":"---\ntitle: 【ORID总结】2/11\ncategories: 全栈营\n---\n## Objective\n\n完成了哪些事情?\n\n- 复习《购物网站》整套教程\n- 参加RoR全栈之路线上meetup\n- 复习第二遍《web前端开发之道 — 编写高质量代码》，并且整理出部分笔记\n- 学完《learning how to learn》第二周的课程\n\n## Reflective\n\n高峰是什么? 参加线上meetup，自己分享了一些小工具，也从其他小伙伴得知另外一些工具，不错不错。\n低点是什么? 注意力分散了，浪费了不少时间，XD！\n\n## Interpretive\n\n### **dash是个超级好的工具**\n\n它可以把所有的文档下载到本地，然后进行快速查询，这样一来就可以节省我很多时间，真是个让我「长寿」的软件。为了表示感谢，我果断付费买了这个软件，感谢作者！\n\n### **new和build**\n\n可以使用`orders.build`来代替`Order.new`\n\n```ruby\ndef create\n\t@order = Order.new\n\t@order.user = current_user\nend\n```\n\n等价于\n\n```ruby\ndef create\n\t@order = current_user.orders.build\nend\n```\n\n### **find**\n\n```ruby\ndef show\n\t@order = Order.find(params[:id])\n\tif @order.user != current_user\n\t\tredirect_to root_path\n\tend\nend\n```\n\n等价于\n\n```ruby\ndef show\n\t@order = current_user.orders.find(params[:id])\nend\n```\n\n### **save!** \n\n用`save!`可以把错误暴露出来，有助于debug。\n\n### **一个重要的领悟是什么?**\n\n**提取练习就是对抗「自欺欺人」最有效的方式**。当我在看教程的时候，我觉得很容易，跟着做很爽，不知不觉就会产生一种「我都懂了」幻觉。当我尝试不看解说时，我很难回想起这些知识点。这说明还没有形成肌肉记忆，因为当我学的很爽很轻松时，我其实没有在进行刻意练习，而是待在舒适区里面享受。所以，我应该给自己增加一点难度，增加一些小测试，比如说做完一小节，就尝试着脱离教材，把这一节重要内容盲打一遍，进行一次提取练习。如果想不起来了，就去翻教材，这样也许会吃力，但效率会高一点。\n\n## Decisional\n\n- 快速对《购物网站》进行一次提取练习。\n- 先写界面样式，然后在考虑添加功能。\n\n","slug":"2017-02-11-orid","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicd7006hfsonscaz1bnx","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成了哪些事情?</p>\n<ul>\n<li>复习《购物网站》整套教程</li>\n<li>参加RoR全栈之路线上meetup</li>\n<li>复习第二遍《web前端开发之道 — 编写高质量代码》，并且整理出部分笔记</li>\n<li>学完《learning how to learn》第二周的课程</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>高峰是什么? 参加线上meetup，自己分享了一些小工具，也从其他小伙伴得知另外一些工具，不错不错。<br>低点是什么? 注意力分散了，浪费了不少时间，XD！</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"dash是个超级好的工具\"><a href=\"#dash是个超级好的工具\" class=\"headerlink\" title=\"dash是个超级好的工具\"></a><strong>dash是个超级好的工具</strong></h3><p>它可以把所有的文档下载到本地，然后进行快速查询，这样一来就可以节省我很多时间，真是个让我「长寿」的软件。为了表示感谢，我果断付费买了这个软件，感谢作者！</p>\n<h3 id=\"new和build\"><a href=\"#new和build\" class=\"headerlink\" title=\"new和build\"></a><strong>new和build</strong></h3><p>可以使用<code>orders.build</code>来代替<code>Order.new</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span></span></span><br><span class=\"line\">\t@order = Order.new</span><br><span class=\"line\">\t@order.user = current_user</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span></span></span><br><span class=\"line\">\t@order = current_user.orders.build</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a><strong>find</strong></h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span></span></span><br><span class=\"line\">\t@order = Order.find(params[<span class=\"symbol\">:id</span>])</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> @order.user != current_user</span><br><span class=\"line\">\t\tredirect_to root_path</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span></span></span><br><span class=\"line\">\t@order = current_user.orders.find(params[<span class=\"symbol\">:id</span>])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"save\"><a href=\"#save\" class=\"headerlink\" title=\"save!\"></a><strong>save!</strong></h3><p>用<code>save!</code>可以把错误暴露出来，有助于debug。</p>\n<h3 id=\"一个重要的领悟是什么\"><a href=\"#一个重要的领悟是什么\" class=\"headerlink\" title=\"一个重要的领悟是什么?\"></a><strong>一个重要的领悟是什么?</strong></h3><p><strong>提取练习就是对抗「自欺欺人」最有效的方式</strong>。当我在看教程的时候，我觉得很容易，跟着做很爽，不知不觉就会产生一种「我都懂了」幻觉。当我尝试不看解说时，我很难回想起这些知识点。这说明还没有形成肌肉记忆，因为当我学的很爽很轻松时，我其实没有在进行刻意练习，而是待在舒适区里面享受。所以，我应该给自己增加一点难度，增加一些小测试，比如说做完一小节，就尝试着脱离教材，把这一节重要内容盲打一遍，进行一次提取练习。如果想不起来了，就去翻教材，这样也许会吃力，但效率会高一点。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>快速对《购物网站》进行一次提取练习。</li>\n<li>先写界面样式，然后在考虑添加功能。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成了哪些事情?</p>\n<ul>\n<li>复习《购物网站》整套教程</li>\n<li>参加RoR全栈之路线上meetup</li>\n<li>复习第二遍《web前端开发之道 — 编写高质量代码》，并且整理出部分笔记</li>\n<li>学完《learning how to learn》第二周的课程</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>高峰是什么? 参加线上meetup，自己分享了一些小工具，也从其他小伙伴得知另外一些工具，不错不错。<br>低点是什么? 注意力分散了，浪费了不少时间，XD！</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"dash是个超级好的工具\"><a href=\"#dash是个超级好的工具\" class=\"headerlink\" title=\"dash是个超级好的工具\"></a><strong>dash是个超级好的工具</strong></h3><p>它可以把所有的文档下载到本地，然后进行快速查询，这样一来就可以节省我很多时间，真是个让我「长寿」的软件。为了表示感谢，我果断付费买了这个软件，感谢作者！</p>\n<h3 id=\"new和build\"><a href=\"#new和build\" class=\"headerlink\" title=\"new和build\"></a><strong>new和build</strong></h3><p>可以使用<code>orders.build</code>来代替<code>Order.new</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span></span></span><br><span class=\"line\">\t@order = Order.new</span><br><span class=\"line\">\t@order.user = current_user</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span></span></span><br><span class=\"line\">\t@order = current_user.orders.build</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a><strong>find</strong></h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span></span></span><br><span class=\"line\">\t@order = Order.find(params[<span class=\"symbol\">:id</span>])</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> @order.user != current_user</span><br><span class=\"line\">\t\tredirect_to root_path</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span></span></span><br><span class=\"line\">\t@order = current_user.orders.find(params[<span class=\"symbol\">:id</span>])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"save\"><a href=\"#save\" class=\"headerlink\" title=\"save!\"></a><strong>save!</strong></h3><p>用<code>save!</code>可以把错误暴露出来，有助于debug。</p>\n<h3 id=\"一个重要的领悟是什么\"><a href=\"#一个重要的领悟是什么\" class=\"headerlink\" title=\"一个重要的领悟是什么?\"></a><strong>一个重要的领悟是什么?</strong></h3><p><strong>提取练习就是对抗「自欺欺人」最有效的方式</strong>。当我在看教程的时候，我觉得很容易，跟着做很爽，不知不觉就会产生一种「我都懂了」幻觉。当我尝试不看解说时，我很难回想起这些知识点。这说明还没有形成肌肉记忆，因为当我学的很爽很轻松时，我其实没有在进行刻意练习，而是待在舒适区里面享受。所以，我应该给自己增加一点难度，增加一些小测试，比如说做完一小节，就尝试着脱离教材，把这一节重要内容盲打一遍，进行一次提取练习。如果想不起来了，就去翻教材，这样也许会吃力，但效率会高一点。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>快速对《购物网站》进行一次提取练习。</li>\n<li>先写界面样式，然后在考虑添加功能。</li>\n</ul>\n"},{"title":"页面布局的高频小套路","_content":"\n这篇文章的目录：\n\n- 前言\n- 目标\n- 首页布局\n- 详情页布局\n- float的一个常见问题和解决方法\n- 总结\n\n## 前言\n\n因为很多同学问我如何规划页面的布局，要按照什么来划分，所以，我觉得很有必要写一篇布局的教程。\n\n在这篇教程里面，咱们不关注具体的细节，只关注整体布局，站在更高的角度看一个页面。\n\n我会把页面分成一个一个模块，模块与模块之间相互独立，互不影响，每个模块我会用背景颜色区分。\n\n只要把布局的基本套路掌握了，就足以写出很多的网页。\n\n至于内部细节的实现，以后慢慢掌握也不迟，现在先把「最小必要知识」搞定即可。\n\n让我们开始吧！\n\n## 目标\n\n首页原图：\n\n![](https://ww3.sinaimg.cn/large/006tKfTcly1fcy7wpzavdj30ab0l0th0.jpg)\n\n首页布局：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy9v73riij313910bt9w.jpg)\n\n详情页原图：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy7zw9f7qj309u0qbth2.jpg)\n\n详情页布局：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy84tsyezj31431k6ac0.jpg)\n\n## 首页布局\n\n工作台我已经帮你准备好了，[点这里](http://codepen.io/raimonfuns/pen/PWMmQr)。后面的步骤，大家可以在html和css区域跟着贴代码。只要把代码贴上去，就能马上看到结果，这对于学习编程来说非常有帮助。正如元学习课所说的「关注输入和输出」。大家也可以自行修改代码，看看会发生什么。\n\n### 预备工作\n\n大家先把这5个背景颜色贴到css区域，它们将会被用来作为模块的背景颜色\n\n```css\n/*5种背景颜色*/\n.bg-color1 {\n  background: #50514F; \n}\n\n.bg-color2 {\n  background: #F25F5C; \n}\n\n.bg-color3 {\n  background: #FFE066; \n}\n\n.bg-color4 {\n  background: #247BA0; \n}\n\n.bg-color5 {\n  background: #70C1B3; \n}\n```\n\n### navbar导航栏\n\n这是一个典型的左右两列布局，用`float:left`和`float:right`实现。\n\n先贴html代码：\n\n```html\n<div class=\"navbar bg-color1\">\n  <div class=\"navbarContent\">\n    <div class=\"navbarContent-left bg-color2\"></div>\n    <div class=\"navbarContent-right bg-color3\"></div>\n  </div>\n</div>\n```\n\n再贴css代码：\n\n```css\n/*navbar导航栏*/\n.navbar {\n  width: 100%; /*铺满*/\n}\n.navbarContent {\n  width: 1200px; /*1200px，居中*/\n  margin: 0 auto;\n  height: 30px;\n}\n.navbarContent-left {\n  float: left; /*你去左边*/\n  width: 50%; /*你占一半的宽度*/\n  height: 30px;\n}\n.navbarContent-right {\n  float: right; /*你去右边*/\n  width: 50%; /*你也占一半的宽度*/\n  height: 30px;\n}\n```\n\n效果：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy8mp7wg5j313t010a9w.jpg)\n\n### 头部\n\nhtml：\n\n```html\n<div class=\"header\">\n  <div class=\"headerContent\">\n    <div class=\"headerContent-item headerContent-item1 bg-color1\"></div>\n    <div class=\"headerContent-item headerContent-item2 bg-color2\"></div>\n    <div class=\"headerContent-item headerContent-item3 bg-color3\"></div>\n  </div>\n</div>\n```\n\n```css\n/*头部*/\n.header {\n  width: 1200px; \n  margin: 20px auto;\n}\n\n.headerContent {\n  height: 60px;\n}\n\n.headerContent-item {\n  height: 60px;\n}\n\n.headerContent-item1 {\n  float: left;\n  width: 180px;\n  margin-right: 180px;\n}\n\n.headerContent-item2 {\n  float: left;\n  width: 400px;\n}\n\n.headerContent-item3 {\n  float: right;\n  width: 150px;\n}\n```\n\n效果：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy8op1e6fj313s03jwee.jpg)\n\n### 菜单\n\nhtml:\n\n```html\n<div class=\"menu bg-color1\">\n  <div class=\"menuList\">\n    <div class=\"menuList-item bg-color2\"></div>\n    <div class=\"menuList-item bg-color3\"></div>\n    <div class=\"menuList-item bg-color4\"></div>\n    <div class=\"menuList-item bg-color5\"></div>\n  </div>\n</div>\n```\n\ncss:\n\n```css\n/*菜单*/\n.menu {\n  width: 100%;\n}\n\n.menuList {\n  width: 1200px;\n  margin: 20px auto;\n  height: 42px;\n}\n\n.menuList-item {\n  float: left;\n  width: 108px;\n  height: 42px;\n}\n```\n\n效果：\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcy8px62zrj313r057mx4.jpg)\n\n### 轮播图\n\nhtml:\n\n```html\n<div class=\"carousel bg-color1\"></div>\n```\n\ncss:\n\n```css\n/*轮播图*/\n.carousel {\n  margin: 20px auto;\n  width: 1200px;\n  height: 400px;\n}\n```\n\n效果：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy8supasnj313r0esaaa.jpg)\n\n### 排序\n\nhtml:\n\n```html\n<div class=\"orderList bg-color1\">\n  <div class=\"orderList-item bg-color2\"></div>\n  <div class=\"orderList-item bg-color3\"></div>\n  <div class=\"orderList-item bg-color4\"></div>\n  <div class=\"orderList-item bg-color5\"></div>\n</div>\n```\n\ncss:\n\n```css\n/*排序*/\n.orderList {\n  margin: 20px auto;\n  width: 1200px;\n  overflow: hidden;\n}\n\n.orderList-item {\n  float: left;\n  width: 108px;\n  height: 42px;\n}\n```\n\n![](https://ww2.sinaimg.cn/large/006tKfTcly1fcy8unuifgj313q0im74m.jpg)\n\n### 商品列表\n\nhtml:\n\n```html\n<div class=\"productList\">\n  <div class=\"productList-item bg-color1\"></div>\n  <div class=\"productList-item bg-color2\"></div>\n  <div class=\"productList-item bg-color3\"></div>\n  <div class=\"productList-item bg-color4\"></div>\n  <div class=\"productList-item bg-color5 productList-lastItem\"></div>\n  <div class=\"productList-item bg-color1\"></div>\n  <div class=\"productList-item bg-color2\"></div>\n  <div class=\"productList-item bg-color3\"></div>\n  <div class=\"productList-item bg-color4\"></div>\n  <div class=\"productList-item bg-color5 productList-lastItem\"></div>\n</div>\n```\n\ncss:\n\n```css\n/*商品列表*/\n.productList {\n  margin: 20px auto;\n  width: 1200px;\n  overflow: hidden;\n}\n\n.productList-item {\n  float: left;\n  width: 228px;\n  height: 250px;\n  margin-right: 15px;\n  margin-bottom: 15px;\n}\n\n.productList-lastItem {\n  margin-right: 0;\n}\n```\n\n![](https://ww4.sinaimg.cn/large/006tKfTcgy1fcy9xomb8ij311w0x879n.jpg)\n\n### 页脚\n\nhtml:\n\n```html\n<div class=\"footer bg-color1\"></div>\n```\n\ncss:\n\n```css\n/* 页脚 */\n.footer {\n  margin-top: 20px;\n  width: 100%;\n  height: 83px;\n}\n```\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcy8xawdl8j314310bwfq.jpg)\n\n大功告成！\n\n最终实例代码：[首页布局](http://codepen.io/raimonfuns/pen/VPobLX)。\n\n## 详情页\n\n由于导航栏、头部、菜单都是通用的，所以，就不用再重复了，我已经帮你先写上了，[点这里](http://codepen.io/raimonfuns/pen/dNxWeg)。\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcy95r93e1j3138053dfs.jpg)\n\n### 当前位置\n\nhtml:\n\n```html\n<p class=\"location bg-color1\"></p>\n```\n\ncss: \n\n```css\n/*当前位置*/\n.location {\n\twidth: 1200px;\n\tmargin: 0 auto;\n\theight: 32px;\n}\n```\n\n效果：\n\n![](https://ww2.sinaimg.cn/large/006tKfTcly1fcy963ncbcj313406o0sq.jpg)\n\n### 商品信息\n\n这个部分的布局很多同学感兴趣，所以我多解释一下，首先，我们应该把它看成「两列布局」，然后，再把左边那一块分成「上下布局」，可以一来就很好写了，来试试。\n\nhtml:\n\n```html\n<div class=\"productDetail\">\n  <div class=\"productDetail-left bg-color1\">\n    <div class=\"productDetail-left-bigImage bg-color3\"></div>\n    <div class=\"productDetail-left-imageList\">\n      <div class=\"productDetail-left-imageList-item bg-color4\"></div>\n      <div class=\"productDetail-left-imageList-item bg-color4\"></div>\n      <div class=\"productDetail-left-imageList-item bg-color4\"></div>\n      <div class=\"productDetail-left-imageList-item bg-color4\"></div>\n      <div class=\"productDetail-left-imageList-item bg-color4 productDetail-left-imageList-lastItem\"></div>\n    </div>\n  </div>\n  <div class=\"productDetail-right bg-color2\"></div>\n</div>\n```\n\ncss: \n\n```css\n/*商品信息*/\n.productDetail {\n\twidth: 1200px;\n\tmargin: 20px auto;\n\theight: 518px;\n}\n\n.productDetail-left {\n\tfloat: left; /*你去左边*/\n\twidth: 420px;\n\theight: 518px;\n}\n\n.productDetail-right {\n\tfloat: right; /*你去右边*/\n\twidth: 744px;\n\theight: 518px;\n}\n\n.productDetail-left-bigImage {\n\twidth: 420px;\n\theight: 420px;\n}\n\n.productDetail-left-imageList {\n\tmargin-top: 15px;\n}\n\n.productDetail-left-imageList-item {\n\tfloat: left; /*虽然我们是block元素，但是我们还是想在同一行呀，那就用float吧*/\n\twidth: 72px;\n\theight: 72px;\n\tmargin-right: 15px;\n}\n\n.productDetail-left-imageList-lastItem {\n\tmargin-right: 0;\n}\n```\n\n效果：\n\n![](https://ww2.sinaimg.cn/large/006tKfTcly1fcy98hzqr8j30xn0emwen.jpg)\n\n### 商品详情\n\nhtml:\n\n```html\n<div class=\"productDecription\">\n  <div class=\"productDecription-menuList bg-color1\">\n    <div class=\"productDecription-menuList-item bg-color2\"></div>\n    <div class=\"productDecription-menuList-item bg-color3\"></div>\n  </div>\n  <div class=\"productDecription-content bg-color4\"></div>\n</div>\n```\n\ncss:\n\n```css\n/*商品详情*/\n.productDecription {\n\twidth: 1200px;\n\tmargin: 20px auto;\n\tborder: 1px solid #50514F;\n}\n\n.productDecription-menuList {\n\theight: 35px;\n}\n\n.productDecription-menuList-item {\n\tfloat: left;\n\twidth: 175px;\n\theight: 35px;\n}\n\n.productDecription-content {\n\twidth: 750px;\n\theight: 1000px;\n\tmargin: 50px auto;\n}\n```\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcy9a8hw5xj30xs0cn0su.jpg)\n\n### 页脚\n\nhtml:\n\n```html\n<div class=\"footer bg-color1\"></div>\n```\n\ncss:\n\n```css\n/* 页脚 */\n.footer {\n  margin-top: 20px;\n  width: 100%;\n  height: 83px;\n}\n```\n\n\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy84tsyezj31431k6ac0.jpg)\n\n大功告成！\n\n最终实例代码：[详情页布局](http://codepen.io/raimonfuns/pen/zNgwQW)。\n\n## float的高度问题和解决方法\n\n从上面的布局中可以看到，float是一个高频css属性，你会发现，使用float几乎做出大部分的布局。那么，float怎么好用的属性，有没有缺点呢，有的，它一个缺点，看实例：[float高度问题](http://codepen.io/raimonfuns/pen/MJNmMv)。\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcy9h52pekj307202v0sk.jpg)\n\n`.parent`的背景颜色是黑色的，但是却看不到，这因为设置了float的元素，不会「撑起」父元素的高度。他虽然存在，而且本身也确实有高度，但是，对于父元素来说，他的高度是0。\n\n那么，解决方法是什么呢？有两个常用的：\n\n1. 手动设置一下`.parent`的高度呗，但缺点就是得固定高度，而其实很多布局的高度是不确定的，比如说商品列表，你根本不知道以后会添加多少商品，所以，这种用法不太好。[实例代码](http://codepen.io/raimonfuns/pen/VPoWvJ)。\n2. 给`.parent`增加一个属性`overflow: hidden`，简单粗暴，很实用，强烈推荐。[实例代码](http://codepen.io/raimonfuns/pen/BpXZoK)。\n\n## 总结\n\ncss布局的高频小套路就是：「盒模型」和「float」。只要把这两个用好了，就能够做出很多常见的布局。\n\n## 系列文章：\n\n- [【一步一步做出小小食杂铺】前端分享系列1 — navbar导航栏](http://forum.qzy.camp/t/1-navbar/690)\n- [「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车](http://forum.qzy.camp/t/2-logo-search/696)\n\n未完待续，敬请期待。如果你有什么建议，欢迎留言！\n\n------\n\nps：如果教程对大家有帮助的话，希望能为「[小小食杂铺](https://fullstack.xinshengdaxue.com/works/201)」投上一票哈。","source":"_posts/2017-02-23-share2.md","raw":"---\ntitle: 页面布局的高频小套路\ncategories: 全栈营\n---\n\n这篇文章的目录：\n\n- 前言\n- 目标\n- 首页布局\n- 详情页布局\n- float的一个常见问题和解决方法\n- 总结\n\n## 前言\n\n因为很多同学问我如何规划页面的布局，要按照什么来划分，所以，我觉得很有必要写一篇布局的教程。\n\n在这篇教程里面，咱们不关注具体的细节，只关注整体布局，站在更高的角度看一个页面。\n\n我会把页面分成一个一个模块，模块与模块之间相互独立，互不影响，每个模块我会用背景颜色区分。\n\n只要把布局的基本套路掌握了，就足以写出很多的网页。\n\n至于内部细节的实现，以后慢慢掌握也不迟，现在先把「最小必要知识」搞定即可。\n\n让我们开始吧！\n\n## 目标\n\n首页原图：\n\n![](https://ww3.sinaimg.cn/large/006tKfTcly1fcy7wpzavdj30ab0l0th0.jpg)\n\n首页布局：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy9v73riij313910bt9w.jpg)\n\n详情页原图：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy7zw9f7qj309u0qbth2.jpg)\n\n详情页布局：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy84tsyezj31431k6ac0.jpg)\n\n## 首页布局\n\n工作台我已经帮你准备好了，[点这里](http://codepen.io/raimonfuns/pen/PWMmQr)。后面的步骤，大家可以在html和css区域跟着贴代码。只要把代码贴上去，就能马上看到结果，这对于学习编程来说非常有帮助。正如元学习课所说的「关注输入和输出」。大家也可以自行修改代码，看看会发生什么。\n\n### 预备工作\n\n大家先把这5个背景颜色贴到css区域，它们将会被用来作为模块的背景颜色\n\n```css\n/*5种背景颜色*/\n.bg-color1 {\n  background: #50514F; \n}\n\n.bg-color2 {\n  background: #F25F5C; \n}\n\n.bg-color3 {\n  background: #FFE066; \n}\n\n.bg-color4 {\n  background: #247BA0; \n}\n\n.bg-color5 {\n  background: #70C1B3; \n}\n```\n\n### navbar导航栏\n\n这是一个典型的左右两列布局，用`float:left`和`float:right`实现。\n\n先贴html代码：\n\n```html\n<div class=\"navbar bg-color1\">\n  <div class=\"navbarContent\">\n    <div class=\"navbarContent-left bg-color2\"></div>\n    <div class=\"navbarContent-right bg-color3\"></div>\n  </div>\n</div>\n```\n\n再贴css代码：\n\n```css\n/*navbar导航栏*/\n.navbar {\n  width: 100%; /*铺满*/\n}\n.navbarContent {\n  width: 1200px; /*1200px，居中*/\n  margin: 0 auto;\n  height: 30px;\n}\n.navbarContent-left {\n  float: left; /*你去左边*/\n  width: 50%; /*你占一半的宽度*/\n  height: 30px;\n}\n.navbarContent-right {\n  float: right; /*你去右边*/\n  width: 50%; /*你也占一半的宽度*/\n  height: 30px;\n}\n```\n\n效果：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy8mp7wg5j313t010a9w.jpg)\n\n### 头部\n\nhtml：\n\n```html\n<div class=\"header\">\n  <div class=\"headerContent\">\n    <div class=\"headerContent-item headerContent-item1 bg-color1\"></div>\n    <div class=\"headerContent-item headerContent-item2 bg-color2\"></div>\n    <div class=\"headerContent-item headerContent-item3 bg-color3\"></div>\n  </div>\n</div>\n```\n\n```css\n/*头部*/\n.header {\n  width: 1200px; \n  margin: 20px auto;\n}\n\n.headerContent {\n  height: 60px;\n}\n\n.headerContent-item {\n  height: 60px;\n}\n\n.headerContent-item1 {\n  float: left;\n  width: 180px;\n  margin-right: 180px;\n}\n\n.headerContent-item2 {\n  float: left;\n  width: 400px;\n}\n\n.headerContent-item3 {\n  float: right;\n  width: 150px;\n}\n```\n\n效果：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy8op1e6fj313s03jwee.jpg)\n\n### 菜单\n\nhtml:\n\n```html\n<div class=\"menu bg-color1\">\n  <div class=\"menuList\">\n    <div class=\"menuList-item bg-color2\"></div>\n    <div class=\"menuList-item bg-color3\"></div>\n    <div class=\"menuList-item bg-color4\"></div>\n    <div class=\"menuList-item bg-color5\"></div>\n  </div>\n</div>\n```\n\ncss:\n\n```css\n/*菜单*/\n.menu {\n  width: 100%;\n}\n\n.menuList {\n  width: 1200px;\n  margin: 20px auto;\n  height: 42px;\n}\n\n.menuList-item {\n  float: left;\n  width: 108px;\n  height: 42px;\n}\n```\n\n效果：\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcy8px62zrj313r057mx4.jpg)\n\n### 轮播图\n\nhtml:\n\n```html\n<div class=\"carousel bg-color1\"></div>\n```\n\ncss:\n\n```css\n/*轮播图*/\n.carousel {\n  margin: 20px auto;\n  width: 1200px;\n  height: 400px;\n}\n```\n\n效果：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy8supasnj313r0esaaa.jpg)\n\n### 排序\n\nhtml:\n\n```html\n<div class=\"orderList bg-color1\">\n  <div class=\"orderList-item bg-color2\"></div>\n  <div class=\"orderList-item bg-color3\"></div>\n  <div class=\"orderList-item bg-color4\"></div>\n  <div class=\"orderList-item bg-color5\"></div>\n</div>\n```\n\ncss:\n\n```css\n/*排序*/\n.orderList {\n  margin: 20px auto;\n  width: 1200px;\n  overflow: hidden;\n}\n\n.orderList-item {\n  float: left;\n  width: 108px;\n  height: 42px;\n}\n```\n\n![](https://ww2.sinaimg.cn/large/006tKfTcly1fcy8unuifgj313q0im74m.jpg)\n\n### 商品列表\n\nhtml:\n\n```html\n<div class=\"productList\">\n  <div class=\"productList-item bg-color1\"></div>\n  <div class=\"productList-item bg-color2\"></div>\n  <div class=\"productList-item bg-color3\"></div>\n  <div class=\"productList-item bg-color4\"></div>\n  <div class=\"productList-item bg-color5 productList-lastItem\"></div>\n  <div class=\"productList-item bg-color1\"></div>\n  <div class=\"productList-item bg-color2\"></div>\n  <div class=\"productList-item bg-color3\"></div>\n  <div class=\"productList-item bg-color4\"></div>\n  <div class=\"productList-item bg-color5 productList-lastItem\"></div>\n</div>\n```\n\ncss:\n\n```css\n/*商品列表*/\n.productList {\n  margin: 20px auto;\n  width: 1200px;\n  overflow: hidden;\n}\n\n.productList-item {\n  float: left;\n  width: 228px;\n  height: 250px;\n  margin-right: 15px;\n  margin-bottom: 15px;\n}\n\n.productList-lastItem {\n  margin-right: 0;\n}\n```\n\n![](https://ww4.sinaimg.cn/large/006tKfTcgy1fcy9xomb8ij311w0x879n.jpg)\n\n### 页脚\n\nhtml:\n\n```html\n<div class=\"footer bg-color1\"></div>\n```\n\ncss:\n\n```css\n/* 页脚 */\n.footer {\n  margin-top: 20px;\n  width: 100%;\n  height: 83px;\n}\n```\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcy8xawdl8j314310bwfq.jpg)\n\n大功告成！\n\n最终实例代码：[首页布局](http://codepen.io/raimonfuns/pen/VPobLX)。\n\n## 详情页\n\n由于导航栏、头部、菜单都是通用的，所以，就不用再重复了，我已经帮你先写上了，[点这里](http://codepen.io/raimonfuns/pen/dNxWeg)。\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcy95r93e1j3138053dfs.jpg)\n\n### 当前位置\n\nhtml:\n\n```html\n<p class=\"location bg-color1\"></p>\n```\n\ncss: \n\n```css\n/*当前位置*/\n.location {\n\twidth: 1200px;\n\tmargin: 0 auto;\n\theight: 32px;\n}\n```\n\n效果：\n\n![](https://ww2.sinaimg.cn/large/006tKfTcly1fcy963ncbcj313406o0sq.jpg)\n\n### 商品信息\n\n这个部分的布局很多同学感兴趣，所以我多解释一下，首先，我们应该把它看成「两列布局」，然后，再把左边那一块分成「上下布局」，可以一来就很好写了，来试试。\n\nhtml:\n\n```html\n<div class=\"productDetail\">\n  <div class=\"productDetail-left bg-color1\">\n    <div class=\"productDetail-left-bigImage bg-color3\"></div>\n    <div class=\"productDetail-left-imageList\">\n      <div class=\"productDetail-left-imageList-item bg-color4\"></div>\n      <div class=\"productDetail-left-imageList-item bg-color4\"></div>\n      <div class=\"productDetail-left-imageList-item bg-color4\"></div>\n      <div class=\"productDetail-left-imageList-item bg-color4\"></div>\n      <div class=\"productDetail-left-imageList-item bg-color4 productDetail-left-imageList-lastItem\"></div>\n    </div>\n  </div>\n  <div class=\"productDetail-right bg-color2\"></div>\n</div>\n```\n\ncss: \n\n```css\n/*商品信息*/\n.productDetail {\n\twidth: 1200px;\n\tmargin: 20px auto;\n\theight: 518px;\n}\n\n.productDetail-left {\n\tfloat: left; /*你去左边*/\n\twidth: 420px;\n\theight: 518px;\n}\n\n.productDetail-right {\n\tfloat: right; /*你去右边*/\n\twidth: 744px;\n\theight: 518px;\n}\n\n.productDetail-left-bigImage {\n\twidth: 420px;\n\theight: 420px;\n}\n\n.productDetail-left-imageList {\n\tmargin-top: 15px;\n}\n\n.productDetail-left-imageList-item {\n\tfloat: left; /*虽然我们是block元素，但是我们还是想在同一行呀，那就用float吧*/\n\twidth: 72px;\n\theight: 72px;\n\tmargin-right: 15px;\n}\n\n.productDetail-left-imageList-lastItem {\n\tmargin-right: 0;\n}\n```\n\n效果：\n\n![](https://ww2.sinaimg.cn/large/006tKfTcly1fcy98hzqr8j30xn0emwen.jpg)\n\n### 商品详情\n\nhtml:\n\n```html\n<div class=\"productDecription\">\n  <div class=\"productDecription-menuList bg-color1\">\n    <div class=\"productDecription-menuList-item bg-color2\"></div>\n    <div class=\"productDecription-menuList-item bg-color3\"></div>\n  </div>\n  <div class=\"productDecription-content bg-color4\"></div>\n</div>\n```\n\ncss:\n\n```css\n/*商品详情*/\n.productDecription {\n\twidth: 1200px;\n\tmargin: 20px auto;\n\tborder: 1px solid #50514F;\n}\n\n.productDecription-menuList {\n\theight: 35px;\n}\n\n.productDecription-menuList-item {\n\tfloat: left;\n\twidth: 175px;\n\theight: 35px;\n}\n\n.productDecription-content {\n\twidth: 750px;\n\theight: 1000px;\n\tmargin: 50px auto;\n}\n```\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcy9a8hw5xj30xs0cn0su.jpg)\n\n### 页脚\n\nhtml:\n\n```html\n<div class=\"footer bg-color1\"></div>\n```\n\ncss:\n\n```css\n/* 页脚 */\n.footer {\n  margin-top: 20px;\n  width: 100%;\n  height: 83px;\n}\n```\n\n\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcy84tsyezj31431k6ac0.jpg)\n\n大功告成！\n\n最终实例代码：[详情页布局](http://codepen.io/raimonfuns/pen/zNgwQW)。\n\n## float的高度问题和解决方法\n\n从上面的布局中可以看到，float是一个高频css属性，你会发现，使用float几乎做出大部分的布局。那么，float怎么好用的属性，有没有缺点呢，有的，它一个缺点，看实例：[float高度问题](http://codepen.io/raimonfuns/pen/MJNmMv)。\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcy9h52pekj307202v0sk.jpg)\n\n`.parent`的背景颜色是黑色的，但是却看不到，这因为设置了float的元素，不会「撑起」父元素的高度。他虽然存在，而且本身也确实有高度，但是，对于父元素来说，他的高度是0。\n\n那么，解决方法是什么呢？有两个常用的：\n\n1. 手动设置一下`.parent`的高度呗，但缺点就是得固定高度，而其实很多布局的高度是不确定的，比如说商品列表，你根本不知道以后会添加多少商品，所以，这种用法不太好。[实例代码](http://codepen.io/raimonfuns/pen/VPoWvJ)。\n2. 给`.parent`增加一个属性`overflow: hidden`，简单粗暴，很实用，强烈推荐。[实例代码](http://codepen.io/raimonfuns/pen/BpXZoK)。\n\n## 总结\n\ncss布局的高频小套路就是：「盒模型」和「float」。只要把这两个用好了，就能够做出很多常见的布局。\n\n## 系列文章：\n\n- [【一步一步做出小小食杂铺】前端分享系列1 — navbar导航栏](http://forum.qzy.camp/t/1-navbar/690)\n- [「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车](http://forum.qzy.camp/t/2-logo-search/696)\n\n未完待续，敬请期待。如果你有什么建议，欢迎留言！\n\n------\n\nps：如果教程对大家有帮助的话，希望能为「[小小食杂铺](https://fullstack.xinshengdaxue.com/works/201)」投上一票哈。","slug":"2017-02-23-share2","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdd006jfsonr66gnw3w","content":"<p>这篇文章的目录：</p>\n<ul>\n<li>前言</li>\n<li>目标</li>\n<li>首页布局</li>\n<li>详情页布局</li>\n<li>float的一个常见问题和解决方法</li>\n<li>总结</li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因为很多同学问我如何规划页面的布局，要按照什么来划分，所以，我觉得很有必要写一篇布局的教程。</p>\n<p>在这篇教程里面，咱们不关注具体的细节，只关注整体布局，站在更高的角度看一个页面。</p>\n<p>我会把页面分成一个一个模块，模块与模块之间相互独立，互不影响，每个模块我会用背景颜色区分。</p>\n<p>只要把布局的基本套路掌握了，就足以写出很多的网页。</p>\n<p>至于内部细节的实现，以后慢慢掌握也不迟，现在先把「最小必要知识」搞定即可。</p>\n<p>让我们开始吧！</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>首页原图：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tKfTcly1fcy7wpzavdj30ab0l0th0.jpg\" alt=\"\"></p>\n<p>首页布局：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy9v73riij313910bt9w.jpg\" alt=\"\"></p>\n<p>详情页原图：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy7zw9f7qj309u0qbth2.jpg\" alt=\"\"></p>\n<p>详情页布局：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy84tsyezj31431k6ac0.jpg\" alt=\"\"></p>\n<h2 id=\"首页布局\"><a href=\"#首页布局\" class=\"headerlink\" title=\"首页布局\"></a>首页布局</h2><p>工作台我已经帮你准备好了，<a href=\"http://codepen.io/raimonfuns/pen/PWMmQr\" target=\"_blank\" rel=\"noopener\">点这里</a>。后面的步骤，大家可以在html和css区域跟着贴代码。只要把代码贴上去，就能马上看到结果，这对于学习编程来说非常有帮助。正如元学习课所说的「关注输入和输出」。大家也可以自行修改代码，看看会发生什么。</p>\n<h3 id=\"预备工作\"><a href=\"#预备工作\" class=\"headerlink\" title=\"预备工作\"></a>预备工作</h3><p>大家先把这5个背景颜色贴到css区域，它们将会被用来作为模块的背景颜色</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*5种背景颜色*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#50514F</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#FFE066</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#247BA0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color5</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#70C1B3</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"navbar导航栏\"><a href=\"#navbar导航栏\" class=\"headerlink\" title=\"navbar导航栏\"></a>navbar导航栏</h3><p>这是一个典型的左右两列布局，用<code>float:left</code>和<code>float:right</code>实现。</p>\n<p>先贴html代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar bg-color1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbarContent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbarContent-left bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbarContent-right bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>再贴css代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*navbar导航栏*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.navbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; <span class=\"comment\">/*铺满*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.navbarContent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>; <span class=\"comment\">/*1200px，居中*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.navbarContent-left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*你去左边*/</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>; <span class=\"comment\">/*你占一半的宽度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.navbarContent-right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right; <span class=\"comment\">/*你去右边*/</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>; <span class=\"comment\">/*你也占一半的宽度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy8mp7wg5j313t010a9w.jpg\" alt=\"\"></p>\n<h3 id=\"头部\"><a href=\"#头部\" class=\"headerlink\" title=\"头部\"></a>头部</h3><p>html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"headerContent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"headerContent-item headerContent-item1 bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"headerContent-item headerContent-item2 bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"headerContent-item headerContent-item3 bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*头部*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.headerContent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.headerContent-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.headerContent-item1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">180px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">180px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.headerContent-item2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.headerContent-item3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy8op1e6fj313s03jwee.jpg\" alt=\"\"></p>\n<h3 id=\"菜单\"><a href=\"#菜单\" class=\"headerlink\" title=\"菜单\"></a>菜单</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu bg-color1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menuList\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menuList-item bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menuList-item bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menuList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menuList-item bg-color5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*菜单*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.menu</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.menuList</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">42px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.menuList-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">108px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">42px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcy8px62zrj313r057mx4.jpg\" alt=\"\"></p>\n<h3 id=\"轮播图\"><a href=\"#轮播图\" class=\"headerlink\" title=\"轮播图\"></a>轮播图</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*轮播图*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.carousel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy8supasnj313r0esaaa.jpg\" alt=\"\"></p>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orderList bg-color1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orderList-item bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orderList-item bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orderList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orderList-item bg-color5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*排序*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.orderList</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.orderList-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">108px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">42px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tKfTcly1fcy8unuifgj313q0im74m.jpg\" alt=\"\"></p>\n<h3 id=\"商品列表\"><a href=\"#商品列表\" class=\"headerlink\" title=\"商品列表\"></a>商品列表</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color5 productList-lastItem\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color5 productList-lastItem\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*商品列表*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productList</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productList-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">228px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productList-lastItem</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcgy1fcy9xomb8ij311w0x879n.jpg\" alt=\"\"></p>\n<h3 id=\"页脚\"><a href=\"#页脚\" class=\"headerlink\" title=\"页脚\"></a>页脚</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 页脚 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">83px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcy8xawdl8j314310bwfq.jpg\" alt=\"\"></p>\n<p>大功告成！</p>\n<p>最终实例代码：<a href=\"http://codepen.io/raimonfuns/pen/VPobLX\" target=\"_blank\" rel=\"noopener\">首页布局</a>。</p>\n<h2 id=\"详情页\"><a href=\"#详情页\" class=\"headerlink\" title=\"详情页\"></a>详情页</h2><p>由于导航栏、头部、菜单都是通用的，所以，就不用再重复了，我已经帮你先写上了，<a href=\"http://codepen.io/raimonfuns/pen/dNxWeg\" target=\"_blank\" rel=\"noopener\">点这里</a>。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcy95r93e1j3138053dfs.jpg\" alt=\"\"></p>\n<h3 id=\"当前位置\"><a href=\"#当前位置\" class=\"headerlink\" title=\"当前位置\"></a>当前位置</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"location bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css: </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*当前位置*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.location</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tKfTcly1fcy963ncbcj313406o0sq.jpg\" alt=\"\"></p>\n<h3 id=\"商品信息\"><a href=\"#商品信息\" class=\"headerlink\" title=\"商品信息\"></a>商品信息</h3><p>这个部分的布局很多同学感兴趣，所以我多解释一下，首先，我们应该把它看成「两列布局」，然后，再把左边那一块分成「上下布局」，可以一来就很好写了，来试试。</p>\n<p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left bg-color1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-bigImage bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item bg-color4 productDetail-left-imageList-lastItem\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-right bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css: </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*商品信息*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left; <span class=\"comment\">/*你去左边*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-right</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: right; <span class=\"comment\">/*你去右边*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">744px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-bigImage</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList-item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left; <span class=\"comment\">/*虽然我们是block元素，但是我们还是想在同一行呀，那就用float吧*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList-lastItem</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tKfTcly1fcy98hzqr8j30xn0emwen.jpg\" alt=\"\"></p>\n<h3 id=\"商品详情\"><a href=\"#商品详情\" class=\"headerlink\" title=\"商品详情\"></a>商品详情</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList bg-color1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList-item bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList-item bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*商品详情*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#50514F</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-menuList</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-menuList-item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">175px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-content</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">1000px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcy9a8hw5xj30xs0cn0su.jpg\" alt=\"\"></p>\n<h3 id=\"页脚-1\"><a href=\"#页脚-1\" class=\"headerlink\" title=\"页脚\"></a>页脚</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 页脚 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">83px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy84tsyezj31431k6ac0.jpg\" alt=\"\"></p>\n<p>大功告成！</p>\n<p>最终实例代码：<a href=\"http://codepen.io/raimonfuns/pen/zNgwQW\" target=\"_blank\" rel=\"noopener\">详情页布局</a>。</p>\n<h2 id=\"float的高度问题和解决方法\"><a href=\"#float的高度问题和解决方法\" class=\"headerlink\" title=\"float的高度问题和解决方法\"></a>float的高度问题和解决方法</h2><p>从上面的布局中可以看到，float是一个高频css属性，你会发现，使用float几乎做出大部分的布局。那么，float怎么好用的属性，有没有缺点呢，有的，它一个缺点，看实例：<a href=\"http://codepen.io/raimonfuns/pen/MJNmMv\" target=\"_blank\" rel=\"noopener\">float高度问题</a>。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcy9h52pekj307202v0sk.jpg\" alt=\"\"></p>\n<p><code>.parent</code>的背景颜色是黑色的，但是却看不到，这因为设置了float的元素，不会「撑起」父元素的高度。他虽然存在，而且本身也确实有高度，但是，对于父元素来说，他的高度是0。</p>\n<p>那么，解决方法是什么呢？有两个常用的：</p>\n<ol>\n<li>手动设置一下<code>.parent</code>的高度呗，但缺点就是得固定高度，而其实很多布局的高度是不确定的，比如说商品列表，你根本不知道以后会添加多少商品，所以，这种用法不太好。<a href=\"http://codepen.io/raimonfuns/pen/VPoWvJ\" target=\"_blank\" rel=\"noopener\">实例代码</a>。</li>\n<li>给<code>.parent</code>增加一个属性<code>overflow: hidden</code>，简单粗暴，很实用，强烈推荐。<a href=\"http://codepen.io/raimonfuns/pen/BpXZoK\" target=\"_blank\" rel=\"noopener\">实例代码</a>。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>css布局的高频小套路就是：「盒模型」和「float」。只要把这两个用好了，就能够做出很多常见的布局。</p>\n<h2 id=\"系列文章：\"><a href=\"#系列文章：\" class=\"headerlink\" title=\"系列文章：\"></a>系列文章：</h2><ul>\n<li><a href=\"http://forum.qzy.camp/t/1-navbar/690\" target=\"_blank\" rel=\"noopener\">【一步一步做出小小食杂铺】前端分享系列1 — navbar导航栏</a></li>\n<li><a href=\"http://forum.qzy.camp/t/2-logo-search/696\" target=\"_blank\" rel=\"noopener\">「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车</a></li>\n</ul>\n<p>未完待续，敬请期待。如果你有什么建议，欢迎留言！</p>\n<hr>\n<p>ps：如果教程对大家有帮助的话，希望能为「<a href=\"https://fullstack.xinshengdaxue.com/works/201\" target=\"_blank\" rel=\"noopener\">小小食杂铺</a>」投上一票哈。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇文章的目录：</p>\n<ul>\n<li>前言</li>\n<li>目标</li>\n<li>首页布局</li>\n<li>详情页布局</li>\n<li>float的一个常见问题和解决方法</li>\n<li>总结</li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因为很多同学问我如何规划页面的布局，要按照什么来划分，所以，我觉得很有必要写一篇布局的教程。</p>\n<p>在这篇教程里面，咱们不关注具体的细节，只关注整体布局，站在更高的角度看一个页面。</p>\n<p>我会把页面分成一个一个模块，模块与模块之间相互独立，互不影响，每个模块我会用背景颜色区分。</p>\n<p>只要把布局的基本套路掌握了，就足以写出很多的网页。</p>\n<p>至于内部细节的实现，以后慢慢掌握也不迟，现在先把「最小必要知识」搞定即可。</p>\n<p>让我们开始吧！</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>首页原图：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tKfTcly1fcy7wpzavdj30ab0l0th0.jpg\" alt=\"\"></p>\n<p>首页布局：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy9v73riij313910bt9w.jpg\" alt=\"\"></p>\n<p>详情页原图：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy7zw9f7qj309u0qbth2.jpg\" alt=\"\"></p>\n<p>详情页布局：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy84tsyezj31431k6ac0.jpg\" alt=\"\"></p>\n<h2 id=\"首页布局\"><a href=\"#首页布局\" class=\"headerlink\" title=\"首页布局\"></a>首页布局</h2><p>工作台我已经帮你准备好了，<a href=\"http://codepen.io/raimonfuns/pen/PWMmQr\" target=\"_blank\" rel=\"noopener\">点这里</a>。后面的步骤，大家可以在html和css区域跟着贴代码。只要把代码贴上去，就能马上看到结果，这对于学习编程来说非常有帮助。正如元学习课所说的「关注输入和输出」。大家也可以自行修改代码，看看会发生什么。</p>\n<h3 id=\"预备工作\"><a href=\"#预备工作\" class=\"headerlink\" title=\"预备工作\"></a>预备工作</h3><p>大家先把这5个背景颜色贴到css区域，它们将会被用来作为模块的背景颜色</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*5种背景颜色*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#50514F</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#FFE066</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#247BA0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color5</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#70C1B3</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"navbar导航栏\"><a href=\"#navbar导航栏\" class=\"headerlink\" title=\"navbar导航栏\"></a>navbar导航栏</h3><p>这是一个典型的左右两列布局，用<code>float:left</code>和<code>float:right</code>实现。</p>\n<p>先贴html代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar bg-color1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbarContent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbarContent-left bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbarContent-right bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>再贴css代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*navbar导航栏*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.navbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; <span class=\"comment\">/*铺满*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.navbarContent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>; <span class=\"comment\">/*1200px，居中*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.navbarContent-left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*你去左边*/</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>; <span class=\"comment\">/*你占一半的宽度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.navbarContent-right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right; <span class=\"comment\">/*你去右边*/</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>; <span class=\"comment\">/*你也占一半的宽度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy8mp7wg5j313t010a9w.jpg\" alt=\"\"></p>\n<h3 id=\"头部\"><a href=\"#头部\" class=\"headerlink\" title=\"头部\"></a>头部</h3><p>html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"headerContent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"headerContent-item headerContent-item1 bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"headerContent-item headerContent-item2 bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"headerContent-item headerContent-item3 bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*头部*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.headerContent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.headerContent-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.headerContent-item1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">180px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">180px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.headerContent-item2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.headerContent-item3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy8op1e6fj313s03jwee.jpg\" alt=\"\"></p>\n<h3 id=\"菜单\"><a href=\"#菜单\" class=\"headerlink\" title=\"菜单\"></a>菜单</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu bg-color1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menuList\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menuList-item bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menuList-item bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menuList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menuList-item bg-color5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*菜单*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.menu</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.menuList</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">42px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.menuList-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">108px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">42px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcy8px62zrj313r057mx4.jpg\" alt=\"\"></p>\n<h3 id=\"轮播图\"><a href=\"#轮播图\" class=\"headerlink\" title=\"轮播图\"></a>轮播图</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*轮播图*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.carousel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy8supasnj313r0esaaa.jpg\" alt=\"\"></p>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orderList bg-color1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orderList-item bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orderList-item bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orderList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orderList-item bg-color5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*排序*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.orderList</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.orderList-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">108px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">42px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tKfTcly1fcy8unuifgj313q0im74m.jpg\" alt=\"\"></p>\n<h3 id=\"商品列表\"><a href=\"#商品列表\" class=\"headerlink\" title=\"商品列表\"></a>商品列表</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color5 productList-lastItem\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productList-item bg-color5 productList-lastItem\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*商品列表*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productList</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productList-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">228px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productList-lastItem</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcgy1fcy9xomb8ij311w0x879n.jpg\" alt=\"\"></p>\n<h3 id=\"页脚\"><a href=\"#页脚\" class=\"headerlink\" title=\"页脚\"></a>页脚</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 页脚 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">83px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcy8xawdl8j314310bwfq.jpg\" alt=\"\"></p>\n<p>大功告成！</p>\n<p>最终实例代码：<a href=\"http://codepen.io/raimonfuns/pen/VPobLX\" target=\"_blank\" rel=\"noopener\">首页布局</a>。</p>\n<h2 id=\"详情页\"><a href=\"#详情页\" class=\"headerlink\" title=\"详情页\"></a>详情页</h2><p>由于导航栏、头部、菜单都是通用的，所以，就不用再重复了，我已经帮你先写上了，<a href=\"http://codepen.io/raimonfuns/pen/dNxWeg\" target=\"_blank\" rel=\"noopener\">点这里</a>。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcy95r93e1j3138053dfs.jpg\" alt=\"\"></p>\n<h3 id=\"当前位置\"><a href=\"#当前位置\" class=\"headerlink\" title=\"当前位置\"></a>当前位置</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"location bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css: </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*当前位置*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.location</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tKfTcly1fcy963ncbcj313406o0sq.jpg\" alt=\"\"></p>\n<h3 id=\"商品信息\"><a href=\"#商品信息\" class=\"headerlink\" title=\"商品信息\"></a>商品信息</h3><p>这个部分的布局很多同学感兴趣，所以我多解释一下，首先，我们应该把它看成「两列布局」，然后，再把左边那一块分成「上下布局」，可以一来就很好写了，来试试。</p>\n<p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left bg-color1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-bigImage bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item bg-color4 productDetail-left-imageList-lastItem\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-right bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css: </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*商品信息*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left; <span class=\"comment\">/*你去左边*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-right</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: right; <span class=\"comment\">/*你去右边*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">744px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-bigImage</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList-item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left; <span class=\"comment\">/*虽然我们是block元素，但是我们还是想在同一行呀，那就用float吧*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList-lastItem</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tKfTcly1fcy98hzqr8j30xn0emwen.jpg\" alt=\"\"></p>\n<h3 id=\"商品详情\"><a href=\"#商品详情\" class=\"headerlink\" title=\"商品详情\"></a>商品详情</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList bg-color1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList-item bg-color2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList-item bg-color3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content bg-color4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*商品详情*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#50514F</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-menuList</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-menuList-item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">175px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-content</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">1000px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcy9a8hw5xj30xs0cn0su.jpg\" alt=\"\"></p>\n<h3 id=\"页脚-1\"><a href=\"#页脚-1\" class=\"headerlink\" title=\"页脚\"></a>页脚</h3><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer bg-color1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 页脚 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">83px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcy84tsyezj31431k6ac0.jpg\" alt=\"\"></p>\n<p>大功告成！</p>\n<p>最终实例代码：<a href=\"http://codepen.io/raimonfuns/pen/zNgwQW\" target=\"_blank\" rel=\"noopener\">详情页布局</a>。</p>\n<h2 id=\"float的高度问题和解决方法\"><a href=\"#float的高度问题和解决方法\" class=\"headerlink\" title=\"float的高度问题和解决方法\"></a>float的高度问题和解决方法</h2><p>从上面的布局中可以看到，float是一个高频css属性，你会发现，使用float几乎做出大部分的布局。那么，float怎么好用的属性，有没有缺点呢，有的，它一个缺点，看实例：<a href=\"http://codepen.io/raimonfuns/pen/MJNmMv\" target=\"_blank\" rel=\"noopener\">float高度问题</a>。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcy9h52pekj307202v0sk.jpg\" alt=\"\"></p>\n<p><code>.parent</code>的背景颜色是黑色的，但是却看不到，这因为设置了float的元素，不会「撑起」父元素的高度。他虽然存在，而且本身也确实有高度，但是，对于父元素来说，他的高度是0。</p>\n<p>那么，解决方法是什么呢？有两个常用的：</p>\n<ol>\n<li>手动设置一下<code>.parent</code>的高度呗，但缺点就是得固定高度，而其实很多布局的高度是不确定的，比如说商品列表，你根本不知道以后会添加多少商品，所以，这种用法不太好。<a href=\"http://codepen.io/raimonfuns/pen/VPoWvJ\" target=\"_blank\" rel=\"noopener\">实例代码</a>。</li>\n<li>给<code>.parent</code>增加一个属性<code>overflow: hidden</code>，简单粗暴，很实用，强烈推荐。<a href=\"http://codepen.io/raimonfuns/pen/BpXZoK\" target=\"_blank\" rel=\"noopener\">实例代码</a>。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>css布局的高频小套路就是：「盒模型」和「float」。只要把这两个用好了，就能够做出很多常见的布局。</p>\n<h2 id=\"系列文章：\"><a href=\"#系列文章：\" class=\"headerlink\" title=\"系列文章：\"></a>系列文章：</h2><ul>\n<li><a href=\"http://forum.qzy.camp/t/1-navbar/690\" target=\"_blank\" rel=\"noopener\">【一步一步做出小小食杂铺】前端分享系列1 — navbar导航栏</a></li>\n<li><a href=\"http://forum.qzy.camp/t/2-logo-search/696\" target=\"_blank\" rel=\"noopener\">「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车</a></li>\n</ul>\n<p>未完待续，敬请期待。如果你有什么建议，欢迎留言！</p>\n<hr>\n<p>ps：如果教程对大家有帮助的话，希望能为「<a href=\"https://fullstack.xinshengdaxue.com/works/201\" target=\"_blank\" rel=\"noopener\">小小食杂铺</a>」投上一票哈。</p>\n"},{"title":"用jQuery实现常见的js效果","_content":"\n这篇文章的目录：\n\n- 前言\n- 轮播图\n- 回到顶部\n- 图片切换\n- 菜单栏的切换\n\n## 前言\n\n这是我做「小小食杂铺」时，用jquery实现的效果，希望对大家有帮助。\n\n## 轮播图\n\nhtml:\n\n```html\n<div id=\"myCarousel\" class=\"carousel slide\">\n  <ol class=\"carousel-indicators\">\n    <li data-target=\"#myCarousel\" data-slide-to=\"0\" class=\"active\"></li>\n    <li data-target=\"#myCarousel\" data-slide-to=\"1\"></li>\n    <li data-target=\"#myCarousel\" data-slide-to=\"2\"></li>\n </ol>\n <div class=\"carousel-inner\">\n    <div class=\"item active\">\n     <a href=\"javacript:;\">\n      <img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrl5afeqhj30xc0afgpx.jpg\">\n      <div class=\"carousel-caption\"></div>\n     </a>\n    </div>\n    <div class=\"item\">\n     <a href=\"javacript:;\">\n      <img src=\"https://vipweb.bs2cdn.yy.com/vipinter_de4f123bb220482e93649571a1491572.jpg\">\n      <div class=\"carousel-caption\"></div>\n     </a>\n    </div>\n    <div class=\"item\">\n     <a href=\"javacript:;\">\n      <img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrlcb0knhj30xc0afwib.jpg\">\n      <div class=\"carousel-caption\"></div>\n     </a>\n    </div>\n  </div>\n</div>\n```\n\n在application.scss加上\n\n```css\n.carousel {\n  width: 1200px;\n  margin: 0 auto;\n}\n.carousel .item {\n  height: 375px;\n}\n```\n\n在application.js顶部加入\n\n```js\n//= require bootstrap\n```\n\n然后在底部加上\n\n```js\n$('.carousel').carousel({\n  interval: 2000 //目前是2秒播放一张，可以根据需要调整这个值\n})\n```\n\ndone!\n\n效果：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fczb89s9wbg30z50acqv5.gif)\n\n实例代码：[轮播图](http://codepen.io/raimonfuns/pen/GWKoOM)\n\n## 回到顶部\n\n在_footer.html.erb加入\n\n```html\n<div id=\"gotop\"></div>\n```\n\n在application.scss加入\n\n```css\n#gotop {\n  width: 50px;\n  height: 50px;\n  position: fixed;\n  right: 20px;\n  bottom: 20px;\n  background: #F25F5C;\n  cursor: pointer;\n}\n```\n\n在application.js加入\n\n```javascript\n$(document).ready(function() {\n  $('#gotop').click(function () {\n    $('body').animate({'scrollTop': 0}, 500)\n  })\n})\n```\n\n![](https://ww1.sinaimg.cn/large/006tKfTcgy1fczj8tczoug30z50f3h09.gif)\n\n实例代码：[回到顶部](http://codepen.io/raimonfuns/pen/NpKpqX)\n\n但其实，当页面在顶部时，是不需要显示「gotop按钮」的，所以，我们可以优化一下，当页面滚动下来之后，才显示「gotop按钮」。\n\n修改application.scss\n\n```css\n#gotop {\n  width: 50px;\n  height: 50px;\n  position: fixed;\n  right: 20px;\n  bottom: 20px;\n  background: #F25F5C;\n  cursor: pointer;\n  display: none; /*默认先隐藏掉*/\n}\n```\n\n修改application.js\n\n```javascript\n$(document).ready(function() {\n  $('#gotop').click(function () {\n    $('body').animate({'scrollTop': 0}, 500)\n  })\n\n  $(window).scroll(function () {\n    if ($(this).scrollTop() > 500) { \n      $('#gotop').fadeIn() // 当页面向下滚动的距离大于500px时，慢慢地显示「回到顶部按钮」\n    } else {\n      $('#gotop').fadeOut() // 否则慢慢地隐藏「回到顶部按钮」\n    }\n  })\n})\n```\n\n![](https://ww3.sinaimg.cn/large/006tKfTcgy1fczjdhsx6eg30z50f31ky.gif)\n\n实例代码：[回到顶部优化版](http://codepen.io/raimonfuns/pen/wJwedG)\n\n## 图片切换\n\nhtml\n\n```html\n<div class=\"productDetail\">\n  <div class=\"productDetail-left\">\n    <div class=\"productDetail-left-bigImage\">\n      <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\" />\n    </div>\n    <div class=\"productDetail-left-imageList\">\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/893/medium_TB21el5X9GI.eBjSspcXXcVjFXa___725677994.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/894/medium_TB2IATBX71M.eBjSZFOXXc0rFXa___725677994.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/895/medium_TB2DjSOdNBmpuFjSZFDXXXD8pXa___725677994.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item productDetail-left-imageList-lastItem\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/891/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90__1_.jpg\" />\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n在application.scss加上\n\n```css\n/*商品信息*/\n.productDetail {\n\twidth: 1200px;\n\tmargin: 20px auto;\n\theight: 518px;\n}\n\n.productDetail img {\n  width: 100%;\n  height: 100%;\n}\n\n.productDetail-left {\n\tfloat: left; /*你去左边*/\n\twidth: 420px;\n\theight: 518px;\n}\n\n.productDetail-right {\n\tfloat: right; /*你去右边*/\n\twidth: 744px;\n\theight: 518px;\n}\n\n.productDetail-left-bigImage {\n\twidth: 420px;\n\theight: 420px;\n}\n\n.productDetail-left-imageList {\n\tmargin-top: 15px;\n}\n\n.productDetail-left-imageList-item {\n\tfloat: left; /*虽然我们是block元素，但是我们还是想在同一行呀，那就用float吧*/\n\twidth: 72px;\n\theight: 72px;\n\tmargin-right: 15px;\n}\n\n.productDetail-left-imageList-lastItem {\n\tmargin-right: 0;\n}\n```\n\n在application.js加上\n\n```javascript\n$(document).ready(function() {\n\t// 图片切换\n\t$('.productDetail-left-imageList-item').mouseover(function () {\n\t  var src = $(this).find('img').attr('src') //从被鼠标选中的图片的src里面拿到图片链接\n\t  $('.productDetail-left-bigImage').find('img').attr('src', src) //把图片链接设置到大图的src里面\n\t})\n})\n```\n\n效果：\n\n![](https://ww4.sinaimg.cn/large/006tKfTcgy1fczk14hbi7g30ev0ahapr.gif)\n\n实例代码：[切换图片](http://codepen.io/raimonfuns/pen/aJoJgZ)\n\n## 菜单栏的切换\n\nhtml\n\n```html\n<div class=\"productDecription\">\n  <div class=\"productDecription-menuList bg-color1\">\n    <div class=\"productDecription-menuList-item bg-color2\">选项卡1</div>\n    <div class=\"productDecription-menuList-item bg-color3\">选项卡2</div>\n  </div>\n  <div class=\"productDecription-content\">\n    <div class=\"productDecription-content-item bg-color4\" style=\"display: block;\">内容1</div>\n    <div class=\"productDecription-content-item bg-color5\">内容2</div>\n  </div>\n</div>\n```\n\n在application.scss加上\n\n```css\n/*5种背景颜色*/\n.bg-color1 {\n  background: #50514F; \n}\n\n.bg-color2 {\n  background: #F25F5C; \n}\n\n.bg-color3 {\n  background: #FFE066; \n}\n\n.bg-color4 {\n  background: #247BA0; \n}\n\n.bg-color5 {\n  background: #70C1B3; \n}\n\n/*商品详情*/\n.productDecription {\n\twidth: 1200px;\n  text-align: center;\n\tmargin: 20px auto;\n\tborder: 1px solid #50514F;\n  line-height: 30px;\n}\n\n.productDecription-menuList {\n\theight: 35px;\n}\n\n.productDecription-menuList-item {\n\tfloat: left;\n\twidth: 175px;\n\theight: 35px;\n}\n\n.productDecription-content {\n\twidth: 750px;\n  height: 500px;\n\tmargin: 50px auto;\n}\n\n.productDecription-content-item {\n  display: none;\n  width: 750px;\n  height: 500px;\n}\n```\n\n在application.js加上\n\n```javascript\n$(document).ready(function() {\n  $('.productDecription-menuList-item').click(function () {\n    var index = $(this).index() //拿到这个「选项卡」的index，第一个是0，第二个是1，以此类推\n    $('.productDecription-content-item').hide() //所有的内容都隐藏\n    $('.productDecription-content-item').eq(index).show() //只显示对于index的内容\n  })\n})\n```\n\n效果：\n\n![](https://ww3.sinaimg.cn/large/006tKfTcgy1fczktvvtdxg30z408dt92.gif)\n\n实例代码：[选项卡切换](http://codepen.io/raimonfuns/pen/XMrRXd)\n\n## 系列文章：\n\n- [【一步一步做出小小食杂铺】前端分享系列1 — navbar导航栏](http://forum.qzy.camp/t/1-navbar/690)\n- [「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车](http://forum.qzy.camp/t/2-logo-search/696)\n- [【一步一步做出小小食杂铺】前端分享系列3 — 页面布局的高频小套路](http://forum.qzy.camp/t/topic/733)\n\n未完待续，敬请期待。如果你有什么建议，欢迎留言！\n\n------\n\nps：如果教程对大家有帮助的话，希望能为「[小小食杂铺](https://fullstack.xinshengdaxue.com/works/201)」投上一票哈。","source":"_posts/2017-02-23-share3.md","raw":"---\ntitle: 用jQuery实现常见的js效果\ncategories: 全栈营\n---\n\n这篇文章的目录：\n\n- 前言\n- 轮播图\n- 回到顶部\n- 图片切换\n- 菜单栏的切换\n\n## 前言\n\n这是我做「小小食杂铺」时，用jquery实现的效果，希望对大家有帮助。\n\n## 轮播图\n\nhtml:\n\n```html\n<div id=\"myCarousel\" class=\"carousel slide\">\n  <ol class=\"carousel-indicators\">\n    <li data-target=\"#myCarousel\" data-slide-to=\"0\" class=\"active\"></li>\n    <li data-target=\"#myCarousel\" data-slide-to=\"1\"></li>\n    <li data-target=\"#myCarousel\" data-slide-to=\"2\"></li>\n </ol>\n <div class=\"carousel-inner\">\n    <div class=\"item active\">\n     <a href=\"javacript:;\">\n      <img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrl5afeqhj30xc0afgpx.jpg\">\n      <div class=\"carousel-caption\"></div>\n     </a>\n    </div>\n    <div class=\"item\">\n     <a href=\"javacript:;\">\n      <img src=\"https://vipweb.bs2cdn.yy.com/vipinter_de4f123bb220482e93649571a1491572.jpg\">\n      <div class=\"carousel-caption\"></div>\n     </a>\n    </div>\n    <div class=\"item\">\n     <a href=\"javacript:;\">\n      <img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrlcb0knhj30xc0afwib.jpg\">\n      <div class=\"carousel-caption\"></div>\n     </a>\n    </div>\n  </div>\n</div>\n```\n\n在application.scss加上\n\n```css\n.carousel {\n  width: 1200px;\n  margin: 0 auto;\n}\n.carousel .item {\n  height: 375px;\n}\n```\n\n在application.js顶部加入\n\n```js\n//= require bootstrap\n```\n\n然后在底部加上\n\n```js\n$('.carousel').carousel({\n  interval: 2000 //目前是2秒播放一张，可以根据需要调整这个值\n})\n```\n\ndone!\n\n效果：\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fczb89s9wbg30z50acqv5.gif)\n\n实例代码：[轮播图](http://codepen.io/raimonfuns/pen/GWKoOM)\n\n## 回到顶部\n\n在_footer.html.erb加入\n\n```html\n<div id=\"gotop\"></div>\n```\n\n在application.scss加入\n\n```css\n#gotop {\n  width: 50px;\n  height: 50px;\n  position: fixed;\n  right: 20px;\n  bottom: 20px;\n  background: #F25F5C;\n  cursor: pointer;\n}\n```\n\n在application.js加入\n\n```javascript\n$(document).ready(function() {\n  $('#gotop').click(function () {\n    $('body').animate({'scrollTop': 0}, 500)\n  })\n})\n```\n\n![](https://ww1.sinaimg.cn/large/006tKfTcgy1fczj8tczoug30z50f3h09.gif)\n\n实例代码：[回到顶部](http://codepen.io/raimonfuns/pen/NpKpqX)\n\n但其实，当页面在顶部时，是不需要显示「gotop按钮」的，所以，我们可以优化一下，当页面滚动下来之后，才显示「gotop按钮」。\n\n修改application.scss\n\n```css\n#gotop {\n  width: 50px;\n  height: 50px;\n  position: fixed;\n  right: 20px;\n  bottom: 20px;\n  background: #F25F5C;\n  cursor: pointer;\n  display: none; /*默认先隐藏掉*/\n}\n```\n\n修改application.js\n\n```javascript\n$(document).ready(function() {\n  $('#gotop').click(function () {\n    $('body').animate({'scrollTop': 0}, 500)\n  })\n\n  $(window).scroll(function () {\n    if ($(this).scrollTop() > 500) { \n      $('#gotop').fadeIn() // 当页面向下滚动的距离大于500px时，慢慢地显示「回到顶部按钮」\n    } else {\n      $('#gotop').fadeOut() // 否则慢慢地隐藏「回到顶部按钮」\n    }\n  })\n})\n```\n\n![](https://ww3.sinaimg.cn/large/006tKfTcgy1fczjdhsx6eg30z50f31ky.gif)\n\n实例代码：[回到顶部优化版](http://codepen.io/raimonfuns/pen/wJwedG)\n\n## 图片切换\n\nhtml\n\n```html\n<div class=\"productDetail\">\n  <div class=\"productDetail-left\">\n    <div class=\"productDetail-left-bigImage\">\n      <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\" />\n    </div>\n    <div class=\"productDetail-left-imageList\">\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/893/medium_TB21el5X9GI.eBjSspcXXcVjFXa___725677994.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/894/medium_TB2IATBX71M.eBjSZFOXXc0rFXa___725677994.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/895/medium_TB2DjSOdNBmpuFjSZFDXXXD8pXa___725677994.jpg_430x430q90.jpg\" />\n      </div>\n      <div class=\"productDetail-left-imageList-item productDetail-left-imageList-lastItem\">\n        <img src=\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/891/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90__1_.jpg\" />\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n在application.scss加上\n\n```css\n/*商品信息*/\n.productDetail {\n\twidth: 1200px;\n\tmargin: 20px auto;\n\theight: 518px;\n}\n\n.productDetail img {\n  width: 100%;\n  height: 100%;\n}\n\n.productDetail-left {\n\tfloat: left; /*你去左边*/\n\twidth: 420px;\n\theight: 518px;\n}\n\n.productDetail-right {\n\tfloat: right; /*你去右边*/\n\twidth: 744px;\n\theight: 518px;\n}\n\n.productDetail-left-bigImage {\n\twidth: 420px;\n\theight: 420px;\n}\n\n.productDetail-left-imageList {\n\tmargin-top: 15px;\n}\n\n.productDetail-left-imageList-item {\n\tfloat: left; /*虽然我们是block元素，但是我们还是想在同一行呀，那就用float吧*/\n\twidth: 72px;\n\theight: 72px;\n\tmargin-right: 15px;\n}\n\n.productDetail-left-imageList-lastItem {\n\tmargin-right: 0;\n}\n```\n\n在application.js加上\n\n```javascript\n$(document).ready(function() {\n\t// 图片切换\n\t$('.productDetail-left-imageList-item').mouseover(function () {\n\t  var src = $(this).find('img').attr('src') //从被鼠标选中的图片的src里面拿到图片链接\n\t  $('.productDetail-left-bigImage').find('img').attr('src', src) //把图片链接设置到大图的src里面\n\t})\n})\n```\n\n效果：\n\n![](https://ww4.sinaimg.cn/large/006tKfTcgy1fczk14hbi7g30ev0ahapr.gif)\n\n实例代码：[切换图片](http://codepen.io/raimonfuns/pen/aJoJgZ)\n\n## 菜单栏的切换\n\nhtml\n\n```html\n<div class=\"productDecription\">\n  <div class=\"productDecription-menuList bg-color1\">\n    <div class=\"productDecription-menuList-item bg-color2\">选项卡1</div>\n    <div class=\"productDecription-menuList-item bg-color3\">选项卡2</div>\n  </div>\n  <div class=\"productDecription-content\">\n    <div class=\"productDecription-content-item bg-color4\" style=\"display: block;\">内容1</div>\n    <div class=\"productDecription-content-item bg-color5\">内容2</div>\n  </div>\n</div>\n```\n\n在application.scss加上\n\n```css\n/*5种背景颜色*/\n.bg-color1 {\n  background: #50514F; \n}\n\n.bg-color2 {\n  background: #F25F5C; \n}\n\n.bg-color3 {\n  background: #FFE066; \n}\n\n.bg-color4 {\n  background: #247BA0; \n}\n\n.bg-color5 {\n  background: #70C1B3; \n}\n\n/*商品详情*/\n.productDecription {\n\twidth: 1200px;\n  text-align: center;\n\tmargin: 20px auto;\n\tborder: 1px solid #50514F;\n  line-height: 30px;\n}\n\n.productDecription-menuList {\n\theight: 35px;\n}\n\n.productDecription-menuList-item {\n\tfloat: left;\n\twidth: 175px;\n\theight: 35px;\n}\n\n.productDecription-content {\n\twidth: 750px;\n  height: 500px;\n\tmargin: 50px auto;\n}\n\n.productDecription-content-item {\n  display: none;\n  width: 750px;\n  height: 500px;\n}\n```\n\n在application.js加上\n\n```javascript\n$(document).ready(function() {\n  $('.productDecription-menuList-item').click(function () {\n    var index = $(this).index() //拿到这个「选项卡」的index，第一个是0，第二个是1，以此类推\n    $('.productDecription-content-item').hide() //所有的内容都隐藏\n    $('.productDecription-content-item').eq(index).show() //只显示对于index的内容\n  })\n})\n```\n\n效果：\n\n![](https://ww3.sinaimg.cn/large/006tKfTcgy1fczktvvtdxg30z408dt92.gif)\n\n实例代码：[选项卡切换](http://codepen.io/raimonfuns/pen/XMrRXd)\n\n## 系列文章：\n\n- [【一步一步做出小小食杂铺】前端分享系列1 — navbar导航栏](http://forum.qzy.camp/t/1-navbar/690)\n- [「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车](http://forum.qzy.camp/t/2-logo-search/696)\n- [【一步一步做出小小食杂铺】前端分享系列3 — 页面布局的高频小套路](http://forum.qzy.camp/t/topic/733)\n\n未完待续，敬请期待。如果你有什么建议，欢迎留言！\n\n------\n\nps：如果教程对大家有帮助的话，希望能为「[小小食杂铺](https://fullstack.xinshengdaxue.com/works/201)」投上一票哈。","slug":"2017-02-23-share3","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdg006lfsong3qv4qoh","content":"<p>这篇文章的目录：</p>\n<ul>\n<li>前言</li>\n<li>轮播图</li>\n<li>回到顶部</li>\n<li>图片切换</li>\n<li>菜单栏的切换</li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这是我做「小小食杂铺」时，用jquery实现的效果，希望对大家有帮助。</p>\n<h2 id=\"轮播图\"><a href=\"#轮播图\" class=\"headerlink\" title=\"轮播图\"></a>轮播图</h2><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCarousel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel slide\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-indicators\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#myCarousel\"</span> <span class=\"attr\">data-slide-to</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#myCarousel\"</span> <span class=\"attr\">data-slide-to</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#myCarousel\"</span> <span class=\"attr\">data-slide-to</span>=<span class=\"string\">\"2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-inner\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item active\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javacript:;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrl5afeqhj30xc0afgpx.jpg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-caption\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javacript:;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://vipweb.bs2cdn.yy.com/vipinter_de4f123bb220482e93649571a1491572.jpg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-caption\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javacript:;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrlcb0knhj30xc0afwib.jpg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-caption\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.carousel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.carousel</span> <span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">375px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js顶部加入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//= require bootstrap</span></span><br></pre></td></tr></table></figure>\n<p>然后在底部加上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'.carousel'</span>).carousel(&#123;</span><br><span class=\"line\">  interval: <span class=\"number\">2000</span> <span class=\"comment\">//目前是2秒播放一张，可以根据需要调整这个值</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>done!</p>\n<p>效果：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fczb89s9wbg30z50acqv5.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/GWKoOM\" target=\"_blank\" rel=\"noopener\">轮播图</a></p>\n<h2 id=\"回到顶部\"><a href=\"#回到顶部\" class=\"headerlink\" title=\"回到顶部\"></a>回到顶部</h2><p>在_footer.html.erb加入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gotop\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加入</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#gotop</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js加入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#gotop'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'body'</span>).animate(&#123;<span class=\"string\">'scrollTop'</span>: <span class=\"number\">0</span>&#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcgy1fczj8tczoug30z50f3h09.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/NpKpqX\" target=\"_blank\" rel=\"noopener\">回到顶部</a></p>\n<p>但其实，当页面在顶部时，是不需要显示「gotop按钮」的，所以，我们可以优化一下，当页面滚动下来之后，才显示「gotop按钮」。</p>\n<p>修改application.scss</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#gotop</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none; <span class=\"comment\">/*默认先隐藏掉*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改application.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#gotop'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'body'</span>).animate(&#123;<span class=\"string\">'scrollTop'</span>: <span class=\"number\">0</span>&#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  $(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"keyword\">this</span>).scrollTop() &gt; <span class=\"number\">500</span>) &#123; </span><br><span class=\"line\">      $(<span class=\"string\">'#gotop'</span>).fadeIn() <span class=\"comment\">// 当页面向下滚动的距离大于500px时，慢慢地显示「回到顶部按钮」</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      $(<span class=\"string\">'#gotop'</span>).fadeOut() <span class=\"comment\">// 否则慢慢地隐藏「回到顶部按钮」</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tKfTcgy1fczjdhsx6eg30z50f31ky.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/wJwedG\" target=\"_blank\" rel=\"noopener\">回到顶部优化版</a></p>\n<h2 id=\"图片切换\"><a href=\"#图片切换\" class=\"headerlink\" title=\"图片切换\"></a>图片切换</h2><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-bigImage\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/893/medium_TB21el5X9GI.eBjSspcXXcVjFXa___725677994.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/894/medium_TB2IATBX71M.eBjSZFOXXc0rFXa___725677994.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/895/medium_TB2DjSOdNBmpuFjSZFDXXXD8pXa___725677994.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item productDetail-left-imageList-lastItem\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/891/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90__1_.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*商品信息*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left; <span class=\"comment\">/*你去左边*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-right</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: right; <span class=\"comment\">/*你去右边*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">744px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-bigImage</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList-item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left; <span class=\"comment\">/*虽然我们是block元素，但是我们还是想在同一行呀，那就用float吧*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList-lastItem</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js加上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 图片切换</span></span><br><span class=\"line\">\t$(<span class=\"string\">'.productDetail-left-imageList-item'</span>).mouseover(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">var</span> src = $(<span class=\"keyword\">this</span>).find(<span class=\"string\">'img'</span>).attr(<span class=\"string\">'src'</span>) <span class=\"comment\">//从被鼠标选中的图片的src里面拿到图片链接</span></span><br><span class=\"line\">\t  $(<span class=\"string\">'.productDetail-left-bigImage'</span>).find(<span class=\"string\">'img'</span>).attr(<span class=\"string\">'src'</span>, src) <span class=\"comment\">//把图片链接设置到大图的src里面</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcgy1fczk14hbi7g30ev0ahapr.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/aJoJgZ\" target=\"_blank\" rel=\"noopener\">切换图片</a></p>\n<h2 id=\"菜单栏的切换\"><a href=\"#菜单栏的切换\" class=\"headerlink\" title=\"菜单栏的切换\"></a>菜单栏的切换</h2><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList bg-color1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList-item bg-color2\"</span>&gt;</span>选项卡1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList-item bg-color3\"</span>&gt;</span>选项卡2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content-item bg-color4\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: block;\"</span>&gt;</span>内容1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content-item bg-color5\"</span>&gt;</span>内容2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*5种背景颜色*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#50514F</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#FFE066</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#247BA0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color5</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#70C1B3</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*商品详情*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#50514F</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-menuList</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-menuList-item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">175px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-content</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-content-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js加上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'.productDecription-menuList-item'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = $(<span class=\"keyword\">this</span>).index() <span class=\"comment\">//拿到这个「选项卡」的index，第一个是0，第二个是1，以此类推</span></span><br><span class=\"line\">    $(<span class=\"string\">'.productDecription-content-item'</span>).hide() <span class=\"comment\">//所有的内容都隐藏</span></span><br><span class=\"line\">    $(<span class=\"string\">'.productDecription-content-item'</span>).eq(index).show() <span class=\"comment\">//只显示对于index的内容</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tKfTcgy1fczktvvtdxg30z408dt92.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/XMrRXd\" target=\"_blank\" rel=\"noopener\">选项卡切换</a></p>\n<h2 id=\"系列文章：\"><a href=\"#系列文章：\" class=\"headerlink\" title=\"系列文章：\"></a>系列文章：</h2><ul>\n<li><a href=\"http://forum.qzy.camp/t/1-navbar/690\" target=\"_blank\" rel=\"noopener\">【一步一步做出小小食杂铺】前端分享系列1 — navbar导航栏</a></li>\n<li><a href=\"http://forum.qzy.camp/t/2-logo-search/696\" target=\"_blank\" rel=\"noopener\">「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车</a></li>\n<li><a href=\"http://forum.qzy.camp/t/topic/733\" target=\"_blank\" rel=\"noopener\">【一步一步做出小小食杂铺】前端分享系列3 — 页面布局的高频小套路</a></li>\n</ul>\n<p>未完待续，敬请期待。如果你有什么建议，欢迎留言！</p>\n<hr>\n<p>ps：如果教程对大家有帮助的话，希望能为「<a href=\"https://fullstack.xinshengdaxue.com/works/201\" target=\"_blank\" rel=\"noopener\">小小食杂铺</a>」投上一票哈。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇文章的目录：</p>\n<ul>\n<li>前言</li>\n<li>轮播图</li>\n<li>回到顶部</li>\n<li>图片切换</li>\n<li>菜单栏的切换</li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这是我做「小小食杂铺」时，用jquery实现的效果，希望对大家有帮助。</p>\n<h2 id=\"轮播图\"><a href=\"#轮播图\" class=\"headerlink\" title=\"轮播图\"></a>轮播图</h2><p>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCarousel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel slide\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-indicators\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#myCarousel\"</span> <span class=\"attr\">data-slide-to</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#myCarousel\"</span> <span class=\"attr\">data-slide-to</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#myCarousel\"</span> <span class=\"attr\">data-slide-to</span>=<span class=\"string\">\"2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-inner\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item active\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javacript:;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrl5afeqhj30xc0afgpx.jpg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-caption\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javacript:;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://vipweb.bs2cdn.yy.com/vipinter_de4f123bb220482e93649571a1491572.jpg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-caption\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javacript:;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ww2.sinaimg.cn/large/006tNc79ly1fcrlcb0knhj30xc0afwib.jpg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"carousel-caption\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.carousel</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.carousel</span> <span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">375px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js顶部加入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//= require bootstrap</span></span><br></pre></td></tr></table></figure>\n<p>然后在底部加上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'.carousel'</span>).carousel(&#123;</span><br><span class=\"line\">  interval: <span class=\"number\">2000</span> <span class=\"comment\">//目前是2秒播放一张，可以根据需要调整这个值</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>done!</p>\n<p>效果：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fczb89s9wbg30z50acqv5.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/GWKoOM\" target=\"_blank\" rel=\"noopener\">轮播图</a></p>\n<h2 id=\"回到顶部\"><a href=\"#回到顶部\" class=\"headerlink\" title=\"回到顶部\"></a>回到顶部</h2><p>在_footer.html.erb加入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gotop\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加入</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#gotop</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js加入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#gotop'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'body'</span>).animate(&#123;<span class=\"string\">'scrollTop'</span>: <span class=\"number\">0</span>&#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcgy1fczj8tczoug30z50f3h09.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/NpKpqX\" target=\"_blank\" rel=\"noopener\">回到顶部</a></p>\n<p>但其实，当页面在顶部时，是不需要显示「gotop按钮」的，所以，我们可以优化一下，当页面滚动下来之后，才显示「gotop按钮」。</p>\n<p>修改application.scss</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#gotop</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none; <span class=\"comment\">/*默认先隐藏掉*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改application.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#gotop'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'body'</span>).animate(&#123;<span class=\"string\">'scrollTop'</span>: <span class=\"number\">0</span>&#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  $(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"keyword\">this</span>).scrollTop() &gt; <span class=\"number\">500</span>) &#123; </span><br><span class=\"line\">      $(<span class=\"string\">'#gotop'</span>).fadeIn() <span class=\"comment\">// 当页面向下滚动的距离大于500px时，慢慢地显示「回到顶部按钮」</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      $(<span class=\"string\">'#gotop'</span>).fadeOut() <span class=\"comment\">// 否则慢慢地隐藏「回到顶部按钮」</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tKfTcgy1fczjdhsx6eg30z50f31ky.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/wJwedG\" target=\"_blank\" rel=\"noopener\">回到顶部优化版</a></p>\n<h2 id=\"图片切换\"><a href=\"#图片切换\" class=\"headerlink\" title=\"图片切换\"></a>图片切换</h2><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-bigImage\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/892/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/893/medium_TB21el5X9GI.eBjSspcXXcVjFXa___725677994.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/894/medium_TB2IATBX71M.eBjSZFOXXc0rFXa___725677994.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/895/medium_TB2DjSOdNBmpuFjSZFDXXXD8pXa___725677994.jpg_430x430q90.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDetail-left-imageList-item productDetail-left-imageList-lastItem\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://newsmallshop.s3.amazonaws.com/uploads/photo/avatar/891/medium_TB1V46qOFXXXXanXpXXXXXXXXXX___0-item_pic.jpg_430x430q90__1_.jpg\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*商品信息*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left; <span class=\"comment\">/*你去左边*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-right</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: right; <span class=\"comment\">/*你去右边*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">744px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">518px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-bigImage</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">420px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList-item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left; <span class=\"comment\">/*虽然我们是block元素，但是我们还是想在同一行呀，那就用float吧*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDetail-left-imageList-lastItem</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js加上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 图片切换</span></span><br><span class=\"line\">\t$(<span class=\"string\">'.productDetail-left-imageList-item'</span>).mouseover(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">var</span> src = $(<span class=\"keyword\">this</span>).find(<span class=\"string\">'img'</span>).attr(<span class=\"string\">'src'</span>) <span class=\"comment\">//从被鼠标选中的图片的src里面拿到图片链接</span></span><br><span class=\"line\">\t  $(<span class=\"string\">'.productDetail-left-bigImage'</span>).find(<span class=\"string\">'img'</span>).attr(<span class=\"string\">'src'</span>, src) <span class=\"comment\">//把图片链接设置到大图的src里面</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcgy1fczk14hbi7g30ev0ahapr.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/aJoJgZ\" target=\"_blank\" rel=\"noopener\">切换图片</a></p>\n<h2 id=\"菜单栏的切换\"><a href=\"#菜单栏的切换\" class=\"headerlink\" title=\"菜单栏的切换\"></a>菜单栏的切换</h2><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList bg-color1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList-item bg-color2\"</span>&gt;</span>选项卡1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-menuList-item bg-color3\"</span>&gt;</span>选项卡2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content-item bg-color4\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: block;\"</span>&gt;</span>内容1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"productDecription-content-item bg-color5\"</span>&gt;</span>内容2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在application.scss加上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*5种背景颜色*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#50514F</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F25F5C</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#FFE066</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#247BA0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color5</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#70C1B3</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*商品详情*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#50514F</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-menuList</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-menuList-item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">175px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-content</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.productDecription-content-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在application.js加上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'.productDecription-menuList-item'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = $(<span class=\"keyword\">this</span>).index() <span class=\"comment\">//拿到这个「选项卡」的index，第一个是0，第二个是1，以此类推</span></span><br><span class=\"line\">    $(<span class=\"string\">'.productDecription-content-item'</span>).hide() <span class=\"comment\">//所有的内容都隐藏</span></span><br><span class=\"line\">    $(<span class=\"string\">'.productDecription-content-item'</span>).eq(index).show() <span class=\"comment\">//只显示对于index的内容</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tKfTcgy1fczktvvtdxg30z408dt92.gif\" alt=\"\"></p>\n<p>实例代码：<a href=\"http://codepen.io/raimonfuns/pen/XMrRXd\" target=\"_blank\" rel=\"noopener\">选项卡切换</a></p>\n<h2 id=\"系列文章：\"><a href=\"#系列文章：\" class=\"headerlink\" title=\"系列文章：\"></a>系列文章：</h2><ul>\n<li><a href=\"http://forum.qzy.camp/t/1-navbar/690\" target=\"_blank\" rel=\"noopener\">【一步一步做出小小食杂铺】前端分享系列1 — navbar导航栏</a></li>\n<li><a href=\"http://forum.qzy.camp/t/2-logo-search/696\" target=\"_blank\" rel=\"noopener\">「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车</a></li>\n<li><a href=\"http://forum.qzy.camp/t/topic/733\" target=\"_blank\" rel=\"noopener\">【一步一步做出小小食杂铺】前端分享系列3 — 页面布局的高频小套路</a></li>\n</ul>\n<p>未完待续，敬请期待。如果你有什么建议，欢迎留言！</p>\n<hr>\n<p>ps：如果教程对大家有帮助的话，希望能为「<a href=\"https://fullstack.xinshengdaxue.com/works/201\" target=\"_blank\" rel=\"noopener\">小小食杂铺</a>」投上一票哈。</p>\n"},{"title":"「一步一步做出小小食杂铺」前端分享系列1 — navbar导航栏","_content":"\n## 前言\n\n目前，「小小食杂铺」的前端页面基本开发完毕，我打算写一个系列教程，帮助大\u0010家掌握css，写出自己想要的页面效果。我会分享如何一步一步做出「小小食杂铺」的前端页面。由于很多同学没有css基础，所以，我不会提及太多术语，尽量用浅显易懂的词语来描述。希望能对大家有帮助，开始吧。\n\n## 目标\n\n实现navbar导航栏\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcuwd7jnstj30zp00z3ye.jpg)\n\n## 步骤\n\n### step1：贴上html代码\n\n```html\n<div class=\"navbar-wrap\">\n  <div class=\"shop_navbar\">\n    <div class=\"shop_navbar-left\">\n      <a href=\"#\">欢迎来到小小食杂铺！</a>\n    </div>\n    <ul class=\"shop_navbar-list\">\n      <li class=\"shop_navbar-listItem\">\n        <a href=\"#\">注册</a>\n      </li>\n      <li class=\"shop_navbar-spacer\"></li>\n      <li class=\"shop_navbar-listItem\">\n        <a href=\"#\">登入</a>\n      </li>\n    </ul>\n  </div>\n</div>\n```\n\n实例代码我已经帮你备好了，来这里：[http://codepen.io/raimonfuns/pen/rjgZGL](http://codepen.io/raimonfuns/pen/rjgZGL)\n\n可以看到，页面上的内容完全没有见过美化，相当丑陋，就好比一个没有装修过的房子。\n\n![](https://ww3.sinaimg.cn/large/006tKfTcgy1fcuxczh7u4j305z01rglj.jpg)\n\n接下来我们开始给「房子」上漆。\n\n后面的步骤，大家可以在css区域跟着贴代码。\n\ngo！\n\n![](https://ww2.sinaimg.cn/large/006tKfTcly1fcuwiolppfj30hk09zglk.jpg)\n\n### step2：写css代码\n\n```css\n.navbar-wrap {\n  background: #F5F5F5; /*背景颜色*/\n  font-size: 12px; /*字体12px*/\n  height: 30px; /*设置高度*/\n  line-height: 30px; /*设置行高，实现垂直居中，口诀「如果高度等于行高，那就实现了文本的垂直居中」*/\n  color: #717171; /*字体颜色*/\n}\n```\n\n`cmd + s`保存，看效果\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcuwt90ovwj30z902t0so.jpg)\n\n可以看到，navbar背景颜色已经显现出来了。接着来\n\n```css\n.shop_navbar {\n  width: 1200px; /*设置导航栏宽度1200*/\n  margin: 0 auto; /*水平居中*/\n}\n\n.shop_navbar-left {\n  float: left; /*你去左边*/\n}\n\n.shop_navbar-list {\n  float: right; /*你去右边*/\n}\n```\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcuwveiqlqj30yu01z0sn.jpg)\n\n导航栏居中，左右两边的位置都搞定了。\n\n```css\n.shop_navbar-listItem {\n  float: left; /*「li是block元素，我们知道block元素是会独占一行的，如果要让它们在一行，那就要加上float」*/\n  padding-left: 10px; /*左边加点空间，不然太挤啦*/\n  padding-right: 10px; /*右边加点空间，不然太挤啦*/\n}\n\n.shop_navbar-spacer {\n  float: left; /*同样的，你也要float*/\n  width: 1px; /*宽度为1，就可以拿到当分隔符用了，哈哈*/\n  height: 12px; /*12px差不多，刚刚好*/\n  margin-top: 9px; /*调一下上边距*/\n  background: #ddd; /*分隔符的背景颜色*/\n}\n```\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcux3kajaaj30xy00zt8l.jpg)\n\nok，几乎快完成了哈\n\n```css\n.navbar-wrap a {\n  color: #717171; /*文字的颜色*/\n  text-decoration: none; /*不要下划线啦，好丑*/\n}\n.navbar-wrap a:hover {\n  color: #C81623; /*鼠标一上去的时候，字体变成红色*/  \n}\n```\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcux4shoufj30y200ymx2.jpg)\n\ndone！\n\n最终代码示例：[http://codepen.io/raimonfuns/pen/qRGMPX](http://codepen.io/raimonfuns/pen/qRGMPX)\n\n\n\n未完待续，敬请期待。如果你有什么建议，欢迎留言！\n\n------\n\nps：如果教程对大家有帮助的话，希望能为「[小小食杂铺](https://fullstack.xinshengdaxue.com/works/201)」投上一票哈。","source":"_posts/2017-02-23-share4.md","raw":"\n---\ntitle: 「一步一步做出小小食杂铺」前端分享系列1 — navbar导航栏\ncategories: 全栈营\n---\n\n## 前言\n\n目前，「小小食杂铺」的前端页面基本开发完毕，我打算写一个系列教程，帮助大\u0010家掌握css，写出自己想要的页面效果。我会分享如何一步一步做出「小小食杂铺」的前端页面。由于很多同学没有css基础，所以，我不会提及太多术语，尽量用浅显易懂的词语来描述。希望能对大家有帮助，开始吧。\n\n## 目标\n\n实现navbar导航栏\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcuwd7jnstj30zp00z3ye.jpg)\n\n## 步骤\n\n### step1：贴上html代码\n\n```html\n<div class=\"navbar-wrap\">\n  <div class=\"shop_navbar\">\n    <div class=\"shop_navbar-left\">\n      <a href=\"#\">欢迎来到小小食杂铺！</a>\n    </div>\n    <ul class=\"shop_navbar-list\">\n      <li class=\"shop_navbar-listItem\">\n        <a href=\"#\">注册</a>\n      </li>\n      <li class=\"shop_navbar-spacer\"></li>\n      <li class=\"shop_navbar-listItem\">\n        <a href=\"#\">登入</a>\n      </li>\n    </ul>\n  </div>\n</div>\n```\n\n实例代码我已经帮你备好了，来这里：[http://codepen.io/raimonfuns/pen/rjgZGL](http://codepen.io/raimonfuns/pen/rjgZGL)\n\n可以看到，页面上的内容完全没有见过美化，相当丑陋，就好比一个没有装修过的房子。\n\n![](https://ww3.sinaimg.cn/large/006tKfTcgy1fcuxczh7u4j305z01rglj.jpg)\n\n接下来我们开始给「房子」上漆。\n\n后面的步骤，大家可以在css区域跟着贴代码。\n\ngo！\n\n![](https://ww2.sinaimg.cn/large/006tKfTcly1fcuwiolppfj30hk09zglk.jpg)\n\n### step2：写css代码\n\n```css\n.navbar-wrap {\n  background: #F5F5F5; /*背景颜色*/\n  font-size: 12px; /*字体12px*/\n  height: 30px; /*设置高度*/\n  line-height: 30px; /*设置行高，实现垂直居中，口诀「如果高度等于行高，那就实现了文本的垂直居中」*/\n  color: #717171; /*字体颜色*/\n}\n```\n\n`cmd + s`保存，看效果\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcuwt90ovwj30z902t0so.jpg)\n\n可以看到，navbar背景颜色已经显现出来了。接着来\n\n```css\n.shop_navbar {\n  width: 1200px; /*设置导航栏宽度1200*/\n  margin: 0 auto; /*水平居中*/\n}\n\n.shop_navbar-left {\n  float: left; /*你去左边*/\n}\n\n.shop_navbar-list {\n  float: right; /*你去右边*/\n}\n```\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcuwveiqlqj30yu01z0sn.jpg)\n\n导航栏居中，左右两边的位置都搞定了。\n\n```css\n.shop_navbar-listItem {\n  float: left; /*「li是block元素，我们知道block元素是会独占一行的，如果要让它们在一行，那就要加上float」*/\n  padding-left: 10px; /*左边加点空间，不然太挤啦*/\n  padding-right: 10px; /*右边加点空间，不然太挤啦*/\n}\n\n.shop_navbar-spacer {\n  float: left; /*同样的，你也要float*/\n  width: 1px; /*宽度为1，就可以拿到当分隔符用了，哈哈*/\n  height: 12px; /*12px差不多，刚刚好*/\n  margin-top: 9px; /*调一下上边距*/\n  background: #ddd; /*分隔符的背景颜色*/\n}\n```\n\n![](https://ww4.sinaimg.cn/large/006tKfTcly1fcux3kajaaj30xy00zt8l.jpg)\n\nok，几乎快完成了哈\n\n```css\n.navbar-wrap a {\n  color: #717171; /*文字的颜色*/\n  text-decoration: none; /*不要下划线啦，好丑*/\n}\n.navbar-wrap a:hover {\n  color: #C81623; /*鼠标一上去的时候，字体变成红色*/  \n}\n```\n\n![](https://ww1.sinaimg.cn/large/006tKfTcly1fcux4shoufj30y200ymx2.jpg)\n\ndone！\n\n最终代码示例：[http://codepen.io/raimonfuns/pen/qRGMPX](http://codepen.io/raimonfuns/pen/qRGMPX)\n\n\n\n未完待续，敬请期待。如果你有什么建议，欢迎留言！\n\n------\n\nps：如果教程对大家有帮助的话，希望能为「[小小食杂铺](https://fullstack.xinshengdaxue.com/works/201)」投上一票哈。","slug":"2017-02-23-share4","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdi006nfsonl8baggrh","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前，「小小食杂铺」的前端页面基本开发完毕，我打算写一个系列教程，帮助大\u0010家掌握css，写出自己想要的页面效果。我会分享如何一步一步做出「小小食杂铺」的前端页面。由于很多同学没有css基础，所以，我不会提及太多术语，尽量用浅显易懂的词语来描述。希望能对大家有帮助，开始吧。</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>实现navbar导航栏</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcuwd7jnstj30zp00z3ye.jpg\" alt=\"\"></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"step1：贴上html代码\"><a href=\"#step1：贴上html代码\" class=\"headerlink\" title=\"step1：贴上html代码\"></a>step1：贴上html代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-wrap\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shop_navbar\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shop_navbar-left\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>欢迎来到小小食杂铺！<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shop_navbar-list\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shop_navbar-listItem\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shop_navbar-spacer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shop_navbar-listItem\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>登入<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实例代码我已经帮你备好了，来这里：<a href=\"http://codepen.io/raimonfuns/pen/rjgZGL\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/rjgZGL</a></p>\n<p>可以看到，页面上的内容完全没有见过美化，相当丑陋，就好比一个没有装修过的房子。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tKfTcgy1fcuxczh7u4j305z01rglj.jpg\" alt=\"\"></p>\n<p>接下来我们开始给「房子」上漆。</p>\n<p>后面的步骤，大家可以在css区域跟着贴代码。</p>\n<p>go！</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tKfTcly1fcuwiolppfj30hk09zglk.jpg\" alt=\"\"></p>\n<h3 id=\"step2：写css代码\"><a href=\"#step2：写css代码\" class=\"headerlink\" title=\"step2：写css代码\"></a>step2：写css代码</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.navbar-wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F5F5F5</span>; <span class=\"comment\">/*背景颜色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>; <span class=\"comment\">/*字体12px*/</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"comment\">/*设置高度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>; <span class=\"comment\">/*设置行高，实现垂直居中，口诀「如果高度等于行高，那就实现了文本的垂直居中」*/</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#717171</span>; <span class=\"comment\">/*字体颜色*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>cmd + s</code>保存，看效果</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcuwt90ovwj30z902t0so.jpg\" alt=\"\"></p>\n<p>可以看到，navbar背景颜色已经显现出来了。接着来</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.shop_navbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>; <span class=\"comment\">/*设置导航栏宽度1200*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto; <span class=\"comment\">/*水平居中*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.shop_navbar-left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*你去左边*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.shop_navbar-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right; <span class=\"comment\">/*你去右边*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcuwveiqlqj30yu01z0sn.jpg\" alt=\"\"></p>\n<p>导航栏居中，左右两边的位置都搞定了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.shop_navbar-listItem</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*「li是block元素，我们知道block元素是会独占一行的，如果要让它们在一行，那就要加上float」*/</span></span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/*左边加点空间，不然太挤啦*/</span></span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/*右边加点空间，不然太挤啦*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.shop_navbar-spacer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*同样的，你也要float*/</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1px</span>; <span class=\"comment\">/*宽度为1，就可以拿到当分隔符用了，哈哈*/</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">12px</span>; <span class=\"comment\">/*12px差不多，刚刚好*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">9px</span>; <span class=\"comment\">/*调一下上边距*/</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ddd</span>; <span class=\"comment\">/*分隔符的背景颜色*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcux3kajaaj30xy00zt8l.jpg\" alt=\"\"></p>\n<p>ok，几乎快完成了哈</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.navbar-wrap</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#717171</span>; <span class=\"comment\">/*文字的颜色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none; <span class=\"comment\">/*不要下划线啦，好丑*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.navbar-wrap</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#C81623</span>; <span class=\"comment\">/*鼠标一上去的时候，字体变成红色*/</span>  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcux4shoufj30y200ymx2.jpg\" alt=\"\"></p>\n<p>done！</p>\n<p>最终代码示例：<a href=\"http://codepen.io/raimonfuns/pen/qRGMPX\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/qRGMPX</a></p>\n<p>未完待续，敬请期待。如果你有什么建议，欢迎留言！</p>\n<hr>\n<p>ps：如果教程对大家有帮助的话，希望能为「<a href=\"https://fullstack.xinshengdaxue.com/works/201\" target=\"_blank\" rel=\"noopener\">小小食杂铺</a>」投上一票哈。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前，「小小食杂铺」的前端页面基本开发完毕，我打算写一个系列教程，帮助大\u0010家掌握css，写出自己想要的页面效果。我会分享如何一步一步做出「小小食杂铺」的前端页面。由于很多同学没有css基础，所以，我不会提及太多术语，尽量用浅显易懂的词语来描述。希望能对大家有帮助，开始吧。</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>实现navbar导航栏</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcuwd7jnstj30zp00z3ye.jpg\" alt=\"\"></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"step1：贴上html代码\"><a href=\"#step1：贴上html代码\" class=\"headerlink\" title=\"step1：贴上html代码\"></a>step1：贴上html代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-wrap\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shop_navbar\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shop_navbar-left\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>欢迎来到小小食杂铺！<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shop_navbar-list\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shop_navbar-listItem\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shop_navbar-spacer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shop_navbar-listItem\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>登入<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实例代码我已经帮你备好了，来这里：<a href=\"http://codepen.io/raimonfuns/pen/rjgZGL\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/rjgZGL</a></p>\n<p>可以看到，页面上的内容完全没有见过美化，相当丑陋，就好比一个没有装修过的房子。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tKfTcgy1fcuxczh7u4j305z01rglj.jpg\" alt=\"\"></p>\n<p>接下来我们开始给「房子」上漆。</p>\n<p>后面的步骤，大家可以在css区域跟着贴代码。</p>\n<p>go！</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tKfTcly1fcuwiolppfj30hk09zglk.jpg\" alt=\"\"></p>\n<h3 id=\"step2：写css代码\"><a href=\"#step2：写css代码\" class=\"headerlink\" title=\"step2：写css代码\"></a>step2：写css代码</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.navbar-wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F5F5F5</span>; <span class=\"comment\">/*背景颜色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>; <span class=\"comment\">/*字体12px*/</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>; <span class=\"comment\">/*设置高度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>; <span class=\"comment\">/*设置行高，实现垂直居中，口诀「如果高度等于行高，那就实现了文本的垂直居中」*/</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#717171</span>; <span class=\"comment\">/*字体颜色*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>cmd + s</code>保存，看效果</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcuwt90ovwj30z902t0so.jpg\" alt=\"\"></p>\n<p>可以看到，navbar背景颜色已经显现出来了。接着来</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.shop_navbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>; <span class=\"comment\">/*设置导航栏宽度1200*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto; <span class=\"comment\">/*水平居中*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.shop_navbar-left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*你去左边*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.shop_navbar-list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right; <span class=\"comment\">/*你去右边*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcuwveiqlqj30yu01z0sn.jpg\" alt=\"\"></p>\n<p>导航栏居中，左右两边的位置都搞定了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.shop_navbar-listItem</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*「li是block元素，我们知道block元素是会独占一行的，如果要让它们在一行，那就要加上float」*/</span></span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/*左边加点空间，不然太挤啦*/</span></span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/*右边加点空间，不然太挤啦*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.shop_navbar-spacer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*同样的，你也要float*/</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1px</span>; <span class=\"comment\">/*宽度为1，就可以拿到当分隔符用了，哈哈*/</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">12px</span>; <span class=\"comment\">/*12px差不多，刚刚好*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">9px</span>; <span class=\"comment\">/*调一下上边距*/</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ddd</span>; <span class=\"comment\">/*分隔符的背景颜色*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tKfTcly1fcux3kajaaj30xy00zt8l.jpg\" alt=\"\"></p>\n<p>ok，几乎快完成了哈</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.navbar-wrap</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#717171</span>; <span class=\"comment\">/*文字的颜色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none; <span class=\"comment\">/*不要下划线啦，好丑*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.navbar-wrap</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#C81623</span>; <span class=\"comment\">/*鼠标一上去的时候，字体变成红色*/</span>  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tKfTcly1fcux4shoufj30y200ymx2.jpg\" alt=\"\"></p>\n<p>done！</p>\n<p>最终代码示例：<a href=\"http://codepen.io/raimonfuns/pen/qRGMPX\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/qRGMPX</a></p>\n<p>未完待续，敬请期待。如果你有什么建议，欢迎留言！</p>\n<hr>\n<p>ps：如果教程对大家有帮助的话，希望能为「<a href=\"https://fullstack.xinshengdaxue.com/works/201\" target=\"_blank\" rel=\"noopener\">小小食杂铺</a>」投上一票哈。</p>\n"},{"title":"「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车","_content":"\n## 目标\n\n![](https://ww2.sinaimg.cn/large/006tKfTcgy1fcvn1e419aj31kw04qgmm.jpg)\n\n## 步骤\n\n实现logo + search + 购物车\n\n### step1：先贴html代码\n\n```html\n<div class=\"header\">\n  <div class=\"logo\"><a href=\"/products\">小小食杂铺</a></div>\n\n  <div>\n\t  <div class=\"search\">\n\t\t  <form action=\"/products/search\" accept-charset=\"UTF-8\" method=\"get\">\n\t\t  \t<input name=\"utf8\" type=\"hidden\" value=\"✓\">\n\t\t    <input class=\"search-input\" type=\"text\" name=\"query_string\" value=\"\" placeholder=\"输入你要搜索的商品\">\n\t\t    <button type=\"submit\" class=\"search-button pa tc\"><i class=\"fa fa-search\"></i></button>\n\t\t\t</form>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"cart-wrap\">\n\t  <div class=\"cart\">\n\t\t\t<a href=\"/carts\">\n\t\t     <i class=\"fa fa-shopping-cart cart-icon \"></i>我的购物车(0) &gt;\n\t\t\t</a>\n\t\t</div>\n\t</div>\n</div>\n```\n\n实例代码我已经帮你备好了，来这里：[http://codepen.io/raimonfuns/pen/xgoKqz](http://codepen.io/raimonfuns/pen/xgoKqz)\n\n后面的步骤，大家可以在css区域跟着贴代码。\n\n![](https://ww2.sinaimg.cn/large/006tKfTcly1fcuwiolppfj30hk09zglk.jpg)\n\n## step2：写CSS代码\n\n```\n.header {\n  width: 1200px; /*宽度1200px*/ \n  margin: 0 auto; /*水平居中*/\n  margin-top: 30px; /*上边距*/\n}\n```\n\n宽度1200px，水平居中\n\n![](https://ww1.sinaimg.cn/large/006tNc79gy1fcvuqznib0j31kw06xab1.jpg)\n\n先写logo的样式\n\n```css\n.logo {\n  float: left; /*logo、seatch、cart这三个模块都是用div包起来的，是block元素，如果要处于同一行，那就要加float*/\n  margin-right: 180px; /*加点右边距，和search*/\n}\n\n.logo a {\n  font-size: 36px; /*设置字体36px*/\n  color: #C81623; /*红色*/\n  text-decoration: none; /*不要下划线*/\n}\n```\n\n![](https://ww1.sinaimg.cn/large/006tNc79gy1fcvusoeexbj31kw05dwfj.jpg)\n\nlogo搞定了，接下来做搜索模块\n\n```css\n.search {\n  float: left; /*logo、seatch、cart这三个模块都是用div包起来的，是block元素，如果要处于同一行，那就要加float*/\n  width: 400px; \n  margin-left: 40px; /*右边距*/\n  margin-top: 10px; /*上边距*/\n  position: relative; /*相对定位*/\n}\n\n.search-input {\n  width: 400px; \n  height: 36px; \n  line-height: 36px; /*设置行高，实现垂直居中，口诀「如果高度等于行高，那就实现了文本的垂直居中」*/\n  color: #666; \n  padding: 4px 20px; /*调一下上下左右边距*/\n  border-width: 2px; /*边框宽度为2px*/\n  border-color: #D32048; /*设置边框颜色为红色*/\n  border-style: solid; /*设置为实线*/\n  font-size: 14px; /*字体14px*/\n  font-family: \"microsoft yahei\"; /*设置成微软雅黑作品*/\n  border-radius: 20px; /*圆角20px*/\n}\n\n.search-button {\n  width: 54px; \n  height: 36px; \n  border: none; /*去掉button默认的border*/\n  background: none; /*去掉button默认的背景颜色*/\n  font-family: \"Microsoft YaHei\"; \n  font-size: 16px; \n  position: absolute; /*绝对定位*/\n  cursor: pointer; /*鼠标一上去，显示手型*/\n  top: 0; \n  right: 0; \n}\n\n.search-button .fa-search {\n  color: #d32048; /*搜索图标的颜色*/\n}\n```\n\n![](https://ww4.sinaimg.cn/large/006tNc79gy1fcvutyh0rqj31kw05cmya.jpg)\n\n搜索也可以了，最后写「我的购物车」代码\n\n```css\n.cart-wrap {\n  float: left; /*logo、seatch、cart这三个模块都是用div包起来的，是block元素，如果要处于同一行，那就要加float*/\n  margin-top: 10px; /*上边距*/\n  margin-left: 238px; /*左边距*/\n}\n\n.cart {\n  padding: 8px 20px; /*加内边距*/\n  cursor: pointer; /*鼠标一上去，显示手型*/\n  border: 1px solid #DFDFDF; /*1像素，实线，灰色*/\n  background: #F5F5F5; /*灰色背景*/\n  font-size: 12px; /*字体小一点好看*/\n}\n\n.fa-shopping-cart {\n  color: #C81623; /*红色图标*/\n  font-size: 16px; /*图标大一点好看*/\n  margin-right: 10px; /*右边距*/\n}\n\n.cart a {\n  color: #6D6D6D; /*灰色字体*/\n  text-decoration: none; /*不要下划线*/\n}\n\n.cart a:hover {\n  color: #C81623; /*鼠标一上去的时候，字体变成红色*/  \n}\n```\n\n![](https://ww1.sinaimg.cn/large/006tNc79gy1fcvv03b4vdj31kw05igmp.jpg)\n\ndone!\n\n最终代码示例：[http://codepen.io/raimonfuns/pen/rjENJb?editors=1100](http://codepen.io/raimonfuns/pen/rjENJb?editors=1100)。\n\n## 总结一下\n\n- 高度等于行高，就实现了垂直居中。\n- float可以让block元素处于同一行。\n- 绝对定位和相对定位比较难解释，大家可以写在笔记里面，然后再慢慢搞懂就可以了。\n\n\n\n未完待续，敬请期待。如果你有什么建议，欢迎留言！\n\n------\n\nps：如果教程对大家有帮助的话，希望能为「[小小食杂铺](https://fullstack.xinshengdaxue.com/works/201)」投上一票哈。","source":"_posts/2017-02-23-share5.md","raw":"\n---\ntitle: 「一步一步做出小小食杂铺」前端分享系列2 — logo + search + 购物车\ncategories: 全栈营\n---\n\n## 目标\n\n![](https://ww2.sinaimg.cn/large/006tKfTcgy1fcvn1e419aj31kw04qgmm.jpg)\n\n## 步骤\n\n实现logo + search + 购物车\n\n### step1：先贴html代码\n\n```html\n<div class=\"header\">\n  <div class=\"logo\"><a href=\"/products\">小小食杂铺</a></div>\n\n  <div>\n\t  <div class=\"search\">\n\t\t  <form action=\"/products/search\" accept-charset=\"UTF-8\" method=\"get\">\n\t\t  \t<input name=\"utf8\" type=\"hidden\" value=\"✓\">\n\t\t    <input class=\"search-input\" type=\"text\" name=\"query_string\" value=\"\" placeholder=\"输入你要搜索的商品\">\n\t\t    <button type=\"submit\" class=\"search-button pa tc\"><i class=\"fa fa-search\"></i></button>\n\t\t\t</form>\n\t\t</div>\n\t</div>\n\t\n\t<div class=\"cart-wrap\">\n\t  <div class=\"cart\">\n\t\t\t<a href=\"/carts\">\n\t\t     <i class=\"fa fa-shopping-cart cart-icon \"></i>我的购物车(0) &gt;\n\t\t\t</a>\n\t\t</div>\n\t</div>\n</div>\n```\n\n实例代码我已经帮你备好了，来这里：[http://codepen.io/raimonfuns/pen/xgoKqz](http://codepen.io/raimonfuns/pen/xgoKqz)\n\n后面的步骤，大家可以在css区域跟着贴代码。\n\n![](https://ww2.sinaimg.cn/large/006tKfTcly1fcuwiolppfj30hk09zglk.jpg)\n\n## step2：写CSS代码\n\n```\n.header {\n  width: 1200px; /*宽度1200px*/ \n  margin: 0 auto; /*水平居中*/\n  margin-top: 30px; /*上边距*/\n}\n```\n\n宽度1200px，水平居中\n\n![](https://ww1.sinaimg.cn/large/006tNc79gy1fcvuqznib0j31kw06xab1.jpg)\n\n先写logo的样式\n\n```css\n.logo {\n  float: left; /*logo、seatch、cart这三个模块都是用div包起来的，是block元素，如果要处于同一行，那就要加float*/\n  margin-right: 180px; /*加点右边距，和search*/\n}\n\n.logo a {\n  font-size: 36px; /*设置字体36px*/\n  color: #C81623; /*红色*/\n  text-decoration: none; /*不要下划线*/\n}\n```\n\n![](https://ww1.sinaimg.cn/large/006tNc79gy1fcvusoeexbj31kw05dwfj.jpg)\n\nlogo搞定了，接下来做搜索模块\n\n```css\n.search {\n  float: left; /*logo、seatch、cart这三个模块都是用div包起来的，是block元素，如果要处于同一行，那就要加float*/\n  width: 400px; \n  margin-left: 40px; /*右边距*/\n  margin-top: 10px; /*上边距*/\n  position: relative; /*相对定位*/\n}\n\n.search-input {\n  width: 400px; \n  height: 36px; \n  line-height: 36px; /*设置行高，实现垂直居中，口诀「如果高度等于行高，那就实现了文本的垂直居中」*/\n  color: #666; \n  padding: 4px 20px; /*调一下上下左右边距*/\n  border-width: 2px; /*边框宽度为2px*/\n  border-color: #D32048; /*设置边框颜色为红色*/\n  border-style: solid; /*设置为实线*/\n  font-size: 14px; /*字体14px*/\n  font-family: \"microsoft yahei\"; /*设置成微软雅黑作品*/\n  border-radius: 20px; /*圆角20px*/\n}\n\n.search-button {\n  width: 54px; \n  height: 36px; \n  border: none; /*去掉button默认的border*/\n  background: none; /*去掉button默认的背景颜色*/\n  font-family: \"Microsoft YaHei\"; \n  font-size: 16px; \n  position: absolute; /*绝对定位*/\n  cursor: pointer; /*鼠标一上去，显示手型*/\n  top: 0; \n  right: 0; \n}\n\n.search-button .fa-search {\n  color: #d32048; /*搜索图标的颜色*/\n}\n```\n\n![](https://ww4.sinaimg.cn/large/006tNc79gy1fcvutyh0rqj31kw05cmya.jpg)\n\n搜索也可以了，最后写「我的购物车」代码\n\n```css\n.cart-wrap {\n  float: left; /*logo、seatch、cart这三个模块都是用div包起来的，是block元素，如果要处于同一行，那就要加float*/\n  margin-top: 10px; /*上边距*/\n  margin-left: 238px; /*左边距*/\n}\n\n.cart {\n  padding: 8px 20px; /*加内边距*/\n  cursor: pointer; /*鼠标一上去，显示手型*/\n  border: 1px solid #DFDFDF; /*1像素，实线，灰色*/\n  background: #F5F5F5; /*灰色背景*/\n  font-size: 12px; /*字体小一点好看*/\n}\n\n.fa-shopping-cart {\n  color: #C81623; /*红色图标*/\n  font-size: 16px; /*图标大一点好看*/\n  margin-right: 10px; /*右边距*/\n}\n\n.cart a {\n  color: #6D6D6D; /*灰色字体*/\n  text-decoration: none; /*不要下划线*/\n}\n\n.cart a:hover {\n  color: #C81623; /*鼠标一上去的时候，字体变成红色*/  \n}\n```\n\n![](https://ww1.sinaimg.cn/large/006tNc79gy1fcvv03b4vdj31kw05igmp.jpg)\n\ndone!\n\n最终代码示例：[http://codepen.io/raimonfuns/pen/rjENJb?editors=1100](http://codepen.io/raimonfuns/pen/rjENJb?editors=1100)。\n\n## 总结一下\n\n- 高度等于行高，就实现了垂直居中。\n- float可以让block元素处于同一行。\n- 绝对定位和相对定位比较难解释，大家可以写在笔记里面，然后再慢慢搞懂就可以了。\n\n\n\n未完待续，敬请期待。如果你有什么建议，欢迎留言！\n\n------\n\nps：如果教程对大家有帮助的话，希望能为「[小小食杂铺](https://fullstack.xinshengdaxue.com/works/201)」投上一票哈。","slug":"2017-02-23-share5","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdj006pfson5ekuhdk8","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p><img src=\"https://ww2.sinaimg.cn/large/006tKfTcgy1fcvn1e419aj31kw04qgmm.jpg\" alt=\"\"></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>实现logo + search + 购物车</p>\n<h3 id=\"step1：先贴html代码\"><a href=\"#step1：先贴html代码\" class=\"headerlink\" title=\"step1：先贴html代码\"></a>step1：先贴html代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/products\"</span>&gt;</span>小小食杂铺<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search\"</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/products/search\"</span> <span class=\"attr\">accept-charset</span>=<span class=\"string\">\"UTF-8\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">\t\t  \t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"utf8\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"✓\"</span>&gt;</span></span><br><span class=\"line\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"query_string\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入你要搜索的商品\"</span>&gt;</span></span><br><span class=\"line\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-button pa tc\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-search\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cart-wrap\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cart\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/carts\"</span>&gt;</span></span><br><span class=\"line\">\t\t     <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-shopping-cart cart-icon \"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>我的购物车(0) &amp;gt;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实例代码我已经帮你备好了，来这里：<a href=\"http://codepen.io/raimonfuns/pen/xgoKqz\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/xgoKqz</a></p>\n<p>后面的步骤，大家可以在css区域跟着贴代码。</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tKfTcly1fcuwiolppfj30hk09zglk.jpg\" alt=\"\"></p>\n<h2 id=\"step2：写CSS代码\"><a href=\"#step2：写CSS代码\" class=\"headerlink\" title=\"step2：写CSS代码\"></a>step2：写CSS代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.header &#123;</span><br><span class=\"line\">  width: 1200px; /*宽度1200px*/ </span><br><span class=\"line\">  margin: 0 auto; /*水平居中*/</span><br><span class=\"line\">  margin-top: 30px; /*上边距*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>宽度1200px，水平居中</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79gy1fcvuqznib0j31kw06xab1.jpg\" alt=\"\"></p>\n<p>先写logo的样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*logo、seatch、cart这三个模块都是用div包起来的，是block元素，如果要处于同一行，那就要加float*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">180px</span>; <span class=\"comment\">/*加点右边距，和search*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.logo</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">36px</span>; <span class=\"comment\">/*设置字体36px*/</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#C81623</span>; <span class=\"comment\">/*红色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none; <span class=\"comment\">/*不要下划线*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79gy1fcvusoeexbj31kw05dwfj.jpg\" alt=\"\"></p>\n<p>logo搞定了，接下来做搜索模块</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.search</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*logo、seatch、cart这三个模块都是用div包起来的，是block元素，如果要处于同一行，那就要加float*/</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">40px</span>; <span class=\"comment\">/*右边距*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/*上边距*/</span></span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative; <span class=\"comment\">/*相对定位*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.search-input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">36px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">36px</span>; <span class=\"comment\">/*设置行高，实现垂直居中，口诀「如果高度等于行高，那就实现了文本的垂直居中」*/</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#666</span>; </span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">4px</span> <span class=\"number\">20px</span>; <span class=\"comment\">/*调一下上下左右边距*/</span></span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">2px</span>; <span class=\"comment\">/*边框宽度为2px*/</span></span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#D32048</span>; <span class=\"comment\">/*设置边框颜色为红色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: solid; <span class=\"comment\">/*设置为实线*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>; <span class=\"comment\">/*字体14px*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"microsoft yahei\"</span>; <span class=\"comment\">/*设置成微软雅黑作品*/</span></span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">20px</span>; <span class=\"comment\">/*圆角20px*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.search-button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">54px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">36px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none; <span class=\"comment\">/*去掉button默认的border*/</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: none; <span class=\"comment\">/*去掉button默认的背景颜色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Microsoft YaHei\"</span>; </span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute; <span class=\"comment\">/*绝对定位*/</span></span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer; <span class=\"comment\">/*鼠标一上去，显示手型*/</span></span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.search-button</span> <span class=\"selector-class\">.fa-search</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#d32048</span>; <span class=\"comment\">/*搜索图标的颜色*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79gy1fcvutyh0rqj31kw05cmya.jpg\" alt=\"\"></p>\n<p>搜索也可以了，最后写「我的购物车」代码</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cart-wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*logo、seatch、cart这三个模块都是用div包起来的，是block元素，如果要处于同一行，那就要加float*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/*上边距*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">238px</span>; <span class=\"comment\">/*左边距*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cart</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">8px</span> <span class=\"number\">20px</span>; <span class=\"comment\">/*加内边距*/</span></span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer; <span class=\"comment\">/*鼠标一上去，显示手型*/</span></span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#DFDFDF</span>; <span class=\"comment\">/*1像素，实线，灰色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F5F5F5</span>; <span class=\"comment\">/*灰色背景*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>; <span class=\"comment\">/*字体小一点好看*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.fa-shopping-cart</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#C81623</span>; <span class=\"comment\">/*红色图标*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>; <span class=\"comment\">/*图标大一点好看*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/*右边距*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cart</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#6D6D6D</span>; <span class=\"comment\">/*灰色字体*/</span></span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none; <span class=\"comment\">/*不要下划线*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cart</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#C81623</span>; <span class=\"comment\">/*鼠标一上去的时候，字体变成红色*/</span>  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79gy1fcvv03b4vdj31kw05igmp.jpg\" alt=\"\"></p>\n<p>done!</p>\n<p>最终代码示例：<a href=\"http://codepen.io/raimonfuns/pen/rjENJb?editors=1100\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/rjENJb?editors=1100</a>。</p>\n<h2 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h2><ul>\n<li>高度等于行高，就实现了垂直居中。</li>\n<li>float可以让block元素处于同一行。</li>\n<li>绝对定位和相对定位比较难解释，大家可以写在笔记里面，然后再慢慢搞懂就可以了。</li>\n</ul>\n<p>未完待续，敬请期待。如果你有什么建议，欢迎留言！</p>\n<hr>\n<p>ps：如果教程对大家有帮助的话，希望能为「<a href=\"https://fullstack.xinshengdaxue.com/works/201\" target=\"_blank\" rel=\"noopener\">小小食杂铺</a>」投上一票哈。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p><img src=\"https://ww2.sinaimg.cn/large/006tKfTcgy1fcvn1e419aj31kw04qgmm.jpg\" alt=\"\"></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>实现logo + search + 购物车</p>\n<h3 id=\"step1：先贴html代码\"><a href=\"#step1：先贴html代码\" class=\"headerlink\" title=\"step1：先贴html代码\"></a>step1：先贴html代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/products\"</span>&gt;</span>小小食杂铺<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search\"</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/products/search\"</span> <span class=\"attr\">accept-charset</span>=<span class=\"string\">\"UTF-8\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">\t\t  \t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"utf8\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"✓\"</span>&gt;</span></span><br><span class=\"line\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"query_string\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入你要搜索的商品\"</span>&gt;</span></span><br><span class=\"line\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-button pa tc\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-search\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cart-wrap\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cart\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/carts\"</span>&gt;</span></span><br><span class=\"line\">\t\t     <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-shopping-cart cart-icon \"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>我的购物车(0) &amp;gt;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实例代码我已经帮你备好了，来这里：<a href=\"http://codepen.io/raimonfuns/pen/xgoKqz\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/xgoKqz</a></p>\n<p>后面的步骤，大家可以在css区域跟着贴代码。</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tKfTcly1fcuwiolppfj30hk09zglk.jpg\" alt=\"\"></p>\n<h2 id=\"step2：写CSS代码\"><a href=\"#step2：写CSS代码\" class=\"headerlink\" title=\"step2：写CSS代码\"></a>step2：写CSS代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.header &#123;</span><br><span class=\"line\">  width: 1200px; /*宽度1200px*/ </span><br><span class=\"line\">  margin: 0 auto; /*水平居中*/</span><br><span class=\"line\">  margin-top: 30px; /*上边距*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>宽度1200px，水平居中</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79gy1fcvuqznib0j31kw06xab1.jpg\" alt=\"\"></p>\n<p>先写logo的样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*logo、seatch、cart这三个模块都是用div包起来的，是block元素，如果要处于同一行，那就要加float*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">180px</span>; <span class=\"comment\">/*加点右边距，和search*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.logo</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">36px</span>; <span class=\"comment\">/*设置字体36px*/</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#C81623</span>; <span class=\"comment\">/*红色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none; <span class=\"comment\">/*不要下划线*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79gy1fcvusoeexbj31kw05dwfj.jpg\" alt=\"\"></p>\n<p>logo搞定了，接下来做搜索模块</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.search</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*logo、seatch、cart这三个模块都是用div包起来的，是block元素，如果要处于同一行，那就要加float*/</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">40px</span>; <span class=\"comment\">/*右边距*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/*上边距*/</span></span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative; <span class=\"comment\">/*相对定位*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.search-input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">36px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">36px</span>; <span class=\"comment\">/*设置行高，实现垂直居中，口诀「如果高度等于行高，那就实现了文本的垂直居中」*/</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#666</span>; </span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">4px</span> <span class=\"number\">20px</span>; <span class=\"comment\">/*调一下上下左右边距*/</span></span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">2px</span>; <span class=\"comment\">/*边框宽度为2px*/</span></span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#D32048</span>; <span class=\"comment\">/*设置边框颜色为红色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: solid; <span class=\"comment\">/*设置为实线*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>; <span class=\"comment\">/*字体14px*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"microsoft yahei\"</span>; <span class=\"comment\">/*设置成微软雅黑作品*/</span></span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">20px</span>; <span class=\"comment\">/*圆角20px*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.search-button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">54px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">36px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none; <span class=\"comment\">/*去掉button默认的border*/</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: none; <span class=\"comment\">/*去掉button默认的背景颜色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Microsoft YaHei\"</span>; </span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute; <span class=\"comment\">/*绝对定位*/</span></span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer; <span class=\"comment\">/*鼠标一上去，显示手型*/</span></span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.search-button</span> <span class=\"selector-class\">.fa-search</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#d32048</span>; <span class=\"comment\">/*搜索图标的颜色*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79gy1fcvutyh0rqj31kw05cmya.jpg\" alt=\"\"></p>\n<p>搜索也可以了，最后写「我的购物车」代码</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cart-wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; <span class=\"comment\">/*logo、seatch、cart这三个模块都是用div包起来的，是block元素，如果要处于同一行，那就要加float*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/*上边距*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">238px</span>; <span class=\"comment\">/*左边距*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cart</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">8px</span> <span class=\"number\">20px</span>; <span class=\"comment\">/*加内边距*/</span></span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer; <span class=\"comment\">/*鼠标一上去，显示手型*/</span></span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#DFDFDF</span>; <span class=\"comment\">/*1像素，实线，灰色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F5F5F5</span>; <span class=\"comment\">/*灰色背景*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>; <span class=\"comment\">/*字体小一点好看*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.fa-shopping-cart</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#C81623</span>; <span class=\"comment\">/*红色图标*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>; <span class=\"comment\">/*图标大一点好看*/</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>; <span class=\"comment\">/*右边距*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cart</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#6D6D6D</span>; <span class=\"comment\">/*灰色字体*/</span></span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none; <span class=\"comment\">/*不要下划线*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cart</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#C81623</span>; <span class=\"comment\">/*鼠标一上去的时候，字体变成红色*/</span>  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79gy1fcvv03b4vdj31kw05igmp.jpg\" alt=\"\"></p>\n<p>done!</p>\n<p>最终代码示例：<a href=\"http://codepen.io/raimonfuns/pen/rjENJb?editors=1100\" target=\"_blank\" rel=\"noopener\">http://codepen.io/raimonfuns/pen/rjENJb?editors=1100</a>。</p>\n<h2 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h2><ul>\n<li>高度等于行高，就实现了垂直居中。</li>\n<li>float可以让block元素处于同一行。</li>\n<li>绝对定位和相对定位比较难解释，大家可以写在笔记里面，然后再慢慢搞懂就可以了。</li>\n</ul>\n<p>未完待续，敬请期待。如果你有什么建议，欢迎留言！</p>\n<hr>\n<p>ps：如果教程对大家有帮助的话，希望能为「<a href=\"https://fullstack.xinshengdaxue.com/works/201\" target=\"_blank\" rel=\"noopener\">小小食杂铺</a>」投上一票哈。</p>\n"},{"title":"【周总结】2/26","_content":"\n## 本周最大的坑\n\n在调试「客服系统」的时候，因为想要「解决无法保存用户的消息」这个问题，就找了很多解决方法，但都没有效果，花了很长时间，后来问了intercom的客服才知道，原来Intercom Acquire这个套餐只能和游客沟通，无法保存已登录用户的消息。如果想要保存消息，就只能购买后面几个套餐。\n\n## 本周学到最好的工具\n\n在写教程的时候，使用codepen这个网站来放置教程的例子，这样一来就把读者就能够访问到每一个操作的实例代码，非常直观。另外，很多同学让我帮忙看页面布局时，我让他们把代码贴到codepen上面，然后我在线调试他们的代码，这样用来，解决问题的效率就提高了很多。\n\n## meetup总结\n\n工具：\n\n1. 良春：colorpeek颜色工具\n2. 保华：`pry`断点工具\n\n收获：\n\n当听到很多同学提到ORID时，我才想起来，自从参加商店大赛之后，我已经很久没写了ORID总结了，主要原因是平时白天要上班，所以只能晚上抽时间做新功能，一投入就过了时间，经常是1、2点才睡觉，基本上没有精力去写ORID总结。今天回想一下，感觉我已经很久没和自己聊天了，接下来打算调整一下，每天给一点时间让自己和自己对话，花十几分钟写写ORID总结，把一天的缓存都清理掉，第二天轻松上阵，多好。","source":"_posts/2017-02-26-week.md","raw":"---\ntitle: 【周总结】2/26\ncategories: 全栈营\n---\n\n## 本周最大的坑\n\n在调试「客服系统」的时候，因为想要「解决无法保存用户的消息」这个问题，就找了很多解决方法，但都没有效果，花了很长时间，后来问了intercom的客服才知道，原来Intercom Acquire这个套餐只能和游客沟通，无法保存已登录用户的消息。如果想要保存消息，就只能购买后面几个套餐。\n\n## 本周学到最好的工具\n\n在写教程的时候，使用codepen这个网站来放置教程的例子，这样一来就把读者就能够访问到每一个操作的实例代码，非常直观。另外，很多同学让我帮忙看页面布局时，我让他们把代码贴到codepen上面，然后我在线调试他们的代码，这样用来，解决问题的效率就提高了很多。\n\n## meetup总结\n\n工具：\n\n1. 良春：colorpeek颜色工具\n2. 保华：`pry`断点工具\n\n收获：\n\n当听到很多同学提到ORID时，我才想起来，自从参加商店大赛之后，我已经很久没写了ORID总结了，主要原因是平时白天要上班，所以只能晚上抽时间做新功能，一投入就过了时间，经常是1、2点才睡觉，基本上没有精力去写ORID总结。今天回想一下，感觉我已经很久没和自己聊天了，接下来打算调整一下，每天给一点时间让自己和自己对话，花十几分钟写写ORID总结，把一天的缓存都清理掉，第二天轻松上阵，多好。","slug":"2017-02-26-week","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdk006rfsony02v2ne2","content":"<h2 id=\"本周最大的坑\"><a href=\"#本周最大的坑\" class=\"headerlink\" title=\"本周最大的坑\"></a>本周最大的坑</h2><p>在调试「客服系统」的时候，因为想要「解决无法保存用户的消息」这个问题，就找了很多解决方法，但都没有效果，花了很长时间，后来问了intercom的客服才知道，原来Intercom Acquire这个套餐只能和游客沟通，无法保存已登录用户的消息。如果想要保存消息，就只能购买后面几个套餐。</p>\n<h2 id=\"本周学到最好的工具\"><a href=\"#本周学到最好的工具\" class=\"headerlink\" title=\"本周学到最好的工具\"></a>本周学到最好的工具</h2><p>在写教程的时候，使用codepen这个网站来放置教程的例子，这样一来就把读者就能够访问到每一个操作的实例代码，非常直观。另外，很多同学让我帮忙看页面布局时，我让他们把代码贴到codepen上面，然后我在线调试他们的代码，这样用来，解决问题的效率就提高了很多。</p>\n<h2 id=\"meetup总结\"><a href=\"#meetup总结\" class=\"headerlink\" title=\"meetup总结\"></a>meetup总结</h2><p>工具：</p>\n<ol>\n<li>良春：colorpeek颜色工具</li>\n<li>保华：<code>pry</code>断点工具</li>\n</ol>\n<p>收获：</p>\n<p>当听到很多同学提到ORID时，我才想起来，自从参加商店大赛之后，我已经很久没写了ORID总结了，主要原因是平时白天要上班，所以只能晚上抽时间做新功能，一投入就过了时间，经常是1、2点才睡觉，基本上没有精力去写ORID总结。今天回想一下，感觉我已经很久没和自己聊天了，接下来打算调整一下，每天给一点时间让自己和自己对话，花十几分钟写写ORID总结，把一天的缓存都清理掉，第二天轻松上阵，多好。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"本周最大的坑\"><a href=\"#本周最大的坑\" class=\"headerlink\" title=\"本周最大的坑\"></a>本周最大的坑</h2><p>在调试「客服系统」的时候，因为想要「解决无法保存用户的消息」这个问题，就找了很多解决方法，但都没有效果，花了很长时间，后来问了intercom的客服才知道，原来Intercom Acquire这个套餐只能和游客沟通，无法保存已登录用户的消息。如果想要保存消息，就只能购买后面几个套餐。</p>\n<h2 id=\"本周学到最好的工具\"><a href=\"#本周学到最好的工具\" class=\"headerlink\" title=\"本周学到最好的工具\"></a>本周学到最好的工具</h2><p>在写教程的时候，使用codepen这个网站来放置教程的例子，这样一来就把读者就能够访问到每一个操作的实例代码，非常直观。另外，很多同学让我帮忙看页面布局时，我让他们把代码贴到codepen上面，然后我在线调试他们的代码，这样用来，解决问题的效率就提高了很多。</p>\n<h2 id=\"meetup总结\"><a href=\"#meetup总结\" class=\"headerlink\" title=\"meetup总结\"></a>meetup总结</h2><p>工具：</p>\n<ol>\n<li>良春：colorpeek颜色工具</li>\n<li>保华：<code>pry</code>断点工具</li>\n</ol>\n<p>收获：</p>\n<p>当听到很多同学提到ORID时，我才想起来，自从参加商店大赛之后，我已经很久没写了ORID总结了，主要原因是平时白天要上班，所以只能晚上抽时间做新功能，一投入就过了时间，经常是1、2点才睡觉，基本上没有精力去写ORID总结。今天回想一下，感觉我已经很久没和自己聊天了，接下来打算调整一下，每天给一点时间让自己和自己对话，花十几分钟写写ORID总结，把一天的缓存都清理掉，第二天轻松上阵，多好。</p>\n"},{"title":"【ORID总结】2/26","_content":"# 2017-02-26总结\n\n## Objective\n\n- 调试美恰的客服系统，出现一个bug，未解决，明天再调试一下\n- 添加一个「商品推荐」功能，想了很久没做出来，后来用郭键的一个方法解决了\n- 参加广州线下meetup\n- 让页面适应1000px宽度\n\n## Reflective\n\n高峰是什么? 合租的小伙伴已经把房子找好了，真好，不用自己奔波找房子了\n\n低点是什么? 今天没什么状态，脑子不怎么转，出了很多bug\n\n## Interpretive\n\n- 尽量做无需比较就能获得辛福感的事情。生活中，很多的不快乐都是来源于比较，即使由于自己在某方面比别人强而获得的辛福感也是很短暂的。所以，我会继续做这些事情，专注于开发一个用户喜欢的真实产品、写把自己知道的知识通过写教程的方式分享给大家、只要时间允许就热心帮助每一个来找我帮忙的小伙伴、好好准备3.6号去strkingly工作。\n- 永远对这个世界充满感激。过去一周，已经发生了太多令我意外的事情，产生了很多很多的「惊喜」，最大的惊喜是当前我最喜欢的公司「strkingly」录用了我，这将是我2017把握到的最好的机会，我相信接下来会有更多的惊喜发生，「永远期待美好的事情，即将发生」。\n\n## Decisional\n\n- 和郑智继续完善我们的「小小食杂铺」","source":"_posts/2017-02-26总结.md","raw":"\n---\ntitle: 【ORID总结】2/26\ncategories: 全栈营\n---\n# 2017-02-26总结\n\n## Objective\n\n- 调试美恰的客服系统，出现一个bug，未解决，明天再调试一下\n- 添加一个「商品推荐」功能，想了很久没做出来，后来用郭键的一个方法解决了\n- 参加广州线下meetup\n- 让页面适应1000px宽度\n\n## Reflective\n\n高峰是什么? 合租的小伙伴已经把房子找好了，真好，不用自己奔波找房子了\n\n低点是什么? 今天没什么状态，脑子不怎么转，出了很多bug\n\n## Interpretive\n\n- 尽量做无需比较就能获得辛福感的事情。生活中，很多的不快乐都是来源于比较，即使由于自己在某方面比别人强而获得的辛福感也是很短暂的。所以，我会继续做这些事情，专注于开发一个用户喜欢的真实产品、写把自己知道的知识通过写教程的方式分享给大家、只要时间允许就热心帮助每一个来找我帮忙的小伙伴、好好准备3.6号去strkingly工作。\n- 永远对这个世界充满感激。过去一周，已经发生了太多令我意外的事情，产生了很多很多的「惊喜」，最大的惊喜是当前我最喜欢的公司「strkingly」录用了我，这将是我2017把握到的最好的机会，我相信接下来会有更多的惊喜发生，「永远期待美好的事情，即将发生」。\n\n## Decisional\n\n- 和郑智继续完善我们的「小小食杂铺」","slug":"2017-02-26总结","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdl006tfson27z916v7","content":"<h1 id=\"2017-02-26总结\"><a href=\"#2017-02-26总结\" class=\"headerlink\" title=\"2017-02-26总结\"></a>2017-02-26总结</h1><h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>调试美恰的客服系统，出现一个bug，未解决，明天再调试一下</li>\n<li>添加一个「商品推荐」功能，想了很久没做出来，后来用郭键的一个方法解决了</li>\n<li>参加广州线下meetup</li>\n<li>让页面适应1000px宽度</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>高峰是什么? 合租的小伙伴已经把房子找好了，真好，不用自己奔波找房子了</p>\n<p>低点是什么? 今天没什么状态，脑子不怎么转，出了很多bug</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><ul>\n<li>尽量做无需比较就能获得辛福感的事情。生活中，很多的不快乐都是来源于比较，即使由于自己在某方面比别人强而获得的辛福感也是很短暂的。所以，我会继续做这些事情，专注于开发一个用户喜欢的真实产品、写把自己知道的知识通过写教程的方式分享给大家、只要时间允许就热心帮助每一个来找我帮忙的小伙伴、好好准备3.6号去strkingly工作。</li>\n<li>永远对这个世界充满感激。过去一周，已经发生了太多令我意外的事情，产生了很多很多的「惊喜」，最大的惊喜是当前我最喜欢的公司「strkingly」录用了我，这将是我2017把握到的最好的机会，我相信接下来会有更多的惊喜发生，「永远期待美好的事情，即将发生」。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>和郑智继续完善我们的「小小食杂铺」</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2017-02-26总结\"><a href=\"#2017-02-26总结\" class=\"headerlink\" title=\"2017-02-26总结\"></a>2017-02-26总结</h1><h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>调试美恰的客服系统，出现一个bug，未解决，明天再调试一下</li>\n<li>添加一个「商品推荐」功能，想了很久没做出来，后来用郭键的一个方法解决了</li>\n<li>参加广州线下meetup</li>\n<li>让页面适应1000px宽度</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>高峰是什么? 合租的小伙伴已经把房子找好了，真好，不用自己奔波找房子了</p>\n<p>低点是什么? 今天没什么状态，脑子不怎么转，出了很多bug</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><ul>\n<li>尽量做无需比较就能获得辛福感的事情。生活中，很多的不快乐都是来源于比较，即使由于自己在某方面比别人强而获得的辛福感也是很短暂的。所以，我会继续做这些事情，专注于开发一个用户喜欢的真实产品、写把自己知道的知识通过写教程的方式分享给大家、只要时间允许就热心帮助每一个来找我帮忙的小伙伴、好好准备3.6号去strkingly工作。</li>\n<li>永远对这个世界充满感激。过去一周，已经发生了太多令我意外的事情，产生了很多很多的「惊喜」，最大的惊喜是当前我最喜欢的公司「strkingly」录用了我，这将是我2017把握到的最好的机会，我相信接下来会有更多的惊喜发生，「永远期待美好的事情，即将发生」。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>和郑智继续完善我们的「小小食杂铺」</li>\n</ul>\n"},{"title":"【ORID总结】2/27","_content":"\n## Objective\n\n完成了哪些事情？\n\n- 写了一篇《css动画教程》\n- 修复几个bug，更新「小小食杂铺」\n\n## Reflective\n\nnone\n\n## Interpretive\n\n- rails ajax无刷新的一个bug。当页面刷新时，ajax是正常的，但是当切换页面之后，再请求ajax就会报错，今天调试了很多都没有结果。只好暂时把这个功能砍掉，等后面有空再研究研究这个问题。\n\n- 黄小茜遇到的一个bug。在js中引入了 `//= require bootstrap-sprockets`，而导致dropdown点击没有效果，把这一句去掉之后，页面就正常了。\n\n- 有时候修改js和css，push到heroku之后，发现heroku上面没有更新，就可以运行`rake assets:clean\n\n  `，`rake assets:precompile`，然后在push上去。\n\n- 在rails的application.js中引入`//= require bootstrap/carousel`之后，轮播图是无法从右到左滚动的，只会一张一张快速地切换，完全没有动画的效果 ，修改的方法是把这一句删掉，换成`//= require bootstrap`，然后就可以了，不过，这里有个坑，如果引入了bootstrap，就要把alert、dropdown之类的去掉，不然会有各种奇怪的冲突。\n\n- 家精的一个bug。在nodejs中，因为`koa-router`的版本问题，而导致路由没办法正常工作，后来安装一个最新的版本，就可以了。\n\n## Decisional\n\n写「小小食杂铺」的landing page","source":"_posts/2017-02-27总结.md","raw":"---\ntitle: 【ORID总结】2/27\ncategories: 全栈营\n---\n\n## Objective\n\n完成了哪些事情？\n\n- 写了一篇《css动画教程》\n- 修复几个bug，更新「小小食杂铺」\n\n## Reflective\n\nnone\n\n## Interpretive\n\n- rails ajax无刷新的一个bug。当页面刷新时，ajax是正常的，但是当切换页面之后，再请求ajax就会报错，今天调试了很多都没有结果。只好暂时把这个功能砍掉，等后面有空再研究研究这个问题。\n\n- 黄小茜遇到的一个bug。在js中引入了 `//= require bootstrap-sprockets`，而导致dropdown点击没有效果，把这一句去掉之后，页面就正常了。\n\n- 有时候修改js和css，push到heroku之后，发现heroku上面没有更新，就可以运行`rake assets:clean\n\n  `，`rake assets:precompile`，然后在push上去。\n\n- 在rails的application.js中引入`//= require bootstrap/carousel`之后，轮播图是无法从右到左滚动的，只会一张一张快速地切换，完全没有动画的效果 ，修改的方法是把这一句删掉，换成`//= require bootstrap`，然后就可以了，不过，这里有个坑，如果引入了bootstrap，就要把alert、dropdown之类的去掉，不然会有各种奇怪的冲突。\n\n- 家精的一个bug。在nodejs中，因为`koa-router`的版本问题，而导致路由没办法正常工作，后来安装一个最新的版本，就可以了。\n\n## Decisional\n\n写「小小食杂铺」的landing page","slug":"2017-02-27总结","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdm006vfsontcfsj5cf","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成了哪些事情？</p>\n<ul>\n<li>写了一篇《css动画教程》</li>\n<li>修复几个bug，更新「小小食杂铺」</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>none</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><ul>\n<li><p>rails ajax无刷新的一个bug。当页面刷新时，ajax是正常的，但是当切换页面之后，再请求ajax就会报错，今天调试了很多都没有结果。只好暂时把这个功能砍掉，等后面有空再研究研究这个问题。</p>\n</li>\n<li><p>黄小茜遇到的一个bug。在js中引入了 <code>//= require bootstrap-sprockets</code>，而导致dropdown点击没有效果，把这一句去掉之后，页面就正常了。</p>\n</li>\n<li><p>有时候修改js和css，push到heroku之后，发现heroku上面没有更新，就可以运行`rake assets:clean</p>\n<p><code>，</code>rake assets:precompile`，然后在push上去。</p>\n</li>\n<li><p>在rails的application.js中引入<code>//= require bootstrap/carousel</code>之后，轮播图是无法从右到左滚动的，只会一张一张快速地切换，完全没有动画的效果 ，修改的方法是把这一句删掉，换成<code>//= require bootstrap</code>，然后就可以了，不过，这里有个坑，如果引入了bootstrap，就要把alert、dropdown之类的去掉，不然会有各种奇怪的冲突。</p>\n</li>\n<li><p>家精的一个bug。在nodejs中，因为<code>koa-router</code>的版本问题，而导致路由没办法正常工作，后来安装一个最新的版本，就可以了。</p>\n</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>写「小小食杂铺」的landing page</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成了哪些事情？</p>\n<ul>\n<li>写了一篇《css动画教程》</li>\n<li>修复几个bug，更新「小小食杂铺」</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>none</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><ul>\n<li><p>rails ajax无刷新的一个bug。当页面刷新时，ajax是正常的，但是当切换页面之后，再请求ajax就会报错，今天调试了很多都没有结果。只好暂时把这个功能砍掉，等后面有空再研究研究这个问题。</p>\n</li>\n<li><p>黄小茜遇到的一个bug。在js中引入了 <code>//= require bootstrap-sprockets</code>，而导致dropdown点击没有效果，把这一句去掉之后，页面就正常了。</p>\n</li>\n<li><p>有时候修改js和css，push到heroku之后，发现heroku上面没有更新，就可以运行`rake assets:clean</p>\n<p><code>，</code>rake assets:precompile`，然后在push上去。</p>\n</li>\n<li><p>在rails的application.js中引入<code>//= require bootstrap/carousel</code>之后，轮播图是无法从右到左滚动的，只会一张一张快速地切换，完全没有动画的效果 ，修改的方法是把这一句删掉，换成<code>//= require bootstrap</code>，然后就可以了，不过，这里有个坑，如果引入了bootstrap，就要把alert、dropdown之类的去掉，不然会有各种奇怪的冲突。</p>\n</li>\n<li><p>家精的一个bug。在nodejs中，因为<code>koa-router</code>的版本问题，而导致路由没办法正常工作，后来安装一个最新的版本，就可以了。</p>\n</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>写「小小食杂铺」的landing page</p>\n"},{"title":"【ORID总结】2/28","_content":"## Objective\n\n完成了哪些事情?\n\n- 「小小食杂铺」的landing page\n- 「小小食杂铺」的问卷调查\n\n## Reflective\n\nnone\n\n## Interpretive\n\n- 问卷调查。第一次做问卷调查，发现原来有那么多不同的想法，而且有很多想法是自己以前从来没有想过的。创业公司里面有一种文化，「越靠近用户的人，越有话语权」，现在我明白其中的意思了。某个功能，做还是不做，不是由你说了算，而是用户，你只有了解用户需要什么，才能做出他们喜欢的产品。\n- landing page与其他页面的风格不太符合。今天把landing page做完了，才发现，风格和现有的页面有点不搭。本来计划今天晚上发布的，但由于发现了这个问题，就停掉了。明天优化一下，再发布。\n\n## Decisional\n\n- 修改「小小食杂铺」landing page\n- 美化「添加批量购物车」的功能","source":"_posts/2017-02-28总结.md","raw":"\n---\ntitle: 【ORID总结】2/28\ncategories: 全栈营\n---\n## Objective\n\n完成了哪些事情?\n\n- 「小小食杂铺」的landing page\n- 「小小食杂铺」的问卷调查\n\n## Reflective\n\nnone\n\n## Interpretive\n\n- 问卷调查。第一次做问卷调查，发现原来有那么多不同的想法，而且有很多想法是自己以前从来没有想过的。创业公司里面有一种文化，「越靠近用户的人，越有话语权」，现在我明白其中的意思了。某个功能，做还是不做，不是由你说了算，而是用户，你只有了解用户需要什么，才能做出他们喜欢的产品。\n- landing page与其他页面的风格不太符合。今天把landing page做完了，才发现，风格和现有的页面有点不搭。本来计划今天晚上发布的，但由于发现了这个问题，就停掉了。明天优化一下，再发布。\n\n## Decisional\n\n- 修改「小小食杂铺」landing page\n- 美化「添加批量购物车」的功能","slug":"2017-02-28总结","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdn006xfsonuuluz95j","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成了哪些事情?</p>\n<ul>\n<li>「小小食杂铺」的landing page</li>\n<li>「小小食杂铺」的问卷调查</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>none</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><ul>\n<li>问卷调查。第一次做问卷调查，发现原来有那么多不同的想法，而且有很多想法是自己以前从来没有想过的。创业公司里面有一种文化，「越靠近用户的人，越有话语权」，现在我明白其中的意思了。某个功能，做还是不做，不是由你说了算，而是用户，你只有了解用户需要什么，才能做出他们喜欢的产品。</li>\n<li>landing page与其他页面的风格不太符合。今天把landing page做完了，才发现，风格和现有的页面有点不搭。本来计划今天晚上发布的，但由于发现了这个问题，就停掉了。明天优化一下，再发布。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>修改「小小食杂铺」landing page</li>\n<li>美化「添加批量购物车」的功能</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成了哪些事情?</p>\n<ul>\n<li>「小小食杂铺」的landing page</li>\n<li>「小小食杂铺」的问卷调查</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>none</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><ul>\n<li>问卷调查。第一次做问卷调查，发现原来有那么多不同的想法，而且有很多想法是自己以前从来没有想过的。创业公司里面有一种文化，「越靠近用户的人，越有话语权」，现在我明白其中的意思了。某个功能，做还是不做，不是由你说了算，而是用户，你只有了解用户需要什么，才能做出他们喜欢的产品。</li>\n<li>landing page与其他页面的风格不太符合。今天把landing page做完了，才发现，风格和现有的页面有点不搭。本来计划今天晚上发布的，但由于发现了这个问题，就停掉了。明天优化一下，再发布。</li>\n</ul>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><ul>\n<li>修改「小小食杂铺」landing page</li>\n<li>美化「添加批量购物车」的功能</li>\n</ul>\n"},{"title":"阅读别人的代码","_content":"\n今天看同事的代码，发现有两个地方的写法是真的好，代码清晰易懂，也很规范。\n\n## 哨兵\n\n```javascript\n// the sential of using mock or not\nconst API_DEBUG = false\n\nconst mockData = {\n  // ...\n}\n\nexport const fetchProducts = (fetchProps) => {\n  if (API_MP_DEBUG) {\n   return new Promise((resolve, reject) => {\n     setTimeout(() => {\n       resolve(mockData)\n     }, 2000)\n   })\n  }\n  \n  const targetUrl = urlHelper.fetchMiniprograms(Object.assign(\n    {},\n    defaultFetchProps,\n    fetchProps,\n  ))\n  return fetch(targetUrl, {\n    method: 'GET',\n  }).then(checkStatus).then(parseJSON)\n}\n```\n\n`API_DEBUG`这个哨兵很帅有木有，你可能不这么觉得，但我之所以觉得它很帅是因为，之前的用了是一种比较蠢的方法 — 注释。每个fetch函数里面加了一堆mock数据，如果要调试加把mock数据加上，如果不调试就一个个注释掉，真是。。。\n\n## 自上往下编程\n\n之前在听网易公开课斯坦福计算机课的时候，那个老师有说到，自上而下的编程才是正确的。自上而下是什么意思呢？ — 先调方法，在实现方法。\n\n```javascript\nrender() {\n  return (\n    <div className=\"s-title flex-title\">\n      <div className=\"listing-action\">\n        { this.renderListingAction() }\n      </div>\n      <div className=\"listing-info\">\n        { this.renderListingInfo() }\n      </div>\n      { this.renderListingSort() }\n    </div>\n  )\n}\n```\n\n很`自上而下`有木有，清晰易懂，厉害。\n\n## 为你的作品签名\n\n只要是他写的文件，他都会在上面写下自己的名字、日期、和功能描述，这是非常好的习惯。\n\n```\n/**\n * Author: Jack\n * Date: Jul 6, 2017\n * -----------------\n * This component is a title component display the title in dashboard\n */\n```\n\n佩服佩服，又学到了一招。\n\n## 总结\n\n现在我才意识到，阅读别人的代码，既然这么有趣，真的收获巨大。以后要多reading code。其实，之所有最近开始主动去读别人的代码，是因为看到了这样一篇文章：《[One Sure-Fire Way to Improve Your Coding](https://changelog.com/posts/one-sure-fire-way-to-improve-your-coding?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=website)》，这篇文章解释了为什么读代码很重要，读什么样的代码，这么读代码，是一篇好文章。\n\n> If you want to dramatically increase your programming skills you need to be reading other people’s code.\n\n今天下午在逛湾区社区的时候，看到一篇文章《[如何看懂别人的代码](https://wanqu.co/a/5234/2017-06-19-how-to-read-other-peoples-code-eight-things-to-remember.html)》，下面的评论非常精彩，和你分享一下\n\n![](http://7xpea4.com1.z0.glb.clouddn.com/images/1/Fsv62TOWlw6UUebD6yBTf_bz7LqQ.png)\n\n所以，我还是滚去好好地看别人的代码吧。^_^\n\n","source":"_posts/2017-07-23-shaobing.md","raw":"---\ntitle: 阅读别人的代码\ncategories: readingCode\n---\n\n今天看同事的代码，发现有两个地方的写法是真的好，代码清晰易懂，也很规范。\n\n## 哨兵\n\n```javascript\n// the sential of using mock or not\nconst API_DEBUG = false\n\nconst mockData = {\n  // ...\n}\n\nexport const fetchProducts = (fetchProps) => {\n  if (API_MP_DEBUG) {\n   return new Promise((resolve, reject) => {\n     setTimeout(() => {\n       resolve(mockData)\n     }, 2000)\n   })\n  }\n  \n  const targetUrl = urlHelper.fetchMiniprograms(Object.assign(\n    {},\n    defaultFetchProps,\n    fetchProps,\n  ))\n  return fetch(targetUrl, {\n    method: 'GET',\n  }).then(checkStatus).then(parseJSON)\n}\n```\n\n`API_DEBUG`这个哨兵很帅有木有，你可能不这么觉得，但我之所以觉得它很帅是因为，之前的用了是一种比较蠢的方法 — 注释。每个fetch函数里面加了一堆mock数据，如果要调试加把mock数据加上，如果不调试就一个个注释掉，真是。。。\n\n## 自上往下编程\n\n之前在听网易公开课斯坦福计算机课的时候，那个老师有说到，自上而下的编程才是正确的。自上而下是什么意思呢？ — 先调方法，在实现方法。\n\n```javascript\nrender() {\n  return (\n    <div className=\"s-title flex-title\">\n      <div className=\"listing-action\">\n        { this.renderListingAction() }\n      </div>\n      <div className=\"listing-info\">\n        { this.renderListingInfo() }\n      </div>\n      { this.renderListingSort() }\n    </div>\n  )\n}\n```\n\n很`自上而下`有木有，清晰易懂，厉害。\n\n## 为你的作品签名\n\n只要是他写的文件，他都会在上面写下自己的名字、日期、和功能描述，这是非常好的习惯。\n\n```\n/**\n * Author: Jack\n * Date: Jul 6, 2017\n * -----------------\n * This component is a title component display the title in dashboard\n */\n```\n\n佩服佩服，又学到了一招。\n\n## 总结\n\n现在我才意识到，阅读别人的代码，既然这么有趣，真的收获巨大。以后要多reading code。其实，之所有最近开始主动去读别人的代码，是因为看到了这样一篇文章：《[One Sure-Fire Way to Improve Your Coding](https://changelog.com/posts/one-sure-fire-way-to-improve-your-coding?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=website)》，这篇文章解释了为什么读代码很重要，读什么样的代码，这么读代码，是一篇好文章。\n\n> If you want to dramatically increase your programming skills you need to be reading other people’s code.\n\n今天下午在逛湾区社区的时候，看到一篇文章《[如何看懂别人的代码](https://wanqu.co/a/5234/2017-06-19-how-to-read-other-peoples-code-eight-things-to-remember.html)》，下面的评论非常精彩，和你分享一下\n\n![](http://7xpea4.com1.z0.glb.clouddn.com/images/1/Fsv62TOWlw6UUebD6yBTf_bz7LqQ.png)\n\n所以，我还是滚去好好地看别人的代码吧。^_^\n\n","slug":"2017-07-23-shaobing","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdo006zfson8fi6nn3u","content":"<p>今天看同事的代码，发现有两个地方的写法是真的好，代码清晰易懂，也很规范。</p>\n<h2 id=\"哨兵\"><a href=\"#哨兵\" class=\"headerlink\" title=\"哨兵\"></a>哨兵</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the sential of using mock or not</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> API_DEBUG = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mockData = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchProducts = <span class=\"function\">(<span class=\"params\">fetchProps</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (API_MP_DEBUG) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">       resolve(mockData)</span><br><span class=\"line\">     &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> targetUrl = urlHelper.fetchMiniprograms(<span class=\"built_in\">Object</span>.assign(</span><br><span class=\"line\">    &#123;&#125;,</span><br><span class=\"line\">    defaultFetchProps,</span><br><span class=\"line\">    fetchProps,</span><br><span class=\"line\">  ))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetch(targetUrl, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">  &#125;).then(checkStatus).then(parseJSON)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>API_DEBUG</code>这个哨兵很帅有木有，你可能不这么觉得，但我之所以觉得它很帅是因为，之前的用了是一种比较蠢的方法 — 注释。每个fetch函数里面加了一堆mock数据，如果要调试加把mock数据加上，如果不调试就一个个注释掉，真是。。。</p>\n<h2 id=\"自上往下编程\"><a href=\"#自上往下编程\" class=\"headerlink\" title=\"自上往下编程\"></a>自上往下编程</h2><p>之前在听网易公开课斯坦福计算机课的时候，那个老师有说到，自上而下的编程才是正确的。自上而下是什么意思呢？ — 先调方法，在实现方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"s-title flex-title\"</span>&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"listing-action\"</span>&gt;</span><br><span class=\"line\">        &#123; <span class=\"keyword\">this</span>.renderListingAction() &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"listing-info\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123; this.renderListingInfo() &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">      &#123; <span class=\"keyword\">this</span>.renderListingSort() &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>很<code>自上而下</code>有木有，清晰易懂，厉害。</p>\n<h2 id=\"为你的作品签名\"><a href=\"#为你的作品签名\" class=\"headerlink\" title=\"为你的作品签名\"></a>为你的作品签名</h2><p>只要是他写的文件，他都会在上面写下自己的名字、日期、和功能描述，这是非常好的习惯。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Author: Jack</span><br><span class=\"line\"> * Date: Jul 6, 2017</span><br><span class=\"line\"> * -----------------</span><br><span class=\"line\"> * This component is a title component display the title in dashboard</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n<p>佩服佩服，又学到了一招。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>现在我才意识到，阅读别人的代码，既然这么有趣，真的收获巨大。以后要多reading code。其实，之所有最近开始主动去读别人的代码，是因为看到了这样一篇文章：《<a href=\"https://changelog.com/posts/one-sure-fire-way-to-improve-your-coding?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=website\" target=\"_blank\" rel=\"noopener\">One Sure-Fire Way to Improve Your Coding</a>》，这篇文章解释了为什么读代码很重要，读什么样的代码，这么读代码，是一篇好文章。</p>\n<blockquote>\n<p>If you want to dramatically increase your programming skills you need to be reading other people’s code.</p>\n</blockquote>\n<p>今天下午在逛湾区社区的时候，看到一篇文章《<a href=\"https://wanqu.co/a/5234/2017-06-19-how-to-read-other-peoples-code-eight-things-to-remember.html\" target=\"_blank\" rel=\"noopener\">如何看懂别人的代码</a>》，下面的评论非常精彩，和你分享一下</p>\n<p><img src=\"http://7xpea4.com1.z0.glb.clouddn.com/images/1/Fsv62TOWlw6UUebD6yBTf_bz7LqQ.png\" alt=\"\"></p>\n<p>所以，我还是滚去好好地看别人的代码吧。^_^</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天看同事的代码，发现有两个地方的写法是真的好，代码清晰易懂，也很规范。</p>\n<h2 id=\"哨兵\"><a href=\"#哨兵\" class=\"headerlink\" title=\"哨兵\"></a>哨兵</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the sential of using mock or not</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> API_DEBUG = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mockData = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchProducts = <span class=\"function\">(<span class=\"params\">fetchProps</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (API_MP_DEBUG) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">       resolve(mockData)</span><br><span class=\"line\">     &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> targetUrl = urlHelper.fetchMiniprograms(<span class=\"built_in\">Object</span>.assign(</span><br><span class=\"line\">    &#123;&#125;,</span><br><span class=\"line\">    defaultFetchProps,</span><br><span class=\"line\">    fetchProps,</span><br><span class=\"line\">  ))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetch(targetUrl, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">  &#125;).then(checkStatus).then(parseJSON)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>API_DEBUG</code>这个哨兵很帅有木有，你可能不这么觉得，但我之所以觉得它很帅是因为，之前的用了是一种比较蠢的方法 — 注释。每个fetch函数里面加了一堆mock数据，如果要调试加把mock数据加上，如果不调试就一个个注释掉，真是。。。</p>\n<h2 id=\"自上往下编程\"><a href=\"#自上往下编程\" class=\"headerlink\" title=\"自上往下编程\"></a>自上往下编程</h2><p>之前在听网易公开课斯坦福计算机课的时候，那个老师有说到，自上而下的编程才是正确的。自上而下是什么意思呢？ — 先调方法，在实现方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"s-title flex-title\"</span>&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"listing-action\"</span>&gt;</span><br><span class=\"line\">        &#123; <span class=\"keyword\">this</span>.renderListingAction() &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"listing-info\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123; this.renderListingInfo() &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">      &#123; <span class=\"keyword\">this</span>.renderListingSort() &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>很<code>自上而下</code>有木有，清晰易懂，厉害。</p>\n<h2 id=\"为你的作品签名\"><a href=\"#为你的作品签名\" class=\"headerlink\" title=\"为你的作品签名\"></a>为你的作品签名</h2><p>只要是他写的文件，他都会在上面写下自己的名字、日期、和功能描述，这是非常好的习惯。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Author: Jack</span><br><span class=\"line\"> * Date: Jul 6, 2017</span><br><span class=\"line\"> * -----------------</span><br><span class=\"line\"> * This component is a title component display the title in dashboard</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n<p>佩服佩服，又学到了一招。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>现在我才意识到，阅读别人的代码，既然这么有趣，真的收获巨大。以后要多reading code。其实，之所有最近开始主动去读别人的代码，是因为看到了这样一篇文章：《<a href=\"https://changelog.com/posts/one-sure-fire-way-to-improve-your-coding?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=website\" target=\"_blank\" rel=\"noopener\">One Sure-Fire Way to Improve Your Coding</a>》，这篇文章解释了为什么读代码很重要，读什么样的代码，这么读代码，是一篇好文章。</p>\n<blockquote>\n<p>If you want to dramatically increase your programming skills you need to be reading other people’s code.</p>\n</blockquote>\n<p>今天下午在逛湾区社区的时候，看到一篇文章《<a href=\"https://wanqu.co/a/5234/2017-06-19-how-to-read-other-peoples-code-eight-things-to-remember.html\" target=\"_blank\" rel=\"noopener\">如何看懂别人的代码</a>》，下面的评论非常精彩，和你分享一下</p>\n<p><img src=\"http://7xpea4.com1.z0.glb.clouddn.com/images/1/Fsv62TOWlw6UUebD6yBTf_bz7LqQ.png\" alt=\"\"></p>\n<p>所以，我还是滚去好好地看别人的代码吧。^_^</p>\n"},{"title":"顺序查找（The sequential search）","_content":"\n当一堆数据存放在一个列表（list）里面，每个数据都有一个位置（position），而且这个位置是有顺序的，比如说 `list[2]`，就表示我们要访问位置为2，也就是数组的第3个数据。当我们在这样一个有顺序的列表中，查找某一个数据时，这个过程我们称为「顺序查找」。顺序查找最重要的东西是什么？就是位置，我们也称为下标。\n\n看下面这个列表：\n\n\n\n![](https://ws1.sinaimg.cn/large/006tKfTcgy1fnhmshd56nj30bs02iq2v.jpg)\n\n当我们要在这个列表中找一个数据时，是从左到右依次查询，当把所有位置的数据都查找一边之后，如果最终还是没找到想要的数据，那就可以断定，这个数据不在这个列表中。\n\n下面，我们用python，实现一个顺序查找的方法：\n\n```python\ndef sequentialSearch(alist, item):\n  pos = 0\n  found = False\n  \n  while pos < len(alist) and not found\n  \tif alist[post] == item\n    \tfound = True\n    else\n    \tpos = pos + 1\n\n  return found\n\ntestlist = [1, 2, 32, 8, 17, 19, 42, 13, 0]\nprint(sequentialSearch(testlist, 3)) // False\nprint(sequentialSearch(testlist, 13)) // True\n```\n\n## 分析顺序查找的效率\n\n我们先来思考一个问题 — 如何分析一个算法的好坏呢？首先，我们应该找出一个最小单元，然后根据这个最小单元的执行次数，来间接地推断出一个算法的效率。对于顺序查找，最小单元就是**比较**「你要找的数据」和「当前位置的数据」是不是相等的这个操作。换句话说，分析一个顺序查找算法的效率，就是分析「比较次数」的多少。如果「要查找的数据」在列表，那么，我们需要比较的次数，刚好就等于这个数据在列表的位置。\n\n通常来时，分析一个算法，可以从三种情况入手：`Best Case`, `Worst Case` 和 `Average Case`。\n\nBest Case。当「要查找的数据」刚好位于列表的第一个，那就是最好的情况了，只比较了1次就结束了。\n\nWorst Case，当「要查找的数据」不在列表中，那就是最糟糕的情况，比较次数就是列表数据的个数。\n\nAverage Case，当「要查找的数据」刚刚好在列表的中间，那就是平均的（或者说是普通的、平常的）情况。比较次数是 `n/2`，一般来说，我们是通过Average Case，来推断一个算法的复杂度。你可能会说，那这个算法的复杂度就是O(n/2)，但正确的结果是O(n)。因为，当n越来越大的时候，这个系数（1/2），对于整个过程的性能而言，可以忽略不计，最终我们能得到的近似值就是n，所以，我们称它的算法复杂的为O(n)。为了更好地解释这个，我再举两个例子：\n\n假设一个算法，用函数来表示是 `T(n) = n + 1`，当n很小的时候，1的是不可以忽略的。当n变大，而且变得超大的时候，n就可以忽略不计的，我们可以这么认为：在一个大数量级的情况下，这个累加算法的近似值为 `T(n) = n`，我们把它表示为O(n)。\n\n假如一个算法用函数来表示为：`T(n)=5n^2+27n+1005`，当n变大，而且变得很大的数量级之后，`5n2` 会超级大，所以27n和1005可以忽略不计。还有一点值得注意的是，如果n变成很大的数量级，其实 `5n^2` 中的5也可以忽略不计。你可能会说，那么可能忽略不计啊，一个超级大的数据，乘5和不乘5，对结果影响的很大的。是的，这个说法并没有错误，这是从结果的角度来分析。但是，**评价算法的优劣并不关注结果，而是这个过程所消耗的资源**。也就是，当n超级大的时候，n2已经非常复杂了，复杂到可以忽略 `5 x n^2` 的计算的过程。所以，它的算法近似值为Q(n^2)。\n\n所以，你现在就应该能明白，为什么 `T(n) = n/2` 的算法复杂度是O(n)了吧？希望我举的例子能帮助到你的理解。\n\n好，整理一下，我们得到下面这张表：\n\n|  Case   | Best Case | Worst Case | Average Case |\n| :-----: | :-------: | :--------: | :----------: |\n| 数据在列表中  |     1     |     n      |     n/2      |\n| 数据不在列表中 |     n     |     n      |      n       |\n\n我们上面讨论的列表，都是无序列表，那如果是有序列表，查找元素的时候，会不会更快呢？\n\n假设我们有一个列表，里面的数据是以上升顺序（ascending order）来排序的，也就是从低到高。当「要查找的数据」在列表中，所需要的查找次数和无需列表一样，都是等于这个数据在列表的位置。然而，当「要查找的数据」不在列表中，那就有不一样了。举个例子：\n\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fnhnuqpemrj30c902iq2v.jpg)\n\n假设当我们要找到数据是50，当我们一步一步查找到54的时候，发现，咦，因为我们当前这个列表是有序的，现在我比较的数据是54，而54显然已经大于50，那么，我们没有必要继续往下查询了，直接可以下结论：50不在这个列表中。\n\n下面，我们用python，实现一个有序列表的方法：\n\n```python\ndef orderedSequentialSearch(alist, item):\n    pos = 0\n    found = False\n    stop = False\n    \n    while pos < len(alist) and not found and not stop\n    \tif alist[pos] == item\n        \tfound = True\n        else\n        \tif alist[pos] > item\n            \tstop = True\n            else\n            \tpos = pos + 1\n         \n    return found\n\ntestlist = [0, 1, 2, 8, 13, 17, 19, 32, 42,]\nprint(orderedSequentialSearch(testlist, 3)) // False\nprint(orderedSequentialSearch(testlist, 13)) // True\n```\n\n同样，我们分析得出三种Case的结果：\n\n|  Case   | Best Case | Worst Case | Average Case |\n| :-----: | :-------: | :--------: | :----------: |\n| 数据在列表中  |     1     |     n      |     n/2      |\n| 数据不在列表中 |     1     |     n      |     n/2      |\n\n然而，这个算法是复杂度依旧是O(n)。也就是说，只有当数据不在一个有序列表中的时候，顺序查询的效率才会得到提高。\n","source":"_posts/2018-01-15-the-sequential-search.md","raw":"---\ntitle: 顺序查找（The sequential search）\ncategories: Algorithms\n---\n\n当一堆数据存放在一个列表（list）里面，每个数据都有一个位置（position），而且这个位置是有顺序的，比如说 `list[2]`，就表示我们要访问位置为2，也就是数组的第3个数据。当我们在这样一个有顺序的列表中，查找某一个数据时，这个过程我们称为「顺序查找」。顺序查找最重要的东西是什么？就是位置，我们也称为下标。\n\n看下面这个列表：\n\n\n\n![](https://ws1.sinaimg.cn/large/006tKfTcgy1fnhmshd56nj30bs02iq2v.jpg)\n\n当我们要在这个列表中找一个数据时，是从左到右依次查询，当把所有位置的数据都查找一边之后，如果最终还是没找到想要的数据，那就可以断定，这个数据不在这个列表中。\n\n下面，我们用python，实现一个顺序查找的方法：\n\n```python\ndef sequentialSearch(alist, item):\n  pos = 0\n  found = False\n  \n  while pos < len(alist) and not found\n  \tif alist[post] == item\n    \tfound = True\n    else\n    \tpos = pos + 1\n\n  return found\n\ntestlist = [1, 2, 32, 8, 17, 19, 42, 13, 0]\nprint(sequentialSearch(testlist, 3)) // False\nprint(sequentialSearch(testlist, 13)) // True\n```\n\n## 分析顺序查找的效率\n\n我们先来思考一个问题 — 如何分析一个算法的好坏呢？首先，我们应该找出一个最小单元，然后根据这个最小单元的执行次数，来间接地推断出一个算法的效率。对于顺序查找，最小单元就是**比较**「你要找的数据」和「当前位置的数据」是不是相等的这个操作。换句话说，分析一个顺序查找算法的效率，就是分析「比较次数」的多少。如果「要查找的数据」在列表，那么，我们需要比较的次数，刚好就等于这个数据在列表的位置。\n\n通常来时，分析一个算法，可以从三种情况入手：`Best Case`, `Worst Case` 和 `Average Case`。\n\nBest Case。当「要查找的数据」刚好位于列表的第一个，那就是最好的情况了，只比较了1次就结束了。\n\nWorst Case，当「要查找的数据」不在列表中，那就是最糟糕的情况，比较次数就是列表数据的个数。\n\nAverage Case，当「要查找的数据」刚刚好在列表的中间，那就是平均的（或者说是普通的、平常的）情况。比较次数是 `n/2`，一般来说，我们是通过Average Case，来推断一个算法的复杂度。你可能会说，那这个算法的复杂度就是O(n/2)，但正确的结果是O(n)。因为，当n越来越大的时候，这个系数（1/2），对于整个过程的性能而言，可以忽略不计，最终我们能得到的近似值就是n，所以，我们称它的算法复杂的为O(n)。为了更好地解释这个，我再举两个例子：\n\n假设一个算法，用函数来表示是 `T(n) = n + 1`，当n很小的时候，1的是不可以忽略的。当n变大，而且变得超大的时候，n就可以忽略不计的，我们可以这么认为：在一个大数量级的情况下，这个累加算法的近似值为 `T(n) = n`，我们把它表示为O(n)。\n\n假如一个算法用函数来表示为：`T(n)=5n^2+27n+1005`，当n变大，而且变得很大的数量级之后，`5n2` 会超级大，所以27n和1005可以忽略不计。还有一点值得注意的是，如果n变成很大的数量级，其实 `5n^2` 中的5也可以忽略不计。你可能会说，那么可能忽略不计啊，一个超级大的数据，乘5和不乘5，对结果影响的很大的。是的，这个说法并没有错误，这是从结果的角度来分析。但是，**评价算法的优劣并不关注结果，而是这个过程所消耗的资源**。也就是，当n超级大的时候，n2已经非常复杂了，复杂到可以忽略 `5 x n^2` 的计算的过程。所以，它的算法近似值为Q(n^2)。\n\n所以，你现在就应该能明白，为什么 `T(n) = n/2` 的算法复杂度是O(n)了吧？希望我举的例子能帮助到你的理解。\n\n好，整理一下，我们得到下面这张表：\n\n|  Case   | Best Case | Worst Case | Average Case |\n| :-----: | :-------: | :--------: | :----------: |\n| 数据在列表中  |     1     |     n      |     n/2      |\n| 数据不在列表中 |     n     |     n      |      n       |\n\n我们上面讨论的列表，都是无序列表，那如果是有序列表，查找元素的时候，会不会更快呢？\n\n假设我们有一个列表，里面的数据是以上升顺序（ascending order）来排序的，也就是从低到高。当「要查找的数据」在列表中，所需要的查找次数和无需列表一样，都是等于这个数据在列表的位置。然而，当「要查找的数据」不在列表中，那就有不一样了。举个例子：\n\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fnhnuqpemrj30c902iq2v.jpg)\n\n假设当我们要找到数据是50，当我们一步一步查找到54的时候，发现，咦，因为我们当前这个列表是有序的，现在我比较的数据是54，而54显然已经大于50，那么，我们没有必要继续往下查询了，直接可以下结论：50不在这个列表中。\n\n下面，我们用python，实现一个有序列表的方法：\n\n```python\ndef orderedSequentialSearch(alist, item):\n    pos = 0\n    found = False\n    stop = False\n    \n    while pos < len(alist) and not found and not stop\n    \tif alist[pos] == item\n        \tfound = True\n        else\n        \tif alist[pos] > item\n            \tstop = True\n            else\n            \tpos = pos + 1\n         \n    return found\n\ntestlist = [0, 1, 2, 8, 13, 17, 19, 32, 42,]\nprint(orderedSequentialSearch(testlist, 3)) // False\nprint(orderedSequentialSearch(testlist, 13)) // True\n```\n\n同样，我们分析得出三种Case的结果：\n\n|  Case   | Best Case | Worst Case | Average Case |\n| :-----: | :-------: | :--------: | :----------: |\n| 数据在列表中  |     1     |     n      |     n/2      |\n| 数据不在列表中 |     1     |     n      |     n/2      |\n\n然而，这个算法是复杂度依旧是O(n)。也就是说，只有当数据不在一个有序列表中的时候，顺序查询的效率才会得到提高。\n","slug":"2018-01-15-the-sequential-search","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdp0071fsondxyvniqb","content":"<p>当一堆数据存放在一个列表（list）里面，每个数据都有一个位置（position），而且这个位置是有顺序的，比如说 <code>list[2]</code>，就表示我们要访问位置为2，也就是数组的第3个数据。当我们在这样一个有顺序的列表中，查找某一个数据时，这个过程我们称为「顺序查找」。顺序查找最重要的东西是什么？就是位置，我们也称为下标。</p>\n<p>看下面这个列表：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fnhmshd56nj30bs02iq2v.jpg\" alt=\"\"></p>\n<p>当我们要在这个列表中找一个数据时，是从左到右依次查询，当把所有位置的数据都查找一边之后，如果最终还是没找到想要的数据，那就可以断定，这个数据不在这个列表中。</p>\n<p>下面，我们用python，实现一个顺序查找的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sequentialSearch</span><span class=\"params\">(alist, item)</span>:</span></span><br><span class=\"line\">  pos = <span class=\"number\">0</span></span><br><span class=\"line\">  found = <span class=\"keyword\">False</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> pos &lt; len(alist) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> found</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> alist[post] == item</span><br><span class=\"line\">    \tfound = <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    \tpos = pos + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> found</span><br><span class=\"line\"></span><br><span class=\"line\">testlist = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">8</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">42</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">print(sequentialSearch(testlist, <span class=\"number\">3</span>)) // <span class=\"keyword\">False</span></span><br><span class=\"line\">print(sequentialSearch(testlist, <span class=\"number\">13</span>)) // <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分析顺序查找的效率\"><a href=\"#分析顺序查找的效率\" class=\"headerlink\" title=\"分析顺序查找的效率\"></a>分析顺序查找的效率</h2><p>我们先来思考一个问题 — 如何分析一个算法的好坏呢？首先，我们应该找出一个最小单元，然后根据这个最小单元的执行次数，来间接地推断出一个算法的效率。对于顺序查找，最小单元就是<strong>比较</strong>「你要找的数据」和「当前位置的数据」是不是相等的这个操作。换句话说，分析一个顺序查找算法的效率，就是分析「比较次数」的多少。如果「要查找的数据」在列表，那么，我们需要比较的次数，刚好就等于这个数据在列表的位置。</p>\n<p>通常来时，分析一个算法，可以从三种情况入手：<code>Best Case</code>, <code>Worst Case</code> 和 <code>Average Case</code>。</p>\n<p>Best Case。当「要查找的数据」刚好位于列表的第一个，那就是最好的情况了，只比较了1次就结束了。</p>\n<p>Worst Case，当「要查找的数据」不在列表中，那就是最糟糕的情况，比较次数就是列表数据的个数。</p>\n<p>Average Case，当「要查找的数据」刚刚好在列表的中间，那就是平均的（或者说是普通的、平常的）情况。比较次数是 <code>n/2</code>，一般来说，我们是通过Average Case，来推断一个算法的复杂度。你可能会说，那这个算法的复杂度就是O(n/2)，但正确的结果是O(n)。因为，当n越来越大的时候，这个系数（1/2），对于整个过程的性能而言，可以忽略不计，最终我们能得到的近似值就是n，所以，我们称它的算法复杂的为O(n)。为了更好地解释这个，我再举两个例子：</p>\n<p>假设一个算法，用函数来表示是 <code>T(n) = n + 1</code>，当n很小的时候，1的是不可以忽略的。当n变大，而且变得超大的时候，n就可以忽略不计的，我们可以这么认为：在一个大数量级的情况下，这个累加算法的近似值为 <code>T(n) = n</code>，我们把它表示为O(n)。</p>\n<p>假如一个算法用函数来表示为：<code>T(n)=5n^2+27n+1005</code>，当n变大，而且变得很大的数量级之后，<code>5n2</code> 会超级大，所以27n和1005可以忽略不计。还有一点值得注意的是，如果n变成很大的数量级，其实 <code>5n^2</code> 中的5也可以忽略不计。你可能会说，那么可能忽略不计啊，一个超级大的数据，乘5和不乘5，对结果影响的很大的。是的，这个说法并没有错误，这是从结果的角度来分析。但是，<strong>评价算法的优劣并不关注结果，而是这个过程所消耗的资源</strong>。也就是，当n超级大的时候，n2已经非常复杂了，复杂到可以忽略 <code>5 x n^2</code> 的计算的过程。所以，它的算法近似值为Q(n^2)。</p>\n<p>所以，你现在就应该能明白，为什么 <code>T(n) = n/2</code> 的算法复杂度是O(n)了吧？希望我举的例子能帮助到你的理解。</p>\n<p>好，整理一下，我们得到下面这张表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Case</th>\n<th style=\"text-align:center\">Best Case</th>\n<th style=\"text-align:center\">Worst Case</th>\n<th style=\"text-align:center\">Average Case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据在列表中</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">n/2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据不在列表中</td>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">n</td>\n</tr>\n</tbody>\n</table>\n<p>我们上面讨论的列表，都是无序列表，那如果是有序列表，查找元素的时候，会不会更快呢？</p>\n<p>假设我们有一个列表，里面的数据是以上升顺序（ascending order）来排序的，也就是从低到高。当「要查找的数据」在列表中，所需要的查找次数和无需列表一样，都是等于这个数据在列表的位置。然而，当「要查找的数据」不在列表中，那就有不一样了。举个例子：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tKfTcgy1fnhnuqpemrj30c902iq2v.jpg\" alt=\"\"></p>\n<p>假设当我们要找到数据是50，当我们一步一步查找到54的时候，发现，咦，因为我们当前这个列表是有序的，现在我比较的数据是54，而54显然已经大于50，那么，我们没有必要继续往下查询了，直接可以下结论：50不在这个列表中。</p>\n<p>下面，我们用python，实现一个有序列表的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">orderedSequentialSearch</span><span class=\"params\">(alist, item)</span>:</span></span><br><span class=\"line\">    pos = <span class=\"number\">0</span></span><br><span class=\"line\">    found = <span class=\"keyword\">False</span></span><br><span class=\"line\">    stop = <span class=\"keyword\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> pos &lt; len(alist) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> found <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> stop</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> alist[pos] == item</span><br><span class=\"line\">        \tfound = <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        \t<span class=\"keyword\">if</span> alist[pos] &gt; item</span><br><span class=\"line\">            \tstop = <span class=\"keyword\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            \tpos = pos + <span class=\"number\">1</span></span><br><span class=\"line\">         </span><br><span class=\"line\">    <span class=\"keyword\">return</span> found</span><br><span class=\"line\"></span><br><span class=\"line\">testlist = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">32</span>, <span class=\"number\">42</span>,]</span><br><span class=\"line\">print(orderedSequentialSearch(testlist, <span class=\"number\">3</span>)) // <span class=\"keyword\">False</span></span><br><span class=\"line\">print(orderedSequentialSearch(testlist, <span class=\"number\">13</span>)) // <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>同样，我们分析得出三种Case的结果：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Case</th>\n<th style=\"text-align:center\">Best Case</th>\n<th style=\"text-align:center\">Worst Case</th>\n<th style=\"text-align:center\">Average Case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据在列表中</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">n/2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据不在列表中</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">n/2</td>\n</tr>\n</tbody>\n</table>\n<p>然而，这个算法是复杂度依旧是O(n)。也就是说，只有当数据不在一个有序列表中的时候，顺序查询的效率才会得到提高。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当一堆数据存放在一个列表（list）里面，每个数据都有一个位置（position），而且这个位置是有顺序的，比如说 <code>list[2]</code>，就表示我们要访问位置为2，也就是数组的第3个数据。当我们在这样一个有顺序的列表中，查找某一个数据时，这个过程我们称为「顺序查找」。顺序查找最重要的东西是什么？就是位置，我们也称为下标。</p>\n<p>看下面这个列表：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fnhmshd56nj30bs02iq2v.jpg\" alt=\"\"></p>\n<p>当我们要在这个列表中找一个数据时，是从左到右依次查询，当把所有位置的数据都查找一边之后，如果最终还是没找到想要的数据，那就可以断定，这个数据不在这个列表中。</p>\n<p>下面，我们用python，实现一个顺序查找的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sequentialSearch</span><span class=\"params\">(alist, item)</span>:</span></span><br><span class=\"line\">  pos = <span class=\"number\">0</span></span><br><span class=\"line\">  found = <span class=\"keyword\">False</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> pos &lt; len(alist) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> found</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> alist[post] == item</span><br><span class=\"line\">    \tfound = <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    \tpos = pos + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> found</span><br><span class=\"line\"></span><br><span class=\"line\">testlist = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">8</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">42</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">print(sequentialSearch(testlist, <span class=\"number\">3</span>)) // <span class=\"keyword\">False</span></span><br><span class=\"line\">print(sequentialSearch(testlist, <span class=\"number\">13</span>)) // <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分析顺序查找的效率\"><a href=\"#分析顺序查找的效率\" class=\"headerlink\" title=\"分析顺序查找的效率\"></a>分析顺序查找的效率</h2><p>我们先来思考一个问题 — 如何分析一个算法的好坏呢？首先，我们应该找出一个最小单元，然后根据这个最小单元的执行次数，来间接地推断出一个算法的效率。对于顺序查找，最小单元就是<strong>比较</strong>「你要找的数据」和「当前位置的数据」是不是相等的这个操作。换句话说，分析一个顺序查找算法的效率，就是分析「比较次数」的多少。如果「要查找的数据」在列表，那么，我们需要比较的次数，刚好就等于这个数据在列表的位置。</p>\n<p>通常来时，分析一个算法，可以从三种情况入手：<code>Best Case</code>, <code>Worst Case</code> 和 <code>Average Case</code>。</p>\n<p>Best Case。当「要查找的数据」刚好位于列表的第一个，那就是最好的情况了，只比较了1次就结束了。</p>\n<p>Worst Case，当「要查找的数据」不在列表中，那就是最糟糕的情况，比较次数就是列表数据的个数。</p>\n<p>Average Case，当「要查找的数据」刚刚好在列表的中间，那就是平均的（或者说是普通的、平常的）情况。比较次数是 <code>n/2</code>，一般来说，我们是通过Average Case，来推断一个算法的复杂度。你可能会说，那这个算法的复杂度就是O(n/2)，但正确的结果是O(n)。因为，当n越来越大的时候，这个系数（1/2），对于整个过程的性能而言，可以忽略不计，最终我们能得到的近似值就是n，所以，我们称它的算法复杂的为O(n)。为了更好地解释这个，我再举两个例子：</p>\n<p>假设一个算法，用函数来表示是 <code>T(n) = n + 1</code>，当n很小的时候，1的是不可以忽略的。当n变大，而且变得超大的时候，n就可以忽略不计的，我们可以这么认为：在一个大数量级的情况下，这个累加算法的近似值为 <code>T(n) = n</code>，我们把它表示为O(n)。</p>\n<p>假如一个算法用函数来表示为：<code>T(n)=5n^2+27n+1005</code>，当n变大，而且变得很大的数量级之后，<code>5n2</code> 会超级大，所以27n和1005可以忽略不计。还有一点值得注意的是，如果n变成很大的数量级，其实 <code>5n^2</code> 中的5也可以忽略不计。你可能会说，那么可能忽略不计啊，一个超级大的数据，乘5和不乘5，对结果影响的很大的。是的，这个说法并没有错误，这是从结果的角度来分析。但是，<strong>评价算法的优劣并不关注结果，而是这个过程所消耗的资源</strong>。也就是，当n超级大的时候，n2已经非常复杂了，复杂到可以忽略 <code>5 x n^2</code> 的计算的过程。所以，它的算法近似值为Q(n^2)。</p>\n<p>所以，你现在就应该能明白，为什么 <code>T(n) = n/2</code> 的算法复杂度是O(n)了吧？希望我举的例子能帮助到你的理解。</p>\n<p>好，整理一下，我们得到下面这张表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Case</th>\n<th style=\"text-align:center\">Best Case</th>\n<th style=\"text-align:center\">Worst Case</th>\n<th style=\"text-align:center\">Average Case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据在列表中</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">n/2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据不在列表中</td>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">n</td>\n</tr>\n</tbody>\n</table>\n<p>我们上面讨论的列表，都是无序列表，那如果是有序列表，查找元素的时候，会不会更快呢？</p>\n<p>假设我们有一个列表，里面的数据是以上升顺序（ascending order）来排序的，也就是从低到高。当「要查找的数据」在列表中，所需要的查找次数和无需列表一样，都是等于这个数据在列表的位置。然而，当「要查找的数据」不在列表中，那就有不一样了。举个例子：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tKfTcgy1fnhnuqpemrj30c902iq2v.jpg\" alt=\"\"></p>\n<p>假设当我们要找到数据是50，当我们一步一步查找到54的时候，发现，咦，因为我们当前这个列表是有序的，现在我比较的数据是54，而54显然已经大于50，那么，我们没有必要继续往下查询了，直接可以下结论：50不在这个列表中。</p>\n<p>下面，我们用python，实现一个有序列表的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">orderedSequentialSearch</span><span class=\"params\">(alist, item)</span>:</span></span><br><span class=\"line\">    pos = <span class=\"number\">0</span></span><br><span class=\"line\">    found = <span class=\"keyword\">False</span></span><br><span class=\"line\">    stop = <span class=\"keyword\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> pos &lt; len(alist) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> found <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> stop</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> alist[pos] == item</span><br><span class=\"line\">        \tfound = <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        \t<span class=\"keyword\">if</span> alist[pos] &gt; item</span><br><span class=\"line\">            \tstop = <span class=\"keyword\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            \tpos = pos + <span class=\"number\">1</span></span><br><span class=\"line\">         </span><br><span class=\"line\">    <span class=\"keyword\">return</span> found</span><br><span class=\"line\"></span><br><span class=\"line\">testlist = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">32</span>, <span class=\"number\">42</span>,]</span><br><span class=\"line\">print(orderedSequentialSearch(testlist, <span class=\"number\">3</span>)) // <span class=\"keyword\">False</span></span><br><span class=\"line\">print(orderedSequentialSearch(testlist, <span class=\"number\">13</span>)) // <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>同样，我们分析得出三种Case的结果：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Case</th>\n<th style=\"text-align:center\">Best Case</th>\n<th style=\"text-align:center\">Worst Case</th>\n<th style=\"text-align:center\">Average Case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据在列表中</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">n/2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据不在列表中</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">n/2</td>\n</tr>\n</tbody>\n</table>\n<p>然而，这个算法是复杂度依旧是O(n)。也就是说，只有当数据不在一个有序列表中的时候，顺序查询的效率才会得到提高。</p>\n"},{"title":"二分查找（The Binary Search）","_content":"\n上一篇我们介绍了对有序列表和无序列表进行顺序查找的算法，今天，针对有序列表的查找，介绍一个种新的算法 — 二分查找。在对有序列表的顺序查找中，当比较第一个数据时，如果发现它不是我们想要的数据，那么，在最坏的情况下，我们可能要查找 `n - 1`次才能结束。今天，我们的主角，也就是「二分查找」，相对于顺序查找而言，二分查找不是按照顺序、一个一个地一次查找，而是每次都从中间开始查找。\n\n二分查找是这样的，第一次，我们取中间的数据来比较，如果这个数据刚刚好是我们要找的，那就完事了。否则，就会有两种情况：当前这个被我们拿来比较的数据，要么大于我们要找的数据，要么小于我们要找的数据。如果是「大于」的情况，那么，我们拿刀往中间一砍，因为我们比较的是有序列表，所以，左边的数据，肯定都小于我们要找的数据，完全可以忽略掉，不要了。相反，如果是「小于」的情况，那就把右边的数据扔掉。然后，在留下的那堆数据里面，继续采用相同的方法，从中间开始，继续砍，直到找到目标数据，如果最终只剩下一个数据，还是没找到，那就说明，我们要找的数据，不在列表中。\n\n 举个栗子，看下面这张图片\n\n![](http://p2mvd0t5x.bkt.clouddn.com/2018-01-16-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-16%20%E4%B8%8B%E5%8D%8810.20.04.png)\n\n假设我们要找的数据是54。列表的总数是10，由于列表的位置（position）是从0开始的，所以，我们把总数「看作」9。好，让我们开始吧，第一次，切一半，`9 / 2 = 4.5` ，取值得到4，对应的数据是44，因为 `44 < 54`，所以，去左边，留右边。第二次，`（5 + 9） / 2`，得到7，对应的数据是65，因为 `65 > 54`，留左边，去右边。第三次，`（ 5 + 8） / 2`，得到6，对应的数据是54，bingo!!!，找到啦，算法结束。\n\n下面，我们用python来实现二分查找算法：\n\n```python\ndef binarySearch(alist, item):\n    first = 0\n    last = len(alist)-1\n    found = False\n    \n    while first <= last and not found:\n    \tmidpoint = (first + last)//2\n        if alist[midpoint] == item:\n            found = True\n        else:\n        \tif item < alist[midpoint]:\n            \tlast = midpoint-1\n            else:\n            \tfirst = midpoint+1\n    \n\treturn found\n\ntestlist = [0, 1, 2, 8, 13, 17, 19, 32, 42,]\nprint(binarySearch(testlist, 3)) // False\nprint(binarySearch(testlist, 13)) // True\n```\n\n## 分析二分查找算法的效率\n\n回忆一下，我们是怎么分析一个算法的效率的？首先，找出最小单元，然后根据最小单元的执行次数作为算法的性能指标。执行次数越多，算法效率越低。\n\n当一个列表有`n`个数据，比较1次之后，剩下`n/2`，比较2次之后，剩下`n/4`，3次之后，剩下`n/8`，以此类推。于是，我们可以得到下面这张表：\n\n| 比较次数 | 剩余的数据 |\n| :--: | :---: |\n|  1   |  n/2  |\n|  2   |  n/4  |\n|  3   |  n/8  |\n| ...  |       |\n|  i   | n/2^i |\n\n想象一下，当我们不断地切一个列表，切切切，最终，只会剩下一个数据，对吧。于是，我们可以推导出：\n\n`n/2^i = 1`，即`i = logn`，这就是`Worst case`，而worst case就是我们所说的算法复杂度，所以，我们可以称这二分查找算法的复杂度是`O(logn)`。\n","source":"_posts/2018-01-16-the-binary-search.md","raw":"---\ntitle: 二分查找（The Binary Search）\ncategories: Algorithms\n---\n\n上一篇我们介绍了对有序列表和无序列表进行顺序查找的算法，今天，针对有序列表的查找，介绍一个种新的算法 — 二分查找。在对有序列表的顺序查找中，当比较第一个数据时，如果发现它不是我们想要的数据，那么，在最坏的情况下，我们可能要查找 `n - 1`次才能结束。今天，我们的主角，也就是「二分查找」，相对于顺序查找而言，二分查找不是按照顺序、一个一个地一次查找，而是每次都从中间开始查找。\n\n二分查找是这样的，第一次，我们取中间的数据来比较，如果这个数据刚刚好是我们要找的，那就完事了。否则，就会有两种情况：当前这个被我们拿来比较的数据，要么大于我们要找的数据，要么小于我们要找的数据。如果是「大于」的情况，那么，我们拿刀往中间一砍，因为我们比较的是有序列表，所以，左边的数据，肯定都小于我们要找的数据，完全可以忽略掉，不要了。相反，如果是「小于」的情况，那就把右边的数据扔掉。然后，在留下的那堆数据里面，继续采用相同的方法，从中间开始，继续砍，直到找到目标数据，如果最终只剩下一个数据，还是没找到，那就说明，我们要找的数据，不在列表中。\n\n 举个栗子，看下面这张图片\n\n![](http://p2mvd0t5x.bkt.clouddn.com/2018-01-16-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-16%20%E4%B8%8B%E5%8D%8810.20.04.png)\n\n假设我们要找的数据是54。列表的总数是10，由于列表的位置（position）是从0开始的，所以，我们把总数「看作」9。好，让我们开始吧，第一次，切一半，`9 / 2 = 4.5` ，取值得到4，对应的数据是44，因为 `44 < 54`，所以，去左边，留右边。第二次，`（5 + 9） / 2`，得到7，对应的数据是65，因为 `65 > 54`，留左边，去右边。第三次，`（ 5 + 8） / 2`，得到6，对应的数据是54，bingo!!!，找到啦，算法结束。\n\n下面，我们用python来实现二分查找算法：\n\n```python\ndef binarySearch(alist, item):\n    first = 0\n    last = len(alist)-1\n    found = False\n    \n    while first <= last and not found:\n    \tmidpoint = (first + last)//2\n        if alist[midpoint] == item:\n            found = True\n        else:\n        \tif item < alist[midpoint]:\n            \tlast = midpoint-1\n            else:\n            \tfirst = midpoint+1\n    \n\treturn found\n\ntestlist = [0, 1, 2, 8, 13, 17, 19, 32, 42,]\nprint(binarySearch(testlist, 3)) // False\nprint(binarySearch(testlist, 13)) // True\n```\n\n## 分析二分查找算法的效率\n\n回忆一下，我们是怎么分析一个算法的效率的？首先，找出最小单元，然后根据最小单元的执行次数作为算法的性能指标。执行次数越多，算法效率越低。\n\n当一个列表有`n`个数据，比较1次之后，剩下`n/2`，比较2次之后，剩下`n/4`，3次之后，剩下`n/8`，以此类推。于是，我们可以得到下面这张表：\n\n| 比较次数 | 剩余的数据 |\n| :--: | :---: |\n|  1   |  n/2  |\n|  2   |  n/4  |\n|  3   |  n/8  |\n| ...  |       |\n|  i   | n/2^i |\n\n想象一下，当我们不断地切一个列表，切切切，最终，只会剩下一个数据，对吧。于是，我们可以推导出：\n\n`n/2^i = 1`，即`i = logn`，这就是`Worst case`，而worst case就是我们所说的算法复杂度，所以，我们可以称这二分查找算法的复杂度是`O(logn)`。\n","slug":"2018-01-16-the-binary-search","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdr0074fson1fw4rajw","content":"<p>上一篇我们介绍了对有序列表和无序列表进行顺序查找的算法，今天，针对有序列表的查找，介绍一个种新的算法 — 二分查找。在对有序列表的顺序查找中，当比较第一个数据时，如果发现它不是我们想要的数据，那么，在最坏的情况下，我们可能要查找 <code>n - 1</code>次才能结束。今天，我们的主角，也就是「二分查找」，相对于顺序查找而言，二分查找不是按照顺序、一个一个地一次查找，而是每次都从中间开始查找。</p>\n<p>二分查找是这样的，第一次，我们取中间的数据来比较，如果这个数据刚刚好是我们要找的，那就完事了。否则，就会有两种情况：当前这个被我们拿来比较的数据，要么大于我们要找的数据，要么小于我们要找的数据。如果是「大于」的情况，那么，我们拿刀往中间一砍，因为我们比较的是有序列表，所以，左边的数据，肯定都小于我们要找的数据，完全可以忽略掉，不要了。相反，如果是「小于」的情况，那就把右边的数据扔掉。然后，在留下的那堆数据里面，继续采用相同的方法，从中间开始，继续砍，直到找到目标数据，如果最终只剩下一个数据，还是没找到，那就说明，我们要找的数据，不在列表中。</p>\n<p> 举个栗子，看下面这张图片</p>\n<p><img src=\"http://p2mvd0t5x.bkt.clouddn.com/2018-01-16-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-16%20%E4%B8%8B%E5%8D%8810.20.04.png\" alt=\"\"></p>\n<p>假设我们要找的数据是54。列表的总数是10，由于列表的位置（position）是从0开始的，所以，我们把总数「看作」9。好，让我们开始吧，第一次，切一半，<code>9 / 2 = 4.5</code> ，取值得到4，对应的数据是44，因为 <code>44 &lt; 54</code>，所以，去左边，留右边。第二次，<code>（5 + 9） / 2</code>，得到7，对应的数据是65，因为 <code>65 &gt; 54</code>，留左边，去右边。第三次，<code>（ 5 + 8） / 2</code>，得到6，对应的数据是54，bingo!!!，找到啦，算法结束。</p>\n<p>下面，我们用python来实现二分查找算法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binarySearch</span><span class=\"params\">(alist, item)</span>:</span></span><br><span class=\"line\">    first = <span class=\"number\">0</span></span><br><span class=\"line\">    last = len(alist)<span class=\"number\">-1</span></span><br><span class=\"line\">    found = <span class=\"keyword\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> first &lt;= last <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">    \tmidpoint = (first + last)//<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> alist[midpoint] == item:</span><br><span class=\"line\">            found = <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span> item &lt; alist[midpoint]:</span><br><span class=\"line\">            \tlast = midpoint<span class=\"number\">-1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            \tfirst = midpoint+<span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> found</span><br><span class=\"line\"></span><br><span class=\"line\">testlist = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">32</span>, <span class=\"number\">42</span>,]</span><br><span class=\"line\">print(binarySearch(testlist, <span class=\"number\">3</span>)) // <span class=\"keyword\">False</span></span><br><span class=\"line\">print(binarySearch(testlist, <span class=\"number\">13</span>)) // <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分析二分查找算法的效率\"><a href=\"#分析二分查找算法的效率\" class=\"headerlink\" title=\"分析二分查找算法的效率\"></a>分析二分查找算法的效率</h2><p>回忆一下，我们是怎么分析一个算法的效率的？首先，找出最小单元，然后根据最小单元的执行次数作为算法的性能指标。执行次数越多，算法效率越低。</p>\n<p>当一个列表有<code>n</code>个数据，比较1次之后，剩下<code>n/2</code>，比较2次之后，剩下<code>n/4</code>，3次之后，剩下<code>n/8</code>，以此类推。于是，我们可以得到下面这张表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">比较次数</th>\n<th style=\"text-align:center\">剩余的数据</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">n/2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">n/4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">n/8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">…</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">i</td>\n<td style=\"text-align:center\">n/2^i</td>\n</tr>\n</tbody>\n</table>\n<p>想象一下，当我们不断地切一个列表，切切切，最终，只会剩下一个数据，对吧。于是，我们可以推导出：</p>\n<p><code>n/2^i = 1</code>，即<code>i = logn</code>，这就是<code>Worst case</code>，而worst case就是我们所说的算法复杂度，所以，我们可以称这二分查找算法的复杂度是<code>O(logn)</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇我们介绍了对有序列表和无序列表进行顺序查找的算法，今天，针对有序列表的查找，介绍一个种新的算法 — 二分查找。在对有序列表的顺序查找中，当比较第一个数据时，如果发现它不是我们想要的数据，那么，在最坏的情况下，我们可能要查找 <code>n - 1</code>次才能结束。今天，我们的主角，也就是「二分查找」，相对于顺序查找而言，二分查找不是按照顺序、一个一个地一次查找，而是每次都从中间开始查找。</p>\n<p>二分查找是这样的，第一次，我们取中间的数据来比较，如果这个数据刚刚好是我们要找的，那就完事了。否则，就会有两种情况：当前这个被我们拿来比较的数据，要么大于我们要找的数据，要么小于我们要找的数据。如果是「大于」的情况，那么，我们拿刀往中间一砍，因为我们比较的是有序列表，所以，左边的数据，肯定都小于我们要找的数据，完全可以忽略掉，不要了。相反，如果是「小于」的情况，那就把右边的数据扔掉。然后，在留下的那堆数据里面，继续采用相同的方法，从中间开始，继续砍，直到找到目标数据，如果最终只剩下一个数据，还是没找到，那就说明，我们要找的数据，不在列表中。</p>\n<p> 举个栗子，看下面这张图片</p>\n<p><img src=\"http://p2mvd0t5x.bkt.clouddn.com/2018-01-16-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-16%20%E4%B8%8B%E5%8D%8810.20.04.png\" alt=\"\"></p>\n<p>假设我们要找的数据是54。列表的总数是10，由于列表的位置（position）是从0开始的，所以，我们把总数「看作」9。好，让我们开始吧，第一次，切一半，<code>9 / 2 = 4.5</code> ，取值得到4，对应的数据是44，因为 <code>44 &lt; 54</code>，所以，去左边，留右边。第二次，<code>（5 + 9） / 2</code>，得到7，对应的数据是65，因为 <code>65 &gt; 54</code>，留左边，去右边。第三次，<code>（ 5 + 8） / 2</code>，得到6，对应的数据是54，bingo!!!，找到啦，算法结束。</p>\n<p>下面，我们用python来实现二分查找算法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binarySearch</span><span class=\"params\">(alist, item)</span>:</span></span><br><span class=\"line\">    first = <span class=\"number\">0</span></span><br><span class=\"line\">    last = len(alist)<span class=\"number\">-1</span></span><br><span class=\"line\">    found = <span class=\"keyword\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> first &lt;= last <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">    \tmidpoint = (first + last)//<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> alist[midpoint] == item:</span><br><span class=\"line\">            found = <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span> item &lt; alist[midpoint]:</span><br><span class=\"line\">            \tlast = midpoint<span class=\"number\">-1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            \tfirst = midpoint+<span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> found</span><br><span class=\"line\"></span><br><span class=\"line\">testlist = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">32</span>, <span class=\"number\">42</span>,]</span><br><span class=\"line\">print(binarySearch(testlist, <span class=\"number\">3</span>)) // <span class=\"keyword\">False</span></span><br><span class=\"line\">print(binarySearch(testlist, <span class=\"number\">13</span>)) // <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分析二分查找算法的效率\"><a href=\"#分析二分查找算法的效率\" class=\"headerlink\" title=\"分析二分查找算法的效率\"></a>分析二分查找算法的效率</h2><p>回忆一下，我们是怎么分析一个算法的效率的？首先，找出最小单元，然后根据最小单元的执行次数作为算法的性能指标。执行次数越多，算法效率越低。</p>\n<p>当一个列表有<code>n</code>个数据，比较1次之后，剩下<code>n/2</code>，比较2次之后，剩下<code>n/4</code>，3次之后，剩下<code>n/8</code>，以此类推。于是，我们可以得到下面这张表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">比较次数</th>\n<th style=\"text-align:center\">剩余的数据</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">n/2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">n/4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">n/8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">…</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">i</td>\n<td style=\"text-align:center\">n/2^i</td>\n</tr>\n</tbody>\n</table>\n<p>想象一下，当我们不断地切一个列表，切切切，最终，只会剩下一个数据，对吧。于是，我们可以推导出：</p>\n<p><code>n/2^i = 1</code>，即<code>i = logn</code>，这就是<code>Worst case</code>，而worst case就是我们所说的算法复杂度，所以，我们可以称这二分查找算法的复杂度是<code>O(logn)</code>。</p>\n"},{"title":"在一个URL数组中找出最快请求成功的URL","_content":"\n有两种思路：\n\n第一，每个url请求包装成 `promise`，然后放在一个数组中，并且用 `Promise.all` 等待所有请求完成，然后获取每个url请求消耗的时间，并找出最大值。优点是实现简单，因为可以直接使用 `Promise.all` ，缺点是一旦有请求出错了，那就不会执行 `.then` 回调，而是执行 `.catch`，这样会丢失掉一些结果。\n\ndemo链接：[https://jsfiddle.net/raimonfuns/hjve0kjj/9/](https://jsfiddle.net/raimonfuns/hjve0kjj/9/)\n\n第二，每个url请求包装成 `promise`，在每个 `promise` 的回调，`.then` 和`.catch`中记录执行次数，并且把最大值保存下来，优点是能处理错误的情况，缺点是代码量比第一种多，也相对复杂一点。\n\ndemo链接：[https://jsfiddle.net/raimonfuns/ng1xpe8o/12/](https://jsfiddle.net/raimonfuns/ng1xpe8o/12/)\n\n第三，使用 `bluebird.js` 中的 `promise.any`\n\ndemo链接：[https://jsfiddle.net/raimonfuns/Lrutx693/](https://jsfiddle.net/raimonfuns/Lrutx693/)","source":"_posts/2018-01-20-urls-race.md","raw":"---\ntitle: 在一个URL数组中找出最快请求成功的URL\ncategories: Javascript\n---\n\n有两种思路：\n\n第一，每个url请求包装成 `promise`，然后放在一个数组中，并且用 `Promise.all` 等待所有请求完成，然后获取每个url请求消耗的时间，并找出最大值。优点是实现简单，因为可以直接使用 `Promise.all` ，缺点是一旦有请求出错了，那就不会执行 `.then` 回调，而是执行 `.catch`，这样会丢失掉一些结果。\n\ndemo链接：[https://jsfiddle.net/raimonfuns/hjve0kjj/9/](https://jsfiddle.net/raimonfuns/hjve0kjj/9/)\n\n第二，每个url请求包装成 `promise`，在每个 `promise` 的回调，`.then` 和`.catch`中记录执行次数，并且把最大值保存下来，优点是能处理错误的情况，缺点是代码量比第一种多，也相对复杂一点。\n\ndemo链接：[https://jsfiddle.net/raimonfuns/ng1xpe8o/12/](https://jsfiddle.net/raimonfuns/ng1xpe8o/12/)\n\n第三，使用 `bluebird.js` 中的 `promise.any`\n\ndemo链接：[https://jsfiddle.net/raimonfuns/Lrutx693/](https://jsfiddle.net/raimonfuns/Lrutx693/)","slug":"2018-01-20-urls-race","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicds0076fsonbsish8c6","content":"<p>有两种思路：</p>\n<p>第一，每个url请求包装成 <code>promise</code>，然后放在一个数组中，并且用 <code>Promise.all</code> 等待所有请求完成，然后获取每个url请求消耗的时间，并找出最大值。优点是实现简单，因为可以直接使用 <code>Promise.all</code> ，缺点是一旦有请求出错了，那就不会执行 <code>.then</code> 回调，而是执行 <code>.catch</code>，这样会丢失掉一些结果。</p>\n<p>demo链接：<a href=\"https://jsfiddle.net/raimonfuns/hjve0kjj/9/\" target=\"_blank\" rel=\"noopener\">https://jsfiddle.net/raimonfuns/hjve0kjj/9/</a></p>\n<p>第二，每个url请求包装成 <code>promise</code>，在每个 <code>promise</code> 的回调，<code>.then</code> 和<code>.catch</code>中记录执行次数，并且把最大值保存下来，优点是能处理错误的情况，缺点是代码量比第一种多，也相对复杂一点。</p>\n<p>demo链接：<a href=\"https://jsfiddle.net/raimonfuns/ng1xpe8o/12/\" target=\"_blank\" rel=\"noopener\">https://jsfiddle.net/raimonfuns/ng1xpe8o/12/</a></p>\n<p>第三，使用 <code>bluebird.js</code> 中的 <code>promise.any</code></p>\n<p>demo链接：<a href=\"https://jsfiddle.net/raimonfuns/Lrutx693/\" target=\"_blank\" rel=\"noopener\">https://jsfiddle.net/raimonfuns/Lrutx693/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>有两种思路：</p>\n<p>第一，每个url请求包装成 <code>promise</code>，然后放在一个数组中，并且用 <code>Promise.all</code> 等待所有请求完成，然后获取每个url请求消耗的时间，并找出最大值。优点是实现简单，因为可以直接使用 <code>Promise.all</code> ，缺点是一旦有请求出错了，那就不会执行 <code>.then</code> 回调，而是执行 <code>.catch</code>，这样会丢失掉一些结果。</p>\n<p>demo链接：<a href=\"https://jsfiddle.net/raimonfuns/hjve0kjj/9/\" target=\"_blank\" rel=\"noopener\">https://jsfiddle.net/raimonfuns/hjve0kjj/9/</a></p>\n<p>第二，每个url请求包装成 <code>promise</code>，在每个 <code>promise</code> 的回调，<code>.then</code> 和<code>.catch</code>中记录执行次数，并且把最大值保存下来，优点是能处理错误的情况，缺点是代码量比第一种多，也相对复杂一点。</p>\n<p>demo链接：<a href=\"https://jsfiddle.net/raimonfuns/ng1xpe8o/12/\" target=\"_blank\" rel=\"noopener\">https://jsfiddle.net/raimonfuns/ng1xpe8o/12/</a></p>\n<p>第三，使用 <code>bluebird.js</code> 中的 <code>promise.any</code></p>\n<p>demo链接：<a href=\"https://jsfiddle.net/raimonfuns/Lrutx693/\" target=\"_blank\" rel=\"noopener\">https://jsfiddle.net/raimonfuns/Lrutx693/</a></p>\n"},{"title":"Debounce 和 Throttle 的区别","_content":"\n这两个函数的目的都是让我们能够根据时间控制一个函数的执行次数。\n\ndebounce能让一堆突然间爆发的事件合并成一个事件。最形象的例子是电梯。当你在1楼，然后你摁了10楼，在电梯准备关门的时候，电梯外突然有人摁了电梯按钮，电梯重新打开门，开始等待，然后在电梯准备关门的时候，又有一个人摁了电梯按钮，电梯又打开门，开始等待，直到在电梯关门的这段时间内，没有人再摁按钮了，电梯才关门，然后开始动起来。在这个例子中，一堆事件指的是「摁按钮」这个动作，而一个事件指的是电梯关上门，开始动起来的这个事件。\n\n和debounce不同的是，throttle是保证每隔固定的一段时间，执行一次函数。最形象的例子是支持无限滚动的页面。每隔一段时间，要检查当前滚动的位置距离底部还有多远，一旦到达某一个临界值，就拉新的数据。\n\n参考链接：[https://css-tricks.com/debouncing-throttling-explained-examples/](https://css-tricks.com/debouncing-throttling-explained-examples/)","source":"_posts/2018-01-21-debounce-throttle.md","raw":"---\ntitle: Debounce 和 Throttle 的区别\ncategories: Javascript\n---\n\n这两个函数的目的都是让我们能够根据时间控制一个函数的执行次数。\n\ndebounce能让一堆突然间爆发的事件合并成一个事件。最形象的例子是电梯。当你在1楼，然后你摁了10楼，在电梯准备关门的时候，电梯外突然有人摁了电梯按钮，电梯重新打开门，开始等待，然后在电梯准备关门的时候，又有一个人摁了电梯按钮，电梯又打开门，开始等待，直到在电梯关门的这段时间内，没有人再摁按钮了，电梯才关门，然后开始动起来。在这个例子中，一堆事件指的是「摁按钮」这个动作，而一个事件指的是电梯关上门，开始动起来的这个事件。\n\n和debounce不同的是，throttle是保证每隔固定的一段时间，执行一次函数。最形象的例子是支持无限滚动的页面。每隔一段时间，要检查当前滚动的位置距离底部还有多远，一旦到达某一个临界值，就拉新的数据。\n\n参考链接：[https://css-tricks.com/debouncing-throttling-explained-examples/](https://css-tricks.com/debouncing-throttling-explained-examples/)","slug":"2018-01-21-debounce-throttle","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdt0078fson8t9mxv97","content":"<p>这两个函数的目的都是让我们能够根据时间控制一个函数的执行次数。</p>\n<p>debounce能让一堆突然间爆发的事件合并成一个事件。最形象的例子是电梯。当你在1楼，然后你摁了10楼，在电梯准备关门的时候，电梯外突然有人摁了电梯按钮，电梯重新打开门，开始等待，然后在电梯准备关门的时候，又有一个人摁了电梯按钮，电梯又打开门，开始等待，直到在电梯关门的这段时间内，没有人再摁按钮了，电梯才关门，然后开始动起来。在这个例子中，一堆事件指的是「摁按钮」这个动作，而一个事件指的是电梯关上门，开始动起来的这个事件。</p>\n<p>和debounce不同的是，throttle是保证每隔固定的一段时间，执行一次函数。最形象的例子是支持无限滚动的页面。每隔一段时间，要检查当前滚动的位置距离底部还有多远，一旦到达某一个临界值，就拉新的数据。</p>\n<p>参考链接：<a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/debouncing-throttling-explained-examples/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这两个函数的目的都是让我们能够根据时间控制一个函数的执行次数。</p>\n<p>debounce能让一堆突然间爆发的事件合并成一个事件。最形象的例子是电梯。当你在1楼，然后你摁了10楼，在电梯准备关门的时候，电梯外突然有人摁了电梯按钮，电梯重新打开门，开始等待，然后在电梯准备关门的时候，又有一个人摁了电梯按钮，电梯又打开门，开始等待，直到在电梯关门的这段时间内，没有人再摁按钮了，电梯才关门，然后开始动起来。在这个例子中，一堆事件指的是「摁按钮」这个动作，而一个事件指的是电梯关上门，开始动起来的这个事件。</p>\n<p>和debounce不同的是，throttle是保证每隔固定的一段时间，执行一次函数。最形象的例子是支持无限滚动的页面。每隔一段时间，要检查当前滚动的位置距离底部还有多远，一旦到达某一个临界值，就拉新的数据。</p>\n<p>参考链接：<a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/debouncing-throttling-explained-examples/</a></p>\n"},{"title":"Redux复盘整理","_content":"\n## 解决了什么问题？\n* 数据散乱分布，只要你想，你可以在任何地方直接修改数据，数据不知道在什么时间，哪个地方被修改掉了，一旦应用复杂起来之后，调试非常困难，代码的可靠性也很差。\n* 父子组件可以通过props传数据，但兄弟组件不能，数据无法共享\n\n## window全局变量 vs redux\nwindow可以解决兄弟组件通信问题，但你可以在任何地方修改它的数据，也就是说不能解决数据只能在一个地方修改，无法统一管理的问题。\nredux是怎么解决的？第一招：collection of commands，命令集。当你想要改数据的时候，你是不能直接改的，必须实现定义到你想要如何修改数据的命令。也就是说，改数据等于调命令。每一份数据，对应一堆命令，这对命令写在同一个地方，你可以根据这堆命令，预测这一份数据将来可能会有怎样的变化，这就是 Predictable，可预测性。\n\n还有一个问题，但在组件里面拿到数据之后，由于数据是引用的关系，所以，组件是有可能修改到数据的，那么，redux如何防止数据因为引用关系被修改掉了呢？\n第二招：Immutable。当你在redux的store里面取数据时，每次拿到的都是一个新的对象，其中使用了Immutable这个库来做到这一步。这样一来，redux就切断了数据的引用关系。使得原来是双向的数据，变成单向的。\n\n总结一下。\nwindow：\n* 全局数据通信，✅\n* 双向数据，❌\n* 数据的可预测性，❌\n\nredux\n* 全局数据通信，✅\n* 单向数据，✅\n* 数据的可预测性，✅\n\n## Event bus vs Redux\neventbus和window一样，可以解决兄弟组件通信问题，但无法解决数据可预测性的问题。而且也还是存在引用数据被修改的潜在因素。\n和window相比，eventbug有个优点，监听数据变化之后，可以去做某件事。缺点是你需要手动声明每一个监听事件，随着订阅数量的增多，订阅事件越难管理。\nredux怎么做？第三招：使用Observers模式。比如redux的store，就相当于Rxjs里面的一个Observable对象。如果你要订阅store，只需要一个subscribe就好了，同时，redux的时候，还可以细化到只监听某一部分数据的程度。\n\n总结一下。\neventbus：\n* 全局数据通信，✅\n* 双向数据，❌\n* 数据的可预测性，❌\n* 监听数据，✅\n* 监听器代码量，❌\n\nredux\n* 全局数据通信，✅\n* 单向数据，✅\n* 数据的可预测性，✅\n* 监听数据，✅\n* 监听器代码量，✅\n\n## Redux特性总结\nRedux其实可以总结为一个由命令集和监听模式组成的解决方案。具体的特点关键词如下：\n* 全局数据管理\n* 单向数据流\n* 命令集\n* 数据可预测\n* 提供监听器\n\n## 命令集的其他好处？\n由于所有修改数据的命令都集合在同一个地方，所以，只要在这个地方加一些监控，就能做出一个调试工具，比如Redux DevTools。\n同时，由于数据是单向的，而且可预测，所以可以去做单元测试。\n\n## 什么时候用？\n* 组件嵌套很深，或者同级组件交流频繁\n* 大量后端的读写请求\n* 使用Websocket\n* 一个组件有多个数据来源\n* 多个组件都能修改同一份数据\n\n## 什么时候不需要用？\n使用redux是有成本的，这个成本就是为了实现命令集、单向数据流，你需要些多写一些代码，说实话，这些代码写起来，还是挺啰嗦的。\n所以，如果你的应用的特点是像下面这样的，那就不需要用redux了。\n* 用户行为简单\n* 读请求多，写的请求很少\n* 和服务端通信很少\n* 组件的的d数据来源简单\n\n附上一张草稿：\n![](https://ww2.sinaimg.cn/large/006tKfTcgy1fqyd1bofowj31kw0ow4qr.jpg)\n","source":"_posts/2018-05-03-redux.md","raw":"---\ntitle: Redux复盘整理\ncategories: Javascript\n---\n\n## 解决了什么问题？\n* 数据散乱分布，只要你想，你可以在任何地方直接修改数据，数据不知道在什么时间，哪个地方被修改掉了，一旦应用复杂起来之后，调试非常困难，代码的可靠性也很差。\n* 父子组件可以通过props传数据，但兄弟组件不能，数据无法共享\n\n## window全局变量 vs redux\nwindow可以解决兄弟组件通信问题，但你可以在任何地方修改它的数据，也就是说不能解决数据只能在一个地方修改，无法统一管理的问题。\nredux是怎么解决的？第一招：collection of commands，命令集。当你想要改数据的时候，你是不能直接改的，必须实现定义到你想要如何修改数据的命令。也就是说，改数据等于调命令。每一份数据，对应一堆命令，这对命令写在同一个地方，你可以根据这堆命令，预测这一份数据将来可能会有怎样的变化，这就是 Predictable，可预测性。\n\n还有一个问题，但在组件里面拿到数据之后，由于数据是引用的关系，所以，组件是有可能修改到数据的，那么，redux如何防止数据因为引用关系被修改掉了呢？\n第二招：Immutable。当你在redux的store里面取数据时，每次拿到的都是一个新的对象，其中使用了Immutable这个库来做到这一步。这样一来，redux就切断了数据的引用关系。使得原来是双向的数据，变成单向的。\n\n总结一下。\nwindow：\n* 全局数据通信，✅\n* 双向数据，❌\n* 数据的可预测性，❌\n\nredux\n* 全局数据通信，✅\n* 单向数据，✅\n* 数据的可预测性，✅\n\n## Event bus vs Redux\neventbus和window一样，可以解决兄弟组件通信问题，但无法解决数据可预测性的问题。而且也还是存在引用数据被修改的潜在因素。\n和window相比，eventbug有个优点，监听数据变化之后，可以去做某件事。缺点是你需要手动声明每一个监听事件，随着订阅数量的增多，订阅事件越难管理。\nredux怎么做？第三招：使用Observers模式。比如redux的store，就相当于Rxjs里面的一个Observable对象。如果你要订阅store，只需要一个subscribe就好了，同时，redux的时候，还可以细化到只监听某一部分数据的程度。\n\n总结一下。\neventbus：\n* 全局数据通信，✅\n* 双向数据，❌\n* 数据的可预测性，❌\n* 监听数据，✅\n* 监听器代码量，❌\n\nredux\n* 全局数据通信，✅\n* 单向数据，✅\n* 数据的可预测性，✅\n* 监听数据，✅\n* 监听器代码量，✅\n\n## Redux特性总结\nRedux其实可以总结为一个由命令集和监听模式组成的解决方案。具体的特点关键词如下：\n* 全局数据管理\n* 单向数据流\n* 命令集\n* 数据可预测\n* 提供监听器\n\n## 命令集的其他好处？\n由于所有修改数据的命令都集合在同一个地方，所以，只要在这个地方加一些监控，就能做出一个调试工具，比如Redux DevTools。\n同时，由于数据是单向的，而且可预测，所以可以去做单元测试。\n\n## 什么时候用？\n* 组件嵌套很深，或者同级组件交流频繁\n* 大量后端的读写请求\n* 使用Websocket\n* 一个组件有多个数据来源\n* 多个组件都能修改同一份数据\n\n## 什么时候不需要用？\n使用redux是有成本的，这个成本就是为了实现命令集、单向数据流，你需要些多写一些代码，说实话，这些代码写起来，还是挺啰嗦的。\n所以，如果你的应用的特点是像下面这样的，那就不需要用redux了。\n* 用户行为简单\n* 读请求多，写的请求很少\n* 和服务端通信很少\n* 组件的的d数据来源简单\n\n附上一张草稿：\n![](https://ww2.sinaimg.cn/large/006tKfTcgy1fqyd1bofowj31kw0ow4qr.jpg)\n","slug":"2018-05-03-redux","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdu007bfsonvx825v57","content":"<h2 id=\"解决了什么问题？\"><a href=\"#解决了什么问题？\" class=\"headerlink\" title=\"解决了什么问题？\"></a>解决了什么问题？</h2><ul>\n<li>数据散乱分布，只要你想，你可以在任何地方直接修改数据，数据不知道在什么时间，哪个地方被修改掉了，一旦应用复杂起来之后，调试非常困难，代码的可靠性也很差。</li>\n<li>父子组件可以通过props传数据，但兄弟组件不能，数据无法共享</li>\n</ul>\n<h2 id=\"window全局变量-vs-redux\"><a href=\"#window全局变量-vs-redux\" class=\"headerlink\" title=\"window全局变量 vs redux\"></a>window全局变量 vs redux</h2><p>window可以解决兄弟组件通信问题，但你可以在任何地方修改它的数据，也就是说不能解决数据只能在一个地方修改，无法统一管理的问题。<br>redux是怎么解决的？第一招：collection of commands，命令集。当你想要改数据的时候，你是不能直接改的，必须实现定义到你想要如何修改数据的命令。也就是说，改数据等于调命令。每一份数据，对应一堆命令，这对命令写在同一个地方，你可以根据这堆命令，预测这一份数据将来可能会有怎样的变化，这就是 Predictable，可预测性。</p>\n<p>还有一个问题，但在组件里面拿到数据之后，由于数据是引用的关系，所以，组件是有可能修改到数据的，那么，redux如何防止数据因为引用关系被修改掉了呢？<br>第二招：Immutable。当你在redux的store里面取数据时，每次拿到的都是一个新的对象，其中使用了Immutable这个库来做到这一步。这样一来，redux就切断了数据的引用关系。使得原来是双向的数据，变成单向的。</p>\n<p>总结一下。<br>window：</p>\n<ul>\n<li>全局数据通信，✅</li>\n<li>双向数据，❌</li>\n<li>数据的可预测性，❌</li>\n</ul>\n<p>redux</p>\n<ul>\n<li>全局数据通信，✅</li>\n<li>单向数据，✅</li>\n<li>数据的可预测性，✅</li>\n</ul>\n<h2 id=\"Event-bus-vs-Redux\"><a href=\"#Event-bus-vs-Redux\" class=\"headerlink\" title=\"Event bus vs Redux\"></a>Event bus vs Redux</h2><p>eventbus和window一样，可以解决兄弟组件通信问题，但无法解决数据可预测性的问题。而且也还是存在引用数据被修改的潜在因素。<br>和window相比，eventbug有个优点，监听数据变化之后，可以去做某件事。缺点是你需要手动声明每一个监听事件，随着订阅数量的增多，订阅事件越难管理。<br>redux怎么做？第三招：使用Observers模式。比如redux的store，就相当于Rxjs里面的一个Observable对象。如果你要订阅store，只需要一个subscribe就好了，同时，redux的时候，还可以细化到只监听某一部分数据的程度。</p>\n<p>总结一下。<br>eventbus：</p>\n<ul>\n<li>全局数据通信，✅</li>\n<li>双向数据，❌</li>\n<li>数据的可预测性，❌</li>\n<li>监听数据，✅</li>\n<li>监听器代码量，❌</li>\n</ul>\n<p>redux</p>\n<ul>\n<li>全局数据通信，✅</li>\n<li>单向数据，✅</li>\n<li>数据的可预测性，✅</li>\n<li>监听数据，✅</li>\n<li>监听器代码量，✅</li>\n</ul>\n<h2 id=\"Redux特性总结\"><a href=\"#Redux特性总结\" class=\"headerlink\" title=\"Redux特性总结\"></a>Redux特性总结</h2><p>Redux其实可以总结为一个由命令集和监听模式组成的解决方案。具体的特点关键词如下：</p>\n<ul>\n<li>全局数据管理</li>\n<li>单向数据流</li>\n<li>命令集</li>\n<li>数据可预测</li>\n<li>提供监听器</li>\n</ul>\n<h2 id=\"命令集的其他好处？\"><a href=\"#命令集的其他好处？\" class=\"headerlink\" title=\"命令集的其他好处？\"></a>命令集的其他好处？</h2><p>由于所有修改数据的命令都集合在同一个地方，所以，只要在这个地方加一些监控，就能做出一个调试工具，比如Redux DevTools。<br>同时，由于数据是单向的，而且可预测，所以可以去做单元测试。</p>\n<h2 id=\"什么时候用？\"><a href=\"#什么时候用？\" class=\"headerlink\" title=\"什么时候用？\"></a>什么时候用？</h2><ul>\n<li>组件嵌套很深，或者同级组件交流频繁</li>\n<li>大量后端的读写请求</li>\n<li>使用Websocket</li>\n<li>一个组件有多个数据来源</li>\n<li>多个组件都能修改同一份数据</li>\n</ul>\n<h2 id=\"什么时候不需要用？\"><a href=\"#什么时候不需要用？\" class=\"headerlink\" title=\"什么时候不需要用？\"></a>什么时候不需要用？</h2><p>使用redux是有成本的，这个成本就是为了实现命令集、单向数据流，你需要些多写一些代码，说实话，这些代码写起来，还是挺啰嗦的。<br>所以，如果你的应用的特点是像下面这样的，那就不需要用redux了。</p>\n<ul>\n<li>用户行为简单</li>\n<li>读请求多，写的请求很少</li>\n<li>和服务端通信很少</li>\n<li>组件的的d数据来源简单</li>\n</ul>\n<p>附上一张草稿：<br><img src=\"https://ww2.sinaimg.cn/large/006tKfTcgy1fqyd1bofowj31kw0ow4qr.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"解决了什么问题？\"><a href=\"#解决了什么问题？\" class=\"headerlink\" title=\"解决了什么问题？\"></a>解决了什么问题？</h2><ul>\n<li>数据散乱分布，只要你想，你可以在任何地方直接修改数据，数据不知道在什么时间，哪个地方被修改掉了，一旦应用复杂起来之后，调试非常困难，代码的可靠性也很差。</li>\n<li>父子组件可以通过props传数据，但兄弟组件不能，数据无法共享</li>\n</ul>\n<h2 id=\"window全局变量-vs-redux\"><a href=\"#window全局变量-vs-redux\" class=\"headerlink\" title=\"window全局变量 vs redux\"></a>window全局变量 vs redux</h2><p>window可以解决兄弟组件通信问题，但你可以在任何地方修改它的数据，也就是说不能解决数据只能在一个地方修改，无法统一管理的问题。<br>redux是怎么解决的？第一招：collection of commands，命令集。当你想要改数据的时候，你是不能直接改的，必须实现定义到你想要如何修改数据的命令。也就是说，改数据等于调命令。每一份数据，对应一堆命令，这对命令写在同一个地方，你可以根据这堆命令，预测这一份数据将来可能会有怎样的变化，这就是 Predictable，可预测性。</p>\n<p>还有一个问题，但在组件里面拿到数据之后，由于数据是引用的关系，所以，组件是有可能修改到数据的，那么，redux如何防止数据因为引用关系被修改掉了呢？<br>第二招：Immutable。当你在redux的store里面取数据时，每次拿到的都是一个新的对象，其中使用了Immutable这个库来做到这一步。这样一来，redux就切断了数据的引用关系。使得原来是双向的数据，变成单向的。</p>\n<p>总结一下。<br>window：</p>\n<ul>\n<li>全局数据通信，✅</li>\n<li>双向数据，❌</li>\n<li>数据的可预测性，❌</li>\n</ul>\n<p>redux</p>\n<ul>\n<li>全局数据通信，✅</li>\n<li>单向数据，✅</li>\n<li>数据的可预测性，✅</li>\n</ul>\n<h2 id=\"Event-bus-vs-Redux\"><a href=\"#Event-bus-vs-Redux\" class=\"headerlink\" title=\"Event bus vs Redux\"></a>Event bus vs Redux</h2><p>eventbus和window一样，可以解决兄弟组件通信问题，但无法解决数据可预测性的问题。而且也还是存在引用数据被修改的潜在因素。<br>和window相比，eventbug有个优点，监听数据变化之后，可以去做某件事。缺点是你需要手动声明每一个监听事件，随着订阅数量的增多，订阅事件越难管理。<br>redux怎么做？第三招：使用Observers模式。比如redux的store，就相当于Rxjs里面的一个Observable对象。如果你要订阅store，只需要一个subscribe就好了，同时，redux的时候，还可以细化到只监听某一部分数据的程度。</p>\n<p>总结一下。<br>eventbus：</p>\n<ul>\n<li>全局数据通信，✅</li>\n<li>双向数据，❌</li>\n<li>数据的可预测性，❌</li>\n<li>监听数据，✅</li>\n<li>监听器代码量，❌</li>\n</ul>\n<p>redux</p>\n<ul>\n<li>全局数据通信，✅</li>\n<li>单向数据，✅</li>\n<li>数据的可预测性，✅</li>\n<li>监听数据，✅</li>\n<li>监听器代码量，✅</li>\n</ul>\n<h2 id=\"Redux特性总结\"><a href=\"#Redux特性总结\" class=\"headerlink\" title=\"Redux特性总结\"></a>Redux特性总结</h2><p>Redux其实可以总结为一个由命令集和监听模式组成的解决方案。具体的特点关键词如下：</p>\n<ul>\n<li>全局数据管理</li>\n<li>单向数据流</li>\n<li>命令集</li>\n<li>数据可预测</li>\n<li>提供监听器</li>\n</ul>\n<h2 id=\"命令集的其他好处？\"><a href=\"#命令集的其他好处？\" class=\"headerlink\" title=\"命令集的其他好处？\"></a>命令集的其他好处？</h2><p>由于所有修改数据的命令都集合在同一个地方，所以，只要在这个地方加一些监控，就能做出一个调试工具，比如Redux DevTools。<br>同时，由于数据是单向的，而且可预测，所以可以去做单元测试。</p>\n<h2 id=\"什么时候用？\"><a href=\"#什么时候用？\" class=\"headerlink\" title=\"什么时候用？\"></a>什么时候用？</h2><ul>\n<li>组件嵌套很深，或者同级组件交流频繁</li>\n<li>大量后端的读写请求</li>\n<li>使用Websocket</li>\n<li>一个组件有多个数据来源</li>\n<li>多个组件都能修改同一份数据</li>\n</ul>\n<h2 id=\"什么时候不需要用？\"><a href=\"#什么时候不需要用？\" class=\"headerlink\" title=\"什么时候不需要用？\"></a>什么时候不需要用？</h2><p>使用redux是有成本的，这个成本就是为了实现命令集、单向数据流，你需要些多写一些代码，说实话，这些代码写起来，还是挺啰嗦的。<br>所以，如果你的应用的特点是像下面这样的，那就不需要用redux了。</p>\n<ul>\n<li>用户行为简单</li>\n<li>读请求多，写的请求很少</li>\n<li>和服务端通信很少</li>\n<li>组件的的d数据来源简单</li>\n</ul>\n<p>附上一张草稿：<br><img src=\"https://ww2.sinaimg.cn/large/006tKfTcgy1fqyd1bofowj31kw0ow4qr.jpg\" alt=\"\"></p>\n"},{"title":"ARTS 1","_content":"\n## Algorithm\n\nProblem:\n \n> Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\n>\n> **Example:**\n>\n> ```\n> Input: 1->2->4, 1->3->4\n> Output: 1->1->2->3->4->4\n> ```\n\nSolution:\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nconst mergeTwoLists = (l1, l2) => {\n  if (!l1 & !l2) return null;\n  if (!l1) return l2;\n  if (!l2) return l1;\n\n  let head;\n  let tail = new ListNode(0);\n  while(l1 && l2) {\n    if (l1.val <= l2.val) {\n      tail.next = l1;\n      l1 = l1.next;\n      tail = tail.next;\n    } else {\n      tail.next = l2;\n      l2 = l2.next;\n      tail = tail.next;\n    }\n    if (!head) head = tail;\n  }\n\n  tail.next = l1 ? l1 : l2;\n\n  return head;\n}\n```\n\n刚开始没有理解题目的意思，所以用了错误的实现方法。\n\n本质是因为我不知道什么叫做 `linked lists`。后来查了一些资料才明白。\n\n参考资料：\n\n1. [Linked Lists](https://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html)\n2. [When to use LinkedList over ArrayList?](https://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist)\n\n## Review\n\n在了解 Linked Lists 的过程中，阅读了一篇比较长的英文。\n\n[Data Structures With JavaScript: Singly-Linked List and Doubly-Linked List](https://code.tutsplus.com/articles/data-structures-with-javascript-singly-linked-list-and-doubly-linked-list--cms-23392)\n\n点评：这篇文章读起来很好理解，第一部分先解释了 `Singly-Linked List`，然后讲解了数据结构，以及一些方法的实现，比如 `add`, `remove`, `search`。第二部分解释了 `Doubly-Linked List`，有了第一部分的铺垫，从 `Singly` 转换到 `Doubly` 就很容易理解了。文章篇幅很长，但不觉得啰嗦，讲解很清楚。\n\n## Technique\n\n`Commits message` 写得太随意，会很混乱，不利于查找和阅读。应该用一种规范的、整洁的格式来写。\n\n[Git commits: An Effective Style Guide](https://dev.to/pavlosisaris/git-commits-an-effective-style-guide-2kkn)\n\n这篇文章就介绍了一个格式，我很喜欢：\n\n1. feat: a new feature\n2. fix: a bug fix\n3. docs: changes to documentation\n4. style: formatting, missing semi colons, etc; no code change\n5. refactor: refactoring production code\n6. test: adding tests, refactoring test; no production code change\n7. chore: updating build tasks, package manager configs, etc; no production code change\n\n以后就照着这个规范写 `Commit message`。\n\n## Shared\n\n老生常谈一下。\n\n「以多数人努力程度之低，根本轮不到拼天赋」。\n\n3个月修炼成为全栈工程师 vs 坚持一年每周写 Arts。大多数人都会选择前者。因为速成多好呀，立马见效，学费贵点就贵点，只要有干货，越多越好，我通通都能吃得下！但残酷的现实是，开技术博客的人，很少做到周更的。一开始打算减肥健身，跑步几次之后就消失了。观察一个专栏的阅读量，普遍的规律是前几篇很高，后面的则是寥寥无几。\n\n人是有惰性的！而且大多数人都很懒。\n\n做软件开发也有 4 个年头了。我发现想要精进，别无二路，只能是踏踏实实地训练。这种训练不是写业务代码。而是私下的训练，自己给自己安排任务，比如算法训练，文章写作，分享观点。我觉得耗子叔的 Arts 活动就非常好。每周至少一篇 Arts，能坚持下来，自然就精进了。\n\n大道至简 + 长时间周期，就足够甩掉大部分人了。\n\n如果你想要向世界宣布，想世界证明：「我不懒」，有一个很简单的方法，那就是持续地输出作品。我觉得个人博客就是一个很好的输出平台。你不需要向一个人解释你有多努力、做过多少事情，你只需要持续地写博客，记录成长。最后你只需要把博客链接发给这个人，对他说：「这是我的博客，我平时的所思所想所做都记录在上面，还在继续写」。这就足够了。不要尝试去证明还没有做到的事情（比如随意立 Flag），如果做到了证明自动完成。","source":"_posts/2018-07-07-arts.md","raw":"---\ntitle: ARTS 1\ncategories: ARTS\n---\n\n## Algorithm\n\nProblem:\n \n> Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\n>\n> **Example:**\n>\n> ```\n> Input: 1->2->4, 1->3->4\n> Output: 1->1->2->3->4->4\n> ```\n\nSolution:\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nconst mergeTwoLists = (l1, l2) => {\n  if (!l1 & !l2) return null;\n  if (!l1) return l2;\n  if (!l2) return l1;\n\n  let head;\n  let tail = new ListNode(0);\n  while(l1 && l2) {\n    if (l1.val <= l2.val) {\n      tail.next = l1;\n      l1 = l1.next;\n      tail = tail.next;\n    } else {\n      tail.next = l2;\n      l2 = l2.next;\n      tail = tail.next;\n    }\n    if (!head) head = tail;\n  }\n\n  tail.next = l1 ? l1 : l2;\n\n  return head;\n}\n```\n\n刚开始没有理解题目的意思，所以用了错误的实现方法。\n\n本质是因为我不知道什么叫做 `linked lists`。后来查了一些资料才明白。\n\n参考资料：\n\n1. [Linked Lists](https://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html)\n2. [When to use LinkedList over ArrayList?](https://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist)\n\n## Review\n\n在了解 Linked Lists 的过程中，阅读了一篇比较长的英文。\n\n[Data Structures With JavaScript: Singly-Linked List and Doubly-Linked List](https://code.tutsplus.com/articles/data-structures-with-javascript-singly-linked-list-and-doubly-linked-list--cms-23392)\n\n点评：这篇文章读起来很好理解，第一部分先解释了 `Singly-Linked List`，然后讲解了数据结构，以及一些方法的实现，比如 `add`, `remove`, `search`。第二部分解释了 `Doubly-Linked List`，有了第一部分的铺垫，从 `Singly` 转换到 `Doubly` 就很容易理解了。文章篇幅很长，但不觉得啰嗦，讲解很清楚。\n\n## Technique\n\n`Commits message` 写得太随意，会很混乱，不利于查找和阅读。应该用一种规范的、整洁的格式来写。\n\n[Git commits: An Effective Style Guide](https://dev.to/pavlosisaris/git-commits-an-effective-style-guide-2kkn)\n\n这篇文章就介绍了一个格式，我很喜欢：\n\n1. feat: a new feature\n2. fix: a bug fix\n3. docs: changes to documentation\n4. style: formatting, missing semi colons, etc; no code change\n5. refactor: refactoring production code\n6. test: adding tests, refactoring test; no production code change\n7. chore: updating build tasks, package manager configs, etc; no production code change\n\n以后就照着这个规范写 `Commit message`。\n\n## Shared\n\n老生常谈一下。\n\n「以多数人努力程度之低，根本轮不到拼天赋」。\n\n3个月修炼成为全栈工程师 vs 坚持一年每周写 Arts。大多数人都会选择前者。因为速成多好呀，立马见效，学费贵点就贵点，只要有干货，越多越好，我通通都能吃得下！但残酷的现实是，开技术博客的人，很少做到周更的。一开始打算减肥健身，跑步几次之后就消失了。观察一个专栏的阅读量，普遍的规律是前几篇很高，后面的则是寥寥无几。\n\n人是有惰性的！而且大多数人都很懒。\n\n做软件开发也有 4 个年头了。我发现想要精进，别无二路，只能是踏踏实实地训练。这种训练不是写业务代码。而是私下的训练，自己给自己安排任务，比如算法训练，文章写作，分享观点。我觉得耗子叔的 Arts 活动就非常好。每周至少一篇 Arts，能坚持下来，自然就精进了。\n\n大道至简 + 长时间周期，就足够甩掉大部分人了。\n\n如果你想要向世界宣布，想世界证明：「我不懒」，有一个很简单的方法，那就是持续地输出作品。我觉得个人博客就是一个很好的输出平台。你不需要向一个人解释你有多努力、做过多少事情，你只需要持续地写博客，记录成长。最后你只需要把博客链接发给这个人，对他说：「这是我的博客，我平时的所思所想所做都记录在上面，还在继续写」。这就足够了。不要尝试去证明还没有做到的事情（比如随意立 Flag），如果做到了证明自动完成。","slug":"2018-07-07-arts","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdv007dfsondwtm78ig","content":"<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p>Problem:</p>\n<blockquote>\n<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class=\"line\">&gt; Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>Solution:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; l1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; l2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergeTwoLists = <span class=\"function\">(<span class=\"params\">l1, l2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!l1 &amp; !l2) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!l1) <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!l2) <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tail = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l1 &amp;&amp; l2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class=\"line\">      tail.next = l1;</span><br><span class=\"line\">      l1 = l1.next;</span><br><span class=\"line\">      tail = tail.next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      tail.next = l2;</span><br><span class=\"line\">      l2 = l2.next;</span><br><span class=\"line\">      tail = tail.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) head = tail;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tail.next = l1 ? l1 : l2;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚开始没有理解题目的意思，所以用了错误的实现方法。</p>\n<p>本质是因为我不知道什么叫做 <code>linked lists</code>。后来查了一些资料才明白。</p>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html\" target=\"_blank\" rel=\"noopener\">Linked Lists</a></li>\n<li><a href=\"https://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist\" target=\"_blank\" rel=\"noopener\">When to use LinkedList over ArrayList?</a></li>\n</ol>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p>在了解 Linked Lists 的过程中，阅读了一篇比较长的英文。</p>\n<p><a href=\"https://code.tutsplus.com/articles/data-structures-with-javascript-singly-linked-list-and-doubly-linked-list--cms-23392\" target=\"_blank\" rel=\"noopener\">Data Structures With JavaScript: Singly-Linked List and Doubly-Linked List</a></p>\n<p>点评：这篇文章读起来很好理解，第一部分先解释了 <code>Singly-Linked List</code>，然后讲解了数据结构，以及一些方法的实现，比如 <code>add</code>, <code>remove</code>, <code>search</code>。第二部分解释了 <code>Doubly-Linked List</code>，有了第一部分的铺垫，从 <code>Singly</code> 转换到 <code>Doubly</code> 就很容易理解了。文章篇幅很长，但不觉得啰嗦，讲解很清楚。</p>\n<h2 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h2><p><code>Commits message</code> 写得太随意，会很混乱，不利于查找和阅读。应该用一种规范的、整洁的格式来写。</p>\n<p><a href=\"https://dev.to/pavlosisaris/git-commits-an-effective-style-guide-2kkn\" target=\"_blank\" rel=\"noopener\">Git commits: An Effective Style Guide</a></p>\n<p>这篇文章就介绍了一个格式，我很喜欢：</p>\n<ol>\n<li>feat: a new feature</li>\n<li>fix: a bug fix</li>\n<li>docs: changes to documentation</li>\n<li>style: formatting, missing semi colons, etc; no code change</li>\n<li>refactor: refactoring production code</li>\n<li>test: adding tests, refactoring test; no production code change</li>\n<li>chore: updating build tasks, package manager configs, etc; no production code change</li>\n</ol>\n<p>以后就照着这个规范写 <code>Commit message</code>。</p>\n<h2 id=\"Shared\"><a href=\"#Shared\" class=\"headerlink\" title=\"Shared\"></a>Shared</h2><p>老生常谈一下。</p>\n<p>「以多数人努力程度之低，根本轮不到拼天赋」。</p>\n<p>3个月修炼成为全栈工程师 vs 坚持一年每周写 Arts。大多数人都会选择前者。因为速成多好呀，立马见效，学费贵点就贵点，只要有干货，越多越好，我通通都能吃得下！但残酷的现实是，开技术博客的人，很少做到周更的。一开始打算减肥健身，跑步几次之后就消失了。观察一个专栏的阅读量，普遍的规律是前几篇很高，后面的则是寥寥无几。</p>\n<p>人是有惰性的！而且大多数人都很懒。</p>\n<p>做软件开发也有 4 个年头了。我发现想要精进，别无二路，只能是踏踏实实地训练。这种训练不是写业务代码。而是私下的训练，自己给自己安排任务，比如算法训练，文章写作，分享观点。我觉得耗子叔的 Arts 活动就非常好。每周至少一篇 Arts，能坚持下来，自然就精进了。</p>\n<p>大道至简 + 长时间周期，就足够甩掉大部分人了。</p>\n<p>如果你想要向世界宣布，想世界证明：「我不懒」，有一个很简单的方法，那就是持续地输出作品。我觉得个人博客就是一个很好的输出平台。你不需要向一个人解释你有多努力、做过多少事情，你只需要持续地写博客，记录成长。最后你只需要把博客链接发给这个人，对他说：「这是我的博客，我平时的所思所想所做都记录在上面，还在继续写」。这就足够了。不要尝试去证明还没有做到的事情（比如随意立 Flag），如果做到了证明自动完成。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p>Problem:</p>\n<blockquote>\n<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class=\"line\">&gt; Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>Solution:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; l1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; l2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergeTwoLists = <span class=\"function\">(<span class=\"params\">l1, l2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!l1 &amp; !l2) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!l1) <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!l2) <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tail = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l1 &amp;&amp; l2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class=\"line\">      tail.next = l1;</span><br><span class=\"line\">      l1 = l1.next;</span><br><span class=\"line\">      tail = tail.next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      tail.next = l2;</span><br><span class=\"line\">      l2 = l2.next;</span><br><span class=\"line\">      tail = tail.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) head = tail;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tail.next = l1 ? l1 : l2;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚开始没有理解题目的意思，所以用了错误的实现方法。</p>\n<p>本质是因为我不知道什么叫做 <code>linked lists</code>。后来查了一些资料才明白。</p>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://www.cs.cmu.edu/~adamchik/15-121/lectures/Linked%20Lists/linked%20lists.html\" target=\"_blank\" rel=\"noopener\">Linked Lists</a></li>\n<li><a href=\"https://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist\" target=\"_blank\" rel=\"noopener\">When to use LinkedList over ArrayList?</a></li>\n</ol>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p>在了解 Linked Lists 的过程中，阅读了一篇比较长的英文。</p>\n<p><a href=\"https://code.tutsplus.com/articles/data-structures-with-javascript-singly-linked-list-and-doubly-linked-list--cms-23392\" target=\"_blank\" rel=\"noopener\">Data Structures With JavaScript: Singly-Linked List and Doubly-Linked List</a></p>\n<p>点评：这篇文章读起来很好理解，第一部分先解释了 <code>Singly-Linked List</code>，然后讲解了数据结构，以及一些方法的实现，比如 <code>add</code>, <code>remove</code>, <code>search</code>。第二部分解释了 <code>Doubly-Linked List</code>，有了第一部分的铺垫，从 <code>Singly</code> 转换到 <code>Doubly</code> 就很容易理解了。文章篇幅很长，但不觉得啰嗦，讲解很清楚。</p>\n<h2 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h2><p><code>Commits message</code> 写得太随意，会很混乱，不利于查找和阅读。应该用一种规范的、整洁的格式来写。</p>\n<p><a href=\"https://dev.to/pavlosisaris/git-commits-an-effective-style-guide-2kkn\" target=\"_blank\" rel=\"noopener\">Git commits: An Effective Style Guide</a></p>\n<p>这篇文章就介绍了一个格式，我很喜欢：</p>\n<ol>\n<li>feat: a new feature</li>\n<li>fix: a bug fix</li>\n<li>docs: changes to documentation</li>\n<li>style: formatting, missing semi colons, etc; no code change</li>\n<li>refactor: refactoring production code</li>\n<li>test: adding tests, refactoring test; no production code change</li>\n<li>chore: updating build tasks, package manager configs, etc; no production code change</li>\n</ol>\n<p>以后就照着这个规范写 <code>Commit message</code>。</p>\n<h2 id=\"Shared\"><a href=\"#Shared\" class=\"headerlink\" title=\"Shared\"></a>Shared</h2><p>老生常谈一下。</p>\n<p>「以多数人努力程度之低，根本轮不到拼天赋」。</p>\n<p>3个月修炼成为全栈工程师 vs 坚持一年每周写 Arts。大多数人都会选择前者。因为速成多好呀，立马见效，学费贵点就贵点，只要有干货，越多越好，我通通都能吃得下！但残酷的现实是，开技术博客的人，很少做到周更的。一开始打算减肥健身，跑步几次之后就消失了。观察一个专栏的阅读量，普遍的规律是前几篇很高，后面的则是寥寥无几。</p>\n<p>人是有惰性的！而且大多数人都很懒。</p>\n<p>做软件开发也有 4 个年头了。我发现想要精进，别无二路，只能是踏踏实实地训练。这种训练不是写业务代码。而是私下的训练，自己给自己安排任务，比如算法训练，文章写作，分享观点。我觉得耗子叔的 Arts 活动就非常好。每周至少一篇 Arts，能坚持下来，自然就精进了。</p>\n<p>大道至简 + 长时间周期，就足够甩掉大部分人了。</p>\n<p>如果你想要向世界宣布，想世界证明：「我不懒」，有一个很简单的方法，那就是持续地输出作品。我觉得个人博客就是一个很好的输出平台。你不需要向一个人解释你有多努力、做过多少事情，你只需要持续地写博客，记录成长。最后你只需要把博客链接发给这个人，对他说：「这是我的博客，我平时的所思所想所做都记录在上面，还在继续写」。这就足够了。不要尝试去证明还没有做到的事情（比如随意立 Flag），如果做到了证明自动完成。</p>\n"},{"title":"ARTS 2","_content":"\n## Algorithm\n\nCount the number of prime numbers less than a non-negative number, **n**.\n\n**Example:**\n\n```\nInput: 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n```\n\n```javascript\n/**\n * @param {number} n\n * @return {number}\n */\nvar countPrimes = (n) => {\n\n  const isPrimeNumber = n => {\n    if (!n || typeof n !== 'number' || n < 2) return false;\n\n    let stop = false;\n    let ret = true;\n    let i = 2;\n\n    while(i < n && !stop) {\n      if (n % i === 0) {\n        stop = true;\n        ret = false;\n      }\n      i++;\n    }\n\n    return ret\n  }\n\n  if (!n || typeof n !== 'number' || n < 2) return 0;\n\n  let count = 0;\n  let i = 2;\n  while(i < n) {\n    if (isPrimeNumber(i)) {\n      console.log(i)\n      count++;\n    }\n    i++;\n  }\n\n  return count;\n};\n```\n\n## Review\n\n文章：[Dancing with OAuth: a step by step guide](https://dev.to/anabella/dancing-with-oauth-emp)\n\n### 点评\n\n这篇文章用通俗易懂的语言，解释了 Oauth 是什么？Oauth 的作用是减少用户的注册成本。不需要用户去填那些千篇一律的注册表单，而是共享第三方的、比较热门的应用上面的登录信息。比如你经常看到的「Log in with Facebook. Log in with Google」。\n\n说完了 Oauth 是什么，接着介绍 Oauth 是如何工作的。一般来说，假如你要使用第三方应用的登录信息，比如 Google，你需要给 Google 提供一下参数：\n\n- Client Id\n- Scope（要操作的数据是什么，权限有多大）\n\n如果用户同意授权，那么 Google 会返回给你一个 Token，你可以用这个 Token 去获取、更新用户的数据。\n\n本文最大的亮点是作者的讲解方法。全文用来一个类比，跳舞，让整篇文章都充满趣味性。还有通俗易懂的手工插画，这本质上是使用费曼技巧，也就是用自己 的话，把一个概念，浅显易懂地写在纸上，而且还要让别人能够轻易地看懂。别人懂了说明自己是真的懂了。\n\n## Technique\n\n「放慢写代码的速度」\n\n首先，从敲代码的角度来说，我平时敲代码很快，会经常敲错字然后回退删除，快速写完代码之后，马上进行调试。\n\n其次，从思考的角度来说，工程师大部分的时间，是用在构思上面，而不是写代码。为了追求速度，匆匆忙忙地把第一时间想到的解法做出来，之后往往会发现存在另外一种更好的解法。\n\n最后，从测试的角度来说，快速写码容易写错，会导致很多低级的bug，所以我写完代码之后，不会立刻执行代码，而是顺着逻辑，在脑中把流程跑一遍。每当我进行这种 final check 的时候，我常常能发现很多小问题。\n\n所以，我现在有意识地放慢自己写码的速度，一来不会再检查敲错字符，二来可以让思考更缜密，三来可以提高程序的出错率。\n\n写代码是如此，写文章亦是如此。\n\n放慢速度，并不意味着减低产出，从质量的角度来看，这是效率更高的做法。\n\n## Share\n\n如何突破瓶颈期？可以从5个方面入手:\n\n> - 工程师/手艺人(练就扎实的硬技能)\n> - 目标是架构师(全局的眼光/开阔的视野)\n> - 沟通能力/团队协作(各种软技能/辅助技能)\n> - 发现问题/解决问题/总结问题的能力(写写博客锻炼下自己的写作能力, 输出就是最好的学习)\n> - 主动做事的执行力(给你什么做什么 -> 没人给你时, 自己决定做什么, 思考怎么做, 为什么做)\n>\n> 参考自「 [前端工程师的职业发展规划](https://github.com/f2e-journey/f2e-journey/blob/master/career-planning.md)」\n\n每个人都处于瓶颈期，不要一直迷茫的环顾四周，把眼前的事情做好，自然就能突破了。\n\n这5个方面对我来说，是一个指明灯。\n\n第一，业余时间可以进行刻意练习，比如做算法题，写 arts，锻炼自己的硬实力。\n\n第二，保存开放的心态，学习新事物，比如区块链。\n\n第三，学习沟通技巧，为以后承担更大的责任做准备。\n\n第四，可以想想试着发现团队中的问题，然后主动去解决它。一旦越来越多的问题被你解决了，你就拥有了不可替代性，你的价值就凸显出来了。\n\n第五，主动是做任何事情最重要的品质。\n\n我其实没做过职业规划，我也不知道接下来究竟会做什么。\n\n我想了很久，也没找到答案，但我不觉得这会成为一个问题。\n\n因为一个优秀的程序员，就像一个金字塔。专业的领域是在金字塔的顶端，每个领域都不一样。\n\n但金字塔的底部，还存在很多共同的东西。底层的东西。\n\n把手头的事情做好，让正确的事情持续地发生，同时再做好上面的5个点。\n\n即使前方看不清楚，也没关系，因为自己一直在成长，一直在学东西。\n\n总有一天，可能是几个月后，也可能是一年后，也可能是几年后，我会找到明确的方向，到那时候，之前的积累肯定能派上用场。\n\n我很喜欢月影说的一句话：\n\n> 用100%的技术积累中20%的技术来为自己的工作服务，而不是用100%的技术来为自己的工作服务\n\n学无止境...","source":"_posts/2018-07-15-arts.md","raw":"---\ntitle: ARTS 2\ncategories: ARTS\n---\n\n## Algorithm\n\nCount the number of prime numbers less than a non-negative number, **n**.\n\n**Example:**\n\n```\nInput: 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n```\n\n```javascript\n/**\n * @param {number} n\n * @return {number}\n */\nvar countPrimes = (n) => {\n\n  const isPrimeNumber = n => {\n    if (!n || typeof n !== 'number' || n < 2) return false;\n\n    let stop = false;\n    let ret = true;\n    let i = 2;\n\n    while(i < n && !stop) {\n      if (n % i === 0) {\n        stop = true;\n        ret = false;\n      }\n      i++;\n    }\n\n    return ret\n  }\n\n  if (!n || typeof n !== 'number' || n < 2) return 0;\n\n  let count = 0;\n  let i = 2;\n  while(i < n) {\n    if (isPrimeNumber(i)) {\n      console.log(i)\n      count++;\n    }\n    i++;\n  }\n\n  return count;\n};\n```\n\n## Review\n\n文章：[Dancing with OAuth: a step by step guide](https://dev.to/anabella/dancing-with-oauth-emp)\n\n### 点评\n\n这篇文章用通俗易懂的语言，解释了 Oauth 是什么？Oauth 的作用是减少用户的注册成本。不需要用户去填那些千篇一律的注册表单，而是共享第三方的、比较热门的应用上面的登录信息。比如你经常看到的「Log in with Facebook. Log in with Google」。\n\n说完了 Oauth 是什么，接着介绍 Oauth 是如何工作的。一般来说，假如你要使用第三方应用的登录信息，比如 Google，你需要给 Google 提供一下参数：\n\n- Client Id\n- Scope（要操作的数据是什么，权限有多大）\n\n如果用户同意授权，那么 Google 会返回给你一个 Token，你可以用这个 Token 去获取、更新用户的数据。\n\n本文最大的亮点是作者的讲解方法。全文用来一个类比，跳舞，让整篇文章都充满趣味性。还有通俗易懂的手工插画，这本质上是使用费曼技巧，也就是用自己 的话，把一个概念，浅显易懂地写在纸上，而且还要让别人能够轻易地看懂。别人懂了说明自己是真的懂了。\n\n## Technique\n\n「放慢写代码的速度」\n\n首先，从敲代码的角度来说，我平时敲代码很快，会经常敲错字然后回退删除，快速写完代码之后，马上进行调试。\n\n其次，从思考的角度来说，工程师大部分的时间，是用在构思上面，而不是写代码。为了追求速度，匆匆忙忙地把第一时间想到的解法做出来，之后往往会发现存在另外一种更好的解法。\n\n最后，从测试的角度来说，快速写码容易写错，会导致很多低级的bug，所以我写完代码之后，不会立刻执行代码，而是顺着逻辑，在脑中把流程跑一遍。每当我进行这种 final check 的时候，我常常能发现很多小问题。\n\n所以，我现在有意识地放慢自己写码的速度，一来不会再检查敲错字符，二来可以让思考更缜密，三来可以提高程序的出错率。\n\n写代码是如此，写文章亦是如此。\n\n放慢速度，并不意味着减低产出，从质量的角度来看，这是效率更高的做法。\n\n## Share\n\n如何突破瓶颈期？可以从5个方面入手:\n\n> - 工程师/手艺人(练就扎实的硬技能)\n> - 目标是架构师(全局的眼光/开阔的视野)\n> - 沟通能力/团队协作(各种软技能/辅助技能)\n> - 发现问题/解决问题/总结问题的能力(写写博客锻炼下自己的写作能力, 输出就是最好的学习)\n> - 主动做事的执行力(给你什么做什么 -> 没人给你时, 自己决定做什么, 思考怎么做, 为什么做)\n>\n> 参考自「 [前端工程师的职业发展规划](https://github.com/f2e-journey/f2e-journey/blob/master/career-planning.md)」\n\n每个人都处于瓶颈期，不要一直迷茫的环顾四周，把眼前的事情做好，自然就能突破了。\n\n这5个方面对我来说，是一个指明灯。\n\n第一，业余时间可以进行刻意练习，比如做算法题，写 arts，锻炼自己的硬实力。\n\n第二，保存开放的心态，学习新事物，比如区块链。\n\n第三，学习沟通技巧，为以后承担更大的责任做准备。\n\n第四，可以想想试着发现团队中的问题，然后主动去解决它。一旦越来越多的问题被你解决了，你就拥有了不可替代性，你的价值就凸显出来了。\n\n第五，主动是做任何事情最重要的品质。\n\n我其实没做过职业规划，我也不知道接下来究竟会做什么。\n\n我想了很久，也没找到答案，但我不觉得这会成为一个问题。\n\n因为一个优秀的程序员，就像一个金字塔。专业的领域是在金字塔的顶端，每个领域都不一样。\n\n但金字塔的底部，还存在很多共同的东西。底层的东西。\n\n把手头的事情做好，让正确的事情持续地发生，同时再做好上面的5个点。\n\n即使前方看不清楚，也没关系，因为自己一直在成长，一直在学东西。\n\n总有一天，可能是几个月后，也可能是一年后，也可能是几年后，我会找到明确的方向，到那时候，之前的积累肯定能派上用场。\n\n我很喜欢月影说的一句话：\n\n> 用100%的技术积累中20%的技术来为自己的工作服务，而不是用100%的技术来为自己的工作服务\n\n学无止境...","slug":"2018-07-15-arts","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdw007gfsonc35p9hdq","content":"<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p>Count the number of prime numbers less than a non-negative number, <strong>n</strong>.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 10</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countPrimes = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isPrimeNumber = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!n || <span class=\"keyword\">typeof</span> n !== <span class=\"string\">'number'</span> || n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> stop = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; n &amp;&amp; !stop) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n % i === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        stop = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        ret = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!n || <span class=\"keyword\">typeof</span> n !== <span class=\"string\">'number'</span> || n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt; n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPrimeNumber(i)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p>文章：<a href=\"https://dev.to/anabella/dancing-with-oauth-emp\" target=\"_blank\" rel=\"noopener\">Dancing with OAuth: a step by step guide</a></p>\n<h3 id=\"点评\"><a href=\"#点评\" class=\"headerlink\" title=\"点评\"></a>点评</h3><p>这篇文章用通俗易懂的语言，解释了 Oauth 是什么？Oauth 的作用是减少用户的注册成本。不需要用户去填那些千篇一律的注册表单，而是共享第三方的、比较热门的应用上面的登录信息。比如你经常看到的「Log in with Facebook. Log in with Google」。</p>\n<p>说完了 Oauth 是什么，接着介绍 Oauth 是如何工作的。一般来说，假如你要使用第三方应用的登录信息，比如 Google，你需要给 Google 提供一下参数：</p>\n<ul>\n<li>Client Id</li>\n<li>Scope（要操作的数据是什么，权限有多大）</li>\n</ul>\n<p>如果用户同意授权，那么 Google 会返回给你一个 Token，你可以用这个 Token 去获取、更新用户的数据。</p>\n<p>本文最大的亮点是作者的讲解方法。全文用来一个类比，跳舞，让整篇文章都充满趣味性。还有通俗易懂的手工插画，这本质上是使用费曼技巧，也就是用自己 的话，把一个概念，浅显易懂地写在纸上，而且还要让别人能够轻易地看懂。别人懂了说明自己是真的懂了。</p>\n<h2 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h2><p>「放慢写代码的速度」</p>\n<p>首先，从敲代码的角度来说，我平时敲代码很快，会经常敲错字然后回退删除，快速写完代码之后，马上进行调试。</p>\n<p>其次，从思考的角度来说，工程师大部分的时间，是用在构思上面，而不是写代码。为了追求速度，匆匆忙忙地把第一时间想到的解法做出来，之后往往会发现存在另外一种更好的解法。</p>\n<p>最后，从测试的角度来说，快速写码容易写错，会导致很多低级的bug，所以我写完代码之后，不会立刻执行代码，而是顺着逻辑，在脑中把流程跑一遍。每当我进行这种 final check 的时候，我常常能发现很多小问题。</p>\n<p>所以，我现在有意识地放慢自己写码的速度，一来不会再检查敲错字符，二来可以让思考更缜密，三来可以提高程序的出错率。</p>\n<p>写代码是如此，写文章亦是如此。</p>\n<p>放慢速度，并不意味着减低产出，从质量的角度来看，这是效率更高的做法。</p>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><p>如何突破瓶颈期？可以从5个方面入手:</p>\n<blockquote>\n<ul>\n<li>工程师/手艺人(练就扎实的硬技能)</li>\n<li>目标是架构师(全局的眼光/开阔的视野)</li>\n<li>沟通能力/团队协作(各种软技能/辅助技能)</li>\n<li>发现问题/解决问题/总结问题的能力(写写博客锻炼下自己的写作能力, 输出就是最好的学习)</li>\n<li>主动做事的执行力(给你什么做什么 -&gt; 没人给你时, 自己决定做什么, 思考怎么做, 为什么做)</li>\n</ul>\n<p>参考自「 <a href=\"https://github.com/f2e-journey/f2e-journey/blob/master/career-planning.md\" target=\"_blank\" rel=\"noopener\">前端工程师的职业发展规划</a>」</p>\n</blockquote>\n<p>每个人都处于瓶颈期，不要一直迷茫的环顾四周，把眼前的事情做好，自然就能突破了。</p>\n<p>这5个方面对我来说，是一个指明灯。</p>\n<p>第一，业余时间可以进行刻意练习，比如做算法题，写 arts，锻炼自己的硬实力。</p>\n<p>第二，保存开放的心态，学习新事物，比如区块链。</p>\n<p>第三，学习沟通技巧，为以后承担更大的责任做准备。</p>\n<p>第四，可以想想试着发现团队中的问题，然后主动去解决它。一旦越来越多的问题被你解决了，你就拥有了不可替代性，你的价值就凸显出来了。</p>\n<p>第五，主动是做任何事情最重要的品质。</p>\n<p>我其实没做过职业规划，我也不知道接下来究竟会做什么。</p>\n<p>我想了很久，也没找到答案，但我不觉得这会成为一个问题。</p>\n<p>因为一个优秀的程序员，就像一个金字塔。专业的领域是在金字塔的顶端，每个领域都不一样。</p>\n<p>但金字塔的底部，还存在很多共同的东西。底层的东西。</p>\n<p>把手头的事情做好，让正确的事情持续地发生，同时再做好上面的5个点。</p>\n<p>即使前方看不清楚，也没关系，因为自己一直在成长，一直在学东西。</p>\n<p>总有一天，可能是几个月后，也可能是一年后，也可能是几年后，我会找到明确的方向，到那时候，之前的积累肯定能派上用场。</p>\n<p>我很喜欢月影说的一句话：</p>\n<blockquote>\n<p>用100%的技术积累中20%的技术来为自己的工作服务，而不是用100%的技术来为自己的工作服务</p>\n</blockquote>\n<p>学无止境…</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p>Count the number of prime numbers less than a non-negative number, <strong>n</strong>.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 10</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countPrimes = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isPrimeNumber = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!n || <span class=\"keyword\">typeof</span> n !== <span class=\"string\">'number'</span> || n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> stop = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; n &amp;&amp; !stop) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n % i === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        stop = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        ret = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!n || <span class=\"keyword\">typeof</span> n !== <span class=\"string\">'number'</span> || n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt; n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPrimeNumber(i)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p>文章：<a href=\"https://dev.to/anabella/dancing-with-oauth-emp\" target=\"_blank\" rel=\"noopener\">Dancing with OAuth: a step by step guide</a></p>\n<h3 id=\"点评\"><a href=\"#点评\" class=\"headerlink\" title=\"点评\"></a>点评</h3><p>这篇文章用通俗易懂的语言，解释了 Oauth 是什么？Oauth 的作用是减少用户的注册成本。不需要用户去填那些千篇一律的注册表单，而是共享第三方的、比较热门的应用上面的登录信息。比如你经常看到的「Log in with Facebook. Log in with Google」。</p>\n<p>说完了 Oauth 是什么，接着介绍 Oauth 是如何工作的。一般来说，假如你要使用第三方应用的登录信息，比如 Google，你需要给 Google 提供一下参数：</p>\n<ul>\n<li>Client Id</li>\n<li>Scope（要操作的数据是什么，权限有多大）</li>\n</ul>\n<p>如果用户同意授权，那么 Google 会返回给你一个 Token，你可以用这个 Token 去获取、更新用户的数据。</p>\n<p>本文最大的亮点是作者的讲解方法。全文用来一个类比，跳舞，让整篇文章都充满趣味性。还有通俗易懂的手工插画，这本质上是使用费曼技巧，也就是用自己 的话，把一个概念，浅显易懂地写在纸上，而且还要让别人能够轻易地看懂。别人懂了说明自己是真的懂了。</p>\n<h2 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h2><p>「放慢写代码的速度」</p>\n<p>首先，从敲代码的角度来说，我平时敲代码很快，会经常敲错字然后回退删除，快速写完代码之后，马上进行调试。</p>\n<p>其次，从思考的角度来说，工程师大部分的时间，是用在构思上面，而不是写代码。为了追求速度，匆匆忙忙地把第一时间想到的解法做出来，之后往往会发现存在另外一种更好的解法。</p>\n<p>最后，从测试的角度来说，快速写码容易写错，会导致很多低级的bug，所以我写完代码之后，不会立刻执行代码，而是顺着逻辑，在脑中把流程跑一遍。每当我进行这种 final check 的时候，我常常能发现很多小问题。</p>\n<p>所以，我现在有意识地放慢自己写码的速度，一来不会再检查敲错字符，二来可以让思考更缜密，三来可以提高程序的出错率。</p>\n<p>写代码是如此，写文章亦是如此。</p>\n<p>放慢速度，并不意味着减低产出，从质量的角度来看，这是效率更高的做法。</p>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><p>如何突破瓶颈期？可以从5个方面入手:</p>\n<blockquote>\n<ul>\n<li>工程师/手艺人(练就扎实的硬技能)</li>\n<li>目标是架构师(全局的眼光/开阔的视野)</li>\n<li>沟通能力/团队协作(各种软技能/辅助技能)</li>\n<li>发现问题/解决问题/总结问题的能力(写写博客锻炼下自己的写作能力, 输出就是最好的学习)</li>\n<li>主动做事的执行力(给你什么做什么 -&gt; 没人给你时, 自己决定做什么, 思考怎么做, 为什么做)</li>\n</ul>\n<p>参考自「 <a href=\"https://github.com/f2e-journey/f2e-journey/blob/master/career-planning.md\" target=\"_blank\" rel=\"noopener\">前端工程师的职业发展规划</a>」</p>\n</blockquote>\n<p>每个人都处于瓶颈期，不要一直迷茫的环顾四周，把眼前的事情做好，自然就能突破了。</p>\n<p>这5个方面对我来说，是一个指明灯。</p>\n<p>第一，业余时间可以进行刻意练习，比如做算法题，写 arts，锻炼自己的硬实力。</p>\n<p>第二，保存开放的心态，学习新事物，比如区块链。</p>\n<p>第三，学习沟通技巧，为以后承担更大的责任做准备。</p>\n<p>第四，可以想想试着发现团队中的问题，然后主动去解决它。一旦越来越多的问题被你解决了，你就拥有了不可替代性，你的价值就凸显出来了。</p>\n<p>第五，主动是做任何事情最重要的品质。</p>\n<p>我其实没做过职业规划，我也不知道接下来究竟会做什么。</p>\n<p>我想了很久，也没找到答案，但我不觉得这会成为一个问题。</p>\n<p>因为一个优秀的程序员，就像一个金字塔。专业的领域是在金字塔的顶端，每个领域都不一样。</p>\n<p>但金字塔的底部，还存在很多共同的东西。底层的东西。</p>\n<p>把手头的事情做好，让正确的事情持续地发生，同时再做好上面的5个点。</p>\n<p>即使前方看不清楚，也没关系，因为自己一直在成长，一直在学东西。</p>\n<p>总有一天，可能是几个月后，也可能是一年后，也可能是几年后，我会找到明确的方向，到那时候，之前的积累肯定能派上用场。</p>\n<p>我很喜欢月影说的一句话：</p>\n<blockquote>\n<p>用100%的技术积累中20%的技术来为自己的工作服务，而不是用100%的技术来为自己的工作服务</p>\n</blockquote>\n<p>学无止境…</p>\n"},{"title":"ARTS 3","_content":"\n## Algorithm\n\n### Problem\n\nGiven an array of integers, return **indices** of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have **exactly** one solution, and you may not use the *same* element twice.\n\n**Example:**\n\n```\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n```\n\n我拿到题目之后，第一时间想到的解决方法就是用两个循环遍历。如下：\n\n```javascript\nlet twoSum1 = function(nums, target) {\n  for (let i = 0, len = nums.length; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      count++;\n      if (nums[i] + nums[j] === target) {\n        return [i, j];\n      }\n    }\n  }\n  return [];\n};\n```\n\n结果正确了，但没有通过 Leetcode 的测试，因为执行花费的时间太久了。于是我看了别人的做法，发现有一个方法，可以执行地更快。如下：\n\n```javascript\nlet twoSum2 = function(nums, target) {\n  let cache = {};\n  for (let i = 0, len = nums.length; i < len; i++) {\n    count++;\n    const tmp = target - nums[i];\n    if (cache[tmp] !== undefined) return [cache[tmp], i];\n    cache[nums[i]] = i;\n  }\n  return [];\n}\n```\n\n对于这个方法，我有一个例子，可以和现实生活的场景对应起来理解。\n\n> 小红和小明在网上预定了一家餐厅的座位。他们两个约定在中午12点去那里吃饭。在去吃饭的路上，小红的手机没电了，他们两个没办法联系上。于是他们不知道谁会先到。假设小红先到了，他会跟那个服务员说，我们预定了一个位置，请问那个人来了吗？如果小明还没来，那个服务员就会让小红提供手机号码或者姓名。确认这个座位就是他们两个定的。确认完之后，小红就可以先进去餐厅的座位上等小明。等小明来了之后，他也会去问那个服务员：我们预定了一个位置，请问那个人来了吗？服务员说有一个人已经来了，在里面等你。也就是说先到的人会去服务员那里登记，那么先去座位上等待另外一个人的到来。\n\n在这个例子中，小红和小明就是我们要找的一对数字，服务员就是缓存 cache，记录是否已经有人先到了。\n\n好，我们再对比一下性能。我写了一个直观的例子：\n\n![image-20180721154313344](http://p2mvd0t5x.bkt.clouddn.com/blog/9y4d9.jpg)\n\n因为第一种算法复杂度是 n^2，所以在这个例子中，它的运行次数是 105 次。\n\n第二种算法的复杂度是 n，所以在这个例子中，它的运行次数只有 15 次。\n\n## Review\n\n[Lay Out Your Code Like You'd Lay Out Your House](https://dev.to/_bigblind/lay-out-your-code-like-youd-lay-out-your-house-hco)\n\n这篇文章的观点是：**我们不应该根据文件的类型（nature）来划分代码，而是应该根据功能（domain）**。\n\n根据文件类型来划分代码，最经典的模型就是 MVC，Model 放在一个文件夹，View 放在一个文件夹，Controller 放在一个文件夹。坏处就是大部分情况下，当你需要改一个功能的时候，你需要打开 3 个文件夹，修改 3 份会文件。\n\n\u0010[A Better File Structure For React/Redux Applications](https://marmelab.com/blog/2015/12/17/react-directory-structure.html) 这篇文章中提到，React 和 Redux 的官方例子，都是根据文件类型来划分的。比如：\n\n```javascript\nactions/\n    CommandActions.js\n    UserActions.js\ncomponents/\n    Header.js\n    Sidebar.js\n    Command.js\n    CommandList.js\n    CommandItem.js\n    CommandHelper.js\n    User.js\n    UserProfile.js\n    UserAvatar.js\ncontainers/\n    App.js\n    Command.js\n    User.js\nreducers/\n    index.js\n    command.js\n    user.js\nroutes.js\n```\n\n当你加一个 product 功能的时候，你需要在好几个文件夹之间来回穿梭，你最终的改动如下：\n\n```javascript\nactions/\n    CommandActions.js\n    ProductActions.js   <= Here\n    UserActions.js\ncomponents/\n    Header.js\n    Sidebar.js\n    Command.js\n    CommandList.js\n    CommandItem.js\n    CommandHelper.js\n    Product.js          <= Here\n    ProductList.js      <= Here\n    ProductItem.js      <= Here\n    ProductImage.js     <= Here\n    User.js\n    UserProfile.js\n    UserAvatar.js\ncontainers/\n    App.js\n    Command.js\n    Product.js          <= Here\n    User.js\nreducers/\n    index.js\n    foo.js\n    bar.js\n    product.js          <= Here\nroutes.js\n```\n\n由此可见，按照功能划分代码的好处在于：\n\n1. 快速定位。我能快速找到某个 feature 所有的代码。当我想要替换一个函数名的时候，我不需要用搜索整个项目。只需要把这个文件夹下的文件都改好就行。\n2. 更加模块化（modular）。一个组件所有的东西都在一个文件夹里面，它能够作为一个模块被复用。\n\n## Technique\n\n### 如何从文件结构的角度出发，封装好一个组件？\n\n原则如下：\n\n1. 根据 feature 来区分代码，每个 feature 单独一个文件夹，便于快速定位代码在哪里。\n2. 组件里面的文件要扁平化，便于查找。\n3. 命名要清晰、有意义，便于识别。\n\n假如你用 React + Redux，你的组件结构应该是：\n\n```javascript\nproduct/\n    Product.js\n    ProductActions.js\n    ProductList.js\n    ProductItem.js\n    ProductImage.js\n    productReducer.js\n```\n\n假如你用 Angular，你的组件接口应该是：\n\n```javascript\nheros/\n\theroes.component.ts|html|css|spec.ts\n\theroes.module.ts\n\theroes-routing.module.ts\n```\n\n## Share\n\n### 凡是多问一个为什么？\n\n一个人说我觉得xx东西不好。\n\n一篇文章说不应该做xx。\n\n一本书说xx是如何如何。\n\n这些都是观点，是结论。很多人只看结论，不探究结论的合理性，没有问自己为什么是这样，为什么会那样。在聊天的时候，也有人常常引用他人的话来论证他的观点，这种论据其实一点说服力都没有。因为拿一个没有经过证明的论据，去证明一个论点，显然是不成立的。\n\n学一个技术也是如此。很多人说 xx 技术是 best pratice。那么，这些技术为什么是最佳实践，它解决了什么问题，它的好处是什么？这些我们都应该、也必须去探究一下。尽管这会很累。\n\n如果要学得有深度，一定要学会持续发问。每次都敷衍了事，这是自欺欺人。在面试的时候，问题都会暴露地一清二楚。","source":"_posts/2018-07-21-arts.md","raw":"---\ntitle: ARTS 3\ncategories: ARTS\n---\n\n## Algorithm\n\n### Problem\n\nGiven an array of integers, return **indices** of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have **exactly** one solution, and you may not use the *same* element twice.\n\n**Example:**\n\n```\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n```\n\n我拿到题目之后，第一时间想到的解决方法就是用两个循环遍历。如下：\n\n```javascript\nlet twoSum1 = function(nums, target) {\n  for (let i = 0, len = nums.length; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      count++;\n      if (nums[i] + nums[j] === target) {\n        return [i, j];\n      }\n    }\n  }\n  return [];\n};\n```\n\n结果正确了，但没有通过 Leetcode 的测试，因为执行花费的时间太久了。于是我看了别人的做法，发现有一个方法，可以执行地更快。如下：\n\n```javascript\nlet twoSum2 = function(nums, target) {\n  let cache = {};\n  for (let i = 0, len = nums.length; i < len; i++) {\n    count++;\n    const tmp = target - nums[i];\n    if (cache[tmp] !== undefined) return [cache[tmp], i];\n    cache[nums[i]] = i;\n  }\n  return [];\n}\n```\n\n对于这个方法，我有一个例子，可以和现实生活的场景对应起来理解。\n\n> 小红和小明在网上预定了一家餐厅的座位。他们两个约定在中午12点去那里吃饭。在去吃饭的路上，小红的手机没电了，他们两个没办法联系上。于是他们不知道谁会先到。假设小红先到了，他会跟那个服务员说，我们预定了一个位置，请问那个人来了吗？如果小明还没来，那个服务员就会让小红提供手机号码或者姓名。确认这个座位就是他们两个定的。确认完之后，小红就可以先进去餐厅的座位上等小明。等小明来了之后，他也会去问那个服务员：我们预定了一个位置，请问那个人来了吗？服务员说有一个人已经来了，在里面等你。也就是说先到的人会去服务员那里登记，那么先去座位上等待另外一个人的到来。\n\n在这个例子中，小红和小明就是我们要找的一对数字，服务员就是缓存 cache，记录是否已经有人先到了。\n\n好，我们再对比一下性能。我写了一个直观的例子：\n\n![image-20180721154313344](http://p2mvd0t5x.bkt.clouddn.com/blog/9y4d9.jpg)\n\n因为第一种算法复杂度是 n^2，所以在这个例子中，它的运行次数是 105 次。\n\n第二种算法的复杂度是 n，所以在这个例子中，它的运行次数只有 15 次。\n\n## Review\n\n[Lay Out Your Code Like You'd Lay Out Your House](https://dev.to/_bigblind/lay-out-your-code-like-youd-lay-out-your-house-hco)\n\n这篇文章的观点是：**我们不应该根据文件的类型（nature）来划分代码，而是应该根据功能（domain）**。\n\n根据文件类型来划分代码，最经典的模型就是 MVC，Model 放在一个文件夹，View 放在一个文件夹，Controller 放在一个文件夹。坏处就是大部分情况下，当你需要改一个功能的时候，你需要打开 3 个文件夹，修改 3 份会文件。\n\n\u0010[A Better File Structure For React/Redux Applications](https://marmelab.com/blog/2015/12/17/react-directory-structure.html) 这篇文章中提到，React 和 Redux 的官方例子，都是根据文件类型来划分的。比如：\n\n```javascript\nactions/\n    CommandActions.js\n    UserActions.js\ncomponents/\n    Header.js\n    Sidebar.js\n    Command.js\n    CommandList.js\n    CommandItem.js\n    CommandHelper.js\n    User.js\n    UserProfile.js\n    UserAvatar.js\ncontainers/\n    App.js\n    Command.js\n    User.js\nreducers/\n    index.js\n    command.js\n    user.js\nroutes.js\n```\n\n当你加一个 product 功能的时候，你需要在好几个文件夹之间来回穿梭，你最终的改动如下：\n\n```javascript\nactions/\n    CommandActions.js\n    ProductActions.js   <= Here\n    UserActions.js\ncomponents/\n    Header.js\n    Sidebar.js\n    Command.js\n    CommandList.js\n    CommandItem.js\n    CommandHelper.js\n    Product.js          <= Here\n    ProductList.js      <= Here\n    ProductItem.js      <= Here\n    ProductImage.js     <= Here\n    User.js\n    UserProfile.js\n    UserAvatar.js\ncontainers/\n    App.js\n    Command.js\n    Product.js          <= Here\n    User.js\nreducers/\n    index.js\n    foo.js\n    bar.js\n    product.js          <= Here\nroutes.js\n```\n\n由此可见，按照功能划分代码的好处在于：\n\n1. 快速定位。我能快速找到某个 feature 所有的代码。当我想要替换一个函数名的时候，我不需要用搜索整个项目。只需要把这个文件夹下的文件都改好就行。\n2. 更加模块化（modular）。一个组件所有的东西都在一个文件夹里面，它能够作为一个模块被复用。\n\n## Technique\n\n### 如何从文件结构的角度出发，封装好一个组件？\n\n原则如下：\n\n1. 根据 feature 来区分代码，每个 feature 单独一个文件夹，便于快速定位代码在哪里。\n2. 组件里面的文件要扁平化，便于查找。\n3. 命名要清晰、有意义，便于识别。\n\n假如你用 React + Redux，你的组件结构应该是：\n\n```javascript\nproduct/\n    Product.js\n    ProductActions.js\n    ProductList.js\n    ProductItem.js\n    ProductImage.js\n    productReducer.js\n```\n\n假如你用 Angular，你的组件接口应该是：\n\n```javascript\nheros/\n\theroes.component.ts|html|css|spec.ts\n\theroes.module.ts\n\theroes-routing.module.ts\n```\n\n## Share\n\n### 凡是多问一个为什么？\n\n一个人说我觉得xx东西不好。\n\n一篇文章说不应该做xx。\n\n一本书说xx是如何如何。\n\n这些都是观点，是结论。很多人只看结论，不探究结论的合理性，没有问自己为什么是这样，为什么会那样。在聊天的时候，也有人常常引用他人的话来论证他的观点，这种论据其实一点说服力都没有。因为拿一个没有经过证明的论据，去证明一个论点，显然是不成立的。\n\n学一个技术也是如此。很多人说 xx 技术是 best pratice。那么，这些技术为什么是最佳实践，它解决了什么问题，它的好处是什么？这些我们都应该、也必须去探究一下。尽管这会很累。\n\n如果要学得有深度，一定要学会持续发问。每次都敷衍了事，这是自欺欺人。在面试的时候，问题都会暴露地一清二楚。","slug":"2018-07-21-arts","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdx007ifsond1xpzk27","content":"<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h3><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>\n<p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class=\"line\">return [0, 1].</span><br></pre></td></tr></table></figure>\n<p>我拿到题目之后，第一时间想到的解决方法就是用两个循环遍历。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> twoSum1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = nums.length; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[i] + nums[j] === target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [i, j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>结果正确了，但没有通过 Leetcode 的测试，因为执行花费的时间太久了。于是我看了别人的做法，发现有一个方法，可以执行地更快。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> twoSum2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cache = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = nums.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmp = target - nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache[tmp] !== <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> [cache[tmp], i];</span><br><span class=\"line\">    cache[nums[i]] = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于这个方法，我有一个例子，可以和现实生活的场景对应起来理解。</p>\n<blockquote>\n<p>小红和小明在网上预定了一家餐厅的座位。他们两个约定在中午12点去那里吃饭。在去吃饭的路上，小红的手机没电了，他们两个没办法联系上。于是他们不知道谁会先到。假设小红先到了，他会跟那个服务员说，我们预定了一个位置，请问那个人来了吗？如果小明还没来，那个服务员就会让小红提供手机号码或者姓名。确认这个座位就是他们两个定的。确认完之后，小红就可以先进去餐厅的座位上等小明。等小明来了之后，他也会去问那个服务员：我们预定了一个位置，请问那个人来了吗？服务员说有一个人已经来了，在里面等你。也就是说先到的人会去服务员那里登记，那么先去座位上等待另外一个人的到来。</p>\n</blockquote>\n<p>在这个例子中，小红和小明就是我们要找的一对数字，服务员就是缓存 cache，记录是否已经有人先到了。</p>\n<p>好，我们再对比一下性能。我写了一个直观的例子：</p>\n<p><img src=\"http://p2mvd0t5x.bkt.clouddn.com/blog/9y4d9.jpg\" alt=\"image-20180721154313344\"></p>\n<p>因为第一种算法复杂度是 n^2，所以在这个例子中，它的运行次数是 105 次。</p>\n<p>第二种算法的复杂度是 n，所以在这个例子中，它的运行次数只有 15 次。</p>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p><a href=\"https://dev.to/_bigblind/lay-out-your-code-like-youd-lay-out-your-house-hco\" target=\"_blank\" rel=\"noopener\">Lay Out Your Code Like You’d Lay Out Your House</a></p>\n<p>这篇文章的观点是：<strong>我们不应该根据文件的类型（nature）来划分代码，而是应该根据功能（domain）</strong>。</p>\n<p>根据文件类型来划分代码，最经典的模型就是 MVC，Model 放在一个文件夹，View 放在一个文件夹，Controller 放在一个文件夹。坏处就是大部分情况下，当你需要改一个功能的时候，你需要打开 3 个文件夹，修改 3 份会文件。</p>\n<p>\u0010<a href=\"https://marmelab.com/blog/2015/12/17/react-directory-structure.html\" target=\"_blank\" rel=\"noopener\">A Better File Structure For React/Redux Applications</a> 这篇文章中提到，React 和 Redux 的官方例子，都是根据文件类型来划分的。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions/</span><br><span class=\"line\">    CommandActions.js</span><br><span class=\"line\">    UserActions.js</span><br><span class=\"line\">components/</span><br><span class=\"line\">    Header.js</span><br><span class=\"line\">    Sidebar.js</span><br><span class=\"line\">    Command.js</span><br><span class=\"line\">    CommandList.js</span><br><span class=\"line\">    CommandItem.js</span><br><span class=\"line\">    CommandHelper.js</span><br><span class=\"line\">    User.js</span><br><span class=\"line\">    UserProfile.js</span><br><span class=\"line\">    UserAvatar.js</span><br><span class=\"line\">containers/</span><br><span class=\"line\">    App.js</span><br><span class=\"line\">    Command.js</span><br><span class=\"line\">    User.js</span><br><span class=\"line\">reducers/</span><br><span class=\"line\">    index.js</span><br><span class=\"line\">    command.js</span><br><span class=\"line\">    user.js</span><br><span class=\"line\">routes.js</span><br></pre></td></tr></table></figure>\n<p>当你加一个 product 功能的时候，你需要在好几个文件夹之间来回穿梭，你最终的改动如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions/</span><br><span class=\"line\">    CommandActions.js</span><br><span class=\"line\">    ProductActions.js   &lt;= Here</span><br><span class=\"line\">    UserActions.js</span><br><span class=\"line\">components/</span><br><span class=\"line\">    Header.js</span><br><span class=\"line\">    Sidebar.js</span><br><span class=\"line\">    Command.js</span><br><span class=\"line\">    CommandList.js</span><br><span class=\"line\">    CommandItem.js</span><br><span class=\"line\">    CommandHelper.js</span><br><span class=\"line\">    Product.js          &lt;= Here</span><br><span class=\"line\">    ProductList.js      &lt;= Here</span><br><span class=\"line\">    ProductItem.js      &lt;= Here</span><br><span class=\"line\">    ProductImage.js     &lt;= Here</span><br><span class=\"line\">    User.js</span><br><span class=\"line\">    UserProfile.js</span><br><span class=\"line\">    UserAvatar.js</span><br><span class=\"line\">containers/</span><br><span class=\"line\">    App.js</span><br><span class=\"line\">    Command.js</span><br><span class=\"line\">    Product.js          &lt;= Here</span><br><span class=\"line\">    User.js</span><br><span class=\"line\">reducers/</span><br><span class=\"line\">    index.js</span><br><span class=\"line\">    foo.js</span><br><span class=\"line\">    bar.js</span><br><span class=\"line\">    product.js          &lt;= Here</span><br><span class=\"line\">routes.js</span><br></pre></td></tr></table></figure>\n<p>由此可见，按照功能划分代码的好处在于：</p>\n<ol>\n<li>快速定位。我能快速找到某个 feature 所有的代码。当我想要替换一个函数名的时候，我不需要用搜索整个项目。只需要把这个文件夹下的文件都改好就行。</li>\n<li>更加模块化（modular）。一个组件所有的东西都在一个文件夹里面，它能够作为一个模块被复用。</li>\n</ol>\n<h2 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h2><h3 id=\"如何从文件结构的角度出发，封装好一个组件？\"><a href=\"#如何从文件结构的角度出发，封装好一个组件？\" class=\"headerlink\" title=\"如何从文件结构的角度出发，封装好一个组件？\"></a>如何从文件结构的角度出发，封装好一个组件？</h3><p>原则如下：</p>\n<ol>\n<li>根据 feature 来区分代码，每个 feature 单独一个文件夹，便于快速定位代码在哪里。</li>\n<li>组件里面的文件要扁平化，便于查找。</li>\n<li>命名要清晰、有意义，便于识别。</li>\n</ol>\n<p>假如你用 React + Redux，你的组件结构应该是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">product/</span><br><span class=\"line\">    Product.js</span><br><span class=\"line\">    ProductActions.js</span><br><span class=\"line\">    ProductList.js</span><br><span class=\"line\">    ProductItem.js</span><br><span class=\"line\">    ProductImage.js</span><br><span class=\"line\">    productReducer.js</span><br></pre></td></tr></table></figure>\n<p>假如你用 Angular，你的组件接口应该是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heros/</span><br><span class=\"line\">\theroes.component.ts|html|css|spec.ts</span><br><span class=\"line\">\theroes.module.ts</span><br><span class=\"line\">\theroes-routing.module.ts</span><br></pre></td></tr></table></figure>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><h3 id=\"凡是多问一个为什么？\"><a href=\"#凡是多问一个为什么？\" class=\"headerlink\" title=\"凡是多问一个为什么？\"></a>凡是多问一个为什么？</h3><p>一个人说我觉得xx东西不好。</p>\n<p>一篇文章说不应该做xx。</p>\n<p>一本书说xx是如何如何。</p>\n<p>这些都是观点，是结论。很多人只看结论，不探究结论的合理性，没有问自己为什么是这样，为什么会那样。在聊天的时候，也有人常常引用他人的话来论证他的观点，这种论据其实一点说服力都没有。因为拿一个没有经过证明的论据，去证明一个论点，显然是不成立的。</p>\n<p>学一个技术也是如此。很多人说 xx 技术是 best pratice。那么，这些技术为什么是最佳实践，它解决了什么问题，它的好处是什么？这些我们都应该、也必须去探究一下。尽管这会很累。</p>\n<p>如果要学得有深度，一定要学会持续发问。每次都敷衍了事，这是自欺欺人。在面试的时候，问题都会暴露地一清二楚。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h3><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>\n<p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class=\"line\">return [0, 1].</span><br></pre></td></tr></table></figure>\n<p>我拿到题目之后，第一时间想到的解决方法就是用两个循环遍历。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> twoSum1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = nums.length; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[i] + nums[j] === target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [i, j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>结果正确了，但没有通过 Leetcode 的测试，因为执行花费的时间太久了。于是我看了别人的做法，发现有一个方法，可以执行地更快。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> twoSum2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cache = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = nums.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmp = target - nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache[tmp] !== <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> [cache[tmp], i];</span><br><span class=\"line\">    cache[nums[i]] = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于这个方法，我有一个例子，可以和现实生活的场景对应起来理解。</p>\n<blockquote>\n<p>小红和小明在网上预定了一家餐厅的座位。他们两个约定在中午12点去那里吃饭。在去吃饭的路上，小红的手机没电了，他们两个没办法联系上。于是他们不知道谁会先到。假设小红先到了，他会跟那个服务员说，我们预定了一个位置，请问那个人来了吗？如果小明还没来，那个服务员就会让小红提供手机号码或者姓名。确认这个座位就是他们两个定的。确认完之后，小红就可以先进去餐厅的座位上等小明。等小明来了之后，他也会去问那个服务员：我们预定了一个位置，请问那个人来了吗？服务员说有一个人已经来了，在里面等你。也就是说先到的人会去服务员那里登记，那么先去座位上等待另外一个人的到来。</p>\n</blockquote>\n<p>在这个例子中，小红和小明就是我们要找的一对数字，服务员就是缓存 cache，记录是否已经有人先到了。</p>\n<p>好，我们再对比一下性能。我写了一个直观的例子：</p>\n<p><img src=\"http://p2mvd0t5x.bkt.clouddn.com/blog/9y4d9.jpg\" alt=\"image-20180721154313344\"></p>\n<p>因为第一种算法复杂度是 n^2，所以在这个例子中，它的运行次数是 105 次。</p>\n<p>第二种算法的复杂度是 n，所以在这个例子中，它的运行次数只有 15 次。</p>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p><a href=\"https://dev.to/_bigblind/lay-out-your-code-like-youd-lay-out-your-house-hco\" target=\"_blank\" rel=\"noopener\">Lay Out Your Code Like You’d Lay Out Your House</a></p>\n<p>这篇文章的观点是：<strong>我们不应该根据文件的类型（nature）来划分代码，而是应该根据功能（domain）</strong>。</p>\n<p>根据文件类型来划分代码，最经典的模型就是 MVC，Model 放在一个文件夹，View 放在一个文件夹，Controller 放在一个文件夹。坏处就是大部分情况下，当你需要改一个功能的时候，你需要打开 3 个文件夹，修改 3 份会文件。</p>\n<p>\u0010<a href=\"https://marmelab.com/blog/2015/12/17/react-directory-structure.html\" target=\"_blank\" rel=\"noopener\">A Better File Structure For React/Redux Applications</a> 这篇文章中提到，React 和 Redux 的官方例子，都是根据文件类型来划分的。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions/</span><br><span class=\"line\">    CommandActions.js</span><br><span class=\"line\">    UserActions.js</span><br><span class=\"line\">components/</span><br><span class=\"line\">    Header.js</span><br><span class=\"line\">    Sidebar.js</span><br><span class=\"line\">    Command.js</span><br><span class=\"line\">    CommandList.js</span><br><span class=\"line\">    CommandItem.js</span><br><span class=\"line\">    CommandHelper.js</span><br><span class=\"line\">    User.js</span><br><span class=\"line\">    UserProfile.js</span><br><span class=\"line\">    UserAvatar.js</span><br><span class=\"line\">containers/</span><br><span class=\"line\">    App.js</span><br><span class=\"line\">    Command.js</span><br><span class=\"line\">    User.js</span><br><span class=\"line\">reducers/</span><br><span class=\"line\">    index.js</span><br><span class=\"line\">    command.js</span><br><span class=\"line\">    user.js</span><br><span class=\"line\">routes.js</span><br></pre></td></tr></table></figure>\n<p>当你加一个 product 功能的时候，你需要在好几个文件夹之间来回穿梭，你最终的改动如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions/</span><br><span class=\"line\">    CommandActions.js</span><br><span class=\"line\">    ProductActions.js   &lt;= Here</span><br><span class=\"line\">    UserActions.js</span><br><span class=\"line\">components/</span><br><span class=\"line\">    Header.js</span><br><span class=\"line\">    Sidebar.js</span><br><span class=\"line\">    Command.js</span><br><span class=\"line\">    CommandList.js</span><br><span class=\"line\">    CommandItem.js</span><br><span class=\"line\">    CommandHelper.js</span><br><span class=\"line\">    Product.js          &lt;= Here</span><br><span class=\"line\">    ProductList.js      &lt;= Here</span><br><span class=\"line\">    ProductItem.js      &lt;= Here</span><br><span class=\"line\">    ProductImage.js     &lt;= Here</span><br><span class=\"line\">    User.js</span><br><span class=\"line\">    UserProfile.js</span><br><span class=\"line\">    UserAvatar.js</span><br><span class=\"line\">containers/</span><br><span class=\"line\">    App.js</span><br><span class=\"line\">    Command.js</span><br><span class=\"line\">    Product.js          &lt;= Here</span><br><span class=\"line\">    User.js</span><br><span class=\"line\">reducers/</span><br><span class=\"line\">    index.js</span><br><span class=\"line\">    foo.js</span><br><span class=\"line\">    bar.js</span><br><span class=\"line\">    product.js          &lt;= Here</span><br><span class=\"line\">routes.js</span><br></pre></td></tr></table></figure>\n<p>由此可见，按照功能划分代码的好处在于：</p>\n<ol>\n<li>快速定位。我能快速找到某个 feature 所有的代码。当我想要替换一个函数名的时候，我不需要用搜索整个项目。只需要把这个文件夹下的文件都改好就行。</li>\n<li>更加模块化（modular）。一个组件所有的东西都在一个文件夹里面，它能够作为一个模块被复用。</li>\n</ol>\n<h2 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h2><h3 id=\"如何从文件结构的角度出发，封装好一个组件？\"><a href=\"#如何从文件结构的角度出发，封装好一个组件？\" class=\"headerlink\" title=\"如何从文件结构的角度出发，封装好一个组件？\"></a>如何从文件结构的角度出发，封装好一个组件？</h3><p>原则如下：</p>\n<ol>\n<li>根据 feature 来区分代码，每个 feature 单独一个文件夹，便于快速定位代码在哪里。</li>\n<li>组件里面的文件要扁平化，便于查找。</li>\n<li>命名要清晰、有意义，便于识别。</li>\n</ol>\n<p>假如你用 React + Redux，你的组件结构应该是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">product/</span><br><span class=\"line\">    Product.js</span><br><span class=\"line\">    ProductActions.js</span><br><span class=\"line\">    ProductList.js</span><br><span class=\"line\">    ProductItem.js</span><br><span class=\"line\">    ProductImage.js</span><br><span class=\"line\">    productReducer.js</span><br></pre></td></tr></table></figure>\n<p>假如你用 Angular，你的组件接口应该是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heros/</span><br><span class=\"line\">\theroes.component.ts|html|css|spec.ts</span><br><span class=\"line\">\theroes.module.ts</span><br><span class=\"line\">\theroes-routing.module.ts</span><br></pre></td></tr></table></figure>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><h3 id=\"凡是多问一个为什么？\"><a href=\"#凡是多问一个为什么？\" class=\"headerlink\" title=\"凡是多问一个为什么？\"></a>凡是多问一个为什么？</h3><p>一个人说我觉得xx东西不好。</p>\n<p>一篇文章说不应该做xx。</p>\n<p>一本书说xx是如何如何。</p>\n<p>这些都是观点，是结论。很多人只看结论，不探究结论的合理性，没有问自己为什么是这样，为什么会那样。在聊天的时候，也有人常常引用他人的话来论证他的观点，这种论据其实一点说服力都没有。因为拿一个没有经过证明的论据，去证明一个论点，显然是不成立的。</p>\n<p>学一个技术也是如此。很多人说 xx 技术是 best pratice。那么，这些技术为什么是最佳实践，它解决了什么问题，它的好处是什么？这些我们都应该、也必须去探究一下。尽管这会很累。</p>\n<p>如果要学得有深度，一定要学会持续发问。每次都敷衍了事，这是自欺欺人。在面试的时候，问题都会暴露地一清二楚。</p>\n"},{"title":"ARTS 4","_content":"\n关键词：`Add Linked List`，`React Router`\n\n## Algorithm\n\nProblem:\n\n> You are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order** and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n>\n> You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n>\n> **Example:**\n>\n> ```\n> Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\n> Output: 7 -> 0 -> 8\n> Explanation: 342 + 465 = 807.\n> ```\n\n我想到的两个解题思路：\n\n> 第一种：\n>\n> // 遍历 L1，把所有的结果，一个一个push到一个数组里面\n>\n> // 遍历 L2，把所有的结果，一个一个push到一个数组里面\n>\n> // 两个数组 reverse，join，得到两个数字的字符串\n>\n> // 两个字符串转成数字，相加。结果转成字符串，split，reverse\n>\n> // 把数组转成linked list\n>\n> ------\n>\n> 第二种：\n>\n> // 遍历 L1、L2，判断他们中有一个 next 不为空\n>\n> // 如果都有，两个数相加，如果大于10，留下证据，给下个数加一，否认只把他们两个相加\n>\n> // 把结果放到新的linked list中\n\n实现第一种解法的代码：\n\n```javascript\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n  const arr1 = [];\n  const arr2 = [];\n  while(l1) {\n    arr1.push(l1.val);\n    l1 = l1.next;\n  }\n  while(l2) {\n    arr2.push(l2.val);\n    l2 = l2.next;\n  }\n  const num1 = Number(arr1.reverse().join(''));\n  const num2 = Number(arr2.reverse().join(''));\n  const num_ret = num1 + num2;\n  const arr_ret = String(num_ret).split('');\n  let head = null;\n  let currentNode = null;\n  let currentVal = arr_ret.pop();\n  while(currentVal !== undefined) {\n    let nextNode = new ListNode(Number(currentVal))\n    if (!head) {\n      head = nextNode;\n    } else {\n      currentNode.next = nextNode;\n    }\n    currentNode = nextNode;\n    currentVal = arr_ret.pop();\n  }\n  return head;\n};\n\n```\n\n可惜的是，这个没有通过测试，因为在大数字的情况下，会溢出。\n\n![image-20180728164426795](/var/folders/6r/c8wvq4dx5272kq7bc1mmddd00000gn/T/abnerworks.Typora/image-20180728164426795.png)\n\n实现第二种解法的代码：\n\n```javascript\nvar addTwoNumbers = function(l1, l2) {\n  let add = 0;\n  let head = null;\n  let currentNode = null;\n\n  while(l1 || l2) {\n    const a = l1 ? l1.val : 0;\n    const b = l2 ? l2.val : 0;\n    const sum = a + b + add;\n\n    add = ~~(sum / 10);\n\n    const nextNode = new ListNode(~~(sum % 10));\n\n    if (!head) {\n      head = nextNode;\n      currentNode = head;\n    } else {\n      currentNode.next = nextNode;\n      currentNode = nextNode;\n    }\n\n    if (l1) {\n      l1 = l1.next;    \n    }\n     \n    if (l2) {\n      l2 = l2.next;\n    }\n  }\n\n  if (add) {\n    currentNode.next = new ListNode(add);\n  }\n\n  return head;\n}\n```\n\n从中我还知道了一个事情，在 leetcode 提交最终代码时，代码里面不能有 log，不然无法通过测试。我一开始还以为是我代码的原因，后来才发现这个是这个原因。\n\n## Review\n\n我想了解一下 React Router 的实现原理是什么。我阅读这篇非常棒的文章。\n\n[Build your own React Router v4](https://tylermcginnis.com/build-your-own-react-router-v4/)\n\n以下是我一遍阅读，一遍整理的笔记。\n\n------\n\nLink and Route \n\n- Link component allows you to update the URL\n- Route component changes your UI based on that new URL\n\nRoute 接收4个参数 \n\n- exact，是不是完全和 location.pathname 一样\n- path：目标路由，不是必须的，不填就表示 component 会被渲染的\n- component：匹配到目标路由时，显示此组件，不是必须的，因为你还可以使用 render 参数去渲染 html\n- render：渲染 html 的另外一种方式\n\n改变路由的两种可能 \n\n- 点击锚点\n- 点击前进/后退按钮\n\n当路由改变的时候，如果 path 匹配到了，Route 对应的 component 要更新，所以我们应该监听路由的变化。如何监听呢？ \n\n- 监听 HTML5 的 popstate event\n\n监听到变化之后，Route 对应的组件如何更新？ \n\n- 调用 forceUpdate 方法\n\n为什么用锚点调整路径（并非是改变哈希），页面不会跳转呢？ \n\n- 因为点击锚点用了 onClick，而 onClick 函数里面拦截了锚点的默认行为，也就是调用了 preventDefault 函数\n\n如果用 js 改变路由？ \n\n- 调用 HTML5 的 pushState 和 replaceState\n\n为什么说 React Router 的 API 是 Just Components？ \n\n- 因为 React router 都是用 React component 来实现的。比如，Link、Route 都是 React 组件。实现 React router 就相当于那 React 来实现业务代码一样。同样的，写 React 应用也应该坚持这样的 Just components 的原则，这会让你成为一个更好的 React developer。\n- 看完这篇文章，我也越来越喜欢 React 了\n\n## Technique\n\n我觉得用 MVVM 框架写代码时，最重要的原则是坚持区分 Container Component 和 Presentational Component。\n\n组件的分类有哪些？ \n\n- 只有两种，容器组件或者展示组件。\n\n容器组件的职责是什么？ \n\n- 拉数据\n- 诸如各种services\n- 把数据塞给展示组件\n\n展示组件的职责是什么？ \n\n- 跟外界的交流只有两个通道，Input和Output，没有和数据相关的services注入，不拉取数据\n- Input接受容器组件塞进来的数据\n- Output触发容器组件塞进来的方法\n\n为什么要分成容器组件和展示组件？ \n\n- 让展示组件可以被更多地方，更容易的复用\n- 代码的简洁性、可读性将大大增强。\n\n有一句话说的非常好： **presentational component 和 container component 的区别不在于技术上，而是在于目的上**\n\n## Share\n\n**动手写代码之前，先把实现方案写下来。**\n\n好处有：\n\n1. 给自己一个明确的地图，知道接下来要去哪里，要怎么走。\n2. 有机会发现自己的漏掉\n3. 帮大脑清空缓存，不在惦记着所有细节和注意事项\n4. 让别人 review 设计方案，早发现早治疗\n\n做正确的事情比把事情做好更重要！","source":"_posts/2018-07-28-arts.md","raw":"---\ntitle: ARTS 4\ncategories: ARTS\n---\n\n关键词：`Add Linked List`，`React Router`\n\n## Algorithm\n\nProblem:\n\n> You are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order** and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n>\n> You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n>\n> **Example:**\n>\n> ```\n> Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\n> Output: 7 -> 0 -> 8\n> Explanation: 342 + 465 = 807.\n> ```\n\n我想到的两个解题思路：\n\n> 第一种：\n>\n> // 遍历 L1，把所有的结果，一个一个push到一个数组里面\n>\n> // 遍历 L2，把所有的结果，一个一个push到一个数组里面\n>\n> // 两个数组 reverse，join，得到两个数字的字符串\n>\n> // 两个字符串转成数字，相加。结果转成字符串，split，reverse\n>\n> // 把数组转成linked list\n>\n> ------\n>\n> 第二种：\n>\n> // 遍历 L1、L2，判断他们中有一个 next 不为空\n>\n> // 如果都有，两个数相加，如果大于10，留下证据，给下个数加一，否认只把他们两个相加\n>\n> // 把结果放到新的linked list中\n\n实现第一种解法的代码：\n\n```javascript\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n  const arr1 = [];\n  const arr2 = [];\n  while(l1) {\n    arr1.push(l1.val);\n    l1 = l1.next;\n  }\n  while(l2) {\n    arr2.push(l2.val);\n    l2 = l2.next;\n  }\n  const num1 = Number(arr1.reverse().join(''));\n  const num2 = Number(arr2.reverse().join(''));\n  const num_ret = num1 + num2;\n  const arr_ret = String(num_ret).split('');\n  let head = null;\n  let currentNode = null;\n  let currentVal = arr_ret.pop();\n  while(currentVal !== undefined) {\n    let nextNode = new ListNode(Number(currentVal))\n    if (!head) {\n      head = nextNode;\n    } else {\n      currentNode.next = nextNode;\n    }\n    currentNode = nextNode;\n    currentVal = arr_ret.pop();\n  }\n  return head;\n};\n\n```\n\n可惜的是，这个没有通过测试，因为在大数字的情况下，会溢出。\n\n![image-20180728164426795](/var/folders/6r/c8wvq4dx5272kq7bc1mmddd00000gn/T/abnerworks.Typora/image-20180728164426795.png)\n\n实现第二种解法的代码：\n\n```javascript\nvar addTwoNumbers = function(l1, l2) {\n  let add = 0;\n  let head = null;\n  let currentNode = null;\n\n  while(l1 || l2) {\n    const a = l1 ? l1.val : 0;\n    const b = l2 ? l2.val : 0;\n    const sum = a + b + add;\n\n    add = ~~(sum / 10);\n\n    const nextNode = new ListNode(~~(sum % 10));\n\n    if (!head) {\n      head = nextNode;\n      currentNode = head;\n    } else {\n      currentNode.next = nextNode;\n      currentNode = nextNode;\n    }\n\n    if (l1) {\n      l1 = l1.next;    \n    }\n     \n    if (l2) {\n      l2 = l2.next;\n    }\n  }\n\n  if (add) {\n    currentNode.next = new ListNode(add);\n  }\n\n  return head;\n}\n```\n\n从中我还知道了一个事情，在 leetcode 提交最终代码时，代码里面不能有 log，不然无法通过测试。我一开始还以为是我代码的原因，后来才发现这个是这个原因。\n\n## Review\n\n我想了解一下 React Router 的实现原理是什么。我阅读这篇非常棒的文章。\n\n[Build your own React Router v4](https://tylermcginnis.com/build-your-own-react-router-v4/)\n\n以下是我一遍阅读，一遍整理的笔记。\n\n------\n\nLink and Route \n\n- Link component allows you to update the URL\n- Route component changes your UI based on that new URL\n\nRoute 接收4个参数 \n\n- exact，是不是完全和 location.pathname 一样\n- path：目标路由，不是必须的，不填就表示 component 会被渲染的\n- component：匹配到目标路由时，显示此组件，不是必须的，因为你还可以使用 render 参数去渲染 html\n- render：渲染 html 的另外一种方式\n\n改变路由的两种可能 \n\n- 点击锚点\n- 点击前进/后退按钮\n\n当路由改变的时候，如果 path 匹配到了，Route 对应的 component 要更新，所以我们应该监听路由的变化。如何监听呢？ \n\n- 监听 HTML5 的 popstate event\n\n监听到变化之后，Route 对应的组件如何更新？ \n\n- 调用 forceUpdate 方法\n\n为什么用锚点调整路径（并非是改变哈希），页面不会跳转呢？ \n\n- 因为点击锚点用了 onClick，而 onClick 函数里面拦截了锚点的默认行为，也就是调用了 preventDefault 函数\n\n如果用 js 改变路由？ \n\n- 调用 HTML5 的 pushState 和 replaceState\n\n为什么说 React Router 的 API 是 Just Components？ \n\n- 因为 React router 都是用 React component 来实现的。比如，Link、Route 都是 React 组件。实现 React router 就相当于那 React 来实现业务代码一样。同样的，写 React 应用也应该坚持这样的 Just components 的原则，这会让你成为一个更好的 React developer。\n- 看完这篇文章，我也越来越喜欢 React 了\n\n## Technique\n\n我觉得用 MVVM 框架写代码时，最重要的原则是坚持区分 Container Component 和 Presentational Component。\n\n组件的分类有哪些？ \n\n- 只有两种，容器组件或者展示组件。\n\n容器组件的职责是什么？ \n\n- 拉数据\n- 诸如各种services\n- 把数据塞给展示组件\n\n展示组件的职责是什么？ \n\n- 跟外界的交流只有两个通道，Input和Output，没有和数据相关的services注入，不拉取数据\n- Input接受容器组件塞进来的数据\n- Output触发容器组件塞进来的方法\n\n为什么要分成容器组件和展示组件？ \n\n- 让展示组件可以被更多地方，更容易的复用\n- 代码的简洁性、可读性将大大增强。\n\n有一句话说的非常好： **presentational component 和 container component 的区别不在于技术上，而是在于目的上**\n\n## Share\n\n**动手写代码之前，先把实现方案写下来。**\n\n好处有：\n\n1. 给自己一个明确的地图，知道接下来要去哪里，要怎么走。\n2. 有机会发现自己的漏掉\n3. 帮大脑清空缓存，不在惦记着所有细节和注意事项\n4. 让别人 review 设计方案，早发现早治疗\n\n做正确的事情比把事情做好更重要！","slug":"2018-07-28-arts","published":1,"date":"2018-07-28T15:19:58.000Z","updated":"2018-07-28T15:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdy007lfsonyc9ajruu","content":"<p>关键词：<code>Add Linked List</code>，<code>React Router</code></p>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p>Problem:</p>\n<blockquote>\n<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">&gt; Output: 7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">&gt; Explanation: 342 + 465 = 807.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>我想到的两个解题思路：</p>\n<blockquote>\n<p>第一种：</p>\n<p>// 遍历 L1，把所有的结果，一个一个push到一个数组里面</p>\n<p>// 遍历 L2，把所有的结果，一个一个push到一个数组里面</p>\n<p>// 两个数组 reverse，join，得到两个数字的字符串</p>\n<p>// 两个字符串转成数字，相加。结果转成字符串，split，reverse</p>\n<p>// 把数组转成linked list</p>\n<hr>\n<p>第二种：</p>\n<p>// 遍历 L1、L2，判断他们中有一个 next 不为空</p>\n<p>// 如果都有，两个数相加，如果大于10，留下证据，给下个数加一，否认只把他们两个相加</p>\n<p>// 把结果放到新的linked list中</p>\n</blockquote>\n<p>实现第一种解法的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; l1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; l2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addTwoNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr1 = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr2 = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l1) &#123;</span><br><span class=\"line\">    arr1.push(l1.val);</span><br><span class=\"line\">    l1 = l1.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l2) &#123;</span><br><span class=\"line\">    arr2.push(l2.val);</span><br><span class=\"line\">    l2 = l2.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> num1 = <span class=\"built_in\">Number</span>(arr1.reverse().join(<span class=\"string\">''</span>));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> num2 = <span class=\"built_in\">Number</span>(arr2.reverse().join(<span class=\"string\">''</span>));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> num_ret = num1 + num2;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr_ret = <span class=\"built_in\">String</span>(num_ret).split(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentVal = arr_ret.pop();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(currentVal !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextNode = <span class=\"keyword\">new</span> ListNode(<span class=\"built_in\">Number</span>(currentVal))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">      head = nextNode;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      currentNode.next = nextNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentNode = nextNode;</span><br><span class=\"line\">    currentVal = arr_ret.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可惜的是，这个没有通过测试，因为在大数字的情况下，会溢出。</p>\n<p><img src=\"/var/folders/6r/c8wvq4dx5272kq7bc1mmddd00000gn/T/abnerworks.Typora/image-20180728164426795.png\" alt=\"image-20180728164426795\"></p>\n<p>实现第二种解法的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addTwoNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> add = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l1 || l2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = l1 ? l1.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = l2 ? l2.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sum = a + b + add;</span><br><span class=\"line\"></span><br><span class=\"line\">    add = ~~(sum / <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextNode = <span class=\"keyword\">new</span> ListNode(~~(sum % <span class=\"number\">10</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">      head = nextNode;</span><br><span class=\"line\">      currentNode = head;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      currentNode.next = nextNode;</span><br><span class=\"line\">      currentNode = nextNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1) &#123;</span><br><span class=\"line\">      l1 = l1.next;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l2) &#123;</span><br><span class=\"line\">      l2 = l2.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (add) &#123;</span><br><span class=\"line\">    currentNode.next = <span class=\"keyword\">new</span> ListNode(add);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从中我还知道了一个事情，在 leetcode 提交最终代码时，代码里面不能有 log，不然无法通过测试。我一开始还以为是我代码的原因，后来才发现这个是这个原因。</p>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p>我想了解一下 React Router 的实现原理是什么。我阅读这篇非常棒的文章。</p>\n<p><a href=\"https://tylermcginnis.com/build-your-own-react-router-v4/\" target=\"_blank\" rel=\"noopener\">Build your own React Router v4</a></p>\n<p>以下是我一遍阅读，一遍整理的笔记。</p>\n<hr>\n<p>Link and Route </p>\n<ul>\n<li>Link component allows you to update the URL</li>\n<li>Route component changes your UI based on that new URL</li>\n</ul>\n<p>Route 接收4个参数 </p>\n<ul>\n<li>exact，是不是完全和 location.pathname 一样</li>\n<li>path：目标路由，不是必须的，不填就表示 component 会被渲染的</li>\n<li>component：匹配到目标路由时，显示此组件，不是必须的，因为你还可以使用 render 参数去渲染 html</li>\n<li>render：渲染 html 的另外一种方式</li>\n</ul>\n<p>改变路由的两种可能 </p>\n<ul>\n<li>点击锚点</li>\n<li>点击前进/后退按钮</li>\n</ul>\n<p>当路由改变的时候，如果 path 匹配到了，Route 对应的 component 要更新，所以我们应该监听路由的变化。如何监听呢？ </p>\n<ul>\n<li>监听 HTML5 的 popstate event</li>\n</ul>\n<p>监听到变化之后，Route 对应的组件如何更新？ </p>\n<ul>\n<li>调用 forceUpdate 方法</li>\n</ul>\n<p>为什么用锚点调整路径（并非是改变哈希），页面不会跳转呢？ </p>\n<ul>\n<li>因为点击锚点用了 onClick，而 onClick 函数里面拦截了锚点的默认行为，也就是调用了 preventDefault 函数</li>\n</ul>\n<p>如果用 js 改变路由？ </p>\n<ul>\n<li>调用 HTML5 的 pushState 和 replaceState</li>\n</ul>\n<p>为什么说 React Router 的 API 是 Just Components？ </p>\n<ul>\n<li>因为 React router 都是用 React component 来实现的。比如，Link、Route 都是 React 组件。实现 React router 就相当于那 React 来实现业务代码一样。同样的，写 React 应用也应该坚持这样的 Just components 的原则，这会让你成为一个更好的 React developer。</li>\n<li>看完这篇文章，我也越来越喜欢 React 了</li>\n</ul>\n<h2 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h2><p>我觉得用 MVVM 框架写代码时，最重要的原则是坚持区分 Container Component 和 Presentational Component。</p>\n<p>组件的分类有哪些？ </p>\n<ul>\n<li>只有两种，容器组件或者展示组件。</li>\n</ul>\n<p>容器组件的职责是什么？ </p>\n<ul>\n<li>拉数据</li>\n<li>诸如各种services</li>\n<li>把数据塞给展示组件</li>\n</ul>\n<p>展示组件的职责是什么？ </p>\n<ul>\n<li>跟外界的交流只有两个通道，Input和Output，没有和数据相关的services注入，不拉取数据</li>\n<li>Input接受容器组件塞进来的数据</li>\n<li>Output触发容器组件塞进来的方法</li>\n</ul>\n<p>为什么要分成容器组件和展示组件？ </p>\n<ul>\n<li>让展示组件可以被更多地方，更容易的复用</li>\n<li>代码的简洁性、可读性将大大增强。</li>\n</ul>\n<p>有一句话说的非常好： <strong>presentational component 和 container component 的区别不在于技术上，而是在于目的上</strong></p>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><p><strong>动手写代码之前，先把实现方案写下来。</strong></p>\n<p>好处有：</p>\n<ol>\n<li>给自己一个明确的地图，知道接下来要去哪里，要怎么走。</li>\n<li>有机会发现自己的漏掉</li>\n<li>帮大脑清空缓存，不在惦记着所有细节和注意事项</li>\n<li>让别人 review 设计方案，早发现早治疗</li>\n</ol>\n<p>做正确的事情比把事情做好更重要！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关键词：<code>Add Linked List</code>，<code>React Router</code></p>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p>Problem:</p>\n<blockquote>\n<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">&gt; Output: 7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">&gt; Explanation: 342 + 465 = 807.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>我想到的两个解题思路：</p>\n<blockquote>\n<p>第一种：</p>\n<p>// 遍历 L1，把所有的结果，一个一个push到一个数组里面</p>\n<p>// 遍历 L2，把所有的结果，一个一个push到一个数组里面</p>\n<p>// 两个数组 reverse，join，得到两个数字的字符串</p>\n<p>// 两个字符串转成数字，相加。结果转成字符串，split，reverse</p>\n<p>// 把数组转成linked list</p>\n<hr>\n<p>第二种：</p>\n<p>// 遍历 L1、L2，判断他们中有一个 next 不为空</p>\n<p>// 如果都有，两个数相加，如果大于10，留下证据，给下个数加一，否认只把他们两个相加</p>\n<p>// 把结果放到新的linked list中</p>\n</blockquote>\n<p>实现第一种解法的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; l1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ListNode&#125; l2</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;ListNode&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addTwoNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr1 = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr2 = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l1) &#123;</span><br><span class=\"line\">    arr1.push(l1.val);</span><br><span class=\"line\">    l1 = l1.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l2) &#123;</span><br><span class=\"line\">    arr2.push(l2.val);</span><br><span class=\"line\">    l2 = l2.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> num1 = <span class=\"built_in\">Number</span>(arr1.reverse().join(<span class=\"string\">''</span>));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> num2 = <span class=\"built_in\">Number</span>(arr2.reverse().join(<span class=\"string\">''</span>));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> num_ret = num1 + num2;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr_ret = <span class=\"built_in\">String</span>(num_ret).split(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentVal = arr_ret.pop();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(currentVal !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextNode = <span class=\"keyword\">new</span> ListNode(<span class=\"built_in\">Number</span>(currentVal))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">      head = nextNode;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      currentNode.next = nextNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentNode = nextNode;</span><br><span class=\"line\">    currentVal = arr_ret.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可惜的是，这个没有通过测试，因为在大数字的情况下，会溢出。</p>\n<p><img src=\"/var/folders/6r/c8wvq4dx5272kq7bc1mmddd00000gn/T/abnerworks.Typora/image-20180728164426795.png\" alt=\"image-20180728164426795\"></p>\n<p>实现第二种解法的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addTwoNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> add = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l1 || l2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = l1 ? l1.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = l2 ? l2.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sum = a + b + add;</span><br><span class=\"line\"></span><br><span class=\"line\">    add = ~~(sum / <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextNode = <span class=\"keyword\">new</span> ListNode(~~(sum % <span class=\"number\">10</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">      head = nextNode;</span><br><span class=\"line\">      currentNode = head;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      currentNode.next = nextNode;</span><br><span class=\"line\">      currentNode = nextNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1) &#123;</span><br><span class=\"line\">      l1 = l1.next;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l2) &#123;</span><br><span class=\"line\">      l2 = l2.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (add) &#123;</span><br><span class=\"line\">    currentNode.next = <span class=\"keyword\">new</span> ListNode(add);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从中我还知道了一个事情，在 leetcode 提交最终代码时，代码里面不能有 log，不然无法通过测试。我一开始还以为是我代码的原因，后来才发现这个是这个原因。</p>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p>我想了解一下 React Router 的实现原理是什么。我阅读这篇非常棒的文章。</p>\n<p><a href=\"https://tylermcginnis.com/build-your-own-react-router-v4/\" target=\"_blank\" rel=\"noopener\">Build your own React Router v4</a></p>\n<p>以下是我一遍阅读，一遍整理的笔记。</p>\n<hr>\n<p>Link and Route </p>\n<ul>\n<li>Link component allows you to update the URL</li>\n<li>Route component changes your UI based on that new URL</li>\n</ul>\n<p>Route 接收4个参数 </p>\n<ul>\n<li>exact，是不是完全和 location.pathname 一样</li>\n<li>path：目标路由，不是必须的，不填就表示 component 会被渲染的</li>\n<li>component：匹配到目标路由时，显示此组件，不是必须的，因为你还可以使用 render 参数去渲染 html</li>\n<li>render：渲染 html 的另外一种方式</li>\n</ul>\n<p>改变路由的两种可能 </p>\n<ul>\n<li>点击锚点</li>\n<li>点击前进/后退按钮</li>\n</ul>\n<p>当路由改变的时候，如果 path 匹配到了，Route 对应的 component 要更新，所以我们应该监听路由的变化。如何监听呢？ </p>\n<ul>\n<li>监听 HTML5 的 popstate event</li>\n</ul>\n<p>监听到变化之后，Route 对应的组件如何更新？ </p>\n<ul>\n<li>调用 forceUpdate 方法</li>\n</ul>\n<p>为什么用锚点调整路径（并非是改变哈希），页面不会跳转呢？ </p>\n<ul>\n<li>因为点击锚点用了 onClick，而 onClick 函数里面拦截了锚点的默认行为，也就是调用了 preventDefault 函数</li>\n</ul>\n<p>如果用 js 改变路由？ </p>\n<ul>\n<li>调用 HTML5 的 pushState 和 replaceState</li>\n</ul>\n<p>为什么说 React Router 的 API 是 Just Components？ </p>\n<ul>\n<li>因为 React router 都是用 React component 来实现的。比如，Link、Route 都是 React 组件。实现 React router 就相当于那 React 来实现业务代码一样。同样的，写 React 应用也应该坚持这样的 Just components 的原则，这会让你成为一个更好的 React developer。</li>\n<li>看完这篇文章，我也越来越喜欢 React 了</li>\n</ul>\n<h2 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h2><p>我觉得用 MVVM 框架写代码时，最重要的原则是坚持区分 Container Component 和 Presentational Component。</p>\n<p>组件的分类有哪些？ </p>\n<ul>\n<li>只有两种，容器组件或者展示组件。</li>\n</ul>\n<p>容器组件的职责是什么？ </p>\n<ul>\n<li>拉数据</li>\n<li>诸如各种services</li>\n<li>把数据塞给展示组件</li>\n</ul>\n<p>展示组件的职责是什么？ </p>\n<ul>\n<li>跟外界的交流只有两个通道，Input和Output，没有和数据相关的services注入，不拉取数据</li>\n<li>Input接受容器组件塞进来的数据</li>\n<li>Output触发容器组件塞进来的方法</li>\n</ul>\n<p>为什么要分成容器组件和展示组件？ </p>\n<ul>\n<li>让展示组件可以被更多地方，更容易的复用</li>\n<li>代码的简洁性、可读性将大大增强。</li>\n</ul>\n<p>有一句话说的非常好： <strong>presentational component 和 container component 的区别不在于技术上，而是在于目的上</strong></p>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><p><strong>动手写代码之前，先把实现方案写下来。</strong></p>\n<p>好处有：</p>\n<ol>\n<li>给自己一个明确的地图，知道接下来要去哪里，要怎么走。</li>\n<li>有机会发现自己的漏掉</li>\n<li>帮大脑清空缓存，不在惦记着所有细节和注意事项</li>\n<li>让别人 review 设计方案，早发现早治疗</li>\n</ol>\n<p>做正确的事情比把事情做好更重要！</p>\n"},{"title":"ARTS 5","_content":"\n关键词：`Longest substring`, `Anti-if`, `Thinking`, `attention`\n\n\n## Algorithm\n\nProblem:\n\n> Given a string, find the length of the **longest substring** without repeating characters.\n>\n> **Examples:**\n>\n> Given `\"abcabcbb\"`, the answer is `\"abc\"`, which the length is 3.\n>\n> Given `\"bbbbb\"`, the answer is `\"b\"`, with the length of 1.\n>\n> Given `\"pwwkew\"`, the answer is `\"wke\"`, with the length of 3. Note that the answer must be a **substring**, `\"pwke\"` is a *subsequence*and not a substring.\n\nSolution:\n\n```javascript\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n  let count = 0;\n  let target = '';\n  let temp = '';\n  const length = s.length;\n  if (length > 0 && s.trim().length == 0) {\n    return 1;\n  }\n  for (let char of s) {\n    if (target.length > temp.length + (length - count)) {\n      break;\n    }\n    if (temp.includes(char)) {\n      const idx = temp.indexOf(char);\n      temp = temp.slice(idx + 1) + char;\n    } else {\n      temp += char;\n    }\n    if (target.length < temp.length) {\n      target = temp;\n    }\n    count++\n  }\n  return target.length;\n};\n```\n\n结果：\n\n![image-20180804143856623](http://p2mvd0t5x.bkt.clouddn.com/blog/fve78.jpg)\n\n一开始的思路就是正确的，不过后面有很多 case 没有通过，一步一步完善到这个版本。\n\n## Review\n\n[Anti-If: The missing patterns](https://code.joejag.com/2016/anti-if-the-missing-patterns.html)\n\n### 评论\n\n If 语句很重要，也有很多好处。是写程序不可获取的一个语法。\n\n不过，If 语句的滥用会导致一些问题。什么是 If 语句的滥用。一个函数里面多个 if 语句、多个 if 语句嵌套。使用 switch  也是。那些问题是什么呢？\n\n1. If 语句里面的代码，容易膨胀，会越来越多，可读性越来越差，复杂度越来越高。\n2. 多个 If 语句、多个 If 语句嵌套会让代码读起来更加吃力。你需要在脑中模拟整个过程，这是一个相当消耗脑力资源的方式。大脑的能量是用来思考、解决问题的，而不是用来在脑中「跑」代码的。在阅读代码的时候，消耗太多脑力是一种浪费。\n3. If 语句会导致无关紧要的代码增多，有时候 If 语句里面甚至会有 return 语句，这个会直接让函数不再执行后面。这些问题会导致你无法快速理清楚一个函数的主干逻辑，每个函数都有一个主干逻辑，这是最重要的部分，被无关紧要的代码干扰之后，可读性就差了。\n\n所以，当你的代码出现很多 If 或者 If 嵌套时，你就要警惕了。\n\n作者还举例几个例子，非常有实操性。我认为有用的如下：\n\n1. 如果一个函数用布尔值判断，执行两个不同的函数。那么，布尔值干掉。写成两个单独的函数。\n2. 考虑用多态继承替代 switch 语句。\n3. 多个 if 语句，用一个表达式解决。\n4. 函数的参数，不用 if 判断有效性，而是用默认值。\n\n## Technique\n\n**Thinking deeply before coding**\n\n写一个功能之前，先在脑中思考要做的东西是什么。把所有的细节都模拟一遍。不要太着急于接受这个过程。多探索一下其他的可能性。为什么呢？\n\n1. 我可能会想到很多关联的事情，其中也有这个功能以外的知识。这样一个流程下来，我的收获会更多。\n2. 细节都想清楚了，做起事情来，有条有理。\n3. 合理规划开发进度。因为你已经清楚地知道哪里可能有坑、哪里更花时间。\n\n这个技巧不单单可以用户思考如何编程，也能用来思考其他问题上面。拿一张白纸，写下要思考的东西。让思绪慢慢流动，把自己学到的、别人灌输的、课本上教的、牛人讲的，通通扔掉。想象你是历史上第一个在思考这个问题的人，从头到尾，把你内心的想法不带偏见地写在纸上，这个过程你将会产生很多新的想法。\n\n## Share\n\n### 东西太多，学不完这么办？\n\n当今时代，信息多到爆炸，这是事实。知识也很多，可谓是眼花缭乱。编程和区块链，就是两个无底洞。在学习这两部分的知识时，不要奢望掌握全部，一步登天，当然大部分人都不用有这个想法。很多人有的想法是，我要多学，能学多少是多少，这个我要，那个我也要。我觉得在学之前，还有一个很深刻的问题需要思考：我想做什么？\n\n这个问题也许不是30分钟能想明白的，也许需要一个月、一年。没关系，慢慢想。想清楚了之后，就可以开始选择学科，按部就班，给自己规划学习进度，饭要一口一口吃。\n\n千万不要轻易被外界打乱了你的节奏。即使有很火爆的课程在朋友圈刷屏了，你应该想想，这东西是你想要的吗？它值得你改变现有计划吗？如果它不是你想要的，那就随它去吧。因为保持自己的节奏才是最关键的。\n\n这是一个收割注意力，贩卖注意力的时代。保护好自己的注意力，把它花在刀刃上。这是每一个清醒人的基本应对方式。","source":"_posts/2018-08-04-arts.md","raw":"---\ntitle: ARTS 5\ncategories: ARTS\n---\n\n关键词：`Longest substring`, `Anti-if`, `Thinking`, `attention`\n\n\n## Algorithm\n\nProblem:\n\n> Given a string, find the length of the **longest substring** without repeating characters.\n>\n> **Examples:**\n>\n> Given `\"abcabcbb\"`, the answer is `\"abc\"`, which the length is 3.\n>\n> Given `\"bbbbb\"`, the answer is `\"b\"`, with the length of 1.\n>\n> Given `\"pwwkew\"`, the answer is `\"wke\"`, with the length of 3. Note that the answer must be a **substring**, `\"pwke\"` is a *subsequence*and not a substring.\n\nSolution:\n\n```javascript\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n  let count = 0;\n  let target = '';\n  let temp = '';\n  const length = s.length;\n  if (length > 0 && s.trim().length == 0) {\n    return 1;\n  }\n  for (let char of s) {\n    if (target.length > temp.length + (length - count)) {\n      break;\n    }\n    if (temp.includes(char)) {\n      const idx = temp.indexOf(char);\n      temp = temp.slice(idx + 1) + char;\n    } else {\n      temp += char;\n    }\n    if (target.length < temp.length) {\n      target = temp;\n    }\n    count++\n  }\n  return target.length;\n};\n```\n\n结果：\n\n![image-20180804143856623](http://p2mvd0t5x.bkt.clouddn.com/blog/fve78.jpg)\n\n一开始的思路就是正确的，不过后面有很多 case 没有通过，一步一步完善到这个版本。\n\n## Review\n\n[Anti-If: The missing patterns](https://code.joejag.com/2016/anti-if-the-missing-patterns.html)\n\n### 评论\n\n If 语句很重要，也有很多好处。是写程序不可获取的一个语法。\n\n不过，If 语句的滥用会导致一些问题。什么是 If 语句的滥用。一个函数里面多个 if 语句、多个 if 语句嵌套。使用 switch  也是。那些问题是什么呢？\n\n1. If 语句里面的代码，容易膨胀，会越来越多，可读性越来越差，复杂度越来越高。\n2. 多个 If 语句、多个 If 语句嵌套会让代码读起来更加吃力。你需要在脑中模拟整个过程，这是一个相当消耗脑力资源的方式。大脑的能量是用来思考、解决问题的，而不是用来在脑中「跑」代码的。在阅读代码的时候，消耗太多脑力是一种浪费。\n3. If 语句会导致无关紧要的代码增多，有时候 If 语句里面甚至会有 return 语句，这个会直接让函数不再执行后面。这些问题会导致你无法快速理清楚一个函数的主干逻辑，每个函数都有一个主干逻辑，这是最重要的部分，被无关紧要的代码干扰之后，可读性就差了。\n\n所以，当你的代码出现很多 If 或者 If 嵌套时，你就要警惕了。\n\n作者还举例几个例子，非常有实操性。我认为有用的如下：\n\n1. 如果一个函数用布尔值判断，执行两个不同的函数。那么，布尔值干掉。写成两个单独的函数。\n2. 考虑用多态继承替代 switch 语句。\n3. 多个 if 语句，用一个表达式解决。\n4. 函数的参数，不用 if 判断有效性，而是用默认值。\n\n## Technique\n\n**Thinking deeply before coding**\n\n写一个功能之前，先在脑中思考要做的东西是什么。把所有的细节都模拟一遍。不要太着急于接受这个过程。多探索一下其他的可能性。为什么呢？\n\n1. 我可能会想到很多关联的事情，其中也有这个功能以外的知识。这样一个流程下来，我的收获会更多。\n2. 细节都想清楚了，做起事情来，有条有理。\n3. 合理规划开发进度。因为你已经清楚地知道哪里可能有坑、哪里更花时间。\n\n这个技巧不单单可以用户思考如何编程，也能用来思考其他问题上面。拿一张白纸，写下要思考的东西。让思绪慢慢流动，把自己学到的、别人灌输的、课本上教的、牛人讲的，通通扔掉。想象你是历史上第一个在思考这个问题的人，从头到尾，把你内心的想法不带偏见地写在纸上，这个过程你将会产生很多新的想法。\n\n## Share\n\n### 东西太多，学不完这么办？\n\n当今时代，信息多到爆炸，这是事实。知识也很多，可谓是眼花缭乱。编程和区块链，就是两个无底洞。在学习这两部分的知识时，不要奢望掌握全部，一步登天，当然大部分人都不用有这个想法。很多人有的想法是，我要多学，能学多少是多少，这个我要，那个我也要。我觉得在学之前，还有一个很深刻的问题需要思考：我想做什么？\n\n这个问题也许不是30分钟能想明白的，也许需要一个月、一年。没关系，慢慢想。想清楚了之后，就可以开始选择学科，按部就班，给自己规划学习进度，饭要一口一口吃。\n\n千万不要轻易被外界打乱了你的节奏。即使有很火爆的课程在朋友圈刷屏了，你应该想想，这东西是你想要的吗？它值得你改变现有计划吗？如果它不是你想要的，那就随它去吧。因为保持自己的节奏才是最关键的。\n\n这是一个收割注意力，贩卖注意力的时代。保护好自己的注意力，把它花在刀刃上。这是每一个清醒人的基本应对方式。","slug":"2018-08-04-arts","published":1,"date":"2018-08-04T08:16:10.000Z","updated":"2018-08-04T08:20:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dicdz007nfsonuenbsmjg","content":"<p>关键词：<code>Longest substring</code>, <code>Anti-if</code>, <code>Thinking</code>, <code>attention</code></p>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p>Problem:</p>\n<blockquote>\n<p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p>\n<p><strong>Examples:</strong></p>\n<p>Given <code>&quot;abcabcbb&quot;</code>, the answer is <code>&quot;abc&quot;</code>, which the length is 3.</p>\n<p>Given <code>&quot;bbbbb&quot;</code>, the answer is <code>&quot;b&quot;</code>, with the length of 1.</p>\n<p>Given <code>&quot;pwwkew&quot;</code>, the answer is <code>&quot;wke&quot;</code>, with the length of 3. Note that the answer must be a <strong>substring</strong>, <code>&quot;pwke&quot;</code> is a <em>subsequence</em>and not a substring.</p>\n</blockquote>\n<p>Solution:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = s.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (length &gt; <span class=\"number\">0</span> &amp;&amp; s.trim().length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> s) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.length &gt; temp.length + (length - count)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp.includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> idx = temp.indexOf(char);</span><br><span class=\"line\">      temp = temp.slice(idx + <span class=\"number\">1</span>) + char;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      temp += char;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.length &lt; temp.length) &#123;</span><br><span class=\"line\">      target = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    count++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target.length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<p><img src=\"http://p2mvd0t5x.bkt.clouddn.com/blog/fve78.jpg\" alt=\"image-20180804143856623\"></p>\n<p>一开始的思路就是正确的，不过后面有很多 case 没有通过，一步一步完善到这个版本。</p>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p><a href=\"https://code.joejag.com/2016/anti-if-the-missing-patterns.html\" target=\"_blank\" rel=\"noopener\">Anti-If: The missing patterns</a></p>\n<h3 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h3><p> If 语句很重要，也有很多好处。是写程序不可获取的一个语法。</p>\n<p>不过，If 语句的滥用会导致一些问题。什么是 If 语句的滥用。一个函数里面多个 if 语句、多个 if 语句嵌套。使用 switch  也是。那些问题是什么呢？</p>\n<ol>\n<li>If 语句里面的代码，容易膨胀，会越来越多，可读性越来越差，复杂度越来越高。</li>\n<li>多个 If 语句、多个 If 语句嵌套会让代码读起来更加吃力。你需要在脑中模拟整个过程，这是一个相当消耗脑力资源的方式。大脑的能量是用来思考、解决问题的，而不是用来在脑中「跑」代码的。在阅读代码的时候，消耗太多脑力是一种浪费。</li>\n<li>If 语句会导致无关紧要的代码增多，有时候 If 语句里面甚至会有 return 语句，这个会直接让函数不再执行后面。这些问题会导致你无法快速理清楚一个函数的主干逻辑，每个函数都有一个主干逻辑，这是最重要的部分，被无关紧要的代码干扰之后，可读性就差了。</li>\n</ol>\n<p>所以，当你的代码出现很多 If 或者 If 嵌套时，你就要警惕了。</p>\n<p>作者还举例几个例子，非常有实操性。我认为有用的如下：</p>\n<ol>\n<li>如果一个函数用布尔值判断，执行两个不同的函数。那么，布尔值干掉。写成两个单独的函数。</li>\n<li>考虑用多态继承替代 switch 语句。</li>\n<li>多个 if 语句，用一个表达式解决。</li>\n<li>函数的参数，不用 if 判断有效性，而是用默认值。</li>\n</ol>\n<h2 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h2><p><strong>Thinking deeply before coding</strong></p>\n<p>写一个功能之前，先在脑中思考要做的东西是什么。把所有的细节都模拟一遍。不要太着急于接受这个过程。多探索一下其他的可能性。为什么呢？</p>\n<ol>\n<li>我可能会想到很多关联的事情，其中也有这个功能以外的知识。这样一个流程下来，我的收获会更多。</li>\n<li>细节都想清楚了，做起事情来，有条有理。</li>\n<li>合理规划开发进度。因为你已经清楚地知道哪里可能有坑、哪里更花时间。</li>\n</ol>\n<p>这个技巧不单单可以用户思考如何编程，也能用来思考其他问题上面。拿一张白纸，写下要思考的东西。让思绪慢慢流动，把自己学到的、别人灌输的、课本上教的、牛人讲的，通通扔掉。想象你是历史上第一个在思考这个问题的人，从头到尾，把你内心的想法不带偏见地写在纸上，这个过程你将会产生很多新的想法。</p>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><h3 id=\"东西太多，学不完这么办？\"><a href=\"#东西太多，学不完这么办？\" class=\"headerlink\" title=\"东西太多，学不完这么办？\"></a>东西太多，学不完这么办？</h3><p>当今时代，信息多到爆炸，这是事实。知识也很多，可谓是眼花缭乱。编程和区块链，就是两个无底洞。在学习这两部分的知识时，不要奢望掌握全部，一步登天，当然大部分人都不用有这个想法。很多人有的想法是，我要多学，能学多少是多少，这个我要，那个我也要。我觉得在学之前，还有一个很深刻的问题需要思考：我想做什么？</p>\n<p>这个问题也许不是30分钟能想明白的，也许需要一个月、一年。没关系，慢慢想。想清楚了之后，就可以开始选择学科，按部就班，给自己规划学习进度，饭要一口一口吃。</p>\n<p>千万不要轻易被外界打乱了你的节奏。即使有很火爆的课程在朋友圈刷屏了，你应该想想，这东西是你想要的吗？它值得你改变现有计划吗？如果它不是你想要的，那就随它去吧。因为保持自己的节奏才是最关键的。</p>\n<p>这是一个收割注意力，贩卖注意力的时代。保护好自己的注意力，把它花在刀刃上。这是每一个清醒人的基本应对方式。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关键词：<code>Longest substring</code>, <code>Anti-if</code>, <code>Thinking</code>, <code>attention</code></p>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p>Problem:</p>\n<blockquote>\n<p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p>\n<p><strong>Examples:</strong></p>\n<p>Given <code>&quot;abcabcbb&quot;</code>, the answer is <code>&quot;abc&quot;</code>, which the length is 3.</p>\n<p>Given <code>&quot;bbbbb&quot;</code>, the answer is <code>&quot;b&quot;</code>, with the length of 1.</p>\n<p>Given <code>&quot;pwwkew&quot;</code>, the answer is <code>&quot;wke&quot;</code>, with the length of 3. Note that the answer must be a <strong>substring</strong>, <code>&quot;pwke&quot;</code> is a <em>subsequence</em>and not a substring.</p>\n</blockquote>\n<p>Solution:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = s.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (length &gt; <span class=\"number\">0</span> &amp;&amp; s.trim().length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> s) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.length &gt; temp.length + (length - count)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp.includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> idx = temp.indexOf(char);</span><br><span class=\"line\">      temp = temp.slice(idx + <span class=\"number\">1</span>) + char;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      temp += char;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.length &lt; temp.length) &#123;</span><br><span class=\"line\">      target = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    count++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target.length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<p><img src=\"http://p2mvd0t5x.bkt.clouddn.com/blog/fve78.jpg\" alt=\"image-20180804143856623\"></p>\n<p>一开始的思路就是正确的，不过后面有很多 case 没有通过，一步一步完善到这个版本。</p>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p><a href=\"https://code.joejag.com/2016/anti-if-the-missing-patterns.html\" target=\"_blank\" rel=\"noopener\">Anti-If: The missing patterns</a></p>\n<h3 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h3><p> If 语句很重要，也有很多好处。是写程序不可获取的一个语法。</p>\n<p>不过，If 语句的滥用会导致一些问题。什么是 If 语句的滥用。一个函数里面多个 if 语句、多个 if 语句嵌套。使用 switch  也是。那些问题是什么呢？</p>\n<ol>\n<li>If 语句里面的代码，容易膨胀，会越来越多，可读性越来越差，复杂度越来越高。</li>\n<li>多个 If 语句、多个 If 语句嵌套会让代码读起来更加吃力。你需要在脑中模拟整个过程，这是一个相当消耗脑力资源的方式。大脑的能量是用来思考、解决问题的，而不是用来在脑中「跑」代码的。在阅读代码的时候，消耗太多脑力是一种浪费。</li>\n<li>If 语句会导致无关紧要的代码增多，有时候 If 语句里面甚至会有 return 语句，这个会直接让函数不再执行后面。这些问题会导致你无法快速理清楚一个函数的主干逻辑，每个函数都有一个主干逻辑，这是最重要的部分，被无关紧要的代码干扰之后，可读性就差了。</li>\n</ol>\n<p>所以，当你的代码出现很多 If 或者 If 嵌套时，你就要警惕了。</p>\n<p>作者还举例几个例子，非常有实操性。我认为有用的如下：</p>\n<ol>\n<li>如果一个函数用布尔值判断，执行两个不同的函数。那么，布尔值干掉。写成两个单独的函数。</li>\n<li>考虑用多态继承替代 switch 语句。</li>\n<li>多个 if 语句，用一个表达式解决。</li>\n<li>函数的参数，不用 if 判断有效性，而是用默认值。</li>\n</ol>\n<h2 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h2><p><strong>Thinking deeply before coding</strong></p>\n<p>写一个功能之前，先在脑中思考要做的东西是什么。把所有的细节都模拟一遍。不要太着急于接受这个过程。多探索一下其他的可能性。为什么呢？</p>\n<ol>\n<li>我可能会想到很多关联的事情，其中也有这个功能以外的知识。这样一个流程下来，我的收获会更多。</li>\n<li>细节都想清楚了，做起事情来，有条有理。</li>\n<li>合理规划开发进度。因为你已经清楚地知道哪里可能有坑、哪里更花时间。</li>\n</ol>\n<p>这个技巧不单单可以用户思考如何编程，也能用来思考其他问题上面。拿一张白纸，写下要思考的东西。让思绪慢慢流动，把自己学到的、别人灌输的、课本上教的、牛人讲的，通通扔掉。想象你是历史上第一个在思考这个问题的人，从头到尾，把你内心的想法不带偏见地写在纸上，这个过程你将会产生很多新的想法。</p>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><h3 id=\"东西太多，学不完这么办？\"><a href=\"#东西太多，学不完这么办？\" class=\"headerlink\" title=\"东西太多，学不完这么办？\"></a>东西太多，学不完这么办？</h3><p>当今时代，信息多到爆炸，这是事实。知识也很多，可谓是眼花缭乱。编程和区块链，就是两个无底洞。在学习这两部分的知识时，不要奢望掌握全部，一步登天，当然大部分人都不用有这个想法。很多人有的想法是，我要多学，能学多少是多少，这个我要，那个我也要。我觉得在学之前，还有一个很深刻的问题需要思考：我想做什么？</p>\n<p>这个问题也许不是30分钟能想明白的，也许需要一个月、一年。没关系，慢慢想。想清楚了之后，就可以开始选择学科，按部就班，给自己规划学习进度，饭要一口一口吃。</p>\n<p>千万不要轻易被外界打乱了你的节奏。即使有很火爆的课程在朋友圈刷屏了，你应该想想，这东西是你想要的吗？它值得你改变现有计划吗？如果它不是你想要的，那就随它去吧。因为保持自己的节奏才是最关键的。</p>\n<p>这是一个收割注意力，贩卖注意力的时代。保护好自己的注意力，把它花在刀刃上。这是每一个清醒人的基本应对方式。</p>\n"},{"title":"ARTS 6","_content":"\n## Algorithm\n\n二分查找\n\n```javascript\nconst binarySearch = (alist, item) => {\n  let first = 0;\n  let last = alist.length - 1;\n  let found = false;\n\n  while (first <= last && !found) {\n    const midpoint = parseInt((last + first) / 2);\n    if (item === alist[midpoint]) {\n      found = true;\n    } else if (item < alist[midpoint]) {\n      last = midpoint - 1;\n    } else {\n      first = midpoint + 1;\n    }\n  }\n\n  return found;\n}\n```\n\n## Review\n\n[https://jvns.ca/blog/2018/02/18/working-remotely--4-years-in/](https://jvns.ca/blog/2018/02/18/working-remotely--4-years-in/)\n\n作者分享了他远程工作的心得。 \n\n我觉得有些地方，对我有启发。 \n\n1. 严格定义下班时间，切换工作和生活的状态。\n2. 花了很长时间去解决一个问题时，要主动汇报你在做什么，这样别人就不会以为你没有在工作。\n\n------\n\n[https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c]()\n\nasync/await 的陷阱：可以并行运行的代码， 却是用串行运行。 \n\n如果摆脱这个陷阱？ \n\n1. 分两行写，先拿到 promise，在 await promise\n2. 还有另外一种写法，returning promises early and the Promise.all method.\n\n## Technique\n\njs 打包性能优化：\n\n1. 用 `source-map-explorer` 分析 bundle，看看哪个库，占用了多少体积\n2. 删除没必要的库（比如引入一个库，只用到一个方法，那其实完全可以自己实现一个简易版的，如果不麻烦的话）\n3. 开启网站 gzip\n\n## Share\n\n无。","source":"_posts/2018-08-19-arts.md","raw":"---\ntitle: ARTS 6\ncategories: ARTS\n---\n\n## Algorithm\n\n二分查找\n\n```javascript\nconst binarySearch = (alist, item) => {\n  let first = 0;\n  let last = alist.length - 1;\n  let found = false;\n\n  while (first <= last && !found) {\n    const midpoint = parseInt((last + first) / 2);\n    if (item === alist[midpoint]) {\n      found = true;\n    } else if (item < alist[midpoint]) {\n      last = midpoint - 1;\n    } else {\n      first = midpoint + 1;\n    }\n  }\n\n  return found;\n}\n```\n\n## Review\n\n[https://jvns.ca/blog/2018/02/18/working-remotely--4-years-in/](https://jvns.ca/blog/2018/02/18/working-remotely--4-years-in/)\n\n作者分享了他远程工作的心得。 \n\n我觉得有些地方，对我有启发。 \n\n1. 严格定义下班时间，切换工作和生活的状态。\n2. 花了很长时间去解决一个问题时，要主动汇报你在做什么，这样别人就不会以为你没有在工作。\n\n------\n\n[https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c]()\n\nasync/await 的陷阱：可以并行运行的代码， 却是用串行运行。 \n\n如果摆脱这个陷阱？ \n\n1. 分两行写，先拿到 promise，在 await promise\n2. 还有另外一种写法，returning promises early and the Promise.all method.\n\n## Technique\n\njs 打包性能优化：\n\n1. 用 `source-map-explorer` 分析 bundle，看看哪个库，占用了多少体积\n2. 删除没必要的库（比如引入一个库，只用到一个方法，那其实完全可以自己实现一个简易版的，如果不麻烦的话）\n3. 开启网站 gzip\n\n## Share\n\n无。","slug":"2018-08-19-arts","published":1,"date":"2018-08-19T04:49:12.000Z","updated":"2018-08-19T04:49:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0dice0007qfsonj4yj58j4","content":"<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p>二分查找</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> binarySearch = <span class=\"function\">(<span class=\"params\">alist, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> last = alist.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> found = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (first &lt;= last &amp;&amp; !found) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> midpoint = <span class=\"built_in\">parseInt</span>((last + first) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item === alist[midpoint]) &#123;</span><br><span class=\"line\">      found = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item &lt; alist[midpoint]) &#123;</span><br><span class=\"line\">      last = midpoint - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      first = midpoint + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> found;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p><a href=\"https://jvns.ca/blog/2018/02/18/working-remotely--4-years-in/\" target=\"_blank\" rel=\"noopener\">https://jvns.ca/blog/2018/02/18/working-remotely–4-years-in/</a></p>\n<p>作者分享了他远程工作的心得。 </p>\n<p>我觉得有些地方，对我有启发。 </p>\n<ol>\n<li>严格定义下班时间，切换工作和生活的状态。</li>\n<li>花了很长时间去解决一个问题时，要主动汇报你在做什么，这样别人就不会以为你没有在工作。</li>\n</ol>\n<hr>\n<p><a href=\"\">https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c</a></p>\n<p>async/await 的陷阱：可以并行运行的代码， 却是用串行运行。 </p>\n<p>如果摆脱这个陷阱？ </p>\n<ol>\n<li>分两行写，先拿到 promise，在 await promise</li>\n<li>还有另外一种写法，returning promises early and the Promise.all method.</li>\n</ol>\n<h2 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h2><p>js 打包性能优化：</p>\n<ol>\n<li>用 <code>source-map-explorer</code> 分析 bundle，看看哪个库，占用了多少体积</li>\n<li>删除没必要的库（比如引入一个库，只用到一个方法，那其实完全可以自己实现一个简易版的，如果不麻烦的话）</li>\n<li>开启网站 gzip</li>\n</ol>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><p>无。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p>二分查找</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> binarySearch = <span class=\"function\">(<span class=\"params\">alist, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> last = alist.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> found = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (first &lt;= last &amp;&amp; !found) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> midpoint = <span class=\"built_in\">parseInt</span>((last + first) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item === alist[midpoint]) &#123;</span><br><span class=\"line\">      found = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item &lt; alist[midpoint]) &#123;</span><br><span class=\"line\">      last = midpoint - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      first = midpoint + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> found;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p><a href=\"https://jvns.ca/blog/2018/02/18/working-remotely--4-years-in/\" target=\"_blank\" rel=\"noopener\">https://jvns.ca/blog/2018/02/18/working-remotely–4-years-in/</a></p>\n<p>作者分享了他远程工作的心得。 </p>\n<p>我觉得有些地方，对我有启发。 </p>\n<ol>\n<li>严格定义下班时间，切换工作和生活的状态。</li>\n<li>花了很长时间去解决一个问题时，要主动汇报你在做什么，这样别人就不会以为你没有在工作。</li>\n</ol>\n<hr>\n<p><a href=\"\">https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c</a></p>\n<p>async/await 的陷阱：可以并行运行的代码， 却是用串行运行。 </p>\n<p>如果摆脱这个陷阱？ </p>\n<ol>\n<li>分两行写，先拿到 promise，在 await promise</li>\n<li>还有另外一种写法，returning promises early and the Promise.all method.</li>\n</ol>\n<h2 id=\"Technique\"><a href=\"#Technique\" class=\"headerlink\" title=\"Technique\"></a>Technique</h2><p>js 打包性能优化：</p>\n<ol>\n<li>用 <code>source-map-explorer</code> 分析 bundle，看看哪个库，占用了多少体积</li>\n<li>删除没必要的库（比如引入一个库，只用到一个方法，那其实完全可以自己实现一个简易版的，如果不麻烦的话）</li>\n<li>开启网站 gzip</li>\n</ol>\n<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><p>无。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjl0dic9u000gfsonm77w6ny6","category_id":"cjl0dic9x000ifsonrpf3bvfx","_id":"cjl0dica5000sfsonkxsc5xz2"},{"post_id":"cjl0dica1000mfsonabc4ge7c","category_id":"cjl0dic9x000ifsonrpf3bvfx","_id":"cjl0dica8000wfson5v39thxm"},{"post_id":"cjl0dic9w000hfsonkgf4v54h","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicaa0010fsonn779sem4"},{"post_id":"cjl0dic9z000kfsonoyuo32bz","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicad0015fson5693838u"},{"post_id":"cjl0dicaa0012fsonlnrlvuvf","category_id":"cjl0dic9x000ifsonrpf3bvfx","_id":"cjl0dicaf001afsonwvq5trvr"},{"post_id":"cjl0dica0000lfsonoakfdm8m","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicag001efsondvjmriyw"},{"post_id":"cjl0dica3000qfsonzp0dmib9","category_id":"cjl0dicac0014fsone2whc62u","_id":"cjl0dicai001ifson61c5vjxw"},{"post_id":"cjl0dicae0019fsono9xs8o4m","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicaj001nfsonxea9sq9s"},{"post_id":"cjl0dicaf001dfsond4nwwj5k","category_id":"cjl0dicac0014fsone2whc62u","_id":"cjl0dical001qfsona9o225o9"},{"post_id":"cjl0dica5000rfsonu16g4ol7","category_id":"cjl0dicaf001bfsonx37nncmi","_id":"cjl0dican001tfsonifsdrgox"},{"post_id":"cjl0dicah001hfsonno7wal3o","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicap001xfsonswvjrnck"},{"post_id":"cjl0dicai001lfsong34fql9u","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicar0021fsondd2zrv2g"},{"post_id":"cjl0dica7000vfsonwy1r0444","category_id":"cjl0dicac0014fsone2whc62u","_id":"cjl0dicat0023fsonmuctxsr6"},{"post_id":"cjl0dicak001ofsonsoywz6bq","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicau0027fsonllihkt6c"},{"post_id":"cjl0dical001sfsonfnczr7s0","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicaw0029fsonj48d6l50"},{"post_id":"cjl0dica8000yfsony6l12azj","category_id":"cjl0dicaf001bfsonx37nncmi","_id":"cjl0dicax002cfsonnxjz3g7n"},{"post_id":"cjl0dicaq001zfsonpj4wfpdk","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicaz002efson8es8jagm"},{"post_id":"cjl0dicab0013fsonf0xmjd1s","category_id":"cjl0dicaf001bfsonx37nncmi","_id":"cjl0dicb1002ifsoni80wbjmu"},{"post_id":"cjl0dicad0017fsonsfclidr7","category_id":"cjl0dicaf001bfsonx37nncmi","_id":"cjl0dicb3002kfson192balf6"},{"post_id":"cjl0dicaw002bfsonfi04z67z","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicb5002nfson5hxr9c9n"},{"post_id":"cjl0dicao001vfsonl1ttx4lq","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicb6002rfsonhqypfhpk"},{"post_id":"cjl0dicaz002gfsonpg1fxrj0","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicb9002vfsonynlckpvf"},{"post_id":"cjl0dicb1002jfsonx48wud4l","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicba002yfson8h9a0roy"},{"post_id":"cjl0dicas0022fsonznlgsf7t","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbb0032fsonim1qtazt"},{"post_id":"cjl0dicb3002lfsonlpxso8bd","category_id":"cjl0dic9x000ifsonrpf3bvfx","_id":"cjl0dicbd0035fsong05eewy1"},{"post_id":"cjl0dicb5002qfsonhvarmjh2","category_id":"cjl0dic9x000ifsonrpf3bvfx","_id":"cjl0dicbe0038fsonm7ztxzv2"},{"post_id":"cjl0dicat0026fsonqizf2f2s","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbf003afsonza9edyz5"},{"post_id":"cjl0dicb7002tfsong9gm8phi","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbh003dfson6ieedhiw"},{"post_id":"cjl0dicb9002wfson4w5bwqt6","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbi003ffsony8pdxwzp"},{"post_id":"cjl0dicav0028fsonudajczm1","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbk003hfsonosrk9h8h"},{"post_id":"cjl0dicba0030fsonvnmjgzhr","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbl003jfsonzs8ojlkh"},{"post_id":"cjl0dicbc0033fsonjm8jgrht","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbn003mfsontz79evu8"},{"post_id":"cjl0dicax002dfson9twb39rl","category_id":"cjl0dicbb0031fsonod88sblr","_id":"cjl0dicbp003ofson4fpsz1m7"},{"post_id":"cjl0dicbd0036fsony3gir6yd","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbq003qfson6x4csyb5"},{"post_id":"cjl0dicbe0039fsono480uo1b","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbs003tfsonb60wrssm"},{"post_id":"cjl0dicbg003bfson11cnqqcp","category_id":"cjl0dicac0014fsone2whc62u","_id":"cjl0dicbt003vfsonbzhl3anf"},{"post_id":"cjl0dicbh003efson0iurpu1a","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbv003xfsonn2vzzo2a"},{"post_id":"cjl0dicbi003gfson5aj749sa","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbw003zfsonxotyentl"},{"post_id":"cjl0dicbk003ifsonl2j3g5ao","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbx0041fsonl6f5w4z4"},{"post_id":"cjl0dicbm003lfsonii7ebkfk","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicby0043fsonggnnxpy0"},{"post_id":"cjl0dicbn003nfsonh417ep7l","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicbz0046fson2us12u01"},{"post_id":"cjl0dicbp003pfsonb8k3lkbe","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicc00048fson59s7yhh8"},{"post_id":"cjl0dicbr003sfsongfsvhpzo","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicc1004afson1l7miapn"},{"post_id":"cjl0dicbs003ufsonx7hmo519","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicc2004dfsonbpm06srj"},{"post_id":"cjl0dicbu003wfsoner9bfvhq","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicc4004ffson0rcy48x7"},{"post_id":"cjl0dicbv003yfsonf3brk7wr","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicc7004hfsonpx9wndco"},{"post_id":"cjl0dicbw0040fson24bdp1eo","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicc9004kfsonb00cmx5h"},{"post_id":"cjl0dicbx0042fson1d7mwudt","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicca004nfsonlcr0aso7"},{"post_id":"cjl0dicby0045fsonffmkdl70","category_id":"cjl0dicac0014fsone2whc62u","_id":"cjl0diccc004pfson9a4q1obg"},{"post_id":"cjl0dicbz0047fsonfs2gsmfh","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicce004rfsonc4131qij"},{"post_id":"cjl0dicc00049fsonazans7iy","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccg004tfson776h7rwq"},{"post_id":"cjl0dicc1004cfson9bx8thk5","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicch004vfsonoaep0np3"},{"post_id":"cjl0dicc2004efsonnfcbz45f","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicci004xfsontsoq5h4x"},{"post_id":"cjl0dicc5004gfson5y9oc3ln","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccj004zfsonmegyno5q"},{"post_id":"cjl0dicc7004jfson8yj5dgti","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicck0051fsoni1tmptgq"},{"post_id":"cjl0dicc9004mfson403npnik","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccl0053fsonlnyrp4qv"},{"post_id":"cjl0diccb004ofsontkpnrihy","category_id":"cjl0dicac0014fsone2whc62u","_id":"cjl0diccm0055fson1riyekc4"},{"post_id":"cjl0diccc004qfsons69fc4n9","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0diccn0057fsonbx9j7xcx"},{"post_id":"cjl0dicce004sfsonnmoy34nv","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicco0059fsonjvh44kya"},{"post_id":"cjl0diccg004ufsonqadh3gut","category_id":"cjl0dicbb0031fsonod88sblr","_id":"cjl0dicco005bfsonjeiyv912"},{"post_id":"cjl0dicch004wfson9eoetvij","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccp005dfsonk5r8dora"},{"post_id":"cjl0dicci004yfsongj6vr4lz","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccq005ffsoncov1m8r3"},{"post_id":"cjl0diccj0050fson0aycibop","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccr005hfsonhz2xpoqw"},{"post_id":"cjl0dicck0052fson6nkop1ke","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccs005jfsony05xmitq"},{"post_id":"cjl0diccl0054fsonil6vprqt","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicct005lfson12do3nah"},{"post_id":"cjl0diccm0056fson6iyjqbn2","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccu005nfsonykcleo1h"},{"post_id":"cjl0diccn0058fson54a2zyu9","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccv005pfsoneziokap2"},{"post_id":"cjl0dicco005afson30ocpueh","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccw005rfsonba82sdbd"},{"post_id":"cjl0diccp005cfsonux0hm1mu","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccx005ufson33i4n07m"},{"post_id":"cjl0diccq005efson583ik1ds","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccy005wfson2fmmsriw"},{"post_id":"cjl0diccq005gfson7beczvbm","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0diccz005zfson28coylqo"},{"post_id":"cjl0diccr005ifsonf6t7uidv","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicd00061fsoncddi2nzy"},{"post_id":"cjl0diccs005kfsonubpdpo9j","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicd10064fsonfqaf82nw"},{"post_id":"cjl0dicct005mfsonnb9z9uj6","category_id":"cjl0dicac0014fsone2whc62u","_id":"cjl0dicd20066fson9dg5abnb"},{"post_id":"cjl0diccx005vfson1xewnrvo","category_id":"cjl0diccw005sfsontuwx2tv0","_id":"cjl0dicd30068fson0f66qzjc"},{"post_id":"cjl0diccu005ofson5ji3qfp1","category_id":"cjl0diccw005sfsontuwx2tv0","_id":"cjl0dicd4006afson4e8xi10a"},{"post_id":"cjl0diccy005xfsonwax3aelf","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicd5006cfsonlr83al0e"},{"post_id":"cjl0diccz0060fson4j1e4p2h","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicd6006efsonqk106xte"},{"post_id":"cjl0diccv005qfsoncea0viz2","category_id":"cjl0diccw005sfsontuwx2tv0","_id":"cjl0dicd7006gfsonjdoe1ksq"},{"post_id":"cjl0dicd00062fsonacy6jpcq","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicd8006ifson5dnj8d0s"},{"post_id":"cjl0dicd10065fson4xdbd2m8","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicdg006kfsonexkfontp"},{"post_id":"cjl0diccw005tfson5vrqrzvv","category_id":"cjl0diccw005sfsontuwx2tv0","_id":"cjl0dicdi006mfson8p8fj04r"},{"post_id":"cjl0dicd20067fsonjxegxr30","category_id":"cjl0dicbb0031fsonod88sblr","_id":"cjl0dicdj006ofsonujgr6tzu"},{"post_id":"cjl0dicd30069fson1mw4h1bp","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicdk006qfsonc2p7krtt"},{"post_id":"cjl0dicd4006bfsonp4dzp9pb","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicdl006sfsonrrabfj12"},{"post_id":"cjl0dicd5006dfson5ljvteq5","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicdm006ufson36slstpd"},{"post_id":"cjl0dicd6006ffson35w5ua6z","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicdn006wfson4g8wxo64"},{"post_id":"cjl0dicd7006hfsonscaz1bnx","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicdo006yfsonhxhw4zpg"},{"post_id":"cjl0dicdd006jfsonr66gnw3w","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicdp0070fsonas4icpre"},{"post_id":"cjl0dicdg006lfsong3qv4qoh","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicdq0072fsonrlysxvrg"},{"post_id":"cjl0dicdi006nfsonl8baggrh","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicds0075fsonr1oa4g67"},{"post_id":"cjl0dicdj006pfson5ekuhdk8","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicdt0077fson3924agiy"},{"post_id":"cjl0dicdk006rfsony02v2ne2","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicdu007afsonr9wsg5hj"},{"post_id":"cjl0dicdl006tfson27z916v7","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicdv007cfson1bdp9qqk"},{"post_id":"cjl0dicdm006vfsontcfsj5cf","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicdw007ffsonotna2dsa"},{"post_id":"cjl0dicdn006xfsonuuluz95j","category_id":"cjl0dicaw002afsonqy3sl2l5","_id":"cjl0dicdx007hfsone69rmcur"},{"post_id":"cjl0dicds0076fsonbsish8c6","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dicdy007kfson0zzqelhs"},{"post_id":"cjl0dicdo006zfson8fi6nn3u","category_id":"cjl0dicdq0073fsonfe81m2wt","_id":"cjl0dicdz007mfsonh91psq1j"},{"post_id":"cjl0dicdt0078fson8t9mxv97","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dice0007pfson9mmr6v72"},{"post_id":"cjl0dicdu007bfsonvx825v57","category_id":"cjl0dica2000nfson1rkn53ub","_id":"cjl0dice1007rfsonc0p172io"},{"post_id":"cjl0dicdp0071fsondxyvniqb","category_id":"cjl0dicdt0079fson1ddzgu8d","_id":"cjl0dice2007tfson7fm63wtz"},{"post_id":"cjl0dicdr0074fson1fw4rajw","category_id":"cjl0dicdt0079fson1ddzgu8d","_id":"cjl0dice2007ufsona0slqbjg"},{"post_id":"cjl0dicdy007lfsonyc9ajruu","category_id":"cjl0dicdy007jfson1dadc5of","_id":"cjl0dice3007vfsonivjojp3o"},{"post_id":"cjl0dicdv007dfsondwtm78ig","category_id":"cjl0dicdy007jfson1dadc5of","_id":"cjl0dice3007wfsonmvqsfetc"},{"post_id":"cjl0dicdz007nfsonuenbsmjg","category_id":"cjl0dicdy007jfson1dadc5of","_id":"cjl0dice3007xfsonsmipxg3j"},{"post_id":"cjl0dice0007qfsonj4yj58j4","category_id":"cjl0dicdy007jfson1dadc5of","_id":"cjl0dice3007yfsons6s1df51"},{"post_id":"cjl0dicdw007gfsonc35p9hdq","category_id":"cjl0dicdy007jfson1dadc5of","_id":"cjl0dice3007zfsondb8ka3g8"},{"post_id":"cjl0dicdx007ifsond1xpzk27","category_id":"cjl0dicdy007jfson1dadc5of","_id":"cjl0dice30080fsongw0t26xb"}],"PostTag":[{"post_id":"cjl0dic9u000gfsonm77w6ny6","tag_id":"cjl0dic9z000jfson4zs7h5ni","_id":"cjl0dica3000pfsonh0y1e3y7"},{"post_id":"cjl0dic9w000hfsonkgf4v54h","tag_id":"cjl0dica2000ofson8a4d8kok","_id":"cjl0dica8000xfsonzqe38c9d"},{"post_id":"cjl0dica0000lfsonoakfdm8m","tag_id":"cjl0dica6000ufsonmwhxfwag","_id":"cjl0dicae0018fson53hvj2m3"},{"post_id":"cjl0dica0000lfsonoakfdm8m","tag_id":"cjl0dicaa0011fsond560l8kc","_id":"cjl0dicaf001cfsonkef96o1o"},{"post_id":"cjl0dicab0013fsonf0xmjd1s","tag_id":"cjl0dica2000ofson8a4d8kok","_id":"cjl0dicag001gfson7kb6xk35"},{"post_id":"cjl0dica1000mfsonabc4ge7c","tag_id":"cjl0dicad0016fsona0uo7zs2","_id":"cjl0dicai001jfsonzdqiz5yv"},{"post_id":"cjl0dica8000yfsony6l12azj","tag_id":"cjl0dicag001ffsonuulqtyks","_id":"cjl0dicak001pfsoncvzyl0qx"},{"post_id":"cjl0dicae0019fsono9xs8o4m","tag_id":"cjl0dicaj001mfson3hdb4trz","_id":"cjl0dicap001wfsonope8sbrj"},{"post_id":"cjl0dicae0019fsono9xs8o4m","tag_id":"cjl0dica6000ufsonmwhxfwag","_id":"cjl0dicar0020fsonapjfg6q1"},{"post_id":"cjl0dicak001ofsonsoywz6bq","tag_id":"cjl0dican001ufsontqcgivdb","_id":"cjl0dicat0024fsonx1egqlou"},{"post_id":"cjl0dicaw002bfsonfi04z67z","tag_id":"cjl0dicaz002ffson45iqsrxw","_id":"cjl0dicb5002pfson4yjn1c03"},{"post_id":"cjl0dicaw002bfsonfi04z67z","tag_id":"cjl0dica2000ofson8a4d8kok","_id":"cjl0dicb7002sfsonkzct4n2h"},{"post_id":"cjl0dicb1002jfsonx48wud4l","tag_id":"cjl0dicb5002ofson6fe1l5xy","_id":"cjl0dicba002zfsonrynt83l0"},{"post_id":"cjl0dicb3002lfsonlpxso8bd","tag_id":"cjl0dicba002xfsonkqihg491","_id":"cjl0dicbe0037fson46vsp0dm"},{"post_id":"cjl0dicb5002qfsonhvarmjh2","tag_id":"cjl0dicba002xfsonkqihg491","_id":"cjl0dicbg003cfsonybtiq8ad"},{"post_id":"cjl0dicbi003gfson5aj749sa","tag_id":"cjl0dicbm003kfsonpmrs4ur7","_id":"cjl0dicbr003rfsonc9tkrjhr"},{"post_id":"cjl0dicbw0040fson24bdp1eo","tag_id":"cjl0dicbm003kfsonpmrs4ur7","_id":"cjl0dicby0044fsonjz5v90k8"},{"post_id":"cjl0dicbz0047fsonfs2gsmfh","tag_id":"cjl0dicbm003kfsonpmrs4ur7","_id":"cjl0dicc7004ifson6p9gokx5"},{"post_id":"cjl0dicbz0047fsonfs2gsmfh","tag_id":"cjl0dicc1004bfsonxbe36qzm","_id":"cjl0dicc9004lfson4ic6euvf"}],"Tag":[{"name":"Mac工具","_id":"cjl0dic9z000jfson4zs7h5ni"},{"name":"单元测试","_id":"cjl0dica2000ofson8a4d8kok"},{"name":"Vue","_id":"cjl0dica6000ufsonmwhxfwag"},{"name":"组件化","_id":"cjl0dicaa0011fsond560l8kc"},{"name":"Nginx","_id":"cjl0dicad0016fsona0uo7zs2"},{"name":"微信公众号","_id":"cjl0dicag001ffsonuulqtyks"},{"name":"Koa2","_id":"cjl0dicaj001mfson3hdb4trz"},{"name":"React","_id":"cjl0dican001ufsontqcgivdb"},{"name":"ES6","_id":"cjl0dicaz002ffson45iqsrxw"},{"name":"函数式编程","_id":"cjl0dicb5002ofson6fe1l5xy"},{"name":"Git","_id":"cjl0dicba002xfsonkqihg491"},{"name":"用户故事","_id":"cjl0dicbm003kfsonpmrs4ur7"},{"name":"提取练习","_id":"cjl0dicc1004bfsonxbe36qzm"}]}}